# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1AgentUserGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_uid': 'int',
        'agent_gid': 'int'
    }

    attribute_map = {
        'agent_uid': 'agentUid',
        'agent_gid': 'agentGid'
    }

    def __init__(self, agent_uid=None, agent_gid=None):  # noqa: E501
        """V1AgentUserGroup - a model defined in Swagger"""  # noqa: E501

        self._agent_uid = None
        self._agent_gid = None
        self.discriminator = None

        if agent_uid is not None:
            self.agent_uid = agent_uid
        if agent_gid is not None:
            self.agent_gid = agent_gid

    @property
    def agent_uid(self):
        """Gets the agent_uid of this V1AgentUserGroup.  # noqa: E501

        The user id on the agent.  # noqa: E501

        :return: The agent_uid of this V1AgentUserGroup.  # noqa: E501
        :rtype: int
        """
        return self._agent_uid

    @agent_uid.setter
    def agent_uid(self, agent_uid):
        """Sets the agent_uid of this V1AgentUserGroup.

        The user id on the agent.  # noqa: E501

        :param agent_uid: The agent_uid of this V1AgentUserGroup.  # noqa: E501
        :type: int
        """

        self._agent_uid = agent_uid

    @property
    def agent_gid(self):
        """Gets the agent_gid of this V1AgentUserGroup.  # noqa: E501

        The group id on the agent.  # noqa: E501

        :return: The agent_gid of this V1AgentUserGroup.  # noqa: E501
        :rtype: int
        """
        return self._agent_gid

    @agent_gid.setter
    def agent_gid(self, agent_gid):
        """Sets the agent_gid of this V1AgentUserGroup.

        The group id on the agent.  # noqa: E501

        :param agent_gid: The agent_gid of this V1AgentUserGroup.  # noqa: E501
        :type: int
        """

        self._agent_gid = agent_gid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1AgentUserGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1AgentUserGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
