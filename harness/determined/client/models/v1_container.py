# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Container(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent': 'str',
        'id': 'str',
        'state': 'Determinedcontainerv1State',
        'devices': 'list[V1Device]'
    }

    attribute_map = {
        'parent': 'parent',
        'id': 'id',
        'state': 'state',
        'devices': 'devices'
    }

    def __init__(self, parent=None, id=None, state=None, devices=None):  # noqa: E501
        """V1Container - a model defined in Swagger"""  # noqa: E501

        self._parent = None
        self._id = None
        self._state = None
        self._devices = None
        self.discriminator = None

        if parent is not None:
            self.parent = parent
        self.id = id
        self.state = state
        if devices is not None:
            self.devices = devices

    @property
    def parent(self):
        """Gets the parent of this V1Container.  # noqa: E501

        The id of the task that is currently managing this container.  # noqa: E501

        :return: The parent of this V1Container.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this V1Container.

        The id of the task that is currently managing this container.  # noqa: E501

        :param parent: The parent of this V1Container.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def id(self):
        """Gets the id of this V1Container.  # noqa: E501

        The unique id of this instance of a container.  # noqa: E501

        :return: The id of this V1Container.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1Container.

        The unique id of this instance of a container.  # noqa: E501

        :param id: The id of this V1Container.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this V1Container.  # noqa: E501

        The current state that the container is currently in.  # noqa: E501

        :return: The state of this V1Container.  # noqa: E501
        :rtype: Determinedcontainerv1State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1Container.

        The current state that the container is currently in.  # noqa: E501

        :param state: The state of this V1Container.  # noqa: E501
        :type: Determinedcontainerv1State
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def devices(self):
        """Gets the devices of this V1Container.  # noqa: E501

        A list of devices that is being used by this container.  # noqa: E501

        :return: The devices of this V1Container.  # noqa: E501
        :rtype: list[V1Device]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this V1Container.

        A list of devices that is being used by this container.  # noqa: E501

        :param devices: The devices of this V1Container.  # noqa: E501
        :type: list[V1Device]
        """

        self._devices = devices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Container, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Container):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
