# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1TrialProfilerMetricsBatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'values': 'list[float]',
        'batches': 'list[int]',
        'timestamps': 'list[datetime]',
        'labels': 'V1TrialProfilerMetricLabels'
    }

    attribute_map = {
        'values': 'values',
        'batches': 'batches',
        'timestamps': 'timestamps',
        'labels': 'labels'
    }

    def __init__(self, values=None, batches=None, timestamps=None, labels=None):  # noqa: E501
        """V1TrialProfilerMetricsBatch - a model defined in Swagger"""  # noqa: E501

        self._values = None
        self._batches = None
        self._timestamps = None
        self._labels = None
        self.discriminator = None

        self.values = values
        self.batches = batches
        self.timestamps = timestamps
        self.labels = labels

    @property
    def values(self):
        """Gets the values of this V1TrialProfilerMetricsBatch.  # noqa: E501

        The measurement for a reading, repeated for the batch of metrics.  # noqa: E501

        :return: The values of this V1TrialProfilerMetricsBatch.  # noqa: E501
        :rtype: list[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this V1TrialProfilerMetricsBatch.

        The measurement for a reading, repeated for the batch of metrics.  # noqa: E501

        :param values: The values of this V1TrialProfilerMetricsBatch.  # noqa: E501
        :type: list[float]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def batches(self):
        """Gets the batches of this V1TrialProfilerMetricsBatch.  # noqa: E501

        The batch at which a reading occurred, repeated for the batch of metrics.  # noqa: E501

        :return: The batches of this V1TrialProfilerMetricsBatch.  # noqa: E501
        :rtype: list[int]
        """
        return self._batches

    @batches.setter
    def batches(self, batches):
        """Sets the batches of this V1TrialProfilerMetricsBatch.

        The batch at which a reading occurred, repeated for the batch of metrics.  # noqa: E501

        :param batches: The batches of this V1TrialProfilerMetricsBatch.  # noqa: E501
        :type: list[int]
        """
        if batches is None:
            raise ValueError("Invalid value for `batches`, must not be `None`")  # noqa: E501

        self._batches = batches

    @property
    def timestamps(self):
        """Gets the timestamps of this V1TrialProfilerMetricsBatch.  # noqa: E501

        The timestamp at which a reading occurred, repeated for the batch of metrics.  # noqa: E501

        :return: The timestamps of this V1TrialProfilerMetricsBatch.  # noqa: E501
        :rtype: list[datetime]
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this V1TrialProfilerMetricsBatch.

        The timestamp at which a reading occurred, repeated for the batch of metrics.  # noqa: E501

        :param timestamps: The timestamps of this V1TrialProfilerMetricsBatch.  # noqa: E501
        :type: list[datetime]
        """
        if timestamps is None:
            raise ValueError("Invalid value for `timestamps`, must not be `None`")  # noqa: E501

        self._timestamps = timestamps

    @property
    def labels(self):
        """Gets the labels of this V1TrialProfilerMetricsBatch.  # noqa: E501

        The labels for this series.  # noqa: E501

        :return: The labels of this V1TrialProfilerMetricsBatch.  # noqa: E501
        :rtype: V1TrialProfilerMetricLabels
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1TrialProfilerMetricsBatch.

        The labels for this series.  # noqa: E501

        :param labels: The labels of this V1TrialProfilerMetricsBatch.  # noqa: E501
        :type: V1TrialProfilerMetricLabels
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1TrialProfilerMetricsBatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TrialProfilerMetricsBatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
