# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Slot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'device': 'V1Device',
        'enabled': 'bool',
        'container': 'V1Container'
    }

    attribute_map = {
        'id': 'id',
        'device': 'device',
        'enabled': 'enabled',
        'container': 'container'
    }

    def __init__(self, id=None, device=None, enabled=None, container=None):  # noqa: E501
        """V1Slot - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._device = None
        self._enabled = None
        self._container = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if device is not None:
            self.device = device
        if enabled is not None:
            self.enabled = enabled
        if container is not None:
            self.container = container

    @property
    def id(self):
        """Gets the id of this V1Slot.  # noqa: E501

        The unqiue id of the slot for a given agent.  # noqa: E501

        :return: The id of this V1Slot.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1Slot.

        The unqiue id of the slot for a given agent.  # noqa: E501

        :param id: The id of this V1Slot.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def device(self):
        """Gets the device of this V1Slot.  # noqa: E501

        The individual resource this slot wraps.  # noqa: E501

        :return: The device of this V1Slot.  # noqa: E501
        :rtype: V1Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this V1Slot.

        The individual resource this slot wraps.  # noqa: E501

        :param device: The device of this V1Slot.  # noqa: E501
        :type: V1Device
        """

        self._device = device

    @property
    def enabled(self):
        """Gets the enabled of this V1Slot.  # noqa: E501

        Flag notifying if containers can be scheduled on this slot.  # noqa: E501

        :return: The enabled of this V1Slot.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this V1Slot.

        Flag notifying if containers can be scheduled on this slot.  # noqa: E501

        :param enabled: The enabled of this V1Slot.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def container(self):
        """Gets the container of this V1Slot.  # noqa: E501

        Container that is currently running on this agent. It is unset if there is no container currently running on this slot.  # noqa: E501

        :return: The container of this V1Slot.  # noqa: E501
        :rtype: V1Container
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this V1Slot.

        Container that is currently running on this agent. It is unset if there is no container currently running on this slot.  # noqa: E501

        :param container: The container of this V1Slot.  # noqa: E501
        :type: V1Container
        """

        self._container = container

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Slot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Slot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
