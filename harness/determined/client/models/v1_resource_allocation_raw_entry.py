# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1ResourceAllocationRawEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'experiment_id': 'int',
        'username': 'str',
        'labels': 'list[str]',
        'seconds': 'float',
        'slots': 'int'
    }

    attribute_map = {
        'kind': 'kind',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'experiment_id': 'experimentId',
        'username': 'username',
        'labels': 'labels',
        'seconds': 'seconds',
        'slots': 'slots'
    }

    def __init__(self, kind=None, start_time=None, end_time=None, experiment_id=None, username=None, labels=None, seconds=None, slots=None):  # noqa: E501
        """V1ResourceAllocationRawEntry - a model defined in Swagger"""  # noqa: E501

        self._kind = None
        self._start_time = None
        self._end_time = None
        self._experiment_id = None
        self._username = None
        self._labels = None
        self._seconds = None
        self._slots = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if username is not None:
            self.username = username
        if labels is not None:
            self.labels = labels
        if seconds is not None:
            self.seconds = seconds
        if slots is not None:
            self.slots = slots

    @property
    def kind(self):
        """Gets the kind of this V1ResourceAllocationRawEntry.  # noqa: E501

        The kind of workload being run during this allocation (training, checkpoint, or validation).  # noqa: E501

        :return: The kind of this V1ResourceAllocationRawEntry.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this V1ResourceAllocationRawEntry.

        The kind of workload being run during this allocation (training, checkpoint, or validation).  # noqa: E501

        :param kind: The kind of this V1ResourceAllocationRawEntry.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def start_time(self):
        """Gets the start_time of this V1ResourceAllocationRawEntry.  # noqa: E501

        The time at which the allocation began.  # noqa: E501

        :return: The start_time of this V1ResourceAllocationRawEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1ResourceAllocationRawEntry.

        The time at which the allocation began.  # noqa: E501

        :param start_time: The start_time of this V1ResourceAllocationRawEntry.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this V1ResourceAllocationRawEntry.  # noqa: E501

        The time at which the allocation ended.  # noqa: E501

        :return: The end_time of this V1ResourceAllocationRawEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this V1ResourceAllocationRawEntry.

        The time at which the allocation ended.  # noqa: E501

        :param end_time: The end_time of this V1ResourceAllocationRawEntry.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def experiment_id(self):
        """Gets the experiment_id of this V1ResourceAllocationRawEntry.  # noqa: E501

        The ID of the experiment the allocation is a part of.  # noqa: E501

        :return: The experiment_id of this V1ResourceAllocationRawEntry.  # noqa: E501
        :rtype: int
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this V1ResourceAllocationRawEntry.

        The ID of the experiment the allocation is a part of.  # noqa: E501

        :param experiment_id: The experiment_id of this V1ResourceAllocationRawEntry.  # noqa: E501
        :type: int
        """

        self._experiment_id = experiment_id

    @property
    def username(self):
        """Gets the username of this V1ResourceAllocationRawEntry.  # noqa: E501

        The username of the user who ran the experiment.  # noqa: E501

        :return: The username of this V1ResourceAllocationRawEntry.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this V1ResourceAllocationRawEntry.

        The username of the user who ran the experiment.  # noqa: E501

        :param username: The username of this V1ResourceAllocationRawEntry.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def labels(self):
        """Gets the labels of this V1ResourceAllocationRawEntry.  # noqa: E501

        The labels assigned to the experiment.  # noqa: E501

        :return: The labels of this V1ResourceAllocationRawEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1ResourceAllocationRawEntry.

        The labels assigned to the experiment.  # noqa: E501

        :param labels: The labels of this V1ResourceAllocationRawEntry.  # noqa: E501
        :type: list[str]
        """

        self._labels = labels

    @property
    def seconds(self):
        """Gets the seconds of this V1ResourceAllocationRawEntry.  # noqa: E501

        The number of seconds for which the allocation was active during the requested period.  # noqa: E501

        :return: The seconds of this V1ResourceAllocationRawEntry.  # noqa: E501
        :rtype: float
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this V1ResourceAllocationRawEntry.

        The number of seconds for which the allocation was active during the requested period.  # noqa: E501

        :param seconds: The seconds of this V1ResourceAllocationRawEntry.  # noqa: E501
        :type: float
        """

        self._seconds = seconds

    @property
    def slots(self):
        """Gets the slots of this V1ResourceAllocationRawEntry.  # noqa: E501

        The number of slots used by the allocation.  # noqa: E501

        :return: The slots of this V1ResourceAllocationRawEntry.  # noqa: E501
        :rtype: int
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this V1ResourceAllocationRawEntry.

        The number of slots used by the allocation.  # noqa: E501

        :param slots: The slots of this V1ResourceAllocationRawEntry.  # noqa: E501
        :type: int
        """

        self._slots = slots

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ResourceAllocationRawEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ResourceAllocationRawEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
