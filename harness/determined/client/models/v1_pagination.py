# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Pagination(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'offset': 'int',
        'limit': 'int',
        'start_index': 'int',
        'end_index': 'int',
        'total': 'int'
    }

    attribute_map = {
        'offset': 'offset',
        'limit': 'limit',
        'start_index': 'startIndex',
        'end_index': 'endIndex',
        'total': 'total'
    }

    def __init__(self, offset=None, limit=None, start_index=None, end_index=None, total=None):  # noqa: E501
        """V1Pagination - a model defined in Swagger"""  # noqa: E501

        self._offset = None
        self._limit = None
        self._start_index = None
        self._end_index = None
        self._total = None
        self.discriminator = None

        if offset is not None:
            self.offset = offset
        if limit is not None:
            self.limit = limit
        if start_index is not None:
            self.start_index = start_index
        if end_index is not None:
            self.end_index = end_index
        if total is not None:
            self.total = total

    @property
    def offset(self):
        """Gets the offset of this V1Pagination.  # noqa: E501

        The number of records skipped before returning results.  # noqa: E501

        :return: The offset of this V1Pagination.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this V1Pagination.

        The number of records skipped before returning results.  # noqa: E501

        :param offset: The offset of this V1Pagination.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def limit(self):
        """Gets the limit of this V1Pagination.  # noqa: E501

        The amount of records limited in the results.  # noqa: E501

        :return: The limit of this V1Pagination.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this V1Pagination.

        The amount of records limited in the results.  # noqa: E501

        :param limit: The limit of this V1Pagination.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def start_index(self):
        """Gets the start_index of this V1Pagination.  # noqa: E501

        The index of the first record in the dataset.  # noqa: E501

        :return: The start_index of this V1Pagination.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this V1Pagination.

        The index of the first record in the dataset.  # noqa: E501

        :param start_index: The start_index of this V1Pagination.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    @property
    def end_index(self):
        """Gets the end_index of this V1Pagination.  # noqa: E501

        The index+1 of the last record in the dataset.  # noqa: E501

        :return: The end_index of this V1Pagination.  # noqa: E501
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this V1Pagination.

        The index+1 of the last record in the dataset.  # noqa: E501

        :param end_index: The end_index of this V1Pagination.  # noqa: E501
        :type: int
        """

        self._end_index = end_index

    @property
    def total(self):
        """Gets the total of this V1Pagination.  # noqa: E501

        The total number of values that match the filter.  # noqa: E501

        :return: The total of this V1Pagination.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this V1Pagination.

        The total number of values that match the filter.  # noqa: E501

        :param total: The total of this V1Pagination.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Pagination, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Pagination):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
