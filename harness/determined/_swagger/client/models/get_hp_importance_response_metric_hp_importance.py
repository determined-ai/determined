# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetHPImportanceResponseMetricHPImportance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hp_importance': 'dict(str, float)',
        'experiment_progress': 'float',
        'error': 'str',
        'pending': 'bool',
        'in_progress': 'bool'
    }

    attribute_map = {
        'hp_importance': 'hpImportance',
        'experiment_progress': 'experimentProgress',
        'error': 'error',
        'pending': 'pending',
        'in_progress': 'inProgress'
    }

    def __init__(self, hp_importance=None, experiment_progress=None, error=None, pending=None, in_progress=None):  # noqa: E501
        """GetHPImportanceResponseMetricHPImportance - a model defined in Swagger"""  # noqa: E501

        self._hp_importance = None
        self._experiment_progress = None
        self._error = None
        self._pending = None
        self._in_progress = None
        self.discriminator = None

        if hp_importance is not None:
            self.hp_importance = hp_importance
        if experiment_progress is not None:
            self.experiment_progress = experiment_progress
        if error is not None:
            self.error = error
        if pending is not None:
            self.pending = pending
        if in_progress is not None:
            self.in_progress = in_progress

    @property
    def hp_importance(self):
        """Gets the hp_importance of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501

        A map between hyperparameter names and their relative importance.  # noqa: E501

        :return: The hp_importance of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._hp_importance

    @hp_importance.setter
    def hp_importance(self, hp_importance):
        """Sets the hp_importance of this GetHPImportanceResponseMetricHPImportance.

        A map between hyperparameter names and their relative importance.  # noqa: E501

        :param hp_importance: The hp_importance of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :type: dict(str, float)
        """

        self._hp_importance = hp_importance

    @property
    def experiment_progress(self):
        """Gets the experiment_progress of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501

        The approximate portion of the experiment that was complete when the data was read.  # noqa: E501

        :return: The experiment_progress of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :rtype: float
        """
        return self._experiment_progress

    @experiment_progress.setter
    def experiment_progress(self, experiment_progress):
        """Sets the experiment_progress of this GetHPImportanceResponseMetricHPImportance.

        The approximate portion of the experiment that was complete when the data was read.  # noqa: E501

        :param experiment_progress: The experiment_progress of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :type: float
        """

        self._experiment_progress = experiment_progress

    @property
    def error(self):
        """Gets the error of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501

        A description of why computation failed. Empty unless the state is (or was) 'failed'.  # noqa: E501

        :return: The error of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GetHPImportanceResponseMetricHPImportance.

        A description of why computation failed. Empty unless the state is (or was) 'failed'.  # noqa: E501

        :param error: The error of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def pending(self):
        """Gets the pending of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501

        Whether or not a request to compute results for this metric is queued.  # noqa: E501

        :return: The pending of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this GetHPImportanceResponseMetricHPImportance.

        Whether or not a request to compute results for this metric is queued.  # noqa: E501

        :param pending: The pending of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    @property
    def in_progress(self):
        """Gets the in_progress of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501

        Whether or not results for this metric are currently being computed.  # noqa: E501

        :return: The in_progress of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :rtype: bool
        """
        return self._in_progress

    @in_progress.setter
    def in_progress(self, in_progress):
        """Sets the in_progress of this GetHPImportanceResponseMetricHPImportance.

        Whether or not results for this metric are currently being computed.  # noqa: E501

        :param in_progress: The in_progress of this GetHPImportanceResponseMetricHPImportance.  # noqa: E501
        :type: bool
        """

        self._in_progress = in_progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetHPImportanceResponseMetricHPImportance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetHPImportanceResponseMetricHPImportance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
