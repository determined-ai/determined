# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Shell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'state': 'Determinedtaskv1State',
        'start_time': 'datetime',
        'container': 'V1Container',
        'private_key': 'str',
        'public_key': 'str',
        'username': 'str',
        'resource_pool': 'str',
        'exit_status': 'str',
        'addresses': 'list[object]',
        'agent_user_group': 'object'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'state': 'state',
        'start_time': 'startTime',
        'container': 'container',
        'private_key': 'privateKey',
        'public_key': 'publicKey',
        'username': 'username',
        'resource_pool': 'resourcePool',
        'exit_status': 'exitStatus',
        'addresses': 'addresses',
        'agent_user_group': 'agentUserGroup'
    }

    def __init__(self, id=None, description=None, state=None, start_time=None, container=None, private_key=None, public_key=None, username=None, resource_pool=None, exit_status=None, addresses=None, agent_user_group=None):  # noqa: E501
        """V1Shell - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._description = None
        self._state = None
        self._start_time = None
        self._container = None
        self._private_key = None
        self._public_key = None
        self._username = None
        self._resource_pool = None
        self._exit_status = None
        self._addresses = None
        self._agent_user_group = None
        self.discriminator = None

        self.id = id
        self.description = description
        self.state = state
        self.start_time = start_time
        if container is not None:
            self.container = container
        if private_key is not None:
            self.private_key = private_key
        if public_key is not None:
            self.public_key = public_key
        self.username = username
        self.resource_pool = resource_pool
        if exit_status is not None:
            self.exit_status = exit_status
        if addresses is not None:
            self.addresses = addresses
        if agent_user_group is not None:
            self.agent_user_group = agent_user_group

    @property
    def id(self):
        """Gets the id of this V1Shell.  # noqa: E501

        The id of the shell.  # noqa: E501

        :return: The id of this V1Shell.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1Shell.

        The id of the shell.  # noqa: E501

        :param id: The id of this V1Shell.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this V1Shell.  # noqa: E501

        The description of the shell.  # noqa: E501

        :return: The description of this V1Shell.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1Shell.

        The description of the shell.  # noqa: E501

        :param description: The description of this V1Shell.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def state(self):
        """Gets the state of this V1Shell.  # noqa: E501

        The state of the shell.  # noqa: E501

        :return: The state of this V1Shell.  # noqa: E501
        :rtype: Determinedtaskv1State
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this V1Shell.

        The state of the shell.  # noqa: E501

        :param state: The state of this V1Shell.  # noqa: E501
        :type: Determinedtaskv1State
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def start_time(self):
        """Gets the start_time of this V1Shell.  # noqa: E501

        The time the shell was started.  # noqa: E501

        :return: The start_time of this V1Shell.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this V1Shell.

        The time the shell was started.  # noqa: E501

        :param start_time: The start_time of this V1Shell.  # noqa: E501
        :type: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def container(self):
        """Gets the container of this V1Shell.  # noqa: E501

        The container running the shell.  # noqa: E501

        :return: The container of this V1Shell.  # noqa: E501
        :rtype: V1Container
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this V1Shell.

        The container running the shell.  # noqa: E501

        :param container: The container of this V1Shell.  # noqa: E501
        :type: V1Container
        """

        self._container = container

    @property
    def private_key(self):
        """Gets the private_key of this V1Shell.  # noqa: E501

        The private key for this shell.  # noqa: E501

        :return: The private_key of this V1Shell.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this V1Shell.

        The private key for this shell.  # noqa: E501

        :param private_key: The private_key of this V1Shell.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this V1Shell.  # noqa: E501

        The public key for this shell.  # noqa: E501

        :return: The public_key of this V1Shell.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this V1Shell.

        The public key for this shell.  # noqa: E501

        :param public_key: The public_key of this V1Shell.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def username(self):
        """Gets the username of this V1Shell.  # noqa: E501

        The username of the user that created the shell.  # noqa: E501

        :return: The username of this V1Shell.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this V1Shell.

        The username of the user that created the shell.  # noqa: E501

        :param username: The username of this V1Shell.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def resource_pool(self):
        """Gets the resource_pool of this V1Shell.  # noqa: E501


        :return: The resource_pool of this V1Shell.  # noqa: E501
        :rtype: str
        """
        return self._resource_pool

    @resource_pool.setter
    def resource_pool(self, resource_pool):
        """Sets the resource_pool of this V1Shell.


        :param resource_pool: The resource_pool of this V1Shell.  # noqa: E501
        :type: str
        """
        if resource_pool is None:
            raise ValueError("Invalid value for `resource_pool`, must not be `None`")  # noqa: E501

        self._resource_pool = resource_pool

    @property
    def exit_status(self):
        """Gets the exit_status of this V1Shell.  # noqa: E501


        :return: The exit_status of this V1Shell.  # noqa: E501
        :rtype: str
        """
        return self._exit_status

    @exit_status.setter
    def exit_status(self, exit_status):
        """Sets the exit_status of this V1Shell.


        :param exit_status: The exit_status of this V1Shell.  # noqa: E501
        :type: str
        """

        self._exit_status = exit_status

    @property
    def addresses(self):
        """Gets the addresses of this V1Shell.  # noqa: E501


        :return: The addresses of this V1Shell.  # noqa: E501
        :rtype: list[object]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this V1Shell.


        :param addresses: The addresses of this V1Shell.  # noqa: E501
        :type: list[object]
        """

        self._addresses = addresses

    @property
    def agent_user_group(self):
        """Gets the agent_user_group of this V1Shell.  # noqa: E501


        :return: The agent_user_group of this V1Shell.  # noqa: E501
        :rtype: object
        """
        return self._agent_user_group

    @agent_user_group.setter
    def agent_user_group(self, agent_user_group):
        """Sets the agent_user_group of this V1Shell.


        :param agent_user_group: The agent_user_group of this V1Shell.  # noqa: E501
        :type: object
        """

        self._agent_user_group = agent_user_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Shell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Shell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
