# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1TrialsSnapshotResponseTrial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trial_id': 'int',
        'hparams': 'object',
        'metric': 'float',
        'batches_processed': 'int'
    }

    attribute_map = {
        'trial_id': 'trialId',
        'hparams': 'hparams',
        'metric': 'metric',
        'batches_processed': 'batchesProcessed'
    }

    def __init__(self, trial_id=None, hparams=None, metric=None, batches_processed=None):  # noqa: E501
        """V1TrialsSnapshotResponseTrial - a model defined in Swagger"""  # noqa: E501

        self._trial_id = None
        self._hparams = None
        self._metric = None
        self._batches_processed = None
        self.discriminator = None

        self.trial_id = trial_id
        self.hparams = hparams
        self.metric = metric
        self.batches_processed = batches_processed

    @property
    def trial_id(self):
        """Gets the trial_id of this V1TrialsSnapshotResponseTrial.  # noqa: E501

        The id of the trial.  # noqa: E501

        :return: The trial_id of this V1TrialsSnapshotResponseTrial.  # noqa: E501
        :rtype: int
        """
        return self._trial_id

    @trial_id.setter
    def trial_id(self, trial_id):
        """Sets the trial_id of this V1TrialsSnapshotResponseTrial.

        The id of the trial.  # noqa: E501

        :param trial_id: The trial_id of this V1TrialsSnapshotResponseTrial.  # noqa: E501
        :type: int
        """
        if trial_id is None:
            raise ValueError("Invalid value for `trial_id`, must not be `None`")  # noqa: E501

        self._trial_id = trial_id

    @property
    def hparams(self):
        """Gets the hparams of this V1TrialsSnapshotResponseTrial.  # noqa: E501

        A dictionary of hyperparameter values for this trial.  # noqa: E501

        :return: The hparams of this V1TrialsSnapshotResponseTrial.  # noqa: E501
        :rtype: object
        """
        return self._hparams

    @hparams.setter
    def hparams(self, hparams):
        """Sets the hparams of this V1TrialsSnapshotResponseTrial.

        A dictionary of hyperparameter values for this trial.  # noqa: E501

        :param hparams: The hparams of this V1TrialsSnapshotResponseTrial.  # noqa: E501
        :type: object
        """
        if hparams is None:
            raise ValueError("Invalid value for `hparams`, must not be `None`")  # noqa: E501

        self._hparams = hparams

    @property
    def metric(self):
        """Gets the metric of this V1TrialsSnapshotResponseTrial.  # noqa: E501

        The value of the metric in this trial at this point.  # noqa: E501

        :return: The metric of this V1TrialsSnapshotResponseTrial.  # noqa: E501
        :rtype: float
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this V1TrialsSnapshotResponseTrial.

        The value of the metric in this trial at this point.  # noqa: E501

        :param metric: The metric of this V1TrialsSnapshotResponseTrial.  # noqa: E501
        :type: float
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")  # noqa: E501

        self._metric = metric

    @property
    def batches_processed(self):
        """Gets the batches_processed of this V1TrialsSnapshotResponseTrial.  # noqa: E501

        The number of batches processed for this particular datapoint.  # noqa: E501

        :return: The batches_processed of this V1TrialsSnapshotResponseTrial.  # noqa: E501
        :rtype: int
        """
        return self._batches_processed

    @batches_processed.setter
    def batches_processed(self, batches_processed):
        """Sets the batches_processed of this V1TrialsSnapshotResponseTrial.

        The number of batches processed for this particular datapoint.  # noqa: E501

        :param batches_processed: The batches_processed of this V1TrialsSnapshotResponseTrial.  # noqa: E501
        :type: int
        """
        if batches_processed is None:
            raise ValueError("Invalid value for `batches_processed`, must not be `None`")  # noqa: E501

        self._batches_processed = batches_processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1TrialsSnapshotResponseTrial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TrialsSnapshotResponseTrial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
