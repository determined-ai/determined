# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1GetMasterResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'master_id': 'str',
        'cluster_id': 'str',
        'cluster_name': 'str',
        'telemetry_enabled': 'bool'
    }

    attribute_map = {
        'version': 'version',
        'master_id': 'masterId',
        'cluster_id': 'clusterId',
        'cluster_name': 'clusterName',
        'telemetry_enabled': 'telemetryEnabled'
    }

    def __init__(self, version=None, master_id=None, cluster_id=None, cluster_name=None, telemetry_enabled=None):  # noqa: E501
        """V1GetMasterResponse - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._master_id = None
        self._cluster_id = None
        self._cluster_name = None
        self._telemetry_enabled = None
        self.discriminator = None

        self.version = version
        self.master_id = master_id
        self.cluster_id = cluster_id
        self.cluster_name = cluster_name
        if telemetry_enabled is not None:
            self.telemetry_enabled = telemetry_enabled

    @property
    def version(self):
        """Gets the version of this V1GetMasterResponse.  # noqa: E501

        The current version of the master.  # noqa: E501

        :return: The version of this V1GetMasterResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this V1GetMasterResponse.

        The current version of the master.  # noqa: E501

        :param version: The version of this V1GetMasterResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def master_id(self):
        """Gets the master_id of this V1GetMasterResponse.  # noqa: E501

        The current instance id of the master.  # noqa: E501

        :return: The master_id of this V1GetMasterResponse.  # noqa: E501
        :rtype: str
        """
        return self._master_id

    @master_id.setter
    def master_id(self, master_id):
        """Sets the master_id of this V1GetMasterResponse.

        The current instance id of the master.  # noqa: E501

        :param master_id: The master_id of this V1GetMasterResponse.  # noqa: E501
        :type: str
        """
        if master_id is None:
            raise ValueError("Invalid value for `master_id`, must not be `None`")  # noqa: E501

        self._master_id = master_id

    @property
    def cluster_id(self):
        """Gets the cluster_id of this V1GetMasterResponse.  # noqa: E501

        The global cluster id of the master.  # noqa: E501

        :return: The cluster_id of this V1GetMasterResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this V1GetMasterResponse.

        The global cluster id of the master.  # noqa: E501

        :param cluster_id: The cluster_id of this V1GetMasterResponse.  # noqa: E501
        :type: str
        """
        if cluster_id is None:
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this V1GetMasterResponse.  # noqa: E501

        The cluster name.  # noqa: E501

        :return: The cluster_name of this V1GetMasterResponse.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this V1GetMasterResponse.

        The cluster name.  # noqa: E501

        :param cluster_name: The cluster_name of this V1GetMasterResponse.  # noqa: E501
        :type: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")  # noqa: E501

        self._cluster_name = cluster_name

    @property
    def telemetry_enabled(self):
        """Gets the telemetry_enabled of this V1GetMasterResponse.  # noqa: E501

        Telemetry status.  # noqa: E501

        :return: The telemetry_enabled of this V1GetMasterResponse.  # noqa: E501
        :rtype: bool
        """
        return self._telemetry_enabled

    @telemetry_enabled.setter
    def telemetry_enabled(self, telemetry_enabled):
        """Sets the telemetry_enabled of this V1GetMasterResponse.

        Telemetry status.  # noqa: E501

        :param telemetry_enabled: The telemetry_enabled of this V1GetMasterResponse.  # noqa: E501
        :type: bool
        """

        self._telemetry_enabled = telemetry_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1GetMasterResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1GetMasterResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
