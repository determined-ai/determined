# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1ResourcePoolPrioritySchedulerDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preemption': 'bool',
        'default_priority': 'int'
    }

    attribute_map = {
        'preemption': 'preemption',
        'default_priority': 'defaultPriority'
    }

    def __init__(self, preemption=None, default_priority=None):  # noqa: E501
        """V1ResourcePoolPrioritySchedulerDetail - a model defined in Swagger"""  # noqa: E501

        self._preemption = None
        self._default_priority = None
        self.discriminator = None

        self.preemption = preemption
        self.default_priority = default_priority

    @property
    def preemption(self):
        """Gets the preemption of this V1ResourcePoolPrioritySchedulerDetail.  # noqa: E501


        :return: The preemption of this V1ResourcePoolPrioritySchedulerDetail.  # noqa: E501
        :rtype: bool
        """
        return self._preemption

    @preemption.setter
    def preemption(self, preemption):
        """Sets the preemption of this V1ResourcePoolPrioritySchedulerDetail.


        :param preemption: The preemption of this V1ResourcePoolPrioritySchedulerDetail.  # noqa: E501
        :type: bool
        """
        if preemption is None:
            raise ValueError("Invalid value for `preemption`, must not be `None`")  # noqa: E501

        self._preemption = preemption

    @property
    def default_priority(self):
        """Gets the default_priority of this V1ResourcePoolPrioritySchedulerDetail.  # noqa: E501

        The priority that is assigned to tasks that do not explicitly specify a priority.  # noqa: E501

        :return: The default_priority of this V1ResourcePoolPrioritySchedulerDetail.  # noqa: E501
        :rtype: int
        """
        return self._default_priority

    @default_priority.setter
    def default_priority(self, default_priority):
        """Sets the default_priority of this V1ResourcePoolPrioritySchedulerDetail.

        The priority that is assigned to tasks that do not explicitly specify a priority.  # noqa: E501

        :param default_priority: The default_priority of this V1ResourcePoolPrioritySchedulerDetail.  # noqa: E501
        :type: int
        """
        if default_priority is None:
            raise ValueError("Invalid value for `default_priority`, must not be `None`")  # noqa: E501

        self._default_priority = default_priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ResourcePoolPrioritySchedulerDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ResourcePoolPrioritySchedulerDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
