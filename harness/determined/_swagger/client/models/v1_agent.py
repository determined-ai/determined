# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Agent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'registered_time': 'datetime',
        'slots': 'dict(str, V1Slot)',
        'containers': 'dict(str, V1Container)',
        'label': 'str',
        'resource_pool': 'str'
    }

    attribute_map = {
        'id': 'id',
        'registered_time': 'registeredTime',
        'slots': 'slots',
        'containers': 'containers',
        'label': 'label',
        'resource_pool': 'resourcePool'
    }

    def __init__(self, id=None, registered_time=None, slots=None, containers=None, label=None, resource_pool=None):  # noqa: E501
        """V1Agent - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._registered_time = None
        self._slots = None
        self._containers = None
        self._label = None
        self._resource_pool = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if registered_time is not None:
            self.registered_time = registered_time
        if slots is not None:
            self.slots = slots
        if containers is not None:
            self.containers = containers
        if label is not None:
            self.label = label
        if resource_pool is not None:
            self.resource_pool = resource_pool

    @property
    def id(self):
        """Gets the id of this V1Agent.  # noqa: E501

        The unique id of the agent.  # noqa: E501

        :return: The id of this V1Agent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1Agent.

        The unique id of the agent.  # noqa: E501

        :param id: The id of this V1Agent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def registered_time(self):
        """Gets the registered_time of this V1Agent.  # noqa: E501

        The time when the agent registered with the master.  # noqa: E501

        :return: The registered_time of this V1Agent.  # noqa: E501
        :rtype: datetime
        """
        return self._registered_time

    @registered_time.setter
    def registered_time(self, registered_time):
        """Sets the registered_time of this V1Agent.

        The time when the agent registered with the master.  # noqa: E501

        :param registered_time: The registered_time of this V1Agent.  # noqa: E501
        :type: datetime
        """

        self._registered_time = registered_time

    @property
    def slots(self):
        """Gets the slots of this V1Agent.  # noqa: E501

        A map of slot id to each slot of this agent.  # noqa: E501

        :return: The slots of this V1Agent.  # noqa: E501
        :rtype: dict(str, V1Slot)
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this V1Agent.

        A map of slot id to each slot of this agent.  # noqa: E501

        :param slots: The slots of this V1Agent.  # noqa: E501
        :type: dict(str, V1Slot)
        """

        self._slots = slots

    @property
    def containers(self):
        """Gets the containers of this V1Agent.  # noqa: E501

        A map of container id to all containers assigned to this agent.  # noqa: E501

        :return: The containers of this V1Agent.  # noqa: E501
        :rtype: dict(str, V1Container)
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this V1Agent.

        A map of container id to all containers assigned to this agent.  # noqa: E501

        :param containers: The containers of this V1Agent.  # noqa: E501
        :type: dict(str, V1Container)
        """

        self._containers = containers

    @property
    def label(self):
        """Gets the label of this V1Agent.  # noqa: E501

        An optional label applied to the agent for scheduling restrictions.  # noqa: E501

        :return: The label of this V1Agent.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this V1Agent.

        An optional label applied to the agent for scheduling restrictions.  # noqa: E501

        :param label: The label of this V1Agent.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def resource_pool(self):
        """Gets the resource_pool of this V1Agent.  # noqa: E501


        :return: The resource_pool of this V1Agent.  # noqa: E501
        :rtype: str
        """
        return self._resource_pool

    @resource_pool.setter
    def resource_pool(self, resource_pool):
        """Sets the resource_pool of this V1Agent.


        :param resource_pool: The resource_pool of this V1Agent.  # noqa: E501
        :type: str
        """

        self._resource_pool = resource_pool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Agent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Agent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
