# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from determined._swagger.client.api_client import ApiClient


class TensorboardsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def determined_get_tensorboard(self, tensorboard_id, **kwargs):  # noqa: E501
        """Get the requested tensorboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.determined_get_tensorboard(tensorboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tensorboard_id: The id of the tensorboard. (required)
        :return: V1GetTensorboardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.determined_get_tensorboard_with_http_info(tensorboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.determined_get_tensorboard_with_http_info(tensorboard_id, **kwargs)  # noqa: E501
            return data

    def determined_get_tensorboard_with_http_info(self, tensorboard_id, **kwargs):  # noqa: E501
        """Get the requested tensorboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.determined_get_tensorboard_with_http_info(tensorboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tensorboard_id: The id of the tensorboard. (required)
        :return: V1GetTensorboardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tensorboard_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method determined_get_tensorboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tensorboard_id' is set
        if ('tensorboard_id' not in params or
                params['tensorboard_id'] is None):
            raise ValueError("Missing the required parameter `tensorboard_id` when calling `determined_get_tensorboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tensorboard_id' in params:
            path_params['tensorboardId'] = params['tensorboard_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tensorboards/{tensorboardId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetTensorboardResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def determined_get_tensorboards(self, **kwargs):  # noqa: E501
        """Get a list of tensorboards.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.determined_get_tensorboards(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort_by: Sort tensorboards by the given field.   - SORT_BY_UNSPECIFIED: Returns tensorboards in an unsorted list.  - SORT_BY_ID: Returns tensorboards sorted by id.  - SORT_BY_DESCRIPTION: Returns tensorboards sorted by description.  - SORT_BY_START_TIME: Return tensorboards sorted by start time.
        :param str order_by: Order tensorboards in either ascending or descending order.   - ORDER_BY_UNSPECIFIED: Returns records in no specific order.  - ORDER_BY_ASC: Returns records in ascending order.  - ORDER_BY_DESC: Returns records in descending order.
        :param int offset: Skip the number of tensorboards before returning results. Negative values denote number of tensorboards to skip from the end before returning results.
        :param int limit: Limit the number of tensorboards. A value of 0 denotes no limit.
        :param list[str] users: Limit tensorboards to those that are owned by the specified users.
        :return: V1GetTensorboardsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.determined_get_tensorboards_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.determined_get_tensorboards_with_http_info(**kwargs)  # noqa: E501
            return data

    def determined_get_tensorboards_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of tensorboards.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.determined_get_tensorboards_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort_by: Sort tensorboards by the given field.   - SORT_BY_UNSPECIFIED: Returns tensorboards in an unsorted list.  - SORT_BY_ID: Returns tensorboards sorted by id.  - SORT_BY_DESCRIPTION: Returns tensorboards sorted by description.  - SORT_BY_START_TIME: Return tensorboards sorted by start time.
        :param str order_by: Order tensorboards in either ascending or descending order.   - ORDER_BY_UNSPECIFIED: Returns records in no specific order.  - ORDER_BY_ASC: Returns records in ascending order.  - ORDER_BY_DESC: Returns records in descending order.
        :param int offset: Skip the number of tensorboards before returning results. Negative values denote number of tensorboards to skip from the end before returning results.
        :param int limit: Limit the number of tensorboards. A value of 0 denotes no limit.
        :param list[str] users: Limit tensorboards to those that are owned by the specified users.
        :return: V1GetTensorboardsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort_by', 'order_by', 'offset', 'limit', 'users']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method determined_get_tensorboards" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'users' in params:
            query_params.append(('users', params['users']))  # noqa: E501
            collection_formats['users'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tensorboards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetTensorboardsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def determined_kill_tensorboard(self, tensorboard_id, **kwargs):  # noqa: E501
        """Kill the requested tensorboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.determined_kill_tensorboard(tensorboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tensorboard_id: The id of the tensorboard. (required)
        :return: V1KillTensorboardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.determined_kill_tensorboard_with_http_info(tensorboard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.determined_kill_tensorboard_with_http_info(tensorboard_id, **kwargs)  # noqa: E501
            return data

    def determined_kill_tensorboard_with_http_info(self, tensorboard_id, **kwargs):  # noqa: E501
        """Kill the requested tensorboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.determined_kill_tensorboard_with_http_info(tensorboard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tensorboard_id: The id of the tensorboard. (required)
        :return: V1KillTensorboardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tensorboard_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method determined_kill_tensorboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tensorboard_id' is set
        if ('tensorboard_id' not in params or
                params['tensorboard_id'] is None):
            raise ValueError("Missing the required parameter `tensorboard_id` when calling `determined_kill_tensorboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tensorboard_id' in params:
            path_params['tensorboardId'] = params['tensorboard_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tensorboards/{tensorboardId}/kill', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1KillTensorboardResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def determined_launch_tensorboard(self, body, **kwargs):  # noqa: E501
        """Launch a tensorboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.determined_launch_tensorboard(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1LaunchTensorboardRequest body: (required)
        :return: V1LaunchTensorboardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.determined_launch_tensorboard_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.determined_launch_tensorboard_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def determined_launch_tensorboard_with_http_info(self, body, **kwargs):  # noqa: E501
        """Launch a tensorboard.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.determined_launch_tensorboard_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1LaunchTensorboardRequest body: (required)
        :return: V1LaunchTensorboardResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method determined_launch_tensorboard" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `determined_launch_tensorboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BearerToken']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/tensorboards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1LaunchTensorboardResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
