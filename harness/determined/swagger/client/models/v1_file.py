# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'type': 'int',
        'content': 'str',
        'mtime': 'str',
        'mode': 'int',
        'uid': 'int',
        'gid': 'int'
    }

    attribute_map = {
        'path': 'path',
        'type': 'type',
        'content': 'content',
        'mtime': 'mtime',
        'mode': 'mode',
        'uid': 'uid',
        'gid': 'gid'
    }

    def __init__(self, path=None, type=None, content=None, mtime=None, mode=None, uid=None, gid=None):  # noqa: E501
        """V1File - a model defined in Swagger"""  # noqa: E501

        self._path = None
        self._type = None
        self._content = None
        self._mtime = None
        self._mode = None
        self._uid = None
        self._gid = None
        self.discriminator = None

        self.path = path
        self.type = type
        self.content = content
        self.mtime = mtime
        self.mode = mode
        self.uid = uid
        self.gid = gid

    @property
    def path(self):
        """Gets the path of this V1File.  # noqa: E501

        Path to the file.  # noqa: E501

        :return: The path of this V1File.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this V1File.

        Path to the file.  # noqa: E501

        :param path: The path of this V1File.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def type(self):
        """Gets the type of this V1File.  # noqa: E501

        File type.  # noqa: E501

        :return: The type of this V1File.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1File.

        File type.  # noqa: E501

        :param type: The type of this V1File.  # noqa: E501
        :type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def content(self):
        """Gets the content of this V1File.  # noqa: E501

        base64 encoded contents of the file.  # noqa: E501

        :return: The content of this V1File.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this V1File.

        base64 encoded contents of the file.  # noqa: E501

        :param content: The content of this V1File.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501
        if content is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', content):  # noqa: E501
            raise ValueError(r"Invalid value for `content`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._content = content

    @property
    def mtime(self):
        """Gets the mtime of this V1File.  # noqa: E501

        Modified time (Unix timestamp).  # noqa: E501

        :return: The mtime of this V1File.  # noqa: E501
        :rtype: str
        """
        return self._mtime

    @mtime.setter
    def mtime(self, mtime):
        """Sets the mtime of this V1File.

        Modified time (Unix timestamp).  # noqa: E501

        :param mtime: The mtime of this V1File.  # noqa: E501
        :type: str
        """
        if mtime is None:
            raise ValueError("Invalid value for `mtime`, must not be `None`")  # noqa: E501

        self._mtime = mtime

    @property
    def mode(self):
        """Gets the mode of this V1File.  # noqa: E501

        File mode.  # noqa: E501

        :return: The mode of this V1File.  # noqa: E501
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this V1File.

        File mode.  # noqa: E501

        :param mode: The mode of this V1File.  # noqa: E501
        :type: int
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def uid(self):
        """Gets the uid of this V1File.  # noqa: E501

        User ID.  # noqa: E501

        :return: The uid of this V1File.  # noqa: E501
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this V1File.

        User ID.  # noqa: E501

        :param uid: The uid of this V1File.  # noqa: E501
        :type: int
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501

        self._uid = uid

    @property
    def gid(self):
        """Gets the gid of this V1File.  # noqa: E501

        Group ID.  # noqa: E501

        :return: The gid of this V1File.  # noqa: E501
        :rtype: int
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this V1File.

        Group ID.  # noqa: E501

        :param gid: The gid of this V1File.  # noqa: E501
        :type: int
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1File, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1File):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
