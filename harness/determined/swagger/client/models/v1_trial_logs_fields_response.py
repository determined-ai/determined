# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1TrialLogsFieldsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_ids': 'list[str]',
        'container_ids': 'list[str]',
        'rank_ids': 'list[int]',
        'stdtypes': 'list[str]',
        'sources': 'list[str]'
    }

    attribute_map = {
        'agent_ids': 'agentIds',
        'container_ids': 'containerIds',
        'rank_ids': 'rankIds',
        'stdtypes': 'stdtypes',
        'sources': 'sources'
    }

    def __init__(self, agent_ids=None, container_ids=None, rank_ids=None, stdtypes=None, sources=None):  # noqa: E501
        """V1TrialLogsFieldsResponse - a model defined in Swagger"""  # noqa: E501

        self._agent_ids = None
        self._container_ids = None
        self._rank_ids = None
        self._stdtypes = None
        self._sources = None
        self.discriminator = None

        if agent_ids is not None:
            self.agent_ids = agent_ids
        if container_ids is not None:
            self.container_ids = container_ids
        if rank_ids is not None:
            self.rank_ids = rank_ids
        if stdtypes is not None:
            self.stdtypes = stdtypes
        if sources is not None:
            self.sources = sources

    @property
    def agent_ids(self):
        """Gets the agent_ids of this V1TrialLogsFieldsResponse.  # noqa: E501

        The distinct agent IDs present in the logs.  # noqa: E501

        :return: The agent_ids of this V1TrialLogsFieldsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._agent_ids

    @agent_ids.setter
    def agent_ids(self, agent_ids):
        """Sets the agent_ids of this V1TrialLogsFieldsResponse.

        The distinct agent IDs present in the logs.  # noqa: E501

        :param agent_ids: The agent_ids of this V1TrialLogsFieldsResponse.  # noqa: E501
        :type: list[str]
        """

        self._agent_ids = agent_ids

    @property
    def container_ids(self):
        """Gets the container_ids of this V1TrialLogsFieldsResponse.  # noqa: E501

        The distinct container IDs present in the logs.  # noqa: E501

        :return: The container_ids of this V1TrialLogsFieldsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._container_ids

    @container_ids.setter
    def container_ids(self, container_ids):
        """Sets the container_ids of this V1TrialLogsFieldsResponse.

        The distinct container IDs present in the logs.  # noqa: E501

        :param container_ids: The container_ids of this V1TrialLogsFieldsResponse.  # noqa: E501
        :type: list[str]
        """

        self._container_ids = container_ids

    @property
    def rank_ids(self):
        """Gets the rank_ids of this V1TrialLogsFieldsResponse.  # noqa: E501

        The distinct rank IDs present in the logs.  # noqa: E501

        :return: The rank_ids of this V1TrialLogsFieldsResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._rank_ids

    @rank_ids.setter
    def rank_ids(self, rank_ids):
        """Sets the rank_ids of this V1TrialLogsFieldsResponse.

        The distinct rank IDs present in the logs.  # noqa: E501

        :param rank_ids: The rank_ids of this V1TrialLogsFieldsResponse.  # noqa: E501
        :type: list[int]
        """

        self._rank_ids = rank_ids

    @property
    def stdtypes(self):
        """Gets the stdtypes of this V1TrialLogsFieldsResponse.  # noqa: E501

        The distinct stdtypes present in the logs.  # noqa: E501

        :return: The stdtypes of this V1TrialLogsFieldsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._stdtypes

    @stdtypes.setter
    def stdtypes(self, stdtypes):
        """Sets the stdtypes of this V1TrialLogsFieldsResponse.

        The distinct stdtypes present in the logs.  # noqa: E501

        :param stdtypes: The stdtypes of this V1TrialLogsFieldsResponse.  # noqa: E501
        :type: list[str]
        """

        self._stdtypes = stdtypes

    @property
    def sources(self):
        """Gets the sources of this V1TrialLogsFieldsResponse.  # noqa: E501

        The distinct sources present in the logs.  # noqa: E501

        :return: The sources of this V1TrialLogsFieldsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this V1TrialLogsFieldsResponse.

        The distinct sources present in the logs.  # noqa: E501

        :param sources: The sources of this V1TrialLogsFieldsResponse.  # noqa: E501
        :type: list[str]
        """

        self._sources = sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1TrialLogsFieldsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1TrialLogsFieldsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
