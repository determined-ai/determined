# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1ResourceAllocationAggregatedEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period_start': 'str',
        'period': 'V1ResourceAllocationAggregationPeriod',
        'seconds': 'float',
        'by_username': 'dict(str, float)',
        'by_experiment_label': 'dict(str, float)',
        'by_resource_pool': 'dict(str, float)',
        'by_agent_label': 'dict(str, float)'
    }

    attribute_map = {
        'period_start': 'periodStart',
        'period': 'period',
        'seconds': 'seconds',
        'by_username': 'byUsername',
        'by_experiment_label': 'byExperimentLabel',
        'by_resource_pool': 'byResourcePool',
        'by_agent_label': 'byAgentLabel'
    }

    def __init__(self, period_start=None, period=None, seconds=None, by_username=None, by_experiment_label=None, by_resource_pool=None, by_agent_label=None):  # noqa: E501
        """V1ResourceAllocationAggregatedEntry - a model defined in Swagger"""  # noqa: E501

        self._period_start = None
        self._period = None
        self._seconds = None
        self._by_username = None
        self._by_experiment_label = None
        self._by_resource_pool = None
        self._by_agent_label = None
        self.discriminator = None

        self.period_start = period_start
        self.period = period
        self.seconds = seconds
        self.by_username = by_username
        self.by_experiment_label = by_experiment_label
        self.by_resource_pool = by_resource_pool
        self.by_agent_label = by_agent_label

    @property
    def period_start(self):
        """Gets the period_start of this V1ResourceAllocationAggregatedEntry.  # noqa: E501

        The date of this entry.  # noqa: E501

        :return: The period_start of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :rtype: str
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this V1ResourceAllocationAggregatedEntry.

        The date of this entry.  # noqa: E501

        :param period_start: The period_start of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :type: str
        """
        if period_start is None:
            raise ValueError("Invalid value for `period_start`, must not be `None`")  # noqa: E501

        self._period_start = period_start

    @property
    def period(self):
        """Gets the period of this V1ResourceAllocationAggregatedEntry.  # noqa: E501

        The period over which aggregation occurred.  # noqa: E501

        :return: The period of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :rtype: V1ResourceAllocationAggregationPeriod
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this V1ResourceAllocationAggregatedEntry.

        The period over which aggregation occurred.  # noqa: E501

        :param period: The period of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :type: V1ResourceAllocationAggregationPeriod
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")  # noqa: E501

        self._period = period

    @property
    def seconds(self):
        """Gets the seconds of this V1ResourceAllocationAggregatedEntry.  # noqa: E501

        The total number of seconds included in this allocation entry.  # noqa: E501

        :return: The seconds of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :rtype: float
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this V1ResourceAllocationAggregatedEntry.

        The total number of seconds included in this allocation entry.  # noqa: E501

        :param seconds: The seconds of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :type: float
        """
        if seconds is None:
            raise ValueError("Invalid value for `seconds`, must not be `None`")  # noqa: E501

        self._seconds = seconds

    @property
    def by_username(self):
        """Gets the by_username of this V1ResourceAllocationAggregatedEntry.  # noqa: E501

        The seconds in the cluster used by experiments belonging to each user.  # noqa: E501

        :return: The by_username of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._by_username

    @by_username.setter
    def by_username(self, by_username):
        """Sets the by_username of this V1ResourceAllocationAggregatedEntry.

        The seconds in the cluster used by experiments belonging to each user.  # noqa: E501

        :param by_username: The by_username of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :type: dict(str, float)
        """
        if by_username is None:
            raise ValueError("Invalid value for `by_username`, must not be `None`")  # noqa: E501

        self._by_username = by_username

    @property
    def by_experiment_label(self):
        """Gets the by_experiment_label of this V1ResourceAllocationAggregatedEntry.  # noqa: E501

        The seconds in the cluster used by experiments labeled with each label.  # noqa: E501

        :return: The by_experiment_label of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._by_experiment_label

    @by_experiment_label.setter
    def by_experiment_label(self, by_experiment_label):
        """Sets the by_experiment_label of this V1ResourceAllocationAggregatedEntry.

        The seconds in the cluster used by experiments labeled with each label.  # noqa: E501

        :param by_experiment_label: The by_experiment_label of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :type: dict(str, float)
        """
        if by_experiment_label is None:
            raise ValueError("Invalid value for `by_experiment_label`, must not be `None`")  # noqa: E501

        self._by_experiment_label = by_experiment_label

    @property
    def by_resource_pool(self):
        """Gets the by_resource_pool of this V1ResourceAllocationAggregatedEntry.  # noqa: E501

        The seconds in the cluster used by experiments assigned to each resource pool.  # noqa: E501

        :return: The by_resource_pool of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._by_resource_pool

    @by_resource_pool.setter
    def by_resource_pool(self, by_resource_pool):
        """Sets the by_resource_pool of this V1ResourceAllocationAggregatedEntry.

        The seconds in the cluster used by experiments assigned to each resource pool.  # noqa: E501

        :param by_resource_pool: The by_resource_pool of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :type: dict(str, float)
        """
        if by_resource_pool is None:
            raise ValueError("Invalid value for `by_resource_pool`, must not be `None`")  # noqa: E501

        self._by_resource_pool = by_resource_pool

    @property
    def by_agent_label(self):
        """Gets the by_agent_label of this V1ResourceAllocationAggregatedEntry.  # noqa: E501

        The seconds in the cluster used by experiments assigned to each agent label.  # noqa: E501

        :return: The by_agent_label of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :rtype: dict(str, float)
        """
        return self._by_agent_label

    @by_agent_label.setter
    def by_agent_label(self, by_agent_label):
        """Sets the by_agent_label of this V1ResourceAllocationAggregatedEntry.

        The seconds in the cluster used by experiments assigned to each agent label.  # noqa: E501

        :param by_agent_label: The by_agent_label of this V1ResourceAllocationAggregatedEntry.  # noqa: E501
        :type: dict(str, float)
        """
        if by_agent_label is None:
            raise ValueError("Invalid value for `by_agent_label`, must not be `None`")  # noqa: E501

        self._by_agent_label = by_agent_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ResourceAllocationAggregatedEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ResourceAllocationAggregatedEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
