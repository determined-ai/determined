# coding: utf-8

"""
    Determined API (Beta)

    Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.  # noqa: E501

    OpenAPI spec version: 0.1
    Contact: community@determined.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Model(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'metadata': 'object',
        'creation_time': 'datetime',
        'last_updated_time': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'metadata': 'metadata',
        'creation_time': 'creationTime',
        'last_updated_time': 'lastUpdatedTime'
    }

    def __init__(self, name=None, description=None, metadata=None, creation_time=None, last_updated_time=None):  # noqa: E501
        """V1Model - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._metadata = None
        self._creation_time = None
        self._last_updated_time = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.metadata = metadata
        self.creation_time = creation_time
        self.last_updated_time = last_updated_time

    @property
    def name(self):
        """Gets the name of this V1Model.  # noqa: E501

        The name of the model.  # noqa: E501

        :return: The name of this V1Model.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1Model.

        The name of the model.  # noqa: E501

        :param name: The name of this V1Model.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this V1Model.  # noqa: E501

        The description of the model.  # noqa: E501

        :return: The description of this V1Model.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1Model.

        The description of the model.  # noqa: E501

        :param description: The description of this V1Model.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this V1Model.  # noqa: E501

        The user-defined metadata of the model.  # noqa: E501

        :return: The metadata of this V1Model.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V1Model.

        The user-defined metadata of the model.  # noqa: E501

        :param metadata: The metadata of this V1Model.  # noqa: E501
        :type: object
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata

    @property
    def creation_time(self):
        """Gets the creation_time of this V1Model.  # noqa: E501

        The time the model was created.  # noqa: E501

        :return: The creation_time of this V1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this V1Model.

        The time the model was created.  # noqa: E501

        :param creation_time: The creation_time of this V1Model.  # noqa: E501
        :type: datetime
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this V1Model.  # noqa: E501

        The time the model was last updated.  # noqa: E501

        :return: The last_updated_time of this V1Model.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this V1Model.

        The time the model was last updated.  # noqa: E501

        :param last_updated_time: The last_updated_time of this V1Model.  # noqa: E501
        :type: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")  # noqa: E501

        self._last_updated_time = last_updated_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1Model, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Model):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
