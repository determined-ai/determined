syntax = "proto3";

package determined.agent.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/agentv1";

import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "determined/container/v1/container.proto";
import "determined/device/v1/device.proto";

// Agent is a pool of resources where containers are run.
message Agent {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "id" ] }
  };
  // The unique id of the agent.
  string id = 1;
  // The time when the agent registered with the master.
  google.protobuf.Timestamp registered_time = 2;
  // A map of slot id to each slot of this agent.
  map<string, Slot> slots = 3;
  // A map of container id to all containers assigned to this agent.
  map<string, determined.container.v1.Container> containers = 4;
  // This field has been deprecated and will be empty.
  string label = 5;
  // The addresses of the agent.
  repeated string addresses = 7;
  // Flag notifying if containers can be scheduled on this agent.
  bool enabled = 8;
  // Flag notifying if this agent is in the draining mode: current containers
  // will be allowed to finish but no new ones will be scheduled.
  bool draining = 9;
  // The Determined version that this agent was built from.
  string version = 10;
  // The name of the resource pools the agent is in. Only slurm can contain
  // multiples.
  repeated string resource_pools = 6;
}

// Slot wraps a single device on the agent.
message Slot {
  // The unqiue id of the slot for a given agent.
  string id = 1;
  // The individual resource this slot wraps.
  determined.device.v1.Device device = 2;
  // Flag notifying if containers can be scheduled on this slot.
  bool enabled = 3;
  // Container that is currently running on this agent. It is unset if there is
  // no container currently running on this slot.
  determined.container.v1.Container container = 4;
  // Flag notifying if this slot is in the draining mode: current containers
  // will be allowed to finish but no new ones will be scheduled.
  bool draining = 5;
}
