syntax = "proto3";

package determined.master.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/masterv1";

import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

// The period over which to perform aggregation.
enum ResourceAllocationAggregationPeriod {
  // Unspecified. This value will never actually be returned by the API, it is
  // just an artifact of using protobuf.
  RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED = 0;
  // Aggregation by day.
  RESOURCE_ALLOCATION_AGGREGATION_PERIOD_DAILY = 1;
  // Aggregation by month.
  RESOURCE_ALLOCATION_AGGREGATION_PERIOD_MONTHLY = 2;
}

// One instance of slots in the cluster being allocated to a task.
message ResourceAllocationRawEntry {
  // The kind of workload being run during this allocation (training,
  // checkpoint, or validation).
  string kind = 1;
  // The time at which the allocation began.
  google.protobuf.Timestamp start_time = 2;
  // The time at which the allocation ended.
  google.protobuf.Timestamp end_time = 3;
  // The ID of the experiment the allocation is a part of.
  int32 experiment_id = 4;
  // The username of the user who ran the experiment.
  string username = 5;
  // The username of the user who ran the experiment.
  int32 user_id = 9;
  // The labels assigned to the experiment.
  repeated string labels = 6;
  // The number of seconds for which the allocation was active during the
  // requested period.
  float seconds = 7;
  // The number of slots used by the allocation.
  int32 slots = 8;
}

// These values must be kept in sync with the SQL query that retrieves
// aggregated information. This comment has a blank line after it so it is not
// attached to the type.

// A type of aggregation performed on allocation values.
enum ResourceAllocationAggregationType {
  // Unspecified. This value will never actually be returned by the API, it is
  // just an artifact of using protobuf.
  RESOURCE_ALLOCATION_AGGREGATION_TYPE_UNSPECIFIED = 0;
  // Aggregation by days only.
  RESOURCE_ALLOCATION_AGGREGATION_TYPE_TOTAL = 1;
  // Aggregation by owner within each day.
  RESOURCE_ALLOCATION_AGGREGATION_TYPE_USER = 2;
  // Aggregation by experiment labels within each day.
  RESOURCE_ALLOCATION_AGGREGATION_TYPE_LABEL = 3;
}

// One instance of slots in the cluster being allocated to a task during a
// period (aggregated).
message ResourceAllocationAggregatedEntry {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "periodStart",
        "period",
        "seconds",
        "byUsername",
        "byExperimentLabel",
        "byResourcePool",
        "byAgentLabel"
      ]
    }
  };
  // The date of this entry.
  string period_start = 1;
  // The period over which aggregation occurred.
  ResourceAllocationAggregationPeriod period = 2;
  // The total number of seconds included in this allocation entry.
  float seconds = 3;
  // The seconds in the cluster used by experiments belonging to each user.
  map<string, float> by_username = 4;
  // The seconds in the cluster used by experiments labeled with each label.
  map<string, float> by_experiment_label = 5;
  // The seconds in the cluster used by experiments assigned to each resource
  // pool.
  map<string, float> by_resource_pool = 6;
  // This field has been deprecated and will be empty.
  map<string, float> by_agent_label = 7;
}

// The log config for Master Config
message LogConfig {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [] }
  };
  // The log level for Master Config.
  string level = 1;
  // The color setting for log in Master Config.
  bool color = 2;
}

// The config to be patched into Master Config.
message Config {
  // The log config to be patched into Master Config.
  LogConfig log = 2;
}
