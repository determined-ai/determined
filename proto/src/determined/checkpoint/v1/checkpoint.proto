syntax = "proto3";

package determined.checkpoint.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/checkpointv1";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-swagger/options/annotations.proto";

// The current state of the checkpoint.
enum State {
  // The state of the checkpoint is unknown.
  STATE_UNSPECIFIED = 0;
  // The checkpoint is in an active state.
  STATE_ACTIVE = 1;
  // The checkpoint is persisted to checkpoint storage.
  STATE_COMPLETED = 2;
  // The checkpoint errored.
  STATE_ERROR = 3;
  // The checkpoint has been deleted.
  STATE_DELETED = 4;
}

message CheckpointTrainingMetadata {
  // The ID of the trial that created this checkpoint.
  int32 trial_id = 3;
  // The ID of the experiment that created this checkpoint.
  int32 experiment_id = 4;
  // The configuration of the experiment that created this checkpoint.
  google.protobuf.Struct experiment_config = 5;
  // Hyperparameter values for the trial that created this checkpoint.
  google.protobuf.Struct hparams = 6;
  // Training metrics reported at the same latest_batch as the checkpoint.
  google.protobuf.Struct training_metrics = 7;
  // Validation metrics reported at the same latest_batch as the checkpoint.
  google.protobuf.Struct validation_metrics = 8;
  // TODO: is this actually a good idea?  It couples a lot of parts of the
  // system pretty tightly, and if we had a good metrics api it would be a much
  // more natural way to serve this information.
  google.protobuf.DoubleValue searcher_metric = 17;
}

// CheckpointMetadata is metadata about a collection of files.
message CheckpointMetadata {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [] }
  };
  // ID of the task which generated this checkpoint.
  string task_id = 1;
  // ID of the allocation which generated this checkpoint.
  string allocation_id = 2;
  // UUID of the checkpoint.
  string uuid = 3;
  // Timestamp when the checkpoint was reported.
  google.protobuf.Timestamp report_time = 4;
  // Dictionary of file paths to file sizes in bytes of all files in the checkpoint.
  map<string, int64> resources = 5;
  // User defined metadata associated with the checkpoint.
  google.protobuf.Struct metadata = 6;
  // The state of the underlying checkpoint.
  State state = 7;
  // Training-related data for this checkpoint.
  CheckpointTrainingMetadata training = 8;
}