syntax = "proto3";

package determined.rbac.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/rbacv1";

import "google/protobuf/wrappers.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Role contains information about a specific Role
message Role {
  // The id of the role being detailed
  int32 role_id = 1;
  // The string of the role being detailed
  string name = 2;
  // The permissions granted to the role
  repeated Permission permissions = 3;
}

// Permission represents an action a user can take in the system
message Permission {
  // The id of the permission
  PermissionType id = 1;
  // The name of the permission
  string name = 2;
  // Whether the permission is a global-only permission
  bool is_global = 3;
}

// List of permissions types.
// Value of the enum has 9xxxx for global only permissions.
// Permissions on the same object share the thousands place
// value like 2001 and 2002.
enum PermissionType {
  // The permission type is unknown.
  PERMISSION_TYPE_UNSPECIFIED = 0;

  // Can create and update other users.
  // Allows updating other users passwords making this
  // permission give all other permissions effectively.
  PERMISSION_TYPE_ADMINISTRATE_USER = 91001;

  // Ability to create experiments.
  PERMISSION_TYPE_CREATE_EXPERIMENT = 2001;
  // Ability to view experiment's model code, checkpoints, trials.
  PERMISSION_TYPE_VIEW_EXPERIMENT_ARTIFACTS = 2002;
  // Ability to view experiment's metadata like experiment config, progress.
  PERMISSION_TYPE_VIEW_EXPERIMENT_METADATA = 2003;
  // Ability to update experiment and experiment's lifecycle.
  PERMISSION_TYPE_UPDATE_EXPERIMENT = 2004;
  // Ability to update experiment's metadata.
  PERMISSION_TYPE_UPDATE_EXPERIMENT_METADATA = 2005;
  // Ability to delete experiment.
  PERMISSION_TYPE_DELETE_EXPERIMENT = 2006;

  // Ability to create, update, and add / remove users from groups.
  PERMISSION_TYPE_UPDATE_GROUP = 93001;

  // Ability to create workspaces.
  PERMISSION_TYPE_CREATE_WORKSPACE = 94001;
  // Ability to view workspace.
  PERMISSION_TYPE_VIEW_WORKSPACE = 4002;
  // Ability to update workspace.
  PERMISSION_TYPE_UPDATE_WORKSPACE = 4003;
  // Ability to delete workspace.
  PERMISSION_TYPE_DELETE_WORKSPACE = 4004;

  // Ability to create projects.
  PERMISSION_TYPE_CREATE_PROJECT = 5001;
  // Ability to view projects.
  PERMISSION_TYPE_VIEW_PROJECT = 5002;
  // Ability to update projects.
  PERMISSION_TYPE_UPDATE_PROJECT = 5003;
  // Ability to delete projects.
  PERMISSION_TYPE_DELETE_PROJECT = 5004;

  // Ability to create and update role definitions.
  PERMISSION_TYPE_UPDATE_ROLES = 96001;
  // Ability to assign roles to groups / users.
  // If assigned at a workspace scope, can only assign roles to that workspace
  // scope.
  PERMISSION_TYPE_ASSIGN_ROLES = 6002;
}

// RoleAssignmentSummary is used to describe permissions a user has.
message RoleAssignmentSummary {
  // The id of the role being detailed
  int32 role_id = 1;

  // List of workspace IDs to apply the role.
  repeated int32 scope_workspace_ids = 2;

  // Whether the permission is a global-only permission
  bool is_global = 3;
}

// RoleAssignment contains information about the scope
// of the role.
message RoleAssignment {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "role" ] }
  };
  // The role of the assignment.
  Role role = 1;
  // The id of the workspace the role belongs to.
  // Omit for a global scope.
  google.protobuf.Int32Value scope_workspace_id = 2;
}

// GroupRoleAssignment contains information about the groups
// belonging to a role.
message GroupRoleAssignment {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "group_id", "role_assignment" ] }
  };
  // The group id of the role assignment
  int32 group_id = 1;
  // The role and scope of the assignment.
  RoleAssignment role_assignment = 2;
}

// UserRoleAssignment contains information about the users
// belonging to a role.
message UserRoleAssignment {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "user_id", "role_assignment" ] }
  };
  // the user id of the role assignment
  int32 user_id = 1;
  // the role and scope of the assignment
  RoleAssignment role_assignment = 2;
}

// RoleWithAssignments contains a detailed description of
// a role and the groups and users belonging to it.
message RoleWithAssignments {
  // The embedded Role.
  Role role = 1;
  // The embedded GroupRoleAssignment.
  repeated GroupRoleAssignment group_role_assignments = 2;
  // The embedded UserRoleAssignment.
  repeated UserRoleAssignment user_role_assignments = 3;
}
