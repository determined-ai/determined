syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "determined/api/v1/agent.proto";
import "determined/api/v1/auth.proto";
import "determined/api/v1/checkpoint.proto";
import "determined/api/v1/command.proto";
import "determined/api/v1/experiment.proto";
import "determined/api/v1/group.proto";
import "determined/api/v1/job.proto";
import "determined/api/v1/master.proto";
import "determined/api/v1/model.proto";
import "determined/api/v1/notebook.proto";
import "determined/api/v1/project.proto";
import "determined/api/v1/rbac.proto";
import "determined/api/v1/task.proto";
import "determined/api/v1/template.proto";
import "determined/api/v1/tensorboard.proto";
import "determined/api/v1/trial.proto";
import "determined/api/v1/shell.proto";
import "determined/api/v1/user.proto";
import "determined/api/v1/webhook.proto";
import "determined/api/v1/workspace.proto";
import "determined/api/v1/resourcepool.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Determined API (Beta)"
    description: "Determined helps deep learning teams train models more "
                 "quickly, easily share GPU resources, and effectively "
                 "collaborate. Determined allows deep learning engineers to "
                 "focus on building and training models at scale, without "
                 "needing to worry about DevOps or writing custom code for "
                 "common tasks like fault tolerance or experiment "
                 "tracking.\n\nYou can think of Determined as a platform that "
                 "bridges the gap between tools like TensorFlow and PyTorch "
                 "--- which work great for a single researcher with a single "
                 "GPU --- to the challenges that arise when doing deep "
                 "learning at scale, as teams, clusters, and data sets all "
                 "increase in size."
    version: "0.1"
    contact: {
      name: "Determined AI"
      url: "https://determined.ai/"
      email: "community@determined.ai"
    }
    license: {
      name: "Apache 2.0"
      url: "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  }
  schemes: [ HTTP, HTTPS ]
  external_docs: { description: "Determined AI Documentation" url: "/docs" }
  security_definitions: {
    security: {
      key: "BearerToken"
      value: {
        type: TYPE_API_KEY
        description: "Bearer token authentication strategy"
        name: "Authorization"
        in: IN_HEADER
      }
    }
  }
  security: {
    security_requirement: {
      key: "BearerToken"
      value: {}
    }
  }
};

// Determined is the official v1 of the Determined API.
service Determined {
  // Login the user.
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Authentication"
      security: {}
    };
  }
  // Get the current user.
  rpc CurrentUser(CurrentUserRequest) returns (CurrentUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/auth/user"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Authentication"
    };
  }
  // Logout the user.
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/logout"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Authentication"
    };
  }

  // Get a list of users.
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
    option (google.api.http) = {
      get: "/api/v1/users"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }
  // Get a user's settings for website
  rpc GetUserSetting(GetUserSettingRequest) returns (GetUserSettingResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/setting",
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }
  // Reset a user's settings for website
  rpc ResetUserSetting(ResetUserSettingRequest)
      returns (ResetUserSettingResponse) {
    option (google.api.http) = {
      post: "/api/v1/users/setting/reset",
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }
  // Post a user's settings for website
  rpc PostUserSetting(PostUserSettingRequest)
      returns (PostUserSettingResponse) {
    option (google.api.http) = {
      post: "/api/v1/users/setting",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }
  // Get the requested user.
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{user_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }

  // Get the requested user with username.
  rpc GetUserByUsername(GetUserByUsernameRequest)
      returns (GetUserByUsernameResponse) {
    option (google.api.http) = {
      get: "/api/v1/users/{username}/by-username"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }

  // Get the current user.
  rpc GetMe(GetMeRequest) returns (GetMeResponse) {
    option (google.api.http) = {
      get: "/api/v1/me"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }

  // Create a new user.
  rpc PostUser(PostUserRequest) returns (PostUserResponse) {
    option (google.api.http) = {
      post: "/api/v1/users"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }
  // Set the requested user's password.
  rpc SetUserPassword(SetUserPasswordRequest)
      returns (SetUserPasswordResponse) {
    option (google.api.http) = {
      post: "/api/v1/users/{user_id}/password"
      body: "password"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }
  // Patch a user's fields.
  rpc PatchUser(PatchUserRequest) returns (PatchUserResponse) {
    option (google.api.http) = {
      patch: "/api/v1/users/{user_id}",
      body: "user"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }
  // Get telemetry information.
  rpc GetTelemetry(GetTelemetryRequest) returns (GetTelemetryResponse) {
    option (google.api.http) = {
      get: "/api/v1/master/telemetry"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
      security: {}
    };
  }
  // Get master information.
  rpc GetMaster(GetMasterRequest) returns (GetMasterResponse) {
    option (google.api.http) = {
      get: "/api/v1/master"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
      security: {}
    };
  }
  // Get master config.
  rpc GetMasterConfig(GetMasterConfigRequest)
      returns (GetMasterConfigResponse) {
    option (google.api.http) = {
      get: "/api/v1/master/config"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Patch master config.
  rpc PatchMasterConfig(PatchMasterConfigRequest)
      returns (PatchMasterConfigResponse) {
    option (google.api.http) = {
      patch: "/api/v1/master/config"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Stream master logs.
  rpc MasterLogs(MasterLogsRequest) returns (stream MasterLogsResponse) {
    option (google.api.http) = {
      get: "/api/v1/master/logs"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Get a set of agents from the cluster.
  rpc GetAgents(GetAgentsRequest) returns (GetAgentsResponse) {
    option (google.api.http) = {
      get: "/api/v1/agents"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Get the requested agent.
  rpc GetAgent(GetAgentRequest) returns (GetAgentResponse) {
    option (google.api.http) = {
      get: "/api/v1/agents/{agent_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Get all the slots for an agent.
  rpc GetSlots(GetSlotsRequest) returns (GetSlotsResponse) {
    option (google.api.http) = {
      get: "/api/v1/agents/{agent_id}/slots"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Get the requested slot for an agent.
  rpc GetSlot(GetSlotRequest) returns (GetSlotResponse) {
    option (google.api.http) = {
      get: "/api/v1/agents/{agent_id}/slots/{slot_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Enable the agent.
  rpc EnableAgent(EnableAgentRequest) returns (EnableAgentResponse) {
    option (google.api.http) = {
      post: "/api/v1/agents/{agent_id}/enable"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Disable the agent.
  rpc DisableAgent(DisableAgentRequest) returns (DisableAgentResponse) {
    option (google.api.http) = {
      post: "/api/v1/agents/{agent_id}/disable"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Enable the slot.
  rpc EnableSlot(EnableSlotRequest) returns (EnableSlotResponse) {
    option (google.api.http) = {
      post: "/api/v1/agents/{agent_id}/slots/{slot_id}/enable"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }
  // Disable the slot.
  rpc DisableSlot(DisableSlotRequest) returns (DisableSlotResponse) {
    option (google.api.http) = {
      post: "/api/v1/agents/{agent_id}/slots/{slot_id}/disable"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }

  // Create an experiment.
  rpc CreateExperiment(CreateExperimentRequest)
      returns (CreateExperimentResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Get the requested experiment.
  rpc GetExperiment(GetExperimentRequest) returns (GetExperimentResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Get a list of experiments.
  rpc GetExperiments(GetExperimentsRequest) returns (GetExperimentsResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Get the model definition of an experiment.
  rpc GetModelDef(GetModelDefRequest) returns (GetModelDefResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}/model_def"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Get the model definition file tree of an experiment.
  rpc GetModelDefTree(GetModelDefTreeRequest)
      returns (GetModelDefTreeResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}/file_tree"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Get one file content of model definition of an experiment.
  rpc GetModelDefFile(GetModelDefFileRequest)
      returns (GetModelDefFileResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/{experiment_id}/file"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Get a list of unique experiment labels (sorted by popularity).
  rpc GetExperimentLabels(GetExperimentLabelsRequest)
      returns (GetExperimentLabelsResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiment/labels"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Get the validation history for an experiment.
  rpc GetExperimentValidationHistory(GetExperimentValidationHistoryRequest)
      returns (GetExperimentValidationHistoryResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}/validation-history"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Activate an experiment.
  rpc ActivateExperiment(ActivateExperimentRequest)
      returns (ActivateExperimentResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/{id}/activate"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Activate multiple experiments.
  rpc ActivateExperiments(ActivateExperimentsRequest)
      returns (ActivateExperimentsResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/activate"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Pause an experiment.
  rpc PauseExperiment(PauseExperimentRequest)
      returns (PauseExperimentResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/{id}/pause"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Pause multiple experiments.
  rpc PauseExperiments(PauseExperimentsRequest)
      returns (PauseExperimentsResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/pause"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Cancel an experiment.
  rpc CancelExperiment(CancelExperimentRequest)
      returns (CancelExperimentResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/{id}/cancel"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Cancel multiple experiments.
  rpc CancelExperiments(CancelExperimentsRequest)
      returns (CancelExperimentsResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/cancel"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Kill an experiment.
  rpc KillExperiment(KillExperimentRequest) returns (KillExperimentResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/{id}/kill"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Kill multiple experiments.
  rpc KillExperiments(KillExperimentsRequest)
      returns (KillExperimentsResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/kill"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Archive an experiment.
  rpc ArchiveExperiment(ArchiveExperimentRequest)
      returns (ArchiveExperimentResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/{id}/archive"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Archive multiple experiments.
  rpc ArchiveExperiments(ArchiveExperimentsRequest)
      returns (ArchiveExperimentsResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/archive"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Unarchive an experiment.
  rpc UnarchiveExperiment(UnarchiveExperimentRequest)
      returns (UnarchiveExperimentResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/{id}/unarchive"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Unarchive multiple experiments.
  rpc UnarchiveExperiments(UnarchiveExperimentsRequest)
      returns (UnarchiveExperimentsResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/unarchive"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Patch an experiment's fields.
  rpc PatchExperiment(PatchExperimentRequest)
      returns (PatchExperimentResponse) {
    option (google.api.http) = {
      patch: "/api/v1/experiments/{experiment.id}"
      body: "experiment"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Delete multiple experiments.
  rpc DeleteExperiments(DeleteExperimentsRequest)
      returns (DeleteExperimentsResponse) {
    option (google.api.http) = {
      delete: "/api/v1/experiments/delete"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Delete the requested experiment.
  rpc DeleteExperiment(DeleteExperimentRequest)
      returns (DeleteExperimentResponse) {
    option (google.api.http) = {
      delete: "/api/v1/experiments/{experiment_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Get the best searcher validation for an experiment by the given metric.
  rpc GetBestSearcherValidationMetric(GetBestSearcherValidationMetricRequest)
      returns (GetBestSearcherValidationMetricResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}/searcher/best_searcher_validation_metric"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get a list of checkpoints for an experiment.
  rpc GetExperimentCheckpoints(GetExperimentCheckpointsRequest)
      returns (GetExperimentCheckpointsResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{id}/checkpoints"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }

  // Preview hyperparameter search.
  rpc PreviewHPSearch(PreviewHPSearchRequest)
      returns (PreviewHPSearchResponse) {
    option (google.api.http) = {
      post: "/api/v1/preview-hp-search"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }

  // Get the list of trials for an experiment.
  rpc GetExperimentTrials(GetExperimentTrialsRequest)
      returns (GetExperimentTrialsResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}/trials"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Trials", "Experiments" ]
    };
  }

  // Return a downsampled time series of metrics from multiple trials to compare
  // them side-by-side.
  rpc CompareTrials(CompareTrialsRequest) returns (CompareTrialsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/time-series"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }

  // Reports a TrialSourceInfo entry for tracking inference or fine-tuning runs
  rpc ReportTrialSourceInfo(ReportTrialSourceInfoRequest)
      returns (ReportTrialSourceInfoResponse) {
    option (google.api.http) = {
      post: "/api/v1/trial-source-info"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Internal" ]
    };
  }

  // Create unmanaged trial.
  rpc CreateTrial(CreateTrialRequest) returns (CreateTrialResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Internal" ]
    };
  }

  // Get a single trial.
  rpc GetTrial(GetTrialRequest) returns (GetTrialResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/{trial_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Trials", "Experiments" ]
    };
  }

  // Get the list of workloads for a trial.
  rpc GetTrialWorkloads(GetTrialWorkloadsRequest)
      returns (GetTrialWorkloadsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/{trial_id}/workloads"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Trials", "Internal" ]
    };
  }
  // Stream trial logs.
  rpc TrialLogs(TrialLogsRequest) returns (stream TrialLogsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/{trial_id}/logs"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Experiments", "Trials" ]
    };
    option deprecated = true;
  }
  // Stream trial log fields.
  rpc TrialLogsFields(TrialLogsFieldsRequest)
      returns (stream TrialLogsFieldsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/{trial_id}/logs/fields"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Experiments", "Trials" ]
    };
    option deprecated = true;
  }
  // Set allocation to ready state.
  rpc AllocationReady(AllocationReadyRequest)
      returns (AllocationReadyResponse) {
    option (google.api.http) = {
      post: "/api/v1/allocations/{allocation_id}/ready"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Set allocation to waiting state.
  rpc AllocationWaiting(AllocationWaitingRequest)
      returns (AllocationWaitingResponse) {
    option (google.api.http) = {
      post: "/api/v1/allocations/{allocation_id}/waiting"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Stream task logs.
  rpc TaskLogs(TaskLogsRequest) returns (stream TaskLogsResponse) {
    option (google.api.http) = {
      get: "/api/v1/tasks/{task_id}/logs"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Jobs", "Tasks" ]
    };
  }
  // Stream task log fields.
  rpc TaskLogsFields(TaskLogsFieldsRequest)
      returns (stream TaskLogsFieldsResponse) {
    option (google.api.http) = {
      get: "/api/v1/tasks/{task_id}/logs/fields"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Jobs", "Tasks" ]
    };
  }
  // Stream trial profiler metrics.
  rpc GetTrialProfilerMetrics(GetTrialProfilerMetricsRequest)
      returns (stream GetTrialProfilerMetricsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/{labels.trial_id}/profiler/metrics"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Profiler" ]
    };
  }
  // Stream the available series in a trial's profiler metrics.
  rpc GetTrialProfilerAvailableSeries(GetTrialProfilerAvailableSeriesRequest)
      returns (stream GetTrialProfilerAvailableSeriesResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/{trial_id}/profiler/available_series"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Profiler" ]
    };
  }
  // Persist the given TrialProfilerMetricsBatch. The trial ID is in the labels.
  rpc PostTrialProfilerMetricsBatch(PostTrialProfilerMetricsBatchRequest)
      returns (PostTrialProfilerMetricsBatchResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials/profiler/metrics"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Internal" ]
    };
  }
  // Stream one or more trial's metrics.
  rpc GetMetrics(GetMetricsRequest) returns (stream GetMetricsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/metrics/trial_metrics"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Trials" ]
    };
  }
  // Stream one or more trial's training metrics.
  rpc GetTrainingMetrics(GetTrainingMetricsRequest)
      returns (stream GetTrainingMetricsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/metrics/training_metrics"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Trials" ]
    };
  }
  // Stream one or more trial's validation metrics.
  rpc GetValidationMetrics(GetValidationMetricsRequest)
      returns (stream GetValidationMetricsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/metrics/validation_metrics"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Trials" ]
    };
  }

  // Kill a trial.
  rpc KillTrial(KillTrialRequest) returns (KillTrialResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials/{id}/kill"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Experiments", "Trials" ]
    };
  }

  // Get a list of checkpoints for a trial.
  rpc GetTrialCheckpoints(GetTrialCheckpointsRequest)
      returns (GetTrialCheckpointsResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/{id}/checkpoints"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Long poll preemption signals for the given allocation. If the allocation
  // has been preempted when called, it will return so immediately. Otherwise,
  // the connection will be kept open until the timeout is reached or
  // the allocation is preempted.
  rpc AllocationPreemptionSignal(AllocationPreemptionSignalRequest)
      returns (AllocationPreemptionSignalResponse) {
    option (google.api.http) = {
      get: "/api/v1/allocations/{allocation_id}/signals/preemption"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Report the receipt of a signal to stop the given allocation early.
  // This is used to communicate back from a SLURM job that it has been
  // notified of a pending preememption. Upon a call to this API
  // the RM should then trigger a checkpoint and immediate exit.
  rpc AllocationPendingPreemptionSignal(
      AllocationPendingPreemptionSignalRequest)
      returns (AllocationPendingPreemptionSignalResponse) {
    option (google.api.http) = {
      post: "/api/v1/allocations/{allocation_id}/signals/pending_preemption"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Acknowledge the receipt of a signal to stop the given allocation early.
  // This is used indicate and exit 0 isn't final; specifically, it is used
  // for HP search directed early stops and preemption signals (not necessarily
  // just scheduler preemption).
  rpc AckAllocationPreemptionSignal(AckAllocationPreemptionSignalRequest)
      returns (AckAllocationPreemptionSignalResponse) {
    option (google.api.http) = {
      post: "/api/v1/allocations/{allocation_id}/signals/ack_preemption"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Mark the given reservation (container, pod, etc) within an allocation as
  // a daemon reservation. In the exit of a successful exit, Determined will
  // wait for all resources to exit - unless they are marked as daemon
  // resources, in which case Determined will clean them up regardless of
  // exit status after all non-daemon resources have exited.
  rpc MarkAllocationResourcesDaemon(MarkAllocationResourcesDaemonRequest)
      returns (MarkAllocationResourcesDaemonResponse) {
    option (google.api.http) = {
      post: "/api/v1/allocations/{allocation_id}/resources/{resources_id}/daemon"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Gather an allocation's rendezvous info. Blocks until all trial containers
  // connect to gather their rendezvous information and responds to them all at
  // once.
  rpc AllocationRendezvousInfo(AllocationRendezvousInfoRequest)
      returns (AllocationRendezvousInfoResponse) {
    option (google.api.http) = {
      get: "/api/v1/allocations/{allocation_id}/resources/{resources_id}/rendezvous"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // PostAllocationProxyAddress sets the proxy address to use when proxying to
  // services provided by an allocation. Upon receipt, the master will also
  // register any proxies specified by the task.
  rpc PostAllocationProxyAddress(PostAllocationProxyAddressRequest)
      returns (PostAllocationProxyAddressResponse) {
    option (google.api.http) = {
      post: "/api/v1/allocations/{allocation_id}/proxy_address"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // AllocationAllGather performs an all gather through the master. An
  // allocation can only perform once all gather at a time.
  rpc AllocationAllGather(AllocationAllGatherRequest)
      returns (AllocationAllGatherResponse) {
    option (google.api.http) = {
      post: "/api/v1/allocations/{allocation_id}/all_gather"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // NotifyContainterRunning is used to notify the master that the container
  // is running.  On HPC, the launcher will report a state of "Running" as
  // soon as Slurm starts the job, but the container may be in the process
  // of getting pulled down from the Internet, so the experiment is not
  // really considered to be in a "Running" state until all the containers
  // that are part of the experiment are running and not being pulled.
  rpc NotifyContainerRunning(NotifyContainerRunningRequest)
      returns (NotifyContainerRunningResponse) {
    option (google.api.http) = {
      post: "/api/v1/allocations/{allocation_id}/notify_container_running"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get the current searcher operation.
  rpc GetCurrentTrialSearcherOperation(GetCurrentTrialSearcherOperationRequest)
      returns (GetCurrentTrialSearcherOperationResponse) {
    option (google.api.http) = {
      get: "/api/v1/trials/{trial_id}/searcher/operation"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Reports to the searcher that the trial has completed the given searcher
  // operation.
  rpc CompleteTrialSearcherValidation(CompleteTrialSearcherValidationRequest)
      returns (CompleteTrialSearcherValidationResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials/{trial_id}/searcher/completed_operation"
      body: "completed_operation"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Reports to the searcher that the trial has completed the current
  // requested amount of training with the given searcher validation
  // metric.
  rpc ReportTrialSearcherEarlyExit(ReportTrialSearcherEarlyExitRequest)
      returns (ReportTrialSearcherEarlyExitResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials/{trial_id}/early_exit"
      body: "early_exit"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // For bookkeeping, updates the progress towards to current requested searcher
  // training length.
  rpc ReportTrialProgress(ReportTrialProgressRequest)
      returns (ReportTrialProgressResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials/{trial_id}/progress"
      body: "progress"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // For bookkeeping, update trial runner metadata (currently just state).
  rpc PostTrialRunnerMetadata(PostTrialRunnerMetadataRequest)
      returns (PostTrialRunnerMetadataResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials/{trial_id}/runner/metadata"
      body: "metadata"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Record metrics for specified trial.
  rpc ReportTrialMetrics(ReportTrialMetricsRequest)
      returns (ReportTrialMetricsResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials/{metrics.trial_id}/metrics"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Record training metrics for specified training.
  rpc ReportTrialTrainingMetrics(ReportTrialTrainingMetricsRequest)
      returns (ReportTrialTrainingMetricsResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials/{training_metrics.trial_id}/training_metrics"
      body: "training_metrics"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
    option deprecated = true;
  }
  // Record validation metrics.
  rpc ReportTrialValidationMetrics(ReportTrialValidationMetricsRequest)
      returns (ReportTrialValidationMetricsResponse) {
    option (google.api.http) = {
      post: "/api/v1/trials/{validation_metrics.trial_id}/validation_metrics"
      body: "validation_metrics"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
    option deprecated = true;
  }
  // Record a checkpoint.
  rpc ReportCheckpoint(ReportCheckpointRequest)
      returns (ReportCheckpointResponse) {
    option (google.api.http) = {
      post: "/api/v1/checkpoints"
      body: "checkpoint"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  /* Jobs Queue */

  // Get a list of jobs in queue.
  rpc GetJobs(GetJobsRequest) returns (GetJobsResponse) {
    option (google.api.http) = {
      get: "/api/v1/job-queues"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get a list of jobs in queue.
  rpc GetJobsV2(GetJobsV2Request) returns (GetJobsV2Response) {
    option (google.api.http) = {
      // candidate for moving to /api/v2 service.
      get: "/api/v1/job-queues-v2"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get job queue stats for a resource pool.
  rpc GetJobQueueStats(GetJobQueueStatsRequest)
      returns (GetJobQueueStatsResponse) {
    option (google.api.http) = {
      get: "/api/v1/job-queues/stats"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Control the job queues.
  rpc UpdateJobQueue(UpdateJobQueueRequest) returns (UpdateJobQueueResponse) {
    option (google.api.http) = {
      post: "/api/v1/job-queues"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get a list of templates.
  rpc GetTemplates(GetTemplatesRequest) returns (GetTemplatesResponse) {
    option (google.api.http) = {
      get: "/api/v1/templates"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Templates"
    };
  }
  // Get the requested template.
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse) {
    option (google.api.http) = {
      get: "/api/v1/templates/{template_name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Templates"
    };
  }
  // DEPRECATED: Update or create (upsert) the requested template.
  rpc PutTemplate(PutTemplateRequest) returns (PutTemplateResponse) {
    option (google.api.http) = {
      put: "/api/v1/templates/{template.name}"
      body: "template"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Templates"
    };
    option deprecated = true;
  }

  // Post a new template.
  rpc PostTemplate(PostTemplateRequest) returns (PostTemplateResponse) {
    option (google.api.http) = {
      post: "/api/v1/templates/{template.name}"
      body: "template"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Templates"
    };
  }
  // Patch template config.
  rpc PatchTemplateConfig(PatchTemplateConfigRequest)
      returns (PatchTemplateConfigResponse) {
    option (google.api.http) = {
      patch: "/api/v1/templates/{template_name}"
      body: "config"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Templates"
    };
  }

  // Delete a template.
  rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse) {
    option (google.api.http) = {
      delete: "/api/v1/templates/{template_name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Templates"
    };
  }

  // Get a list of notebooks.
  rpc GetNotebooks(GetNotebooksRequest) returns (GetNotebooksResponse) {
    option (google.api.http) = {
      get: "/api/v1/notebooks"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Notebooks"
    };
  }
  // Get the requested notebook.
  rpc GetNotebook(GetNotebookRequest) returns (GetNotebookResponse) {
    option (google.api.http) = {
      get: "/api/v1/notebooks/{notebook_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Notebooks"
    };
  }
  // Send notebook idle data to master
  rpc IdleNotebook(IdleNotebookRequest) returns (IdleNotebookResponse) {
    option (google.api.http) = {
      put: "/api/v1/notebooks/{notebook_id}/report_idle"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
  // Kill the requested notebook.
  rpc KillNotebook(KillNotebookRequest) returns (KillNotebookResponse) {
    option (google.api.http) = {
      post: "/api/v1/notebooks/{notebook_id}/kill"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Notebooks"
    };
  }
  // Set the priority of the requested notebook.
  rpc SetNotebookPriority(SetNotebookPriorityRequest)
      returns (SetNotebookPriorityResponse) {
    option (google.api.http) = {
      post: "/api/v1/notebooks/{notebook_id}/set_priority"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Notebooks"
    };
  }
  // Launch a notebook.
  rpc LaunchNotebook(LaunchNotebookRequest) returns (LaunchNotebookResponse) {
    option (google.api.http) = {
      post: "/api/v1/notebooks"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Notebooks"
    };
  }

  // Get a list of shells.
  rpc GetShells(GetShellsRequest) returns (GetShellsResponse) {
    option (google.api.http) = {
      get: "/api/v1/shells"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Shells"
    };
  }
  // Get the requested shell.
  rpc GetShell(GetShellRequest) returns (GetShellResponse) {
    option (google.api.http) = {
      get: "/api/v1/shells/{shell_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Shells"
    };
  }
  // Kill the requested shell.
  rpc KillShell(KillShellRequest) returns (KillShellResponse) {
    option (google.api.http) = {
      post: "/api/v1/shells/{shell_id}/kill"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Shells"
    };
  }
  // Set the priority of the requested shell.
  rpc SetShellPriority(SetShellPriorityRequest)
      returns (SetShellPriorityResponse) {
    option (google.api.http) = {
      post: "/api/v1/shells/{shell_id}/set_priority"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Shells"
    };
  }
  // Launch a shell.
  rpc LaunchShell(LaunchShellRequest) returns (LaunchShellResponse) {
    option (google.api.http) = {
      post: "/api/v1/shells"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Shells"
    };
  }

  // Get a list of commands.
  rpc GetCommands(GetCommandsRequest) returns (GetCommandsResponse) {
    option (google.api.http) = {
      get: "/api/v1/commands"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Commands"
    };
  }
  // Get the requested command.
  rpc GetCommand(GetCommandRequest) returns (GetCommandResponse) {
    option (google.api.http) = {
      get: "/api/v1/commands/{command_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Commands"
    };
  }
  // Kill the requested command.
  rpc KillCommand(KillCommandRequest) returns (KillCommandResponse) {
    option (google.api.http) = {
      post: "/api/v1/commands/{command_id}/kill"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Commands"
    };
  }
  // Set the priority of the requested command.
  rpc SetCommandPriority(SetCommandPriorityRequest)
      returns (SetCommandPriorityResponse) {
    option (google.api.http) = {
      post: "/api/v1/commands/{command_id}/set_priority"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Commands"
    };
  }
  // Launch a command.
  rpc LaunchCommand(LaunchCommandRequest) returns (LaunchCommandResponse) {
    option (google.api.http) = {
      post: "/api/v1/commands"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Commands"
    };
  }

  // Get a list of tensorboards.
  rpc GetTensorboards(GetTensorboardsRequest)
      returns (GetTensorboardsResponse) {
    option (google.api.http) = {
      get: "/api/v1/tensorboards"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Tensorboards"
    };
  }
  // Get the requested tensorboard.
  rpc GetTensorboard(GetTensorboardRequest) returns (GetTensorboardResponse) {
    option (google.api.http) = {
      get: "/api/v1/tensorboards/{tensorboard_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Tensorboards"
    };
  }
  // Kill the requested tensorboard.
  rpc KillTensorboard(KillTensorboardRequest)
      returns (KillTensorboardResponse) {
    option (google.api.http) = {
      post: "/api/v1/tensorboards/{tensorboard_id}/kill"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Tensorboards"
    };
  }
  // Set the priority of the requested TensorBoard.
  rpc SetTensorboardPriority(SetTensorboardPriorityRequest)
      returns (SetTensorboardPriorityResponse) {
    option (google.api.http) = {
      post: "/api/v1/tensorboards/{tensorboard_id}/set_priority"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Tensorboards"
    };
  }
  // Launch a tensorboard.
  rpc LaunchTensorboard(LaunchTensorboardRequest)
      returns (LaunchTensorboardResponse) {
    option (google.api.http) = {
      post: "/api/v1/tensorboards"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Tensorboards"
    };
  }

  // Get a count of active tasks.
  rpc GetActiveTasksCount(GetActiveTasksCountRequest)
      returns (GetActiveTasksCountResponse) {
    option (google.api.http) = {
      get: "/api/v1/tasks/count"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Tasks"
    };
  }

  // Check the status of a requested task.
  rpc GetTask(GetTaskRequest) returns (GetTaskResponse) {
    option (google.api.http) = {
      get: "/api/v1/tasks/{task_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Tasks"
    };
  }

  // Get all tasks.
  rpc GetTasks(GetTasksRequest) returns (GetTasksResponse) {
    option (google.api.http) = {
      get: "/api/v1/tasks"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Tasks"
    };
  }

  // Get the requested model.
  rpc GetModel(GetModelRequest) returns (GetModelResponse) {
    option (google.api.http) = {
      get: "/api/v1/models/{model_name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Create a model in the registry.
  rpc PostModel(PostModelRequest) returns (PostModelResponse) {
    option (google.api.http) = {
      post: "/api/v1/models"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Patch a model's fields.
  rpc PatchModel(PatchModelRequest) returns (PatchModelResponse) {
    option (google.api.http) = {
      patch: "/api/v1/models/{model_name}"
      body: "model"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Archive a model
  rpc ArchiveModel(ArchiveModelRequest) returns (ArchiveModelResponse) {
    option (google.api.http) = {
      post: "/api/v1/models/{model_name}/archive"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Unarchive a model
  rpc UnarchiveModel(UnarchiveModelRequest) returns (UnarchiveModelResponse) {
    option (google.api.http) = {
      post: "/api/v1/models/{model_name}/unarchive"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Move a model into a workspace
  rpc MoveModel(MoveModelRequest) returns (MoveModelResponse) {
    option (google.api.http) = {
      post: "/api/v1/models/{model_name}/move",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Delete a model
  rpc DeleteModel(DeleteModelRequest) returns (DeleteModelResponse) {
    option (google.api.http) = {
      delete: "/api/v1/models/{model_name}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Get a list of models.
  rpc GetModels(GetModelsRequest) returns (GetModelsResponse) {
    option (google.api.http) = {
      get: "/api/v1/models"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Get a list of unique model labels (sorted by popularity).
  rpc GetModelLabels(GetModelLabelsRequest) returns (GetModelLabelsResponse) {
    option (google.api.http) = {
      get: "/api/v1/model/labels"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Get the requested model version.
  rpc GetModelVersion(GetModelVersionRequest)
      returns (GetModelVersionResponse) {
    option (google.api.http) = {
      get: "/api/v1/models/{model_name}/versions/{model_version_num}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Get a list of versions for the requested model.
  rpc GetModelVersions(GetModelVersionsRequest)
      returns (GetModelVersionsResponse) {
    option (google.api.http) = {
      get: "/api/v1/models/{model_name}/versions"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }
  // Create a model version.
  rpc PostModelVersion(PostModelVersionRequest)
      returns (PostModelVersionResponse) {
    option (google.api.http) = {
      post: "/api/v1/models/{model_name}/versions"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }

  // Patch a model version's fields.
  rpc PatchModelVersion(PatchModelVersionRequest)
      returns (PatchModelVersionResponse) {
    option (google.api.http) = {
      patch: "/api/v1/models/{model_name}/versions/{model_version_num}"
      body: "model_version"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }

  // Delete a model version
  rpc DeleteModelVersion(DeleteModelVersionRequest)
      returns (DeleteModelVersionResponse) {
    option (google.api.http) = {
      delete: "/api/v1/models/{model_name}/versions/{model_version_num}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Models"
    };
  }

  // Gets the metrics for all trials associated with this model version
  rpc GetTrialSourceInfoMetricsByModelVersion(
      GetTrialSourceInfoMetricsByModelVersionRequest)
      returns (GetTrialSourceInfoMetricsByModelVersionResponse) {
    option (google.api.http) = {
      get: "/api/v1/models/{model_name}/versions/{model_version_num}/trial-source-info-metrics"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Internal" ]
    };
  }

  // Get the requested checkpoint.
  rpc GetCheckpoint(GetCheckpointRequest) returns (GetCheckpointResponse) {
    option (google.api.http) = {
      get: "/api/v1/checkpoints/{checkpoint_uuid}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Checkpoints"
    };
  }

  // Update checkpoint metadata.
  rpc PostCheckpointMetadata(PostCheckpointMetadataRequest)
      returns (PostCheckpointMetadataResponse) {
    option (google.api.http) = {
      post: "/api/v1/checkpoints/{checkpoint.uuid}/metadata"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Checkpoints"
    };
  }

  // Remove files from checkpoints.
  rpc CheckpointsRemoveFiles(CheckpointsRemoveFilesRequest)
      returns (CheckpointsRemoveFilesResponse) {
    option (google.api.http) = {
      post: "/api/v1/checkpoints/rm"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Checkpoints"
    };
  }

  // Update checkpoints. Won't modify checkpoint files.
  rpc PatchCheckpoints(PatchCheckpointsRequest)
      returns (PatchCheckpointsResponse) {
    option (google.api.http) = {
      patch: "/api/v1/checkpoints"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Delete Checkpoints.
  rpc DeleteCheckpoints(DeleteCheckpointsRequest)
      returns (DeleteCheckpointsResponse) {
    option (google.api.http) = {
      delete: "/api/v1/checkpoints"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Checkpoints"
    };
  }

  // Gets the metrics for all trials associated with this checkpoint
  rpc GetTrialMetricsBySourceInfoCheckpoint(
      GetTrialMetricsBySourceInfoCheckpointRequest)
      returns (GetTrialMetricsBySourceInfoCheckpointResponse) {
    option (google.api.http) = {
      get: "/api/v1/checkpoints/{checkpoint_uuid}/trial-source-info-metrics"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Internal" ]
    };
  }

  // Get the list of custom searcher events with long polling.
  rpc GetSearcherEvents(GetSearcherEventsRequest)
      returns (GetSearcherEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}/searcher_events"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }

  // Submit operations to a custom searcher.
  rpc PostSearcherOperations(PostSearcherOperationsRequest)
      returns (PostSearcherOperationsResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/{experiment_id}/searcher_operations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }

  // Get the set of metric names recorded for a list of experiments.
  rpc ExpMetricNames(ExpMetricNamesRequest)
      returns (stream ExpMetricNamesResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/metrics-stream/metric-names"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get the milestones (in batches processed) at which a metric is recorded by
  // an experiment.
  rpc MetricBatches(MetricBatchesRequest)
      returns (stream MetricBatchesResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}/metrics-stream/batches"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get a snapshot of a metric across all trials at a certain point of
  // progress.
  rpc TrialsSnapshot(TrialsSnapshotRequest)
      returns (stream TrialsSnapshotResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}/metrics-stream/trials-snapshot"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get a sample of the metrics over time for a sample of the trials.
  rpc TrialsSample(TrialsSampleRequest) returns (stream TrialsSampleResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments/{experiment_id}/metrics-stream/trials-sample"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get a list of all resource pools from the cluster.
  rpc GetResourcePools(GetResourcePoolsRequest)
      returns (GetResourcePoolsResponse) {
    option (google.api.http) = {
      get: "/api/v1/resource-pools"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Get a detailed view of resource allocation during the given time period.
  rpc ResourceAllocationRaw(ResourceAllocationRawRequest)
      returns (ResourceAllocationRawResponse) {
    option (google.api.http) = {
      get: "/api/v1/resources/allocation/raw"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
    option deprecated = true;
  }

  // Get an aggregated view of resource allocation during the given time period.
  rpc ResourceAllocationAggregated(ResourceAllocationAggregatedRequest)
      returns (ResourceAllocationAggregatedResponse) {
    option (google.api.http) = {
      get: "/api/v1/resources/allocation/aggregated"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Cluster"
    };
  }

  // Get the requested workspace.
  rpc GetWorkspace(GetWorkspaceRequest) returns (GetWorkspaceResponse) {
    option (google.api.http) = {
      get: "/api/v1/workspaces/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }
  // Get projects associated with a workspace.
  rpc GetWorkspaceProjects(GetWorkspaceProjectsRequest)
      returns (GetWorkspaceProjectsResponse) {
    option (google.api.http) = {
      get: "/api/v1/workspaces/{id}/projects"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }
  // Get a list of workspaces.
  rpc GetWorkspaces(GetWorkspacesRequest) returns (GetWorkspacesResponse) {
    option (google.api.http) = {
      get: "/api/v1/workspaces"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }
  // Create a workspace.
  rpc PostWorkspace(PostWorkspaceRequest) returns (PostWorkspaceResponse) {
    option (google.api.http) = {
      post: "/api/v1/workspaces"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }
  // Update a workspace.
  rpc PatchWorkspace(PatchWorkspaceRequest) returns (PatchWorkspaceResponse) {
    option (google.api.http) = {
      patch: "/api/v1/workspaces/{id}"
      body: "workspace"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }
  // Delete a workspace.
  rpc DeleteWorkspace(DeleteWorkspaceRequest)
      returns (DeleteWorkspaceResponse) {
    option (google.api.http) = {
      delete: "/api/v1/workspaces/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }
  // Archive a workspace.
  rpc ArchiveWorkspace(ArchiveWorkspaceRequest)
      returns (ArchiveWorkspaceResponse) {
    option (google.api.http) = {
      post: "/api/v1/workspaces/{id}/archive"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }
  // Unarchive a workspace.
  rpc UnarchiveWorkspace(UnarchiveWorkspaceRequest)
      returns (UnarchiveWorkspaceResponse) {
    option (google.api.http) = {
      post: "/api/v1/workspaces/{id}/unarchive"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }
  // Pin a workspace.
  rpc PinWorkspace(PinWorkspaceRequest) returns (PinWorkspaceResponse) {
    option (google.api.http) = {
      post: "/api/v1/workspaces/{id}/pin"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }
  // Unpin a workspace.
  rpc UnpinWorkspace(UnpinWorkspaceRequest) returns (UnpinWorkspaceResponse) {
    option (google.api.http) = {
      post: "/api/v1/workspaces/{id}/unpin"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Workspaces"
    };
  }

  // Get the requested project.
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }
  // Get a list of columns for experiment list table.
  rpc GetProjectColumns(GetProjectColumnsRequest)
      returns (GetProjectColumnsResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{id}/columns"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Projects", "Internal" ]
    };
  }
  // Get metrics range for a project.
  rpc GetProjectNumericMetricsRange(GetProjectNumericMetricsRangeRequest)
      returns (GetProjectNumericMetricsRangeResponse) {
    option (google.api.http) = {
      get: "/api/v1/projects/{id}/experiments/metric-ranges"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Projects", "Internal" ]
    };
  }

  // Create a project.
  rpc PostProject(PostProjectRequest) returns (PostProjectResponse) {
    option (google.api.http) = {
      post: "/api/v1/workspaces/{workspace_id}/projects"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }
  // Add a note to a project.
  rpc AddProjectNote(AddProjectNoteRequest) returns (AddProjectNoteResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects/{project_id}/notes"
      body: "note"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }
  // Set project notes.
  rpc PutProjectNotes(PutProjectNotesRequest)
      returns (PutProjectNotesResponse) {
    option (google.api.http) = {
      put: "/api/v1/projects/{project_id}/notes"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }
  // Update a project.
  rpc PatchProject(PatchProjectRequest) returns (PatchProjectResponse) {
    option (google.api.http) = {
      patch: "/api/v1/projects/{id}"
      body: "project"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }
  // Delete a project.
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {
      delete: "/api/v1/projects/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }
  // Archive a project.
  rpc ArchiveProject(ArchiveProjectRequest) returns (ArchiveProjectResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects/{id}/archive"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }
  // Unarchive a project.
  rpc UnarchiveProject(UnarchiveProjectRequest)
      returns (UnarchiveProjectResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects/{id}/unarchive"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }
  // Move a project into a workspace.
  rpc MoveProject(MoveProjectRequest) returns (MoveProjectResponse) {
    option (google.api.http) = {
      post: "/api/v1/projects/{project_id}/move"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }
  // Move an experiment into a project.
  rpc MoveExperiment(MoveExperimentRequest) returns (MoveExperimentResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/{experiment_id}/move"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }
  // Move multiple experiments into a project.
  rpc MoveExperiments(MoveExperimentsRequest)
      returns (MoveExperimentsResponse) {
    option (google.api.http) = {
      post: "/api/v1/experiments/move"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Experiments"
    };
  }

  // Get a list of webhooks.
  rpc GetWebhooks(GetWebhooksRequest) returns (GetWebhooksResponse) {
    option (google.api.http) = {
      get: "/api/v1/webhooks"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Webhooks"
    };
  }

  // Create a webhook.
  // TODO(???): Simplify req/response structs?
  rpc PostWebhook(PostWebhookRequest) returns (PostWebhookResponse) {
    option (google.api.http) = {
      post: "/api/v1/webhooks"
      body: "webhook"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Webhooks"
    };
  }

  // Delete a webhook.
  rpc DeleteWebhook(DeleteWebhookRequest) returns (DeleteWebhookResponse) {
    option (google.api.http) = {
      delete: "/api/v1/webhooks/{id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Webhooks"
    };
  }

  // Test a webhook.
  rpc TestWebhook(TestWebhookRequest) returns (TestWebhookResponse) {
    option (google.api.http) = {
      post: "/api/v1/webhooks/{id}/test"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Webhooks"
    };
  }

  // Get a group by id.
  rpc GetGroup(GetGroupRequest) returns (GetGroupResponse) {
    option (google.api.http) = {
      get: "/api/v1/groups/{group_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Search for groups with optional filters.
  rpc GetGroups(GetGroupsRequest) returns (GetGroupsResponse) {
    option (google.api.http) = {
      post: "/api/v1/groups/search"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Create a group with optional members on creation.
  rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse) {
    option (google.api.http) = {
      post: "/api/v1/groups"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Update group info.
  rpc UpdateGroup(UpdateGroupRequest) returns (UpdateGroupResponse) {
    option (google.api.http) = {
      put: "/api/v1/groups/{group_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Remove a group.
  rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
    option (google.api.http) = {
      delete: "/api/v1/groups/{group_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // List all permissions for the logged in user in all scopes.
  rpc GetPermissionsSummary(GetPermissionsSummaryRequest)
      returns (GetPermissionsSummaryResponse) {
    option (google.api.http) = {
      get: "/api/v1/permissions/summary"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "RBAC"
    };
  }

  // Get groups and users assigned to a given workspace with what roles are
  // assigned.
  rpc GetGroupsAndUsersAssignedToWorkspace(
      GetGroupsAndUsersAssignedToWorkspaceRequest)
      returns (GetGroupsAndUsersAssignedToWorkspaceResponse) {
    option (google.api.http) = {
      get: "/api/v1/roles/workspace/{workspace_id}"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "RBAC"
    };
  }

  // Get a set of roles with the corresponding IDs.
  rpc GetRolesByID(GetRolesByIDRequest) returns (GetRolesByIDResponse) {
    option (google.api.http) = {
      post: "/api/v1/roles/search/by-ids"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "RBAC"
    };
  }

  // Get the roles which are assigned to a user.
  rpc GetRolesAssignedToUser(GetRolesAssignedToUserRequest)
      returns (GetRolesAssignedToUserResponse) {
    option (google.api.http) = {
      get: "/api/v1/roles/search/by-user/{user_id}"
    };

    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "RBAC"
    };
  }

  // Get the roles which are assigned to a group.
  rpc GetRolesAssignedToGroup(GetRolesAssignedToGroupRequest)
      returns (GetRolesAssignedToGroupResponse) {
    option (google.api.http) = {
      get: "/api/v1/roles/search/by-group/{group_id}"
    };

    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "RBAC"
    };
  }

  // Search for roles assignable to a given scope.
  rpc SearchRolesAssignableToScope(SearchRolesAssignableToScopeRequest)
      returns (SearchRolesAssignableToScopeResponse) {
    option (google.api.http) = {
      post: "/api/v1/roles/search/by-assignability"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "RBAC"
    };
  }

  // ListRoles returns roles and groups/users granted that role.
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {
      post: "/api/v1/roles/search"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "RBAC"
    };
  }

  // AssignRoles adds a set of role assignments to the system.
  rpc AssignRoles(AssignRolesRequest) returns (AssignRolesResponse) {
    option (google.api.http) = {
      post: "/api/v1/roles/add-assignments"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "RBAC"
    };
  }

  // RemoveAssignments removes a set of role assignments from the system.
  rpc RemoveAssignments(RemoveAssignmentsRequest)
      returns (RemoveAssignmentsResponse) {
    option (google.api.http) = {
      post: "/api/v1/roles/remove-assignments"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "RBAC"
    };
  }

  // Patch a user's activity
  rpc PostUserActivity(PostUserActivityRequest)
      returns (PostUserActivityResponse) {
    option (google.api.http) = {
      post: "/api/v1/users/activity",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Users"
    };
  }

  // Get projects by user activity
  rpc GetProjectsByUserActivity(GetProjectsByUserActivityRequest)
      returns (GetProjectsByUserActivityResponse) {
    option (google.api.http) = {
      get: "/api/v1/user/projects/activity"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Projects"
    };
  }

  // Get experiments with grouping and search syntax
  rpc SearchExperiments(SearchExperimentsRequest)
      returns (SearchExperimentsResponse) {
    option (google.api.http) = {
      get: "/api/v1/experiments-search"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Experiments", "Internal" ]
    };
  }

  // Bind resource pool to workspace
  rpc BindRPToWorkspace(BindRPToWorkspaceRequest)
      returns (BindRPToWorkspaceResponse) {
    option (google.api.http) = {
      post: "/api/v1/resource-pools/{resource_pool_name}/workspace-bindings",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Unbind resource pool to workspace
  rpc UnbindRPFromWorkspace(UnbindRPFromWorkspaceRequest)
      returns (UnbindRPFromWorkspaceResponse) {
    option (google.api.http) = {
      delete: "/api/v1/resource-pools/{resource_pool_name}/workspace-bindings",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // Overwrite resource pool - workspace bindings
  rpc OverwriteRPWorkspaceBindings(OverwriteRPWorkspaceBindingsRequest)
      returns (OverwriteRPWorkspaceBindingsResponse) {
    option (google.api.http) = {
      put: "/api/v1/resource-pools/{resource_pool_name}/workspace-bindings",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }

  // List all resource pools, bound and unbound, available to a specific
  // workspace
  rpc ListRPsBoundToWorkspace(ListRPsBoundToWorkspaceRequest)
      returns (ListRPsBoundToWorkspaceResponse) {
    option (google.api.http) = {
      get: "/api/v1/workspaces/{workspace_id}/available-resource-pools"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: [ "Workspaces", "Internal" ]
    };
  }

  // List all workspaces bound to a specific resource pool
  rpc ListWorkspacesBoundToRP(ListWorkspacesBoundToRPRequest)
      returns (ListWorkspacesBoundToRPResponse) {
    option (google.api.http) = {
      get: "/api/v1/resource-pools/{resource_pool_name}/workspace-bindings"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags: "Internal"
    };
  }
}
