syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

import "determined/common/v1/common.proto";
import "determined/experiment/v1/experiment.proto";
import "determined/experiment/v1/searcher.proto";
import "determined/log/v1/log.proto";
import "determined/trial/v1/trial.proto";
import "determined/api/v1/experiment.proto";
import "determined/api/v1/pagination.proto";
import "determined/checkpoint/v1/checkpoint.proto";
import "protoc-gen-swagger/options/annotations.proto";

// DownsampledMetrics captures a metric's name and downsampled data points.
message DownsampledMetrics {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "data", "type", "group" ] }
  };
  // A possibly down-sampled series of metrics' readings through the progress of
  // the trial.
  repeated DataPoint data = 1;
  // Metric group (training, validation, or unset).
  MetricType type = 3 [deprecated = true];
  // Metric group (training, validation, etc).
  string group = 4;
}

// WorkloadContainer is a wrapper for Determined workloads to allow repeated
// oneof types.
message WorkloadContainer {
  // workload represent one of Determined workloads: training, validation, or
  // checkpoint.
  oneof workload {
    // Training workload.
    determined.trial.v1.MetricsWorkload training = 4;
    // Validation workload.
    determined.trial.v1.MetricsWorkload validation = 5;
    // Checkpoint workload.
    determined.trial.v1.CheckpointWorkload checkpoint = 6;
  }
}

// A filter structure to allow for range filters on arbitrary keys
message ColumnFilter {
  // The name of the field on which the filters is applied.
  string name = 1;
  // The filter to apply to the given column
  determined.common.v1.DoubleFieldFilter filter = 2;
}

// Tag for trials. Implemented in such a way to allow easy
// evolvability into/coexistence with key/values tags
message TrialTag {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "key" ] }
  };
  // The actual tag.
  string key = 1;
}

// Struct to specify a sorting for trials. Used for both determining sort order
// for returned trials, and for filtering trials by their rank according to
// sorter
message TrialSorter {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "namespace", "field" ] }
  };
  // Namespace for the sort field. corresponds to the different ways
  // to access in the db
  enum Namespace {
    // Namespace for columns in the trials table
    NAMESPACE_UNSPECIFIED = 0;
    // Namespace corrspondings to trials->hparams
    NAMESPACE_HPARAMS = 1;
    // Namespace corrspondings to steps->avg_metrics
    NAMESPACE_TRAINING_METRICS = 2;
    // Namespace corrspondings to validations->validation_metrics
    NAMESPACE_VALIDATION_METRICS = 3;
  }
  // The namespace for the sort field.
  Namespace namespace = 1;
  // The name of the sort field.
  string field = 2;
  // The ordering for the sort.
  OrderBy order_by = 3;
}

// Stream trial logs.
message TrialLogsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id" ] }
  };
  // The id of the trial.
  int32 trial_id = 1;
  // Limit the number of trial logs. A value of 0 denotes no limit.
  int32 limit = 4;
  // Continue following logs until the trial stops.
  bool follow = 5;
  // Limit the trial logs to a subset of agents.
  repeated string agent_ids = 6;
  // Limit the trial logs to a subset of containers.
  repeated string container_ids = 7;
  // Limit the trial logs to a subset of ranks.
  repeated int32 rank_ids = 8;
  // Limit the trial logs to a subset of agents.
  repeated determined.log.v1.LogLevel levels = 9;
  // Limit the trial logs to a subset of output streams.
  repeated string stdtypes = 10;
  // Limit the trial logs to a subset of sources.
  repeated string sources = 11;
  // Limit the trial logs to ones with a timestamp before a given time.
  google.protobuf.Timestamp timestamp_before = 12;
  // Limit the trial logs to ones with a timestamp after a given time.
  google.protobuf.Timestamp timestamp_after = 13;
  // Order logs in either ascending or descending order by timestamp.
  OrderBy order_by = 14;
  // Search the logs by whether the text contains a substring.
  string search_text = 15;
}

// Response to TrialLogsRequest.
message TrialLogsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "id", "level", "message", "timestamp", "trial_id" ]
    }
  };
  // The ID of the trial log.
  string id = 1;
  // The timestamp of the log.
  google.protobuf.Timestamp timestamp = 2;
  // The flat version of the log that UIs have shown historically.
  string message = 3 [deprecated = true];
  // The level of the log.
  determined.log.v1.LogLevel level = 4;
  // The ID of the trial associated with this log entry.
  int32 trial_id = 5;
  // The ID of the agent that logged this.
  optional string agent_id = 6;
  // The ID of the container or, in the case of k8s, the pod name.
  optional string container_id = 7;
  // The rank ID.
  optional int32 rank_id = 8;
  // The text of the log entry.
  optional string log = 9;
  // The source of the log entry.
  optional string source = 10;
  // The output stream (e.g. stdout, stderr).
  optional string stdtype = 11;
}

// Stream distinct trial log fields.
message TrialLogsFieldsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id" ] }
  };
  // The ID of the trial.
  int32 trial_id = 1;
  // Continue following fields until the trial stops.
  bool follow = 2;
}

// Response to TrialLogFieldsRequest.
message TrialLogsFieldsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "id", "message" ] }
  };
  // The distinct agent IDs present in the logs.
  repeated string agent_ids = 1;
  // The distinct container IDs present in the logs.
  repeated string container_ids = 2;
  // The distinct rank IDs present in the logs.
  repeated int32 rank_ids = 3;
  // The distinct stdtypes present in the logs.
  repeated string stdtypes = 4;
  // The distinct sources present in the logs.
  repeated string sources = 5;
}

// Get a list of checkpoints for a trial.
message GetTrialCheckpointsRequest {
  // Sorts checkpoints by the given field.
  enum SortBy {
    // Returns checkpoints in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns checkpoints sorted by UUID.
    SORT_BY_UUID = 1;
    // Returns checkpoints sorted by batch number.
    SORT_BY_BATCH_NUMBER = 2;
    // Returns checkpoints sorted by end time.
    SORT_BY_END_TIME = 3;
    // Returns checkpoints sorted by state.
    SORT_BY_STATE = 4;
  }
  // The trial id.
  int32 id = 1;
  // Sort checkpoints by the given field.
  SortBy sort_by = 2;
  // Order checkpoints in either ascending or descending order.
  OrderBy order_by = 3;
  // Skip the number of checkpoints before returning results. Negative values
  // denote number of checkpoints to skip from the end before returning results.
  int32 offset = 4;
  // Limit the number of checkpoints. A value of 0 denotes no limit.
  int32 limit = 5;
  // Limit the checkpoints to those that match the states.
  repeated determined.checkpoint.v1.State states = 7;
}

// Response to GetTrialCheckpointsRequest.
message GetTrialCheckpointsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "checkpoints", "pagination" ] }
  };
  // The list of returned checkpoints.
  repeated determined.checkpoint.v1.Checkpoint checkpoints = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Kill an trial.
message KillTrialRequest {
  // The trial id
  int32 id = 1;
}
// Response to KillTrialRequest.
message KillTrialResponse {}

// Get the list of trials for an experiment.
message GetExperimentTrialsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment_id" ] }
  };
  // Sorts trials by the given field.
  enum SortBy {
    // Returns trials in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns trials sorted by id.
    SORT_BY_ID = 1;
    // Return trials sorted by start time.
    SORT_BY_START_TIME = 4;
    // Return trials sorted by end time. Trials without end times are
    // returned after trials that are.
    SORT_BY_END_TIME = 5;
    // Return trials sorted by state.
    SORT_BY_STATE = 6;
    // Return the trials sorted by the best metric so far, where the metric is
    // specified by `searcher.metric` in the experiment configuration.
    SORT_BY_BEST_VALIDATION_METRIC = 7;
    // Return the trials sorted by the latest metric so far, where the metric is
    // specified by `searcher.metric` in the experiment configuration.
    SORT_BY_LATEST_VALIDATION_METRIC = 8;
    // Return the trials sorted by the number of batches completed.
    SORT_BY_BATCHES_PROCESSED = 9;
    // Return the trials sorted by the total duration.
    SORT_BY_DURATION = 10;
    // Return the trials sorted by the number of restarts.
    SORT_BY_RESTARTS = 11;
    // Return the trials sorted by checkpoint size.
    SORT_BY_CHECKPOINT_SIZE = 12;
  }
  // Sort trials by the given field.
  SortBy sort_by = 1;
  // Order trials in either ascending or descending order.
  OrderBy order_by = 2;
  // Skip the number of trials before returning results. Negative values
  // denote number of trials to skip from the end before returning results.
  int32 offset = 3;
  // Limit the number of trials. A value of 0 denotes no limit.
  int32 limit = 4;
  // Limit trials to those that match the provided state.
  repeated determined.experiment.v1.State states = 5;
  // Limit trials to those that are owned by the specified experiments.
  int32 experiment_id = 6;
}
// Response to GetExperimentTrialsRequest.
message GetExperimentTrialsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trials", "pagination" ] }
  };
  // The list of returned trials.
  repeated determined.trial.v1.Trial trials = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Get trial details.
message GetTrialRequest {
  // The requested trial's id.
  int32 trial_id = 1;
}
// Response to GetTrialRequest.
message GetTrialResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial" ] }
  };
  // The requested trial.
  determined.trial.v1.Trial trial = 1;
}

// Get the list of workloads for a trial.
message GetTrialWorkloadsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id" ] }
  };

  // Filter workloads with training, validation, and checkpoint information.
  enum FilterOption {
    // Any workload.
    FILTER_OPTION_UNSPECIFIED = 0;
    // Only workloads with an associated checkpoint.
    FILTER_OPTION_CHECKPOINT = 1;
    // Only validation workloads.
    FILTER_OPTION_VALIDATION = 2;
    // Only validation workloads or ones with an associated checkpoint.
    FILTER_OPTION_CHECKPOINT_OR_VALIDATION = 3;
  }

  // Order workloads in either ascending or descending order.
  OrderBy order_by = 1;
  // Skip the number of workloads before returning results. Negative values
  // denote number of workloads to skip from the end before returning results.
  int32 offset = 2;
  // Limit the number of workloads. A value of 0 denotes no limit.
  int32 limit = 3;
  // Limit workloads to those that are owned by the specified trial.
  int32 trial_id = 4;
  // Sort workloads by batches, a training metric, or a validation metric.
  string sort_key = 5;
  // Filter workloads with validation and/or checkpoint information.
  FilterOption filter = 6;
  // Include per-batch metrics.
  bool include_batch_metrics = 7;
  // When sorting workloads by sort_key, specify training or validation form of
  // a metric.
  MetricType metric_type = 8 [deprecated = true];
  // Metric group (training, validation, etc).
  string group = 9;
  // Remove deleted checkpoints.
  bool remove_deleted_checkpoints = 10;
}
// Response to GetTrialWorkloadsRequest.
message GetTrialWorkloadsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "workloads", "pagination" ] }
  };
  // The list of returned workloads.
  repeated WorkloadContainer workloads = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Stream trial profiler metrics.
message GetTrialProfilerMetricsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "labels" ] }
  };
  // The labels for the series requested.
  determined.trial.v1.TrialProfilerMetricLabels labels = 1;
  // Continue streaming metrics until the trial stops. Defaults to False.
  bool follow = 2;
}
// Response to TrialProfilerMetricsResponse
message GetTrialProfilerMetricsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "batch" ] }
  };
  // A batch matching the series requested.
  determined.trial.v1.TrialProfilerMetricsBatch batch = 1;
}

// Stream distinct available profiler metric label sets.
message GetTrialProfilerAvailableSeriesRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id" ] }
  };
  // The requested trial's id.
  int32 trial_id = 1;
  // Continue streaming labels until the trial stops. Defaults to False.
  bool follow = 2;
}
// Response to TrialProfilerAvailableSeriesRequest.
message GetTrialProfilerAvailableSeriesResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "labels" ] }
  };
  // The labels for the series.
  repeated determined.trial.v1.TrialProfilerMetricLabels labels = 1;
}

// Create a batch of trial profiler metrics.
message PostTrialProfilerMetricsBatchRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "batch" ] }
  };
  // The batches to create.
  repeated determined.trial.v1.TrialProfilerMetricsBatch batches = 1;
}
// Response to PostTrialProfilerMetricsBatchRequest
message PostTrialProfilerMetricsBatchResponse {}

// Container for a requested trial and its metrics.
message ComparableTrial {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "metrics", "trial" ] }
  };

  // The requested trial.
  determined.trial.v1.Trial trial = 1;
  // The downsampled datapoints.
  repeated DownsampledMetrics metrics = 2;
}

// Get time-series downsampled metrics from multiple trials.
message CompareTrialsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "max_datapoints", "trial_ids" ] }
  };
  // The requested trial ids.
  repeated int32 trial_ids = 1;
  // The maximum number of data points to return after downsampling.
  int32 max_datapoints = 2;
  // The names of selected metrics.
  repeated string metric_names = 3;
  // Sample from metrics after this batch number.
  int32 start_batches = 4;
  // Sample from metrics before this batch number.
  int32 end_batches = 5;
  // Metric group.
  MetricType metric_type = 6 [deprecated = true];
  // Metric group (training, validation, etc).
  string group = 11;
  // metric ids for the query. must be in the form group.metric_name.
  repeated string metric_ids = 9;
  // The metric and range filter for a time series
  determined.common.v1.PolymorphicFilter time_series_filter = 10;
}

// Response to CompareTrialsRequest.
message CompareTrialsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trials" ] }
  };
  // A list of objects containing trial and metrics information.
  repeated ComparableTrial trials = 1;
}

// Long poll for updates to the preemption status for an allocation.
message AllocationPreemptionSignalRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "allocation_id" ] }
  };
  // The id of the allocation.
  string allocation_id = 1;
  // The timeout in seconds.
  int32 timeout_seconds = 2;
}
// Response to AllocationPreemptionSignalRequest.
message AllocationPreemptionSignalResponse {
  // True if signaling preempt, otherwise just a synchronization marker.
  bool preempt = 1;
}
// Acknowledge the receipt of some stop signal.
message AckAllocationPreemptionSignalRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "allocation_id" ] }
  };
  // The allocation that is acknowledging the request.
  string allocation_id = 1;
}
// Allocation has been notified of a pending preemption
message AllocationPendingPreemptionSignalRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "allocation_id" ] }
  };
  // The id of the allocation.
  string allocation_id = 1;
}

// Response to AllocationPendingPreemptionSignalRequest
message AllocationPendingPreemptionSignalResponse {}

// Response to AckAllocationPreemptionSignalRequest.
message AckAllocationPreemptionSignalResponse {}

// Mark some reservation as a daemon.
message MarkAllocationResourcesDaemonRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "allocation_id", "container_id" ] }
  };
  // The id of the allocation.
  string allocation_id = 1;
  // The id of the clump of resources to mark as daemon.
  string resources_id = 2;
}
// Response to MarkAllocationResourcesDaemonRequest.
message MarkAllocationResourcesDaemonResponse {}

// Gathers the rendezvous info for an allocation.
message AllocationRendezvousInfoRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "allocation_id", "resources_id" ] }
  };
  // The id of the allocation.
  string allocation_id = 1;
  // The id of the clump of resources.
  string resources_id = 2;
}
// Response to AllocationRendezvousInfoRequest
message AllocationRendezvousInfoResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "rendezvous_info" ] }
  };
  // The rendezvous information.
  determined.trial.v1.RendezvousInfo rendezvous_info = 1;
}

// Set the proxy address for some allocation.
message PostAllocationProxyAddressRequest {
  // The id of the allocation.
  string allocation_id = 1;
  // The address of the host where the service is, w.r.t. the master.
  string proxy_address = 2;
}
// Response to PostAllocationProxyAddressRequest
message PostAllocationProxyAddressResponse {}

// Arguments to an all gather.
message AllocationAllGatherRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "allocation_id", "global_recv_count", "data" ] }
  };
  // The ID of the allocation.
  string allocation_id = 1;
  // The UUID of the participant in an all gather.
  string request_uuid = 2;
  // The number of process to wait for.
  int32 num_peers = 3;
  // The data from this process.
  google.protobuf.Struct data = 4;
}
// Response to AllocationAllGatherResponse
message AllocationAllGatherResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "data" ] }
  };
  // The data for all the processes.
  repeated google.protobuf.Struct data = 1;
}

// Arguments to a notify container running.
message NotifyContainerRunningRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "allocation_id", "global_recv_count", "data" ] }
  };
  // The ID of the allocation.
  string allocation_id = 1;
  // The UUID of the participant in a notify container running message.
  string request_uuid = 2;
  // The number of process to wait for.
  int32 num_peers = 3;
  // The container's rank.
  int32 rank = 4;
  // The name of the node who sent the request
  string node_name = 5;
  // The data from this process.
  google.protobuf.Struct data = 6;
}
// Response to NotifyContainerRunningResponse
message NotifyContainerRunningResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "data" ] }
  };
  // The data for all the processes.
  repeated google.protobuf.Struct data = 1;
}

// Retrieves the current searcher operation.
message GetCurrentTrialSearcherOperationRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id" ] }
  };
  // The id of the trial.
  int32 trial_id = 1;
}
// Response to GetCurrentTrialSearcherOperationRequest
message GetCurrentTrialSearcherOperationResponse {
  // The current searcher operation.
  determined.experiment.v1.TrialOperation op = 1;
  // The status of the searcher operation.
  bool completed = 2;
}

// Reports to the searcher that the trial has completed the current requested
// amount of training.
message CompleteTrialSearcherValidationRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id", "searcher_metric" ] }
  };
  // The id of the trial.
  int32 trial_id = 1;
  // The completed operation.
  determined.experiment.v1.CompleteValidateAfterOperation completed_operation =
      2;
}
// Response to CompleteTrialSearcherValidationRequest
message CompleteTrialSearcherValidationResponse {}

// Report a voluntary, permanent early exit to the searcher.
message ReportTrialSearcherEarlyExitRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id", "reason" ] }
  };
  // The id of the trial.
  int32 trial_id = 1;
  // The exit reason.
  determined.trial.v1.TrialEarlyExit early_exit = 2;
}
// Response to ReportTrialSearcherEarlyExitRequest
message ReportTrialSearcherEarlyExitResponse {}

// For bookkeeping, updates the progress of the trial as a percent torwards
// the training length requested of it by the searcher.
message ReportTrialProgressRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id", "progress" ] }
  };
  // The id of the trial.
  int32 trial_id = 1;
  // Total units completed by the trial, in terms of the unit used to configure
  // the searcher.
  double progress = 2;
}
// Response to ReportTrialProgressRequest
message ReportTrialProgressResponse {}

// Persist the given metrics for the trial.
message ReportTrialMetricsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "metrics", "group" ] }
  };
  // The metrics to persist.
  determined.trial.v1.TrialMetrics metrics = 1;
  // The type of metrics to persist eg 'training', 'validation', etc.
  string group = 2;
}
// Response to ReportTrialMetricsRequest
message ReportTrialMetricsResponse {}

// Persist the given training metrics for the trial.
message ReportTrialTrainingMetricsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "training_metrics" ] }
  };
  // The training metrics to persist.
  determined.trial.v1.TrialMetrics training_metrics = 1;
}
// Response to ReportTrialTrainingMetricsRequest
message ReportTrialTrainingMetricsResponse {}

// Persist the given validation metrics for the trial.
message ReportTrialValidationMetricsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "validation_metrics" ] }
  };
  // The training metrics to persist.
  determined.trial.v1.TrialMetrics validation_metrics = 1;
}
// Response to ReportTrialValidationMetricsRequest
message ReportTrialValidationMetricsResponse {}

// Partially update the trial metadata.
message PostTrialRunnerMetadataRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id", "metadata" ] }
  };
  // The id of the trial.
  int32 trial_id = 1;
  // The state for the trial runner.
  determined.trial.v1.TrialRunnerMetadata metadata = 2;
}
// Response to PatchTrialMetadataRequest
message PostTrialRunnerMetadataResponse {}

// Stream training metrics.
message GetMetricsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_ids", "group" ] }
  };
  // Trial IDs to get metrics for.
  repeated int32 trial_ids = 1
      [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required:
          ["trial_ids"];
      }];
  // The group of metrics to get eg 'training', 'validation', etc.
  string group = 2
      [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required:
          ["group"];
      }];
}
// Response to GetMetricsRequest.
message GetMetricsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "metrics" ] }
  };
  // Metric response.
  repeated determined.trial.v1.MetricsReport metrics = 1;
}

// Stream training metrics.
message GetTrainingMetricsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_ids" ] }
  };
  // Trial IDs to get metrics for.
  repeated int32 trial_ids = 1;
}
// Response to GetTrainingMetricsRequest.
message GetTrainingMetricsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "metrics" ] }
  };
  // Metric response.
  repeated determined.trial.v1.MetricsReport metrics = 1;
}

// Stream validation metrics.
message GetValidationMetricsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_ids" ] }
  };
  // Trial IDs to get metrics for.
  repeated int32 trial_ids = 1;
}
// Response to GetTrainingMetricsRequest.
message GetValidationMetricsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "metrics" ] }
  };
  // Metric response.
  repeated determined.trial.v1.MetricsReport metrics = 1;
}

// Create a trial.
message CreateTrialRequest {
  // The id of the parent experiment.
  int32 experiment_id = 2;
  // Trial hyperparameters.
  google.protobuf.Struct hparams = 6;
  // Currently only unmanaged trials are supported, must be true.
  bool unmanaged = 40;
}

// Response to CreateTrialRequest.
message CreateTrialResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial" ] }
  };
  // The requested trial.
  determined.trial.v1.Trial trial = 1;
}

// Create a TrialSourceInfo
message ReportTrialSourceInfoRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_source_info" ] }
  };
  // Type of the TrialSourceInfo
  determined.trial.v1.TrialSourceInfo trial_source_info = 1;
}

// Response to making a TrialSourceInfo
message ReportTrialSourceInfoResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id", "checkpoint_uuid" ] }
  };
  // Trial ID of the created
  int32 trial_id = 1;
  // UUID of the checkpoint.
  string checkpoint_uuid = 2;
}
