syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "determined/api/v1/pagination.proto";
import "determined/checkpoint/v1/checkpoint.proto";

// Stream Trial logs.
message TrialLogsRequest {
    // The id of the trial.
    int32 trial_id = 1;
    // Skip the number of trial logs before returning results. Negative values
    // denote number of trial logs to skip from the end before returning results.
    int32 offset = 3;
    // Limit the number of trial logs. A value of 0 denotes no limit.
    int32 limit = 4;
    // Continue following logs until the trial stops or the limit is reached.
    bool follow = 5;
}
// Response to TrialLogsRequest.
message TrialLogsResponse {
    // The id of the trial log.
    int32 id = 1;
    // The log message.
    string message = 2;
}

// Get a list of checkpoints for a trial.
message GetTrialCheckpointsRequest {
    // Sorts checkpoints by the given field.
    enum SortBy {
        // Returns checkpoints in an unsorted list.
        SORT_BY_UNSPECIFIED = 0;
        // Returns checkpoints sorted by UUID.
        SORT_BY_UUID = 1;
        // Returns checkpoints sorted by batch number.
        SORT_BY_BATCH_NUMBER = 6;
        // Returns checkpoints sorted by start time.
        SORT_BY_START_TIME = 7;
        // Returns checkpoints sorted by end time.
        SORT_BY_END_TIME = 8;
        // Returns checkpoints sorted by validation state.
        SORT_BY_VALIDATION_STATE = 15;
        // Returns checkpoints sorted by state.
        SORT_BY_STATE = 16;
    }
    // The trial id.
    int32 id = 1;
    // Sort checkpoints by the given field
    SortBy sort_by = 2;
    // Order checkpoints in either ascending or descending order.
    OrderBy order_by = 3;
    // Skip the number of checkpoints before returning results. Negative values
    // denote number of checkpoints to skip from the end before returning results.
    int32 offset = 4;
    // Limit the number of checkpoints. A value of 0 denotes no limit.
    int32 limit = 5;

    // Limit the checkpoints to those that match the validation states.
    repeated determined.checkpoint.v1.State validation_states = 6;
    // Limit the checkpoints to those that match the states.
    repeated determined.checkpoint.v1.State states = 7;
}

// Response to GetTrialCheckpointsRequest.
message GetTrialCheckpointsResponse {
    // The list of returned checkpoints.
    repeated determined.checkpoint.v1.Checkpoint checkpoints = 1;
    // Pagination information of the full dataset.
    Pagination pagination = 2;
}
