syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "google/protobuf/struct.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Request to prepare to start reporting to a run.
message RunPrepareForReportingRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "run_id" ] }
  };
  // RunID to sync to.
  int32 run_id = 1;
  // Checkpoint storage config.
  optional google.protobuf.Struct checkpoint_storage = 2;
}
// Response to prepare to start reporting to a run.
message RunPrepareForReportingResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [] }
  };
  // The storage_id to be used when creating new checkpoints. This will be
  // returned always when checkpoint storage is set in the request.
  optional int32 storage_id = 1;
}

// Message for results of individual runs in a multi-run action.
message RunActionResult {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "error", "id" ] }
  };
  // Optional error message.
  string error = 1;
  // run ID.
  int32 id = 2;
}

// Request to move the run to a different project
message MoveRunsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "destination_project_id", "run_ids" ] }
  };

  // The ids of the runs being moved.
  repeated int32 run_ids = 1;
  // The id of the current parent project.
  int32 source_project_id = 2;
  // The id of the new parent project.
  int32 destination_project_id = 3;
  // Filter expression
  optional string filter = 4;
}

message MoveRunsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each experiment.
  repeated RunActionResult results = 1;
}
