syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "google/protobuf/struct.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "determined/api/v1/pagination.proto";
import "determined/run/v1/run.proto";

// Request to prepare to start reporting to a run.
message RunPrepareForReportingRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "run_id" ] }
  };
  // RunID to sync to.
  int32 run_id = 1;
  // Checkpoint storage config.
  optional google.protobuf.Struct checkpoint_storage = 2;
}
// Response to prepare to start reporting to a run.
message RunPrepareForReportingResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [] }
  };
  // The storage_id to be used when creating new checkpoints. This will be
  // returned always when checkpoint storage is set in the request.
  optional int32 storage_id = 1;
}

// Get a list of runs.
message SearchRunsRequest {
  // ID of the project to look at
  optional int32 project_id = 1;
  // How many experiments to skip before including in the results
  int32 offset = 2;
  // How many results to show
  int32 limit = 3;
  // Sort parameters in the format <col1>=(asc|desc),<col2>=(asc|desc)
  optional string sort = 4;
  // Filter expression
  optional string filter = 5;
}
// Response to SearchRunsResponse.
message SearchRunsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "runs", "pagination" ] }
  };
  // The list of returned runs.
  repeated determined.run.v1.FlatRun runs = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Message for results of individual runs in a multi-run action.
message RunActionResult {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "error", "id" ] }
  };
  // Optional error message.
  string error = 1;
  // run ID.
  int32 id = 2;
}

// Request to move the run to a different project.
message MoveRunsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "source_project_id", "destination_project_id", "run_ids" ]
    }
  };

  // The ids of the runs being moved.
  repeated int32 run_ids = 1;
  // The id of the current parent project.
  int32 source_project_id = 2;
  // The id of the new parent project.
  int32 destination_project_id = 3;
  // Filter expression
  optional string filter = 4;
  // If true, skip multi-trial experiments for move.
  bool skip_multitrial = 5;
}

// Response to MoveRunsRequest.
message MoveRunsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each run.
  repeated RunActionResult results = 1;
}

// Kill runs.
message KillRunsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "run_ids", "source_project_id" ] }
  };
  // The ids of the runs being killed.
  repeated int32 run_ids = 1;
  // Project id of the runs being killed.
  int32 project_id = 2;
  // Filter expression
  optional string filter = 3;
}
// Response to KillRunsResponse.
message KillRunsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };
  // Details on success or error for each run.
  repeated RunActionResult results = 1;
}

// Delete runs.
message DeleteRunsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "run_ids" ] }
  };
  // The ids of the runs being deleted.
  repeated int32 run_ids = 1;
  // Project id of the runs being deleted.
  int32 project_id = 2;
  // Filter expression
  optional string filter = 3;
}
// Response to DeleteRunsResponse.
message DeleteRunsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };
  // Details on success or error for each run.
  repeated RunActionResult results = 1;
}
