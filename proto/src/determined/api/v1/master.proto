syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "determined/log/v1/log.proto";
import "determined/master/v1/master.proto";

// Describe one SSO provider.
message SSOProvider {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "name", "sso_url" ] }
  };
  // A descriptive name for this provider.
  string name = 1;
  // The URL to use for SSO with this provider.
  string sso_url = 2;
}

// Get master information.
message GetMasterRequest {}
// Response to GetMasterRequest.
message GetMasterResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "version", "master_id", "cluster_id", "cluster_name" ]
    }
  };
  // Different kinds of Determined Cloud offerings
  enum Product {
    // Not a Cloud Community offering
    PRODUCT_UNSPECIFIED = 0;
    // Determined Cloud, Community Edition
    PRODUCT_COMMUNITY = 1;
  }
  // The current version of the master.
  string version = 1;
  // The current instance id of the master.
  string master_id = 2;
  // The global cluster id of the master.
  string cluster_id = 3;
  // The cluster name.
  string cluster_name = 4;
  // Telemetry status.
  bool telemetry_enabled = 5;
  // SSO providers.
  repeated SSOProvider sso_providers = 6;
  // Redirect for starting internal sessions..
  string external_login_uri = 7;
  // Redirect for ending external sessions.
  string external_logout_uri = 8;
  // Branding style to use on front-end.
  string branding = 9;
  // Feature flag for RBAC and user groups.
  bool rbac_enabled = 10;
  // What kind of product offering the cluster is part of, if any
  Product product = 11;
  // List of features that is on.
  repeated string feature_switches = 12;
  // Feature flag for user management.
  bool user_management_enabled = 13;
}

// Get telemetry information.
message GetTelemetryRequest {}
// Response to GetTelemetryRequest.
message GetTelemetryResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "enabled" ] }
  };
  // Whether telemetry is enabled or not.
  bool enabled = 1;
  // The key used for analytics in the UI.
  string segment_key = 2;
}

// Get master config.
message GetMasterConfigRequest {}
// Response to GetMasterRequest.
message GetMasterConfigResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "config" ] }
  };
  // The config file loaded by the master.
  google.protobuf.Struct config = 1;
}

// Stream master logs.
message MasterLogsRequest {
  // Skip the number of master logs before returning results. Negative values
  // denote number of master logs to skip from the end before returning results.
  int32 offset = 3;
  // Limit the number of master logs. A value of 0 denotes no limit.
  int32 limit = 4;
  // Continue following logs until the master stops or the limit is reached.
  bool follow = 5;
}
// Response to MasterLogsRequest.
message MasterLogsResponse {
  // The log entry.
  determined.log.v1.LogEntry log_entry = 1;
}

// Get a detailed view of resource allocation during the given time period.
message ResourceAllocationRawRequest {
  // The start of the period to consider.
  google.protobuf.Timestamp timestamp_after = 1;
  // The end of the period to consider.
  google.protobuf.Timestamp timestamp_before = 2;
}
// Response to ResourceAllocationRawRequest.
message ResourceAllocationRawResponse {
  // An entry summarizing one workload.
  repeated determined.master.v1.ResourceAllocationRawEntry resource_entries = 1;
}

// Get an aggregated view of resource allocation during the given time period.
message ResourceAllocationAggregatedRequest {
  // The first day to consider (the exact time is midnight UTC at the beginning
  // of the day).
  string start_date = 1;
  // The last day to consider (the exact time is midnight UTC at the end of the
  // day).
  string end_date = 2;
  // The period over which to perform aggregation.
  determined.master.v1.ResourceAllocationAggregationPeriod period = 3;
}
// Response to ResourceAllocationAggregatedRequest.
message ResourceAllocationAggregatedResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "resourceEntries" ] }
  };

  // An entry summarizing one workload.
  repeated determined.master.v1.ResourceAllocationAggregatedEntry
      resource_entries = 1;
}
