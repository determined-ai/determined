syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";

import "determined/api/v1/pagination.proto";
import "determined/checkpoint/v1/checkpoint.proto";
import "determined/experiment/v1/experiment.proto";
import "determined/util/v1/util.proto";
import "determined/experiment/v1/searcher.proto";

// Get a single experiment.
message GetExperimentRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
}
// Response to GetExperimentRequest.
message GetExperimentResponse {
  // The requested experiment.
  determined.experiment.v1.Experiment experiment = 1;
  // The experiment config.
  google.protobuf.Struct config = 2;
}

// Get a list of experiments.
message GetExperimentsRequest {
  // Sorts experiments by the given field.
  enum SortBy {
    // Returns experiments in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns experiments sorted by id.
    SORT_BY_ID = 1;
    // Returns experiments sorted by description.
    SORT_BY_DESCRIPTION = 2;
    // Return experiments sorted by start time.
    SORT_BY_START_TIME = 4;
    // Return experiments sorted by end time. Experiments without end_time are
    // returned after the ones with end_time.
    SORT_BY_END_TIME = 5;
    // Return experiments sorted by state.
    SORT_BY_STATE = 6;
    // Return experiments sorted by number of trials.
    SORT_BY_NUM_TRIALS = 8;
    // Return experiments sorted by progress.
    SORT_BY_PROGRESS = 9;
    // Return experiments sorted by user.
    SORT_BY_USER = 10;
  }
  // Sort experiments by the given field.
  SortBy sort_by = 1;
  // Order experiments in either ascending or descending order.
  OrderBy order_by = 2;
  // Skip the number of experiments before returning results. Negative values
  // denote number of experiments to skip from the end before returning results.
  int32 offset = 3;
  // Limit the number of experiments. A value of 0 denotes no limit.
  int32 limit = 4;
  // Limit experiments to those that match the description.
  string description = 5;
  // Limit experiments to those that match the provided labels.
  repeated string labels = 6;
  // Limit experiments to those that are archived.
  google.protobuf.BoolValue archived = 7;
  // Limit experiments to those that match the provided state.
  repeated determined.experiment.v1.State states = 8;
  // Limit experiments to those that are owned by the specified users.
  repeated string users = 9;
}
// Response to GetExperimentsRequest.
message GetExperimentsResponse {
  // The list of returned experiments.
  repeated determined.experiment.v1.Experiment experiments = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Get a list of experiment labels.
message GetExperimentLabelsRequest {}
// Response to GetExperimentsLabelsRequest.
message GetExperimentLabelsResponse {
  // The list of labels used across all experiments.
  repeated string labels = 1;
}

// Preview hyperparameter search.
message PreviewHPSearchRequest {
  // The experiment config to simulate.
  google.protobuf.Struct config = 1;
  // The searcher simulation seed.
  uint32 seed = 2;
}
// Response to PreviewSearchRequest.
message PreviewHPSearchResponse {
  // The resulting simulation.
  determined.experiment.v1.ExperimentSimulation simulation = 1;
}

// Activate an experiment.
message ActivateExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to ActivateExperimentRequest.
message ActivateExperimentResponse {}

// Pause an experiment.
message PauseExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to PauseExperimentRequest.
message PauseExperimentResponse {}

// Cancel an experiment.
message CancelExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to CancelExperimentRequest.
message CancelExperimentResponse {}

// Kill an experiment.
message KillExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to KillExperimentRequest.
message KillExperimentResponse {}

// Archive an experiment.
message ArchiveExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to ArchiveExperimentRequest.
message ArchiveExperimentResponse {}

// Unarchive an experiment.
message UnarchiveExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to UnarchiveExperimentRequest.
message UnarchiveExperimentResponse {}

// Patch an experiment by providing the updated attributes.
message PatchExperimentRequest {
  // Patched experiment attributes.
  determined.experiment.v1.Experiment experiment = 1;
  // Update mask.
  google.protobuf.FieldMask update_mask = 2;
}

// Response to PatchExperimentRequest.
message PatchExperimentResponse {
  // Patched experiment.
  determined.experiment.v1.Experiment experiment = 1;
}

// Get a list of checkpoints for an experiment.
message GetExperimentCheckpointsRequest {
  // Sorts checkpoints by the given field.
  enum SortBy {
    // Returns checkpoints in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns checkpoints sorted by UUID.
    SORT_BY_UUID = 1;
    // Returns checkpoints sorted by trial id.
    SORT_BY_TRIAL_ID = 4;
    // Returns checkpoints sorted by batch number.
    SORT_BY_BATCH_NUMBER = 6;
    // Returns checkpoints sorted by start time.
    SORT_BY_START_TIME = 7;
    // Returns checkpoints sorted by end time.
    SORT_BY_END_TIME = 8;
    // Returns checkpoints sorted by validation state.
    SORT_BY_VALIDATION_STATE = 15;
    // Returns checkpoints sorted by state.
    SORT_BY_STATE = 16;
    // Returns checkpoints sorted by the experiment's `searcher.metric`
    // configuration setting.
    SORT_BY_SEARCHER_METRIC = 17;
  }
  // The experiment id.
  int32 id = 1;
  // Sort checkpoints by the given field.
  SortBy sort_by = 2;
  // Order checkpoints in either ascending or descending order.
  OrderBy order_by = 3;
  // Skip the number of checkpoints before returning results. Negative values
  // denote number of checkpoints to skip from the end before returning results.
  int32 offset = 4;
  // Limit the number of checkpoints. A value of 0 denotes no limit.
  int32 limit = 5;

  // Limit the checkpoints to those that match the validation states.
  repeated determined.checkpoint.v1.State validation_states = 6;
  // Limit the checkpoints to those that match the states.
  repeated determined.checkpoint.v1.State states = 7;
}

// Response to GetExperimentCheckpointsRequest.
message GetExperimentCheckpointsResponse {
  // The list of returned checkpoints.
  repeated determined.checkpoint.v1.Checkpoint checkpoints = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Get the validation history for the requested experiment. The
// validation history is a time ordered list of the historical
// best validations.
message GetExperimentValidationHistoryRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
}

// Response to GetExperimentValidationHistoryRequest.
message GetExperimentValidationHistoryResponse {
  // validation_history is a collection of zero or more validation metrics for
  // an experiment, describing the best metrics as they were reported through
  // the lifetime of an experiment. The historical list of best validations.
  repeated determined.experiment.v1.ValidationHistoryEntry validation_history =
      1;
}

// Request to create a new experiment.
message CreateExperimentRequest {
  // Experiment context.
  repeated determined.util.v1.File model_definition = 1;
  // Experiment config (YAML).
  string config = 2;
  // Only validate instead of creating the experiment. A dry run.
  bool validate_only = 3;
  // Parent experiment id.
  int32 parent_id = 4;
}
// Response to CreateExperimentRequest.
message CreateExperimentResponse {
  // The created experiment.
  determined.experiment.v1.Experiment experiment = 1;
  // The created experiment config.
  google.protobuf.Struct config = 2;
}

// Request for the set of metrics recorded by an experiment.
message MetricNamesRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
}

// Response to MetricNamesRequest.
message MetricNamesResponse {
  // The name of the searcher metric.
  string searcher_metric = 1;
  // List of training metric names.
  repeated string training_metrics = 2;
  // List of validation metric names.
  repeated string validation_metrics = 3;
}

// To distinguish the 2 different categories of metrics.
enum MetricType {
  // Zero-value (not allowed).
  METRIC_TYPE_UNSPECIFIED = 0;
  // For metrics emitted during training.
  METRIC_TYPE_TRAINING = 1;
  // For metrics emitted during validation.
  METRIC_TYPE_VALIDATION = 2;
}

// Request the milestones (in batches processed) at which a metric is recorded
// by an experiment.
message MetricBatchesRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
  // A metric name.
  string metric_name = 2;
  // The type of metric.
  MetricType metric_type = 3;
}

// Response to MetricBatchesRequest.
message MetricBatchesResponse {
  // Milestones (in batches processed) at which the specified metric is
  // recorded.
  repeated int32 batches = 1;
}

// Request metrics from all trials at a progress point of progress.
message TrialsSnapshotRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
  // The point of progress at which to query metrics.
  int32 batches_processed = 2;
  // A metric name.
  string metric_name = 3;
  // The type of metric.
  MetricType metric_type = 4;
}

// Response to TrialSnapshotResponse
message TrialsSnapshotResponse {
  // Metric value and metadata for a trial that has progress this far.
  message Trial {
    // The id of the trial.
    int32 trial_id = 1;
    // A dictionary of hyperparameter values for this trial.
    google.protobuf.Struct hparams = 2;
    // The value of the metric in this trial at this point.
    double metric = 3;
  }
  // A list of trials.
  repeated Trial trials = 1;
}

// Request a sample of metrics over time for a sample of trials.
message TrialsSampleRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
  // A metric name.
  string metric_name = 2;
  // The type of metric.
  MetricType metric_type = 3;
  // Maximum number of trials to fetch data for.
  int32 max_trials = 4;
  // Maximum number of initial / historical data points.
  int32 max_datapoints = 5;
  // Beginning of window (inclusive) to fetch data for.
  int32 start_batches = 6;
  // Ending of window (inclusive) to fetch data for.
  int32 end_batches = 7;
}

// Response to TrialsSampleRequest
message TrialsSampleResponse {
  // One datapoint in a series of metrics from a trial.
  message DataPoint {
    // Total batches processed by the time this measurement is taken.
    int32 batches = 1;
    // Value of the requested metric at this point in the trial.
    double value = 2;
  }
  // Metadata and metrics stream from a trial.
  message Trial {
    // The id of the trial.
    int32 trial_id = 1;
    // Hyperparamters values for this specific trial.
    google.protobuf.Struct hparams = 2;
    // A possibly down-sampled series of metric readings through the progress of
    // the trial.
    repeated DataPoint data = 3;
  }
  // A historical or incremental series of data points for the trials.
  repeated Trial trials = 1;
  // IDs of trials that are newly included in the data.
  repeated int32 promoted_trials = 2;
  // IDs of trials that are no loger included in the top N trials.
  repeated int32 demoted_trials = 3;
}
