syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "google/protobuf/wrappers.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "determined/api/v1/command.proto";
import "determined/api/v1/pagination.proto";
import "determined/common/v1/common.proto";
import "determined/checkpoint/v1/checkpoint.proto";
import "determined/metric/v1/metric.proto";
import "determined/experiment/v1/experiment.proto";
import "determined/job/v1/job.proto";
import "determined/util/v1/util.proto";
import "determined/experiment/v1/searcher.proto";
import "determined/trial/v1/trial.proto";

// One datapoint in a series of metrics from a trial in batch.
message DataPoint {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "batches", "value", "time" ] }
  };
  // Total batches processed by the time this measurement is taken.
  int32 batches = 1;
  // Values of the requested metrics at this point in the trial.
  google.protobuf.Struct values = 2;
  // The time the measurement is taken.
  google.protobuf.Timestamp time = 3;
  // The epoch this measurement is taken.
  optional int32 epoch = 4;
}

// Get a single experiment.
message GetExperimentRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
}
// Response to GetExperimentRequest.
message GetExperimentResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment" ] }
  };
  // The requested experiment.
  determined.experiment.v1.Experiment experiment = 1;
  // Associated job summary.
  determined.job.v1.JobSummary job_summary = 3;
}

// Get a list of experiments.
message GetExperimentsRequest {
  // Sorts experiments by the given field.
  enum SortBy {
    // Returns experiments in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns experiments sorted by id.
    SORT_BY_ID = 1;
    // Returns experiments sorted by description.
    SORT_BY_DESCRIPTION = 2;
    // Return experiments sorted by start time.
    SORT_BY_START_TIME = 4;
    // Return experiments sorted by end time. Experiments without end_time are
    // returned after the ones with end_time.
    SORT_BY_END_TIME = 5;
    // Return experiments sorted by state.
    SORT_BY_STATE = 6;
    // Return experiments sorted by number of trials.
    SORT_BY_NUM_TRIALS = 8;
    // Return experiments sorted by progress.
    SORT_BY_PROGRESS = 9;
    // Return experiments sorted by user.
    SORT_BY_USER = 10;
    // Returns experiments sorted by name.
    SORT_BY_NAME = 11;
    // Returns experiments sorted by originating model.
    SORT_BY_FORKED_FROM = 12;
    // Returns experiments sorted by resource pool.
    SORT_BY_RESOURCE_POOL = 13;
    // Returns experiments sorted by project.
    SORT_BY_PROJECT_ID = 14;
    // Returns experiments sorted by checkpoint size.
    SORT_BY_CHECKPOINT_SIZE = 15;
    // Returns experiments sorted by checkpoint count.
    SORT_BY_CHECKPOINT_COUNT = 16;
    // Returns experiments sorted by searcher metric value..
    SORT_BY_SEARCHER_METRIC_VAL = 17;
  }
  // Sort experiments by the given field.
  SortBy sort_by = 1;
  // Order experiments in either ascending or descending order.
  OrderBy order_by = 2;
  // Skip the number of experiments before returning results. Negative values
  // denote number of experiments to skip from the end before returning results.
  int32 offset = 3;
  // Limit the number of experiments.
  // 0 or Unspecified - returns a default of 100.
  // -1               - returns everything.
  // -2               - returns pagination info but no experiments.
  int32 limit = 4;
  // Limit experiments to those that match the description.
  string description = 5;
  // Limit experiments to those that match the name.
  string name = 10;
  // Limit experiments to those that match the provided labels.
  repeated string labels = 6;
  // Limit experiments to those that are archived.
  google.protobuf.BoolValue archived = 7;
  // Limit experiments to those that match the provided state.
  repeated determined.experiment.v1.State states = 8;
  // Limit experiments to those that are owned by users with the specified
  // usernames.
  repeated string users = 9;
  // Limit experiments to those that are owned by users with the specified
  // userIds.
  repeated int32 user_ids = 11;
  // Limit experiments to those within a specified project, or 0 for all
  // projects.
  int32 project_id = 12;
  // filtering by experiment ids
  determined.common.v1.Int32FieldFilter experiment_id_filter = 13;
  // whether to surface trial specific data from the best trial
  bool show_trial_data = 14;
}
// Response to GetExperimentsRequest.
message GetExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiments", "pagination" ] }
  };
  // The list of returned experiments.
  repeated determined.experiment.v1.Experiment experiments = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Get a list of experiment labels.
message GetExperimentLabelsRequest {
  // Filter experiments by project.
  int32 project_id = 1;
}
// Response to GetExperimentsLabelsRequest.
message GetExperimentLabelsResponse {
  // The list of labels used across all experiments.
  repeated string labels = 1;
}

// Delete a single experiment.
message DeleteExperimentRequest {
  // The ID of the experiment.
  int32 experiment_id = 1;
}
// Response to DeleteExperimentRequest.
message DeleteExperimentResponse {}

// Delete multiple experiments.
message DeleteExperimentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment_ids" ] }
  };

  // Selecting experiments by id.
  repeated int32 experiment_ids = 1;
  // Targets all experiments matching filters.
  BulkExperimentFilters filters = 2;
}

// Response to DeleteExperimentsRequest.
message DeleteExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each experiment.
  repeated ExperimentActionResult results = 1;
}

// Get the best searcher validation.
message GetBestSearcherValidationMetricRequest {
  // The ID of the experiment.
  int32 experiment_id = 1;
}
// Response to GetBestSearcherValidationMetricRequest.
message GetBestSearcherValidationMetricResponse {
  // The value of the metric.
  float metric = 1;
}

// Preview hyperparameter search.
message PreviewHPSearchRequest {
  // The experiment config to simulate.
  google.protobuf.Struct config = 1;
  // The searcher simulation seed.
  uint32 seed = 2;
}
// Response to PreviewSearchRequest.
message PreviewHPSearchResponse {
  // The resulting simulation.
  determined.experiment.v1.ExperimentSimulation simulation = 1;
}

// Activate an experiment.
message ActivateExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to ActivateExperimentRequest.
message ActivateExperimentResponse {}

// Message for results of individual experiments in a multi-experiment action.
message ExperimentActionResult {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "error", "id" ] }
  };
  // Optional error message.
  string error = 1;
  // Experiment ID.
  int32 id = 2;
}

// Activate multiple experiments.
message ActivateExperimentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment_ids" ] }
  };

  // Select experiments by id.
  repeated int32 experiment_ids = 1;
  // Targets all experiments matching filters.
  BulkExperimentFilters filters = 2;
}
// Response to ActivateExperimentsRequest.
message ActivateExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each experiment.
  repeated ExperimentActionResult results = 1;
}

// Pause an experiment.
message PauseExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to PauseExperimentRequest.
message PauseExperimentResponse {}

// Filters to apply actions to multiple experiments.
message BulkExperimentFilters {
  // Limit experiments to those that match the description.
  string description = 1;
  // Limit experiments to those that match the name.
  string name = 2;
  // Limit experiments to those that match the provided labels.
  repeated string labels = 3;
  // Limit experiments to those that are archived.
  google.protobuf.BoolValue archived = 4;
  // Limit experiments to those that match the provided state.
  repeated determined.experiment.v1.State states = 5;
  // Limit experiments to those that are owned by users with the specified
  // userIds.
  repeated int32 user_ids = 6;
  // Limit experiments to those within a specified project, or 0 for all
  // projects.
  int32 project_id = 7;
  // Experiment ids to exclude when filters are used.
  repeated int32 excluded_experiment_ids = 8;
}

// Pause multiple experiments.
message PauseExperimentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment_ids" ] }
  };

  // Selecting experiments by id.
  repeated int32 experiment_ids = 1;
  // Targets all experiments matching filters.
  BulkExperimentFilters filters = 2;
}

// Response to PauseExperimentsRequest.
message PauseExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each experiment.
  repeated ExperimentActionResult results = 1;
}

// Cancel an experiment.
message CancelExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to CancelExperimentRequest.
message CancelExperimentResponse {}

// Cancel multiple experiments.
message CancelExperimentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment_ids" ] }
  };

  // Selecting experiments by id.
  repeated int32 experiment_ids = 1;
  // Targets all experiments matching filters.
  BulkExperimentFilters filters = 2;
}
// Response to CancelExperimentsRequest.
message CancelExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each experiment.
  repeated ExperimentActionResult results = 1;
}

// Kill an experiment.
message KillExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to KillExperimentRequest.
message KillExperimentResponse {}

// Kill multiple experiments.
message KillExperimentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment_ids" ] }
  };

  // Selecting experiments by id.
  repeated int32 experiment_ids = 1;
  // Targets all experiments matching filters.
  BulkExperimentFilters filters = 2;
}
// Response to KillExperimentsRequest.
message KillExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each experiment.
  repeated ExperimentActionResult results = 1;
}

// Archive an experiment.
message ArchiveExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to ArchiveExperimentRequest.
message ArchiveExperimentResponse {}

// Archive multiple experiments.
message ArchiveExperimentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment_ids" ] }
  };

  // Selecting experiments by id.
  repeated int32 experiment_ids = 1;
  // Targets all experiments matching filters.
  BulkExperimentFilters filters = 2;
}
// Response to ArchiveExperimentsRequest.
message ArchiveExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each experiment.
  repeated ExperimentActionResult results = 1;
}

// Unarchive an experiment.
message UnarchiveExperimentRequest {
  // The experiment id.
  int32 id = 1;
}
// Response to UnarchiveExperimentRequest.
message UnarchiveExperimentResponse {}

// Unarchive multiple experiments.
message UnarchiveExperimentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment_ids" ] }
  };

  // Selecting experiments by id.
  repeated int32 experiment_ids = 1;
  // Targets all experiments matching filters.
  BulkExperimentFilters filters = 2;
}
// Response to UnarchiveExperimentsRequest.
message UnarchiveExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each experiment.
  repeated ExperimentActionResult results = 1;
}

// Patch an experiment by providing the updated attributes. Only description,
// label, name, and notes fields will be updated through this endpoint, and
// others will be ignored.
message PatchExperimentRequest {
  // Patched experiment attributes.
  determined.experiment.v1.PatchExperiment experiment = 2;
}

// Response to PatchExperimentRequest.
message PatchExperimentResponse {
  // Patched experiment.
  determined.experiment.v1.Experiment experiment = 1;
}

// Get a list of checkpoints for an experiment.
message GetExperimentCheckpointsRequest {
  // Sorts checkpoints by the given field.
  enum SortBy {
    // Returns checkpoints in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns checkpoints sorted by UUID.
    SORT_BY_UUID = 1;
    // Returns checkpoints sorted by trial id.
    SORT_BY_TRIAL_ID = 2;
    // Returns checkpoints sorted by batch number.
    SORT_BY_BATCH_NUMBER = 3;
    // Returns checkpoints sorted by end time.
    SORT_BY_END_TIME = 4;
    // Returns checkpoints sorted by state.
    SORT_BY_STATE = 5;
    // Returns checkpoints sorted by the experiment's `searcher.metric`
    // configuration setting.
    SORT_BY_SEARCHER_METRIC = 6;
  }
  // The experiment id.
  int32 id = 1;
  // Sort checkpoints by the given field.
  SortBy sort_by = 2;
  // Order checkpoints in either ascending or descending order.
  OrderBy order_by = 3;
  // Skip the number of checkpoints before returning results. Negative values
  // denote number of checkpoints to skip from the end before returning results.
  int32 offset = 4;
  // Limit the number of checkpoints. A value of 0 denotes no limit.
  int32 limit = 5;

  // Limit the checkpoints to those that match the states.
  repeated determined.checkpoint.v1.State states = 7;
}

// Response to GetExperimentCheckpointsRequest.
message GetExperimentCheckpointsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "checkpoints", "pagination" ] }
  };

  // The list of returned checkpoints.
  repeated determined.checkpoint.v1.Checkpoint checkpoints = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Get the validation history for the requested experiment. The
// validation history is a time ordered list of the historical
// best validations.
message GetExperimentValidationHistoryRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
}

// Response to GetExperimentValidationHistoryRequest.
message GetExperimentValidationHistoryResponse {
  // validation_history is a collection of zero or more validation metrics for
  // an experiment, describing the best metrics as they were reported through
  // the lifetime of an experiment. The historical list of best validations.
  repeated determined.experiment.v1.ValidationHistoryEntry validation_history =
      1;
}

// Request to create a new experiment.
message CreateExperimentRequest {
  // Experiment context.
  repeated determined.util.v1.File model_definition = 1;
  // Experiment config (YAML).
  string config = 2;
  // Only validate instead of creating the experiment. A dry run.
  bool validate_only = 3;
  // Parent experiment id.
  int32 parent_id = 4;
  // Request to auto-activate the experiment.
  bool activate = 5;
  // Project id to contain the experiment.
  int32 project_id = 6;
  // Template to use for the experiment.
  optional string template = 7;
  // Git remote at submission time.
  optional string git_remote = 8;
  // Git commit at submission time.
  optional string git_commit = 9;
  // Git committer at submission time.
  optional string git_committer = 10;
  // Git commit date at submission time.
  google.protobuf.Timestamp git_commit_date = 11;
  // Unmanaged experiments are detached.
  optional bool unmanaged = 40;
}

// Response to CreateExperimentRequest.
message CreateExperimentResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment", "config" ] }
  };
  // The created experiment.
  determined.experiment.v1.Experiment experiment = 1;
  // The created experiment config.
  google.protobuf.Struct config = 2;
  // List of any related warnings.
  repeated LaunchWarning warnings = 3;
}

// Request for the set of metrics recorded by multiple experiments.
message ExpMetricNamesRequest {
  // The ids for the experiments.
  repeated int32 ids = 1;
  // Seconds to wait when polling for updates.
  int32 period_seconds = 2;
}

// Response to ExpMetricNamesRequest.
message ExpMetricNamesResponse {
  // The names of the searcher metrics.
  repeated string searcher_metrics = 1;
  // List of training metric names.
  repeated string training_metrics = 2 [deprecated = true];
  // List of validation metric names.
  repeated string validation_metrics = 3 [deprecated = true];
  // List of metric group-name pairs.
  repeated determined.metric.v1.MetricIdentifier metric_names = 4;
}

// To distinguish the different categories of metrics.
enum MetricType {
  // Zero-value (not allowed).
  METRIC_TYPE_UNSPECIFIED = 0;
  // For metrics emitted during training.
  METRIC_TYPE_TRAINING = 1;
  // For metrics emitted during validation.
  METRIC_TYPE_VALIDATION = 2;
}

// Request the milestones (in batches processed) at which a metric is recorded
// by an experiment.
message MetricBatchesRequest {
  // The id of the experiment.
  int32 experiment_id = 1
      [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required:
          ["experiment_id"];
      }];
  // A metric name.
  string metric_name = 2
      [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required:
          ["metric_name"];
      }];
  // The type of metric.
  MetricType metric_type = 3 [deprecated = true];
  // Metric group (training, validation, etc).
  string group = 5;
  // Seconds to wait when polling for updates.
  int32 period_seconds = 4;
}

// Response to MetricBatchesRequest.
message MetricBatchesResponse {
  // Milestones (in batches processed) at which the specified metric is
  // recorded.
  repeated int32 batches = 1;
}

// Request metrics from all trials at a point of progress.
message TrialsSnapshotRequest {
  // The id of the experiment.
  int32 experiment_id = 1
      [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required:
          ["experiment_id"];
      }];
  // A metric name.
  string metric_name = 2
      [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required:
          ["metric_name"];
      }];
  // The type of metric.
  MetricType metric_type = 3 [deprecated = true];
  // Metric group (training, validation, etc).
  string group = 7;
  // The point of progress at which to query metrics.
  int32 batches_processed = 4
      [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required:
          ["batches_processed"];
      }];
  // A range either side of batches_processed to include near-misses.
  int32 batches_margin = 5;
  // Seconds to wait when polling for updates.
  int32 period_seconds = 6;
}

// Response to TrialsSnapshotRequest
message TrialsSnapshotResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trials" ] }
  };
  // Metric value and metadata for a trial that has progress this far.
  message Trial {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
      json_schema: {
        required: [ "trial_id", "hparams", "metric", "batches_processed" ]
      }
    };
    // The id of the trial.
    int32 trial_id = 1;
    // A dictionary of hyperparameter values for this trial.
    google.protobuf.Struct hparams = 2;
    // The value of the metric in this trial at this point.
    double metric = 3;
    // The number of batches processed for this particular datapoint.
    int32 batches_processed = 4;
  }
  // A list of trials.
  repeated Trial trials = 1;
}

// Request a sample of metrics over time for a sample of trials.
message TrialsSampleRequest {
  // The id of the experiment.
  int32 experiment_id = 1
      [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required:
          ["experiment_id"];
      }];
  // A metric name.
  string metric_name = 2
      [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {
        required:
          ["metric_name"];
      }];
  // The type of metric.
  MetricType metric_type = 3 [deprecated = true];
  // Metric group (training, validation, etc).
  string group = 9;
  // Maximum number of trials to fetch data for.
  int32 max_trials = 4;
  // Maximum number of initial / historical data points.
  int32 max_datapoints = 5;
  // Beginning of window (inclusive) to fetch data for.
  int32 start_batches = 6;
  // Ending of window (inclusive) to fetch data for.
  int32 end_batches = 7;
  // Seconds to wait when polling for updates.
  int32 period_seconds = 8;
}

// Response to TrialsSampleRequest
message TrialsSampleResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trials", "promoted_trials", "demoted_trials" ] }
  };
  // Metadata and metrics stream from a trial.
  message Trial {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
      json_schema: { required: [ "trial_id", "hparams", "data" ] }
    };
    // The id of the trial.
    int32 trial_id = 1;
    // Hyperparamters values for this specific trial.
    google.protobuf.Struct hparams = 2;
    // A possibly down-sampled series of metric readings through the progress of
    // the trial.
    repeated DataPoint data = 3;
  }
  // A historical or incremental series of data points for the trials.
  repeated Trial trials = 1;
  // IDs of trials that are newly included in the data.
  repeated int32 promoted_trials = 2;
  // IDs of trials that are no longer included in the top N trials.
  repeated int32 demoted_trials = 3;
}

// Request for an experiment model definition.
message GetModelDefRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
}

// Response to GetModelDefRequest.
message GetModelDefResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "b64_tgz" ] }
  };
  // The base64-encoded, gzipped, tarball.
  string b64_tgz = 1;
}

// Request to move an experiment into a project.
message MoveExperimentRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "destination_project_id", "experiment_id" ] }
  };

  // The id of the experiment being moved.
  int32 experiment_id = 1;
  // The id of the new parent project.
  int32 destination_project_id = 2;
}

// Response to MoveExperimentRequest.
message MoveExperimentResponse {}

// Request to move an experiment into a project.
message MoveExperimentsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "destination_project_id", "experiment_ids" ] }
  };

  // The ids of the experiments being moved.
  repeated int32 experiment_ids = 1;
  // The id of the new parent project.
  int32 destination_project_id = 2;
  // Targets all experiments matching filters.
  BulkExperimentFilters filters = 3;
}

// Response to MoveExperimentsRequest.
message MoveExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };

  // Details on success or error for each experiment.
  repeated ExperimentActionResult results = 1;
}

// Request to get model definition file tree of an experiment.
message GetModelDefTreeRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
}

// Response to GetModelDefTreeRequest.
message GetModelDefTreeResponse {
  // File tree of an experiment.
  repeated determined.experiment.v1.FileNode files = 1;
}

// Request to get a file of model definition.
message GetModelDefFileRequest {
  // The id of the experiment.
  int32 experiment_id = 1;
  // The path of file.
  string path = 2;
}

// Response to GetModelDefFileRequest.
message GetModelDefFileResponse {
  // Content of file.
  bytes file = 1;
}

// Request to get the list of searcher events.
message GetSearcherEventsRequest {
  // The ID of the experiment.
  int32 experiment_id = 1;
}

// Response to GetSearcherEventsRequest.
message GetSearcherEventsResponse {
  // The list of events in the queue.
  repeated determined.experiment.v1.SearcherEvent searcher_events = 1;
}

// Request for sending operations from a custom search method.
message PostSearcherOperationsRequest {
  // The experiment ID.
  int32 experiment_id = 1;
  // List of operations to submit.
  repeated determined.experiment.v1.SearcherOperation searcher_operations = 2;
  // The event that triggered the client to send these operations to the master.
  determined.experiment.v1.SearcherEvent triggered_by_event = 3;
}

// Response to PostSearcherOperationsResponse.
message PostSearcherOperationsResponse {}

// Request for searching experiments
message SearchExperimentsRequest {
  // ID of the project to look at
  optional int32 project_id = 1;
  // How many experiments to skip before including in the results
  int32 offset = 2;
  // How many results to show
  int32 limit = 3;
  // Sort parameters in the format <col1>=(asc|desc),<col2>=(asc|desc)
  optional string sort = 4;
  // Filter expression
  optional string filter = 5;
}

// combination of experiment and best trial with metrics
message SearchExperimentExperiment {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiment" ] }
  };
  // The experiment in question
  determined.experiment.v1.Experiment experiment = 1;
  // The best performing trial associated with the experiment
  determined.trial.v1.Trial best_trial = 2;
}

// Response for searching experiments
message SearchExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiments", "pagination" ] }
  };
  // The list of returned experiments.
  repeated SearchExperimentExperiment experiments = 1;
  // Pagination information of the full dataset
  Pagination pagination = 2;
}
