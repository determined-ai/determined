syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "determined/user/v1/user.proto";
import "determined/api/v1/pagination.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Create the requested user's accessToken.
message PostAccessTokenRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "user_id" ] }
  };
  // The id of the user.
  int32 user_id = 1;
  // Lifespan expressing how long the token should last. Should be a Go-format
  // duration (e.g. "2s", "4m", "72h".)
  optional string lifespan = 2;
  // Description of the token.
  string description = 3;
}

// Response to PostAccessTokenRequest.
message PostAccessTokenResponse {
  // token value string.
  string token = 1;
  // token id.
  int32 token_id = 2;
}

// Get access tokens info for admin.
message GetAccessTokensRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [] }
  };
  // Sort token info by the given field.
  enum SortBy {
    // Returns token info in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns token info sorted by user id.
    SORT_BY_USER_ID = 1;
    // Returns token info sorted by expiry.
    SORT_BY_EXPIRY = 2;
    // Returns token info sorted by created at.
    SORT_BY_CREATED_AT = 3;
    // Returns token info sorted by token type.
    SORT_BY_TOKEN_TYPE = 4;
    // Returns token info sorted by if it is revoked.
    SORT_BY_REVOKED = 5;
    // Returns token info sorted by description of token.
    SORT_BY_DESCRIPTION = 6;
  }
  // Sort token info by the given field.
  SortBy sort_by = 1;
  // Order token info in either ascending or descending order.
  OrderBy order_by = 2;

  // Skip the number of projects before returning results. Negative values
  // denote number of projects to skip from the end before returning results.
  int32 offset = 3;
  // Limit the number of projects. A value of 0 denotes no limit.
  int32 limit = 4;

  // Filter on token_ids
  repeated int32 token_ids = 5;
  // Filter by username.
  string username = 6;
  // Filter by active status.
  bool show_inactive = 7;
}

// Response to GetAccessTokensRequest.
message GetAccessTokensResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "token_info" ] }
  };
  // List of token information.
  repeated determined.user.v1.TokenInfo token_info = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Patch user's access token info.
message PatchAccessTokenRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "token_id" ] }
  };
  // The id of the token.
  int32 token_id = 1;
  // The requested updated token description.
  optional string description = 2;
  // The requested updated token revoke status.
  bool set_revoked = 3;
}

// Response to PatchAccessTokenRequest.
message PatchAccessTokenResponse {
  // The updated token information.
  determined.user.v1.TokenInfo token_info = 1;
}
