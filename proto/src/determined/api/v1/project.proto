syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "google/protobuf/wrappers.proto";

import "determined/api/v1/pagination.proto";
import "determined/experiment/v1/experiment.proto";
import "determined/project/v1/project.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Get the requested project.
message GetProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "id" ] }
  };

  // The id of the project.
  int32 id = 1;
}

// Response to GetProjectRequest.
message GetProjectResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "project" ] }
  };

  // The project requested.
  determined.project.v1.Project project = 1;
}

// Get experiments associated with the requested project.
message GetProjectExperimentsRequest {
  // Sort associated experiments by the given field.
  enum SortBy {
    // Returns experiments in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns experiments sorted by their id.
    SORT_BY_ID = 1;
    // Returns experiments sorted by their description.
    SORT_BY_DESCRIPTION = 2;
    // Returns experiments sorted by time that they started.
    SORT_BY_START_TIME = 3;
    // Returns experiments sorted by time that they ended.
    SORT_BY_END_TIME = 4;
    // Returns experiments sorted by their state.
    SORT_BY_STATE = 5;
    // Returns experiments sorted by number of trials.
    SORT_BY_NUM_TRIALS = 6;
    // Returns experiments sorted by progress.
    SORT_BY_PROGRESS = 7;
    // Returns experiments sorted by their user.
    SORT_BY_USER = 8;
    // Returns experiments sorted by their name.
    SORT_BY_NAME = 9;
  }

  // Sort the experiments by the given field.
  SortBy sort_by = 1;
  // Order experiments in either ascending or descending order.
  OrderBy order_by = 2;

  // Skip the number of experiments before returning results. Negative values
  // denote number of experiments to skip from the end before returning results.
  int32 offset = 3;
  // Limit the number of experiments. A value of 0 denotes no limit.
  int32 limit = 4;

  // The id of the project.
  int32 id = 5;

  // Limit the experiments to those matching the name.
  string name = 6;
  // Limit the experiments to those matching the description.
  string description = 7;

  // Limit experiments to those that match the provided labels.
  repeated string labels = 8;
  // Limit experiments to those that are archived.
  google.protobuf.BoolValue archived = 9;
  // Limit experiments to those that match one of the provided states.
  repeated determined.experiment.v1.State states = 10;
  // Limit experiments to those that are owned by one of the specified users.
  repeated string users = 11;
}

// Response to GetProjectExperimentsRequest.
message GetProjectExperimentsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "experiments", "pagination" ] }
  };

  // The experiments associated with the project.
  repeated determined.experiment.v1.Experiment experiments = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Request for creating a project.
message PostProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "name", "workspace_id" ] }
  };

  // The name of the project.
  string name = 1;
  // Description of the project.
  string description = 3;
  // Id of the associated workspace.
  int32 workspace_id = 4;
}

// Response to PostProjectRequest.
message PostProjectResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "project" ] }
  };

  // The project created.
  determined.project.v1.Project project = 1;
}

// Request for adding a note to a project.
message AddProjectNoteRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "note", "project_id" ] }
  };
  // The note to add.
  determined.project.v1.Note note = 1;
  // The id of the project.
  int32 project_id = 2;
}

// Response to AddProjectNoteRequest.
message AddProjectNoteResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "notes" ] }
  };

  // The complete list of notes on a project.
  repeated determined.project.v1.Note notes = 1;
}

// Request for updating a project.
message PatchProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "id", "project" ] }
  };

  // The id of the project.
  int32 id = 1;
  // The desired project fields and values to update.
  determined.project.v1.PatchProject project = 2;
}

// Response to PatchProjectRequest.
message PatchProjectResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "project" ] }
  };

  // The updated project.
  determined.project.v1.Project project = 1;
}

// Request for deleting a project.
message DeleteProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "id" ] }
  };

  // The id of the project.
  int32 id = 1;
}

// Response to DeleteProjectRequest.
message DeleteProjectResponse {}

// Request to move a project into a workspace.
message MoveProjectRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "destination_workspace_id", "project_id" ] }
  };

  // The id of the project being moved.
  int32 project_id = 1;
  // The id of the new parent workspace.
  int32 destination_workspace_id = 2;
}

// Response to MoveProjectRequest.
message MoveProjectResponse {}
