syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "determined/job/v1/job.proto";
import "determined/api/v1/pagination.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Get a list of jobs sorted by number of jobs ahead & job ID.
message GetJobsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [] }
  };
  // Pagination offset.
  int32 offset = 10;
  // Pagination limit.
  int32 limit = 11;
  // The target resource-pool for agent resource manager.
  string resource_pool = 2;
  // Order results in either ascending or descending order by the number of
  // jobs ahead.
  OrderBy order_by = 3;
  // Filter to jobs with states among those given.
  repeated determined.job.v1.State states = 4;
}

// Response to GetJobsRequest.
message GetJobsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "jobs", "pagination" ] }
  };
  // Pagination information of the full dataset.
  Pagination pagination = 1;
  // List of the request jobs.
  repeated determined.job.v1.Job jobs = 2;
}

// Get a list of jobs sorted by number of jobs ahead & job ID.
message GetJobsV2Request {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [] }
  };
  // Pagination offset.
  int32 offset = 10;
  // Pagination limit.
  int32 limit = 11;
  // The target resource-pool for agent resource manager.
  string resource_pool = 2;
  // Order results in either ascending or descending order by the number of
  // jobs ahead.
  OrderBy order_by = 3;
  // Filter to jobs with states among those given.
  repeated determined.job.v1.State states = 4;
}

// Response to GetJobsV2Request.
message GetJobsV2Response {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "jobs", "pagination" ] }
  };

  // Pagination information of the full dataset.
  Pagination pagination = 1;

  // List of the requested jobs.
  repeated determined.job.v1.RBACJob jobs = 2;
}

// Request to update the job queue.
message UpdateJobQueueRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "updates" ] }
  };
  // List of job queue control requests.
  repeated determined.job.v1.QueueControl updates = 1;
}
// Response to UpdateJobQueueRequest.
message UpdateJobQueueResponse {}

// Job stats for a resource pool.
message RPQueueStat {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "stats", "resource_pool" ] }
  };
  // Job queue stats.
  determined.job.v1.QueueStats stats = 1;
  // Resource pool.
  string resource_pool = 2;
  // Aggregate stats.
  repeated determined.job.v1.AggregateQueueStats aggregates = 3;
}
// Get job stats.
message GetJobQueueStatsRequest {
  // Filter the results based on a set of resource pools.
  repeated string resource_pools = 1;
}
// Response to GetJobQueueStatsRequest.
message GetJobQueueStatsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "results" ] }
  };
  // List of queue stats per resource pool.
  repeated RPQueueStat results = 1;
}
