syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "determined/user/v1/user.proto";
import "determined/api/v1/pagination.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Get a list of users.
message GetUsersRequest {
  // Sort users by the given field.
  enum SortBy {
    // Returns users in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns users sorted by display name.
    SORT_BY_DISPLAY_NAME = 1;
    // Returns users sorted by user name.
    SORT_BY_USER_NAME = 2;
    // Returns users sorted by if they are admin.
    SORT_BY_ADMIN = 3;
    // Returns users sorted by if they are active.
    SORT_BY_ACTIVE = 4;
    // Returns users sorted by modified time.
    SORT_BY_MODIFIED_TIME = 5;
    // Returns users sorted by username unless display name exist.
    SORT_BY_NAME = 6;
  }
  // Sort users by the given field.
  SortBy sort_by = 1;
  // Order users in either ascending or descending order.
  OrderBy order_by = 2;

  // Skip the number of projects before returning results. Negative values
  // denote number of projects to skip from the end before returning results.
  int32 offset = 3;
  // Limit the number of projects. A value of 0 denotes no limit.
  int32 limit = 4;

  // Filter by username or display name.
  string name = 5;
}
// Response to GetUsersRequest.
message GetUsersResponse {
  // The list of requested users.
  repeated determined.user.v1.User users = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Get the requested user by user id.
message GetUserRequest {
  // The id of the user.
  int32 user_id = 1;
}
// Response to GetUserRequest.
message GetUserResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "user" ] }
  };
  // The requested user.
  determined.user.v1.User user = 1;
}

// Get the requested user by username.
message GetUserByUsernameRequest {
  // The string of the username.
  string username = 1;
}
// Response to GetUserByUsernameRequest.
message GetUserByUsernameResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "user" ] }
  };
  // The requested user.
  determined.user.v1.User user = 1;
}

// Get the requested current user.
message GetMeRequest {}
// Response to GetMeRequest.
message GetMeResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "user" ] }
  };
  // The requested user.
  determined.user.v1.User user = 1;
}

// Create a new user.
message PostUserRequest {
  // The user to create.
  determined.user.v1.User user = 1;
  // The password of the user.
  string password = 2;
  // Indicate whether the provided password is pre-salted & hashed or not.
  bool is_hashed = 3;
}
// Response to PostUserRequest.
message PostUserResponse {
  // The created user.
  determined.user.v1.User user = 1;
}

// Set the requested user's passwords.
message SetUserPasswordRequest {
  // The id of the user.
  int32 user_id = 3;
  // The password of the user.
  string password = 2;
}
// Response to SetUserPasswordRequest.
message SetUserPasswordResponse {
  // The updated user.
  determined.user.v1.User user = 1;
}

// Edit fields for a user.
message PatchUserRequest {
  // The id of the user.
  int32 user_id = 2;
  // The updated user.
  determined.user.v1.PatchUser user = 1;
}
// Response to PatchUserRequest.
message PatchUserResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "user" ] }
  };
  // The updated user.
  determined.user.v1.User user = 1;
}
// Get user settings.
message GetUserSettingRequest {}
// Response to GetUserSettingRequest.
message GetUserSettingResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "settings" ] }
  };
  // List of user settings.
  repeated determined.user.v1.UserWebSetting settings = 1;
}
// Update user settings.
message PostUserSettingRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "settings" ] }
  };
  // Setting key value pair.
  repeated determined.user.v1.UserWebSetting settings = 1;
}
// Response to PostUserSettingRequest.
message PostUserSettingResponse {}
// Reset user setting.
message ResetUserSettingRequest {}
// Response to ResetUserSettingRequest.
message ResetUserSettingResponse {}

// Update user activity.
message PostUserActivityRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "activity_type", "entity_type", "entity_id" ] }
  };
  // The type of the activity.
  determined.user.v1.ActivityType activity_type = 1;

  // The type of the entity.
  determined.user.v1.EntityType entity_type = 2;

  // The unique id for the entity
  int32 entity_id = 3;
}

// Response to PostUserActivityRequest.
message PostUserActivityResponse {}