syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "google/protobuf/struct.proto";

import "determined/api/v1/command.proto";
import "determined/api/v1/experiment.proto";
import "determined/api/v1/pagination.proto";
import "determined/tensorboard/v1/tensorboard.proto";
import "determined/util/v1/util.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Get a list of tensorboards.
message GetTensorboardsRequest {
  // Sorts tensorboards by the given field.
  enum SortBy {
    // Returns tensorboards in an unsorted list.
    SORT_BY_UNSPECIFIED = 0;
    // Returns tensorboards sorted by id.
    SORT_BY_ID = 1;
    // Returns tensorboards sorted by description.
    SORT_BY_DESCRIPTION = 2;
    // Return tensorboards sorted by start time.
    SORT_BY_START_TIME = 4;
    // Return tensorboards sorted by workspace_id.
    SORT_BY_WORKSPACE_ID = 5;
  }
  // Sort tensorboards by the given field.
  SortBy sort_by = 1;
  // Order tensorboards in either ascending or descending order.
  OrderBy order_by = 2;
  // Skip the number of tensorboards before returning results. Negative values
  // denote number of tensorboards to skip from the end before returning
  // results.
  int32 offset = 3;
  // Limit the number of tensorboards. A value of 0 denotes no limit.
  int32 limit = 4;
  // Limit tensorboards to those that are owned by users with the specified
  // usernames.
  repeated string users = 5;
  // Limit tensorboards to those that are owned by users with the specified
  // userIds.
  repeated int32 user_ids = 6;
  // Limit tensorboards to those that are in a specific workspace, or 0 for
  // all accessible workspaces.
  int32 workspace_id = 7;
}
// Response to GetTensorboardsRequest.
message GetTensorboardsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "tensorboards" ] }
  };
  // The list of returned tensorboards.
  repeated determined.tensorboard.v1.Tensorboard tensorboards = 1;
  // Pagination information of the full dataset.
  Pagination pagination = 2;
}

// Get the requested tensorboard.
message GetTensorboardRequest {
  // The id of the tensorboard.
  string tensorboard_id = 1;
}
// Response to GetTensorboardRequest.
message GetTensorboardResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "tensorboard", "config" ] }
  };
  // The requested tensorboard.
  determined.tensorboard.v1.Tensorboard tensorboard = 1;
  // The config;
  google.protobuf.Struct config = 2;
}

// Kill the requested tensorboard.
message KillTensorboardRequest {
  // The id of the tensorboard.
  string tensorboard_id = 1;
}
// Response to KillTensorboardRequest.
message KillTensorboardResponse {
  // The requested tensorboard.
  determined.tensorboard.v1.Tensorboard tensorboard = 1;
}

// Set the priority of the requested TensorBoard.
message SetTensorboardPriorityRequest {
  // The id of the TensorBoard.
  string tensorboard_id = 1;
  // The new priority.
  int32 priority = 2;
}
// Response to SetTensorboardPriorityRequest.
message SetTensorboardPriorityResponse {
  // The requested Tensorboard.
  determined.tensorboard.v1.Tensorboard tensorboard = 1;
}

// Request to launch a tensorboard.
message LaunchTensorboardRequest {
  // List of source experiment ids.
  repeated int32 experiment_ids = 1;
  // List of source trial ids.
  repeated int32 trial_ids = 2;
  // Tensorboard config (JSON).
  google.protobuf.Struct config = 3;
  // Tensorboard template name.
  string template_name = 4;
  // The files to run with the command.
  repeated determined.util.v1.File files = 5;
  // Workspace in which to launch tensorboard. Defaults to 'Uncategorized'.
  int32 workspace_id = 6;
  // Targets all experiments matching filters.
  BulkExperimentFilters filters = 7;
}
// Response to LaunchTensorboardRequest.
message LaunchTensorboardResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "tensorboard", "config" ] }
  };
  // The requested tensorboard.
  determined.tensorboard.v1.Tensorboard tensorboard = 1;
  // The config;
  google.protobuf.Struct config = 2;
  // List of any related warnings.
  repeated LaunchWarning warnings = 3;
}
