syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "protoc-gen-swagger/options/annotations.proto";

// Named permission with global or workspace scope.
message Permission {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "id", "name", "global_only", "workspace_only" ] }
  };

  // Unique ID of the permission.
  int32 id = 1;
  // Name of the permission.
  string name = 2;
  // Global scope for the permission.
  bool global_only = 3;
  // Workspace scope for the permission.
  bool workspace_only = 4;
}

// Named group of permissions.
message Role {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "id", "name", "permissions" ] }
  };

  // Unique ID for the role.
  int32 id = 1;
  // Name for the role.
  string name = 2;
  // List of permissions.
  repeated Permission permissions = 3;
}

// Associations of permissions with specific workspaces.
message AssignmentGroup {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "cluster", "name", "workspaces" ] }
  };

  // Name for the role.
  string name = 1;
  // List of workspace IDs to apply the role.
  repeated int32 workspaces = 2;
  // Cluster-wide scope for this role.
  bool cluster = 3;
}

// List all permissions for the current user in all parts of the cluster.
message GetPermissionsSummaryRequest {}

// Response to GetPermissionsSummaryRequest.
message GetPermissionsSummaryResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "assignments", "roles" ] }
  };

  // A group of roles in cluster and other scopes.
  repeated Role roles = 1;
  // Lists of assignments for the cluster and other scopes.
  repeated AssignmentGroup assignments = 2;
}
