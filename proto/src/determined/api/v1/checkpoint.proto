syntax = "proto3";

package determined.api.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/apiv1";

import "determined/checkpoint/v1/checkpoint.proto";
import "determined/trial/v1/trial.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Get the requested checkpoint.
message GetCheckpointRequest {
  // The uuid for the requested checkpoint.
  string checkpoint_uuid = 1;
}

// Response to GetCheckpointRequest.
message GetCheckpointResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "checkpoint" ] }
  };
  // The requested checkpoint.
  determined.checkpoint.v1.Checkpoint checkpoint = 1;
}

// Request for updating a checkpoints metadata.
message PostCheckpointMetadataRequest {
  // The desired checkpoint fields and values.
  determined.checkpoint.v1.Checkpoint checkpoint = 1;
}

// Response to PostCheckpointRequest.
message PostCheckpointMetadataResponse {
  // The updated checkpoint.
  determined.checkpoint.v1.Checkpoint checkpoint = 1;
}

// Request to delete files matching globs in checkpoints.
message CheckpointsRemoveFilesRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "checkpoint_uuids", "checkpoint_globs" ] }
  };
  // The list of checkpoint_uuids for the requested checkpoints.
  repeated string checkpoint_uuids = 1;
  // The list of checkpoint_globs for the requested checkpoints.
  // If a value is set to the empty string the checkpoint will only
  // have its metadata refreshed.
  repeated string checkpoint_globs = 2;
}

// Response to CheckpointRemoveFilesRequest.
message CheckpointsRemoveFilesResponse {}

// Request to patch database info about a checkpoint.
message PatchCheckpointsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "checkpoints" ] }
  };

  // List of checkpoints to patch.
  repeated determined.checkpoint.v1.PatchCheckpoint checkpoints = 1;
}

// Intentionally don't send the updated response for performance reasons.
message PatchCheckpointsResponse {}

// Request to Delete the list of checkpoints
message DeleteCheckpointsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "checkpoint_uuids" ] }
  };
  // The list of checkpoint_uuids for the requested checkpoint.
  repeated string checkpoint_uuids = 1;
}

// Response to DeleteCheckpointsRequest
message DeleteCheckpointsResponse {}

// Request for all metrics related to a given checkpoint
message GetTrialMetricsBySourceInfoCheckpointRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "checkpoint_uuid" ] }
  };
  // UUID of the checkpoint.
  string checkpoint_uuid = 1;
  // Type of the TrialSourceInfo
  optional determined.trial.v1.TrialSourceInfoType trial_source_info_type = 2;
}

// Response for all metrics related to a given checkpoint
message GetTrialMetricsBySourceInfoCheckpointResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "data" ] }
  };
  // All the related trials and their metrics
  repeated determined.trial.v1.TrialSourceInfoMetric data = 1;
}
