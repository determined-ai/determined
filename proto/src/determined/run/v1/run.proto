syntax = "proto3";

package determined.run.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/runv1";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "determined/trial/v1/trial.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Minimal experiment object
message FlatRunExperiment {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "id",
        "is_multitrial",
        "unmanaged",
        "resource_pool",
        "progress",
        "description",
        "name",
        "searcher_type",
        "searcher_metric"
      ]
    }
  };
  // The id of the experiment linked to the run.
  int32 id = 1;
  // The type of searcher for the experiment.
  string searcher_type = 2;
  // The searcher metric name for the experiment.
  string searcher_metric = 3;
  // Original id of a forked or continued experiment.
  optional int32 forked_from = 4;
  // The id of external experiment
  optional string external_experiment_id = 5;
  // The resource pool the experiment was created in.
  string resource_pool = 6;
  // The current progress of a running experiment.
  float progress = 7;
  // The description of the experiment.
  string description = 8;
  // The experiment name.
  string name = 9;
  // Unmanaged experiments are detached.
  bool unmanaged = 10;
  // True if the associated experiment is a multitrial experiment
  bool is_multitrial = 11;
}

// Flat run respresentation.
message FlatRun {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "id",
        "start_time",
        "state",
        "tags",
        "checkpoint_size",
        "checkpoint_count",
        "project_id",
        "project_name",
        "workspace_id",
        "workspace_name",
        "parent_archived"
      ]
    }
  };
  // The id of the run.
  int32 id = 1;
  // The time the run was started.
  google.protobuf.Timestamp start_time = 2;
  // The time the run ended.
  google.protobuf.Timestamp end_time = 3;
  // The current state of the run(trial).
  determined.trial.v1.State state = 4;
  // The tags of the associated experiment.
  // TODO(aaron.amanuel): Create add/remove tags for runs.
  repeated string labels = 5;
  // The total size of checkpoints.
  int64 checkpoint_size = 6;
  // The count of checkpoints.
  int32 checkpoint_count = 7;
  // Signed searcher metrics value.
  optional double searcher_metric_value = 8;
  // The id of external run
  optional int32 external_run_id = 9;
  // Trial hyperparameters.
  optional google.protobuf.Struct hyperparameters = 10;
  // summary metrics.
  optional google.protobuf.Struct summary_metrics = 11;
  // The id of the user who created the run.
  optional int32 user_id = 12;
  // Time in seconds which the run ran or has been running.
  optional int32 duration = 13;
  // The id of the project associated with this run.
  int32 project_id = 14;
  // The name of the project associated with this run.
  string project_name = 15;
  // The id of the workspace associated with this run.
  int32 workspace_id = 16;
  // The name of the workspace associated with this run.
  string workspace_name = 17;
  // The archived status of the parent project (can be inherited from
  // workspace).
  bool parent_archived = 18;
  // Data related the the experiment associated with this run.
  optional FlatRunExperiment experiment = 19;
}
