syntax = "proto3";

package determined.experiment.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/experimentv1";

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "protoc-gen-swagger/options/annotations.proto";

// The current state of the experiment.
enum State {
  // The state of the experiment is unknown.
  STATE_UNSPECIFIED = 0;
  // The experiment is in an active state.
  STATE_ACTIVE = 1;
  // The experiment is in a paused state
  STATE_PAUSED = 2;
  // The experiment is completed and is shutting down.
  STATE_STOPPING_COMPLETED = 3;
  // The experiment is canceled and is shutting down.
  STATE_STOPPING_CANCELED = 4;
  // The experiment is errored and is shutting down.
  STATE_STOPPING_ERROR = 5;
  // The experiment is completed and is shut down.
  STATE_COMPLETED = 6;
  // The experiment is canceled and is shut down.
  STATE_CANCELED = 7;
  // The experiment is errored and is shut down.
  STATE_ERROR = 8;
  // The experiment has been deleted.
  STATE_DELETED = 9;
  // The experiment is deleting.
  STATE_DELETING = 10;
  // The experiment failed to delete.
  STATE_DELETE_FAILED = 11;
  // The experiment is killed and is shutting down.
  STATE_STOPPING_KILLED = 12;
  // The experiment is queued (waiting to be run, or job state is still queued).
  // Queued is a substate of the Active state.
  STATE_QUEUED = 13;
  // The experiment is pulling the image. Pulling is a substate of the Active
  // state.
  STATE_PULLING = 14;
  // The experiment is preparing the environment after finishing pulling the
  // image. Starting is a substate of the Active state.
  STATE_STARTING = 15;
  // The experiment has an allocation actively running.
  // Running is a substate of the Active state.
  STATE_RUNNING = 16;
}

// ExperimentTrial is trial-level data that is surfaced to the experiment
// level.
message ExperimentTrial {
  // the searcher metric value associated with the best_validation_id for the
  // trial.
  optional double searcher_metric_value = 1;
}

// Experiment is a collection of one or more trials that are exploring a
// user-defined hyperparameter space.
message Experiment {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "id",
        "name",
        "start_time",
        "state",
        "archived",
        "num_trials",
        "username",
        "job_id",
        "searcher_type",
        "project_id",
        "original_config",
        "project_owner_id",
        "config"
      ]
    }
  };
  // The id of the experiment.
  int32 id = 1;
  // The description of the experiment.
  string description = 2;
  // Labels attached to the experiment.
  repeated string labels = 3;
  // The time the experiment was started.
  google.protobuf.Timestamp start_time = 4;
  // The time the experiment ended if the experiment is stopped.
  google.protobuf.Timestamp end_time = 5;
  // The current state of the experiment.
  State state = 6;
  // Boolean denoting whether the experiment was archived.
  bool archived = 7;
  // The number of trials linked to the experiment.
  int32 num_trials = 8;
  // The ids of trials linked to the experiment.
  repeated int32 trial_ids = 20;
  // The display name of the user that created the experiment.
  string display_name = 18;
  // The id of the user that created the experiment.
  int32 user_id = 19;
  // The username of the user that created the experiment.
  string username = 10;
  // The resource pool the experiment was created in
  string resource_pool = 11;
  // The type of searcher for the experiment
  string searcher_type = 12;
  // The searcher metric name for the experiment
  string searcher_metric = 42;
  // The experiment name.
  string name = 13;
  // The experiment notes.
  string notes = 14;
  // Associated job's id.
  string job_id = 15;
  // Original id of a forked or continued experiment.
  google.protobuf.Int32Value forked_from = 16;
  // The current progress of a running experiment.
  google.protobuf.DoubleValue progress = 17;
  // The id of the project associated with this experiment.
  int32 project_id = 21;
  // The name of the project associated with this experiment.
  string project_name = 22;
  // The id of the workspace associated with this experiment.
  int32 workspace_id = 23;
  // The name of the workspace associated with this experiment.
  string workspace_name = 24;
  // The archived status of the parent project (can be inherited from
  // workspace).
  bool parent_archived = 25;
  // The configuration of the experiment.
  google.protobuf.Struct config = 26;
  // The original configuration that the user submitted.
  string original_config = 27;
  // The id of the user who created the parent project.
  int32 project_owner_id = 28;
  // The total size of checkpoints.
  int64 checkpoint_size = 29;
  // The count of checkpoints.
  int32 checkpoint_count = 30;
  // The metrics and hyperparameters associated with the best trial by searcher
  // metric.
  optional double best_trial_searcher_metric = 31;
  // Id of experiment's best trial, calculated by the best searcher metrics
  // value of trial's best validation.
  optional int32 best_trial_id = 32;
  // Unmanaged experiments are detached.
  bool unmanaged = 40;
  // Time in seconds which experiment ran or has been running.
  optional int32 duration = 41;
}

// PatchExperiment is a partial update to an experiment with only id required.
message PatchExperiment {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "id" ] }
  };
  // The id of the experiment.
  int32 id = 1;
  // The description of the experiment.
  google.protobuf.StringValue description = 2;
  // Labels attached to the experiment.
  google.protobuf.ListValue labels = 3;
  // The experiment name.
  google.protobuf.StringValue name = 4;
  // The experiment notes.
  google.protobuf.StringValue notes = 5;

  // Nested object for resources field patch.
  message PatchResources {
    // Experiment config resources.max_slots.
    optional int32 max_slots = 1;
    // Experiment config resources.weight.
    optional double weight = 2;
    // Experiment config resources.priority.
    optional int32 priority = 3;
  }

  // Nested object for checkpoint_storage field patch.
  message PatchCheckpointStorage {
    // Experiment config checkpoint_storage.save_experiment_best.
    int32 save_experiment_best = 1;
    // Experiment config checkpoint_storage.save_trial_best.
    int32 save_trial_best = 2;
    // Experiment config checkpoint_storage.save_trial_latest.
    int32 save_trial_latest = 3;
  }

  // Experiment config resources.
  optional PatchResources resources = 6;
  // Experiment config checkpoint_storage.
  optional PatchCheckpointStorage checkpoint_storage = 7;
}

// ValidationHistoryEntry is a single entry for a validation history for an
// experiment.
message ValidationHistoryEntry {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id", "end_time", "searcher_metric" ] }
  };
  // The id for the trial associated with this validation entry.
  int32 trial_id = 1;
  // The time at which the completed validation was reported.
  google.protobuf.Timestamp end_time = 2;
  // The value of the `searcher.metric`, indicated by the experiment config, for
  // the validation.
  float searcher_metric = 3;
}

// File node is one node of file in experiment model definition file tree.
message FileNode {
  // Path of file.
  string path = 1;
  // Name of file.
  string name = 2;
  // Modification time of file.
  google.protobuf.Timestamp modified_time = 3;
  // Number of bytes in file content.
  int32 content_length = 4;
  // Is this a directory.
  bool is_dir = 5;
  // MIME type of file.
  string content_type = 6;
  // Subdirectory files.
  repeated FileNode files = 7;
}
