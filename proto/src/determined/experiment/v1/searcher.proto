syntax = "proto3";

package determined.experiment.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/experimentv1";

import "google/protobuf/struct.proto";
import "protoc-gen-swagger/options/annotations.proto";

// ValidateAfterOperation means the trial should train and validate after
// training the given length.
message ValidateAfterOperation {
  // The length to train before reporting a validation.
  uint64 length = 1;
}

// Used to complete a ValidateAfterOperation.
message CompleteValidateAfterOperation {
  // The ValidateAfterOperation being completed.
  ValidateAfterOperation op = 1;
  // The value of searcher metric associated with this completed metric.
  // The metric provided should be the metric used to guide HP search.
  double searcher_metric = 2;
}

// Constant Hyperparameter
message ConstantHyperparameter {
  // value of the constant hyperparameter.
  double val = 1;
}

// Hyperparameter.
message Hyperparameter {
  // A user can provide one of the hyperparameter types for
  // the custom searcher.
  oneof union {
    // Constant hyperparameter.
    ConstantHyperparameter constant_hyperparam = 1;
  }
}

// Create a trial with given hyperparameters.
message CreateTrialOperation {
  // The key refers to which part of the model this hyperparameters are for.
  // An example in this map would be: {"optimizer": {"learning_rate": 0.01}}
  map<string, Hyperparameter> hyperparams = 1;
}

// Close a trial with given id.
message CloseTrialOperation {
  // trial_id is the id of the trial to close.
  string trial_id = 1;
}

// Get progress of custom searcher method.
message GetProgressOperation {
  // A message field can't be empty because bindings won't compile.
  // Making this a message to keep it consistent with other operations.
  int32 holder = 1;
}

// Shutdown custom searcher method.
message ShutdownOperation {
  // A message field can't be empty because bindings won't compile.
  // Making this a message to keep it consistent with other operations.
  int32 holder = 2;
}

// SearcherOperation is an operation issued by the searcher.
message SearcherOperation {
  // A searcher operation is one of the following operations.
  oneof union {
    // ValidateAfter is issued to tell a trial to train some then validate.
    ValidateAfterOperation validate_after = 1;
    // CreateTrial is issued to create trial.
    CreateTrialOperation create_trial = 2;
    // CloseTrial is issued to close trial.
    CloseTrialOperation close_trial = 3;
    // GetProgressOperation is issued to get the progress of the custom searcher
    // method.
    GetProgressOperation get_progress = 4;
    // ShutdownOperation is issued to shutdown the custom searcher method.
    ShutdownOperation shutdown = 5;
  }
}

// RunnableType defines the type of operation that should be executed by trial
// runners.
enum RunnableType {
  // Denotes an unknown runnable type.
  RUNNABLE_TYPE_UNSPECIFIED = 0;
  // Signals to a trial runner that it should run a train.
  RUNNABLE_TYPE_TRAIN = 1;
  // Signals to a trial runner it should compute validation metrics.
  RUNNABLE_TYPE_VALIDATE = 2;
}

// RunnableOperation represents a single runnable operation emitted by a
// searcher.
message RunnableOperation {
  // This is the type of the operation.
  RunnableType type = 1;
  // If the type == WORKLOAD_KIND_TRAIN, this is the number of units
  uint64 length = 2;
}

// TrialSimulation is a specific sequence of workloads that were run before the
// trial was completed.
message TrialSimulation {
  // The list of operations that were run before the trial was completed.
  repeated RunnableOperation operations = 1;
  // The number of times that this trial configuration has occurred during the
  // simulation.
  int32 occurrences = 2;
}

// ExperimentSimulation holds the configuration and results of simulated run of
// a searcher.
message ExperimentSimulation {
  // The simulated experiment config.
  google.protobuf.Struct config = 1;
  // The searcher simulation seed.
  uint32 seed = 2;
  // The list of trials in the simulation.
  repeated TrialSimulation trials = 3;
}
