syntax = "proto3";

package determined.experiment.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/experimentv1";

import "google/protobuf/struct.proto";

// InitialOperations is a searcher event signaling the creation of an
// experiment.
message InitialOperations {
  // incremental id of the event
  int32 id = 1;
}

// TrialCreated is a searcher event singaling the creation of a trial.
message TrialCreated {
  // incremental id of the event
  int32 id = 1;
  // uuid identifying the trial to the searcher
  string request_id = 2;
}

// ValidationCompleted is a searcher event triggered when a validation has been
// completed.
message ValidationCompleted {
  // incremental id of the event
  int32 id = 1;
  // uuid identifying the trial to the searcher
  string request_id = 2;
  // value of the validation metric used to direct the search
  double metric = 3;
}

// TrialClosed is a searcher event triggered when a trial has successfully
// finished
message TrialClosed {
  // incremental id of the event
  int32 id = 1;
  // uuid identifying the trial to the searcher
  string request_id = 2;
}

// TrialExitedEarly is a searcher event triggered when a trial exited
// prematurely
message TrialExitedEarly {
  // incremental id of the event
  int32 id = 1;
  // uuid indentifying the trial to the searcher
  string request_id = 2;
  // The reason for an early exit.
  enum ExitedReason {
    // Zero-value (not allowed).
    EXITED_REASON_UNSPECIFIED = 0;
    // Indicates the trial exited due to an invalid hyperparameter.
    EXITED_REASON_INVALID_HP = 1;
    // Indicates the trial exited due to a user requested stop.
    EXITED_REASON_USER_REQUESTED_STOP = 2;
    // Indicates the trial exited due to an invalid hyperparameter
    // in the trial init.
    EXITED_REASON_INIT_INVALID_HP = 3;
  }
  // The reason for the exit.
  ExitedReason exited_reason = 3;
}

// SearcherEvent is a message from master to a client-driven
// custom searcher informing it of relevant changes in the state
// of an experiment
message SearcherEvent {
  // The concrete event
  oneof event {
    // an experiment has just been created
    InitialOperations initial_operations = 1;
    // a trial has been created
    TrialCreated trial_created = 2;
    // validation has completed
    ValidationCompleted validation_completed = 3;
    // trial has finished
    TrialClosed trial_closed = 4;
    // trial exited early
    TrialExitedEarly trial_exited_early = 5;
  }
}

// ValidateAfterOperation means the trial should train and validate after
// training the given length.
message ValidateAfterOperation {
  // The length to train before reporting a validation.
  uint64 length = 1;
}

// Used to complete a ValidateAfterOperation.
message CompleteValidateAfterOperation {
  // The ValidateAfterOperation being completed.
  ValidateAfterOperation op = 1;
  // The value of searcher metric associated with this completed metric.
  // The metric provided should be the metric used to guide HP search.
  double searcher_metric = 2;
}

// Constant Hyperparameter
message ConstantHyperparameter {
  // value of the constant hyperparameter.
  double val = 1;
}

// Nested Hyperparamater
message RawNestedHyperparameter {
  // An example in a nested param would be: {"optimizer": {"learning_rate":
  // 0.01}}
  map<string, Hyperparameter> map_hyperparam = 1;
}

// Hyperparameter.
message Hyperparameter {
  // A user can provide one of the hyperparameter types for
  // the custom searcher.
  oneof union {
    // Constant hyperparameter.
    ConstantHyperparameter constant_hyperparam = 1;
    // Nested hyperparameter.
    RawNestedHyperparameter nested_hyperparam = 2;
  }
}

// Create a trial with given hyperparameters.
message CreateTrialOperation {
  // The key refers to which part of the model this hyperparameters are for.
  // TODO: add support for nested hyperparameter would be: {"optimizer":
  // {"learning_rate": 0.01}}
  map<string, Hyperparameter> hyperparams = 1;
}

// Close a trial with given id.
message CloseTrialOperation {
  // trial_id is the id of the trial to close.
  string trial_id = 1;
}

// Shutdown custom searcher method.
message ShutdownOperation {
  // A message field can't be empty because bindings won't compile.
  // Making this a message to keep it consistent with other operations.
  int32 empty_field = 2;
}

// SearcherOperation is an operation issued by the searcher.
message SearcherOperation {
  // A searcher operation is one of the following operations.
  oneof union {
    // ValidateAfter is issued to tell a trial to train some then validate.
    ValidateAfterOperation validate_after = 1;
    // CreateTrial is issued to create trial.
    CreateTrialOperation create_trial = 2;
    // CloseTrial is issued to close trial.
    CloseTrialOperation close_trial = 3;
    // ShutdownOperation is issued to shutdown the custom searcher method.
    ShutdownOperation shutdown = 4;
  }
}

// RunnableType defines the type of operation that should be executed by trial
// runners.
enum RunnableType {
  // Denotes an unknown runnable type.
  RUNNABLE_TYPE_UNSPECIFIED = 0;
  // Signals to a trial runner that it should run a train.
  RUNNABLE_TYPE_TRAIN = 1;
  // Signals to a trial runner it should compute validation metrics.
  RUNNABLE_TYPE_VALIDATE = 2;
}

// RunnableOperation represents a single runnable operation emitted by a
// searcher.
message RunnableOperation {
  // This is the type of the operation.
  RunnableType type = 1;
  // If the type == WORKLOAD_KIND_TRAIN, this is the number of units
  uint64 length = 2;
}

// TrialSimulation is a specific sequence of workloads that were run before the
// trial was completed.
message TrialSimulation {
  // The list of operations that were run before the trial was completed.
  repeated RunnableOperation operations = 1;
  // The number of times that this trial configuration has occurred during the
  // simulation.
  int32 occurrences = 2;
}

// ExperimentSimulation holds the configuration and results of simulated run of
// a searcher.
message ExperimentSimulation {
  // The simulated experiment config.
  google.protobuf.Struct config = 1;
  // The searcher simulation seed.
  uint32 seed = 2;
  // The list of trials in the simulation.
  repeated TrialSimulation trials = 3;
}
