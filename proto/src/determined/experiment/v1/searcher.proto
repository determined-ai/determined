syntax = "proto3";

package determined.experiment.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/experimentv1";

import "google/protobuf/struct.proto";
import "protoc-gen-swagger/options/annotations.proto";

// ValidateAfterOperation means the trial should train and validate after
// training the given length.
message ValidateAfterOperation {
  // The length to train before reporting a validation.
  uint64 length = 1;
}

// Used to complete a ValidateAfterOperation.
message CompleteValidateAfterOperation {
  // The ValidateAfterOperation being completed.
  ValidateAfterOperation op = 1;
  // The value of searcher metric associated with this completed metric.
  // The metric provided should be the metric used to guide HP search.
  double searcher_metric = 2;
}

// SearcherOperation is an operation issued by the searcher.
message SearcherOperation {
  // A searcher operation is one of the following operations.
  oneof union {
    // ValidateAfter is issued to tell a trial to train some then validate.
    ValidateAfterOperation validate_after = 1;
    // CreateTrial is issued to create trial. TODO: Might need to create a message like ValidateAfter to include info needed? 
    string create_trial = 2; 
    // CloseTrial is issued to close trial. TODO: Might need to create a message like ValidateAfter to include info needed? 
    string close_trial = 3; 
  }
}

// SearcherState is the state of the searcher. 
message SearcherState {
  // Number of trials requested. 
  int32 trials_requested = 1; 
 // TrialCreated maps model request ids to a boolean that is true
 // when a trial is created. 
  map<string,bool> trials_created = 2; 
  // TrialCreated maps model request ids to a boolean that is true
  // when a trial is closed. 
  map<string,bool> trials_closed = 3; 
  // Exits maps model request ids to a boolean that is true
  // when a trial exits. 
  map<string,bool> exits = 4; 
  // Failures maps model request ids to a boolean that is true
  // when a trial is fails. 
  map<string,bool> failures = 5; 
  // Trial progress maps model request ids to the number of epochs or
  // batches that are completed. 
  map<string, double> trial_progress = 6; 
  // Shutdown is true when the searcher is done. 
  bool shutdown = 7; 
  // Maps the ValidateAfter.String() to the ValidateAfter operations when 
  // a Validation for trial has completed. 
  map<string,ValidateAfterOperation> completed_validate_operations = 8;
  // Note: The following fields are created specifically for custom searcher. 
  // A queue of all operations received from the Client. 
  repeated SearcherOperation received_searcher_operations = 10;  
  // Maps a SearcherOperation.String() to true when the operation is completed.   
  map<string, bool> completed_searcher_operations = 11;  
  // A queue of all events recieved from the client. 
  // Each event string is appended with a counter id.  
  repeated string created_searcher_events = 12;  
}

// RunnableType defines the type of operation that should be executed by trial
// runners.
enum RunnableType {
  // Denotes an unknown runnable type.
  RUNNABLE_TYPE_UNSPECIFIED = 0;
  // Signals to a trial runner that it should run a train.
  RUNNABLE_TYPE_TRAIN = 1;
  // Signals to a trial runner it should compute validation metrics.
  RUNNABLE_TYPE_VALIDATE = 2;
}

// RunnableOperation represents a single runnable operation emitted by a
// searcher.
message RunnableOperation {
  // This is the type of the operation.
  RunnableType type = 1;
  // If the type == WORKLOAD_KIND_TRAIN, this is the number of units
  uint64 length = 2;
}

// TrialSimulation is a specific sequence of workloads that were run before the
// trial was completed.
message TrialSimulation {
  // The list of operations that were run before the trial was completed.
  repeated RunnableOperation operations = 1;
  // The number of times that this trial configuration has occurred during the
  // simulation.
  int32 occurrences = 2;
}

// ExperimentSimulation holds the configuration and results of simulated run of
// a searcher.
message ExperimentSimulation {
  // The simulated experiment config.
  google.protobuf.Struct config = 1;
  // The searcher simulation seed.
  uint32 seed = 2;
  // The list of trials in the simulation.
  repeated TrialSimulation trials = 3;
}
