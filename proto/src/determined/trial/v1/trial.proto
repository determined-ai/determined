syntax = "proto3";

package determined.trial.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/trialv1";

import "google/protobuf/struct.proto";
import "determined/common/v1/common.proto";
import "determined/checkpoint/v1/checkpoint.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

// CheckpointWorkload is an artifact created by a trial during training.
message CheckpointWorkload {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "state", "total_batches" ] }
  };
  // UUID of the checkpoint.
  string uuid = 1;
  // The time the workload finished or was stopped.
  google.protobuf.Timestamp end_time = 3;
  // The state of the checkpoint.
  determined.checkpoint.v1.State state = 4;
  // Dictionary of file paths to file sizes in bytes of all files in the
  // checkpoint.
  map<string, int64> resources = 5;
  // Total number of batches as of this workload's completion.
  int32 total_batches = 8;
  // User defined metadata associated with the checkpoint.
  google.protobuf.Struct metadata = 9;
}

// The current state of the trial. see \dT+ trial_state in db
enum State {
  // The trial is in an unspecified state.
  STATE_UNSPECIFIED = 0;
  // The trial is in an active state.
  STATE_ACTIVE = 1;
  // The trial is in a paused state
  STATE_PAUSED = 2;
  // The trial is canceled and is shutting down.
  STATE_STOPPING_CANCELED = 3;
  // The trial is killed and is shutting down.
  STATE_STOPPING_KILLED = 4;
  // The trial is completed and is shutting down.
  STATE_STOPPING_COMPLETED = 5;
  // The trial is errored and is shutting down.
  STATE_STOPPING_ERROR = 6;
  // The trial is canceled and is shut down.
  STATE_CANCELED = 7;
  // The trial is completed and is shut down.
  STATE_COMPLETED = 8;
  // The trial is errored and is shut down.
  STATE_ERROR = 9;
  // The trial is queued (waiting to be run, or job state is still queued).
  // Queued is a substate of the Active state.
  STATE_QUEUED = 10;
  // The trial is pulling the image. Pulling is a substate of the Active
  // state.
  STATE_PULLING = 11;
  // The trial is preparing the environment after finishing pulling the
  // image. Starting is a substate of the Active state.
  STATE_STARTING = 12;
  // The trial's allocation is actively running.
  // Running is a substate of the Active state.
  STATE_RUNNING = 13;
}

// MetricsWorkload is a workload generating metrics.
message MetricsWorkload {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "metrics", "state", "num_inputs", "total_batches" ]
    }
  };
  // The time the workload finished or was stopped.
  google.protobuf.Timestamp end_time = 2;
  // Metrics.
  determined.common.v1.Metrics metrics = 40;
  // Number of inputs processed.
  int32 num_inputs = 5 [deprecated = true];
  // Total number of batches as of this workload's completion.
  int32 total_batches = 8;
}

// Trial is a set of workloads and are exploring a determined set of
// hyperparameters.
message Trial {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "id",
        "experimentId",
        "startTime",
        "state",
        "restarts",
        "hparams",
        "totalBatchesProcessed"
      ]
    }
  };
  // The id of the trial.
  int32 id = 1;
  // The id of the parent experiment.
  int32 experiment_id = 2;
  // The time the trial was started.
  google.protobuf.Timestamp start_time = 3;
  // The time the trial ended if the trial is stopped.
  google.protobuf.Timestamp end_time = 4;
  // The current state of the trial.
  State state = 5;
  // Number times the trial restarted.
  int32 restarts = 17;
  // Trial hyperparameters.
  google.protobuf.Struct hparams = 6;
  // The current processed batches.
  int32 total_batches_processed = 7;
  // Best validation.
  MetricsWorkload best_validation = 8;
  // Latest validation.
  MetricsWorkload latest_validation = 9;
  // Best checkpoint.
  CheckpointWorkload best_checkpoint = 10;
  // The last reported state of the trial runner (harness code).
  string runner_state = 11;
  // The wall clock time is all active time of the cluster for the trial,
  // inclusive of everything (restarts, initiailization, etc), in seconds.
  double wall_clock_time = 12;
  // UUID of checkpoint that this trial started from.
  string warm_start_checkpoint_uuid = 13;
  // Id of the first task associated with this trial.
  // This field is deprecated since trials can have multiple tasks.
  string task_id = 14 [deprecated = true];
  // The sum of sizes of all resources in all checkpoints for the trial.
  uint64 total_checkpoint_size = 15;
  // The count of checkpoints.
  int32 checkpoint_count = 18;
  // summary metrics
  google.protobuf.Struct summary_metrics = 19;
  // Task IDs of tasks associated with this trial.
  // Length of task_ids will always be greater or equal to one when TaskID is
  // sent. For example CompareTrial we will send a reduced Trial object, without
  // TaskID or TaskIDs fileld in. The first element of task_ids will be the same
  // as task_id. task_ids is sorted ascending by task_run_id.
  repeated string task_ids = 20;
}

// TrialProfilerMetricLabels are the labels for a single series, where a series
// is a defined as all metrics sharing a distinct set of labels
message TrialProfilerMetricLabels {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id", "name" ] }
  };
  // To distinguish the 2 different categories of metrics.
  enum ProfilerMetricType {
    // Zero-value (not allowed).
    PROFILER_METRIC_TYPE_UNSPECIFIED = 0;
    // For systems metrics, like GPU utilization or memory.
    PROFILER_METRIC_TYPE_SYSTEM = 1;
    // For timing metrics, like how long a backwards pass or getting a batch
    // from the dataloader took.
    PROFILER_METRIC_TYPE_TIMING = 2;
    // For other miscellaneous metrics.
    PROFILER_METRIC_TYPE_MISC = 3;
  }
  // The ID of the trial.
  int32 trial_id = 1;
  // The name of the metric.
  string name = 2;
  // The agent ID associated with the metric.
  string agent_id = 3;
  // The GPU UUID associated with the metric.
  string gpu_uuid = 4;
  // The type of the metric.
  ProfilerMetricType metric_type = 5;
}

// TrialProfilerMetricsBatch is a batch of trial profiler metrics. A batch will
// contain metrics pertaining to a single series. The fields values, batches and
// timestamps will be equal length arrays with each index corresponding to a
// reading.
message TrialProfilerMetricsBatch {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "values", "batches", "timestamps", "labels" ] }
  };
  // The measurement for a reading, repeated for the batch of metrics.
  repeated float values = 1;
  // The batch at which a reading occurred, repeated for the batch of metrics.
  repeated int32 batches = 2;
  // The timestamp at which a reading occurred, repeated for the batch of
  // metrics.
  repeated google.protobuf.Timestamp timestamps = 3;
  // The labels for this series.
  TrialProfilerMetricLabels labels = 4;
}

// Signals to the experiment the trial early exited.
message TrialEarlyExit {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "reason" ] }
  };
  // The reason for an early exit.
  enum ExitedReason {
    // Zero-value (not allowed).
    EXITED_REASON_UNSPECIFIED = 0;
    // Indicates the trial exited due to an invalid hyperparameter.
    EXITED_REASON_INVALID_HP = 1;
    // Indicates the trial exited due to an invalid hyperparameter
    // in the trial init.
    EXITED_REASON_INIT_INVALID_HP = 3;
  }
  // The reason for the exit.
  ExitedReason reason = 1;
}

// The rendezvous info for the trial to rendezvous with sibling containers.
message RendezvousInfo {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "addresses", "rank", "slots" ] }
  };
  // The rendezvous addresses of the other containers.
  repeated string addresses = 1;
  // The container rank.
  int32 rank = 2;
  // The slots for each address, respectively.
  repeated int32 slots = 3;
}

// The metadata pertaining to the current running task for a trial.
message TrialRunnerMetadata {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "state" ] }
  };
  // The state of the trial runner.
  string state = 1;
}

// Metrics from the trial some duration of training.
message TrialMetrics {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "trial_id", "trial_run_id", "steps_completed", "metrics" ]
    }
  };
  // The trial associated with these metrics.
  int32 trial_id = 1;
  // The trial run associated with these metrics.
  int32 trial_run_id = 2;
  // The number of batches trained on when these metrics were reported.
  int32 steps_completed = 3;
  // The metrics for this bit of training, including:
  // - avg_metrics: metrics reduced over the reporting period).
  // - batch_metrics: (optional) per-batch metrics.
  determined.common.v1.Metrics metrics = 9;
}

// Metrics report.
message MetricsReport {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "trial_id",
        "end_time",
        "metrics",
        "total_batches",
        "archived",
        "id",
        "trial_run_id"
      ]
    }
  };
  // ID of the trial.
  int32 trial_id = 1;
  // End time of when metric was reported.
  google.protobuf.Timestamp end_time = 2;
  // Struct of the reported metrics.
  google.protobuf.Struct metrics = 3;
  // batches completed in the report.
  int32 total_batches = 4;
  // If metric is archived.
  bool archived = 5;
  // ID of metric in table.
  int32 id = 6;
  // Run ID of trial when metric was reported.
  int32 trial_run_id = 7;
}

// TrialSourceInfoType is the type of the TrialSourceInfo, which serves as a
// link between a trial and a checkpoint or model version
enum TrialSourceInfoType {
  // The type is unspecified
  TRIAL_SOURCE_INFO_TYPE_UNSPECIFIED = 0;
  // "Inference" Trial Source Info Type, used for batch inference
  TRIAL_SOURCE_INFO_TYPE_INFERENCE = 1;
  // "Fine Tuning" Trial Source Info Type, used in model hub
  TRIAL_SOURCE_INFO_TYPE_FINE_TUNING = 2;
}

// Denotes a connection between a given trial and a
// checkpoint or model_version
message TrialSourceInfo {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "trial_id", "checkpoint_uuid", "trial_source_info_type" ]
    }
  };
  // ID of the trial.
  int32 trial_id = 1;
  // UUID of the checkpoint.
  string checkpoint_uuid = 2;
  // Source `id`` for the model which generated the checkpoint (if applicable)
  optional int32 model_id = 3;
  // Source `version` in the model_version version field which generated the
  // checkpoint (if applicable)
  optional int32 model_version = 4;
  // Type for this trial_source_info
  TrialSourceInfoType trial_source_info_type = 5;
}

// Denotes a trial with a specific trial source info type and its metrics
message TrialSourceInfoMetric {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "trial_id", "metric_report", "trial_source_info_type" ]
    }
  };
  // Trial ID for the inference or fine-tuning run
  int32 trial_id = 1;
  // Type of the TrialSourceInfo
  determined.trial.v1.TrialSourceInfoType trial_source_info_type = 2;
  // All metrics for the trial
  repeated determined.trial.v1.MetricsReport metric_reports = 3;
}
