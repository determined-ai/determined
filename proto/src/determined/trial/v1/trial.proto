syntax = "proto3";

package determined.trial.v1;
option go_package = "github.com/determined-ai/determined/proto/pkg/trialv1";

import "google/protobuf/struct.proto";
import "determined/experiment/v1/experiment.proto";
import "determined/checkpoint/v1/checkpoint.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-swagger/options/annotations.proto";

// CheckpointWorkload is an artifact created by a trial during training.
message CheckpointWorkload {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "start_time", "state", "total_batches" ] }
  };
  // UUID of the checkpoint.
  string uuid = 1;
  // The time the workload was started.
  google.protobuf.Timestamp start_time = 2;
  // The time the workload finished or was stopped.
  google.protobuf.Timestamp end_time = 3;
  // The state of the checkpoint.
  determined.checkpoint.v1.State state = 4;
  // Dictionary of file paths to file sizes in bytes of all files in the
  // checkpoint.
  map<string, int64> resources = 5;
  // Total number of batches as of this workload's completion.
  int32 total_batches = 8;
}

// MetricsWorkload is a workload generating metrics.
message MetricsWorkload {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "start_time", "state", "num_inputs", "total_batches" ]
    }
  };
  // The time the workload was started.
  google.protobuf.Timestamp start_time = 1;
  // The time the workload finished or was stopped.
  google.protobuf.Timestamp end_time = 2;
  // The current validation state.
  determined.experiment.v1.State state = 3;
  // Metrics.
  google.protobuf.Struct metrics = 4;
  // Number of inputs processed.
  int32 num_inputs = 5 [deprecated = true];
  // Total number of batches as of this workload's completion.
  int32 total_batches = 8;
}

// Trial is a set of workloads and are exploring a determined set of
// hyperparameters.
message Trial {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "id",
        "experimentId",
        "startTime",
        "state",
        "hparams",
        "totalBatchesProcessed"
      ]
    }
  };
  // The id of the trial.
  int32 id = 1;
  // The id of the parent experiment.
  int32 experiment_id = 2;
  // The time the trial was started.
  google.protobuf.Timestamp start_time = 3;
  // The time the trial ended if the trial is stopped.
  google.protobuf.Timestamp end_time = 4;
  // The current state of the trial.
  determined.experiment.v1.State state = 5;
  // Trial hyperparameters.
  google.protobuf.Struct hparams = 6;
  // The current processed batches.
  int32 total_batches_processed = 7;
  // Best validation.
  MetricsWorkload best_validation = 8;
  // Latest validation.
  MetricsWorkload latest_validation = 9;
  // Best checkpoint.
  CheckpointWorkload best_checkpoint = 10;
}

// TrialProfilerMetricLabels are the labels for a single series, where a series
// is a defined as all metrics sharing a distinct set of labels
message TrialProfilerMetricLabels {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "trial_id", "name" ] }
  };
  // To distinguish the 2 different categories of metrics.
  enum ProfilerMetricType {
    // Zero-value (not allowed).
    PROFILER_METRIC_TYPE_UNSPECIFIED = 0;
    // For systems metrics, like GPU utilization or memory.
    PROFILER_METRIC_TYPE_SYSTEM = 1;
    // For timing metrics, like how long a backwards pass or getting a batch
    // from the dataloader took.
    PROFILER_METRIC_TYPE_TIMING = 2;
    // For other miscellaneous metrics.
    PROFILER_METRIC_TYPE_MISC = 3;
  }
  // The ID of the trial.
  int32 trial_id = 1;
  // The name of the metric.
  string name = 2;
  // The agent ID associated with the metric.
  string agent_id = 3;
  // The GPU UUID associated with the metric.
  string gpu_uuid = 4;
  // The type of the metric.
  ProfilerMetricType metric_type = 5;
}

// TrialProfilerMetricsBatch is a batch of trial profiler metrics. A batch will
// contain metrics pertaining to a single series. The fields values, batches and
// timestamps will be equal length arrays with each index corresponding to a
// reading.
message TrialProfilerMetricsBatch {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "values", "batches", "timestamps", "labels" ] }
  };
  // The measurement for a reading, repeated for the batch of metrics.
  repeated float values = 1;
  // The batch at which a reading occurred, repeated for the batch of metrics.
  repeated int32 batches = 2;
  // The timestamp at which a reading occurred, repeated for the batch of
  // metrics.
  repeated google.protobuf.Timestamp timestamps = 3;
  // The labels for this series.
  TrialProfilerMetricLabels labels = 4;
}

// Signals to the experiment the trial early exited.
message TrialEarlyExit {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: { required: [ "reason" ] }
  };
  // The reason for an early exit.
  enum ExitedReason {
    // Zero-value (not allowed).
    EXITED_REASON_UNSPECIFIED = 0;
    // Indicates the trial exited due to an invalid hyperparameter.
    EXITED_REASON_INVALID_HP = 1;
    // Indicates the trial exited due to a user requested stop.
    EXITED_REASON_USER_REQUESTED_STOP = 2;
    // Indicates the trial exited due to an invalid hyperparameter
    // in the trial init.
    EXITED_REASON_INIT_INVALID_HP = 3;
  }
  // The reason for the exit.
  ExitedReason reason = 1;
}

// The training metrics for some duration of training.
message TrainingMetrics {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "trial_id", "trial_run_id", "total_batches", "metrics" ]
    }
  };
  // The trial associated with these metrics.
  int32 trial_id = 1;
  // The trial run associated with these metrics.
  int32 trial_run_id = 2;
  // The number of batches trained on when these metrics were reported.
  int32 total_batches = 3;
  // The number of batches trained on when these metrics were reported.
  int32 total_records = 4;
  // The number of epochs trained on when these metrics were reported.
  float total_epochs = 5;
  // The metrics for this bit of training (reduced over the reporting period).
  google.protobuf.Struct metrics = 6;
  // The batch metrics for this bit of training.
  repeated google.protobuf.Struct batch_metrics = 7;
}

// The validation metrics at some point of training.
message ValidationMetrics {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [ "trial_id", "trial_run_id", "total_batches", "metrics" ]
    }
  };
  // The trial associated with these metrics.
  int32 trial_id = 1;
  // The trial run associated with these metrics.
  int32 trial_run_id = 2;
  // The number of batches trained on when these metrics were reported.
  int32 total_batches = 3;
  // The number of batches trained on when these metrics were reported.
  int32 total_records = 4;
  // The number of epochs trained on when these metrics were reported.
  float total_epochs = 5;
  // The metrics.
  google.protobuf.Struct metrics = 6;
}

// The checkpoint metadata for some trial checkpoint.
message CheckpointMetadata {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: [
        "trial_id",
        "trial_run_id",
        "uuid",
        "framework",
        "format",
        "determined_version"
      ]
    }
  };
  // The ID of the trial associated with the checkpoint.
  int32 trial_id = 1;
  // The run of the trial assocaited with the checkpoint.
  int32 trial_run_id = 2;
  // UUID of the checkpoint.
  string uuid = 3;
  // Dictionary of file paths to file sizes in bytes of all files.
  map<string, int64> resources = 4;
  // The framework associated with the checkpoint.
  string framework = 5;
  // The format of the checkpoint.
  string format = 6;
  // The Determined version associated with the checkpoint.
  string determined_version = 7;
  // The number of batches trained on when these metrics were reported.
  int32 total_batches = 8;
  // The number of batches trained on when these metrics were reported.
  int32 total_records = 9;
  // The number of epochs trained on when these metrics were reported.
  float total_epochs = 10;
}
