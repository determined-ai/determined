// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// source: determined/master/v1/master.proto

package masterv1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The period over which to perform aggregation.
type ResourceAllocationAggregationPeriod int32

const (
	// Unspecified. This value will never actually be returned by the API, it is
	// just an artifact of using protobuf.
	ResourceAllocationAggregationPeriod_RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED ResourceAllocationAggregationPeriod = 0
	// Aggregation by day.
	ResourceAllocationAggregationPeriod_RESOURCE_ALLOCATION_AGGREGATION_PERIOD_DAILY ResourceAllocationAggregationPeriod = 1
	// Aggregation by month.
	ResourceAllocationAggregationPeriod_RESOURCE_ALLOCATION_AGGREGATION_PERIOD_MONTHLY ResourceAllocationAggregationPeriod = 2
)

// Enum value maps for ResourceAllocationAggregationPeriod.
var (
	ResourceAllocationAggregationPeriod_name = map[int32]string{
		0: "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED",
		1: "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_DAILY",
		2: "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_MONTHLY",
	}
	ResourceAllocationAggregationPeriod_value = map[string]int32{
		"RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED": 0,
		"RESOURCE_ALLOCATION_AGGREGATION_PERIOD_DAILY":       1,
		"RESOURCE_ALLOCATION_AGGREGATION_PERIOD_MONTHLY":     2,
	}
)

func (x ResourceAllocationAggregationPeriod) Enum() *ResourceAllocationAggregationPeriod {
	p := new(ResourceAllocationAggregationPeriod)
	*p = x
	return p
}

func (x ResourceAllocationAggregationPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceAllocationAggregationPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_determined_master_v1_master_proto_enumTypes[0].Descriptor()
}

func (ResourceAllocationAggregationPeriod) Type() protoreflect.EnumType {
	return &file_determined_master_v1_master_proto_enumTypes[0]
}

func (x ResourceAllocationAggregationPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceAllocationAggregationPeriod.Descriptor instead.
func (ResourceAllocationAggregationPeriod) EnumDescriptor() ([]byte, []int) {
	return file_determined_master_v1_master_proto_rawDescGZIP(), []int{0}
}

// A type of aggregation performed on allocation values.
type ResourceAllocationAggregationType int32

const (
	// Unspecified. This value will never actually be returned by the API, it is
	// just an artifact of using protobuf.
	ResourceAllocationAggregationType_RESOURCE_ALLOCATION_AGGREGATION_TYPE_UNSPECIFIED ResourceAllocationAggregationType = 0
	// Aggregation by days only.
	ResourceAllocationAggregationType_RESOURCE_ALLOCATION_AGGREGATION_TYPE_TOTAL ResourceAllocationAggregationType = 1
	// Aggregation by owner within each day.
	ResourceAllocationAggregationType_RESOURCE_ALLOCATION_AGGREGATION_TYPE_USER ResourceAllocationAggregationType = 2
	// Aggregation by experiment labels within each day.
	ResourceAllocationAggregationType_RESOURCE_ALLOCATION_AGGREGATION_TYPE_LABEL ResourceAllocationAggregationType = 3
)

// Enum value maps for ResourceAllocationAggregationType.
var (
	ResourceAllocationAggregationType_name = map[int32]string{
		0: "RESOURCE_ALLOCATION_AGGREGATION_TYPE_UNSPECIFIED",
		1: "RESOURCE_ALLOCATION_AGGREGATION_TYPE_TOTAL",
		2: "RESOURCE_ALLOCATION_AGGREGATION_TYPE_USER",
		3: "RESOURCE_ALLOCATION_AGGREGATION_TYPE_LABEL",
	}
	ResourceAllocationAggregationType_value = map[string]int32{
		"RESOURCE_ALLOCATION_AGGREGATION_TYPE_UNSPECIFIED": 0,
		"RESOURCE_ALLOCATION_AGGREGATION_TYPE_TOTAL":       1,
		"RESOURCE_ALLOCATION_AGGREGATION_TYPE_USER":        2,
		"RESOURCE_ALLOCATION_AGGREGATION_TYPE_LABEL":       3,
	}
)

func (x ResourceAllocationAggregationType) Enum() *ResourceAllocationAggregationType {
	p := new(ResourceAllocationAggregationType)
	*p = x
	return p
}

func (x ResourceAllocationAggregationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceAllocationAggregationType) Descriptor() protoreflect.EnumDescriptor {
	return file_determined_master_v1_master_proto_enumTypes[1].Descriptor()
}

func (ResourceAllocationAggregationType) Type() protoreflect.EnumType {
	return &file_determined_master_v1_master_proto_enumTypes[1]
}

func (x ResourceAllocationAggregationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceAllocationAggregationType.Descriptor instead.
func (ResourceAllocationAggregationType) EnumDescriptor() ([]byte, []int) {
	return file_determined_master_v1_master_proto_rawDescGZIP(), []int{1}
}

// One instance of slots in the cluster being allocated to a task.
type ResourceAllocationRawEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of workload being run during this allocation (training,
	// checkpoint, or validation).
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// The time at which the allocation began.
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The time at which the allocation ended.
	EndTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The ID of the experiment the allocation is a part of.
	ExperimentId int32 `protobuf:"varint,4,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
	// The username of the user who ran the experiment.
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// The username of the user who ran the experiment.
	UserId int32 `protobuf:"varint,9,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The labels assigned to the experiment.
	Labels []string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	// The number of seconds for which the allocation was active during the
	// requested period.
	Seconds float32 `protobuf:"fixed32,7,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// The number of slots used by the allocation.
	Slots int32 `protobuf:"varint,8,opt,name=slots,proto3" json:"slots,omitempty"`
}

func (x *ResourceAllocationRawEntry) Reset() {
	*x = ResourceAllocationRawEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_master_v1_master_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAllocationRawEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAllocationRawEntry) ProtoMessage() {}

func (x *ResourceAllocationRawEntry) ProtoReflect() protoreflect.Message {
	mi := &file_determined_master_v1_master_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAllocationRawEntry.ProtoReflect.Descriptor instead.
func (*ResourceAllocationRawEntry) Descriptor() ([]byte, []int) {
	return file_determined_master_v1_master_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceAllocationRawEntry) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceAllocationRawEntry) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ResourceAllocationRawEntry) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ResourceAllocationRawEntry) GetExperimentId() int32 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *ResourceAllocationRawEntry) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ResourceAllocationRawEntry) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ResourceAllocationRawEntry) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ResourceAllocationRawEntry) GetSeconds() float32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *ResourceAllocationRawEntry) GetSlots() int32 {
	if x != nil {
		return x.Slots
	}
	return 0
}

// One instance of slots in the cluster being allocated to a task during a
// period (aggregated).
type ResourceAllocationAggregatedEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date of this entry.
	PeriodStart string `protobuf:"bytes,1,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	// The period over which aggregation occurred.
	Period ResourceAllocationAggregationPeriod `protobuf:"varint,2,opt,name=period,proto3,enum=determined.master.v1.ResourceAllocationAggregationPeriod" json:"period,omitempty"`
	// The total number of seconds included in this allocation entry.
	Seconds float32 `protobuf:"fixed32,3,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// The seconds in the cluster used by experiments belonging to each user.
	ByUsername map[string]float32 `protobuf:"bytes,4,rep,name=by_username,json=byUsername,proto3" json:"by_username,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// The seconds in the cluster used by experiments labeled with each label.
	ByExperimentLabel map[string]float32 `protobuf:"bytes,5,rep,name=by_experiment_label,json=byExperimentLabel,proto3" json:"by_experiment_label,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// The seconds in the cluster used by experiments assigned to each resource
	// pool.
	ByResourcePool map[string]float32 `protobuf:"bytes,6,rep,name=by_resource_pool,json=byResourcePool,proto3" json:"by_resource_pool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	// This field has been deprecated and will be empty.
	ByAgentLabel map[string]float32 `protobuf:"bytes,7,rep,name=by_agent_label,json=byAgentLabel,proto3" json:"by_agent_label,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *ResourceAllocationAggregatedEntry) Reset() {
	*x = ResourceAllocationAggregatedEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_master_v1_master_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceAllocationAggregatedEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAllocationAggregatedEntry) ProtoMessage() {}

func (x *ResourceAllocationAggregatedEntry) ProtoReflect() protoreflect.Message {
	mi := &file_determined_master_v1_master_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAllocationAggregatedEntry.ProtoReflect.Descriptor instead.
func (*ResourceAllocationAggregatedEntry) Descriptor() ([]byte, []int) {
	return file_determined_master_v1_master_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceAllocationAggregatedEntry) GetPeriodStart() string {
	if x != nil {
		return x.PeriodStart
	}
	return ""
}

func (x *ResourceAllocationAggregatedEntry) GetPeriod() ResourceAllocationAggregationPeriod {
	if x != nil {
		return x.Period
	}
	return ResourceAllocationAggregationPeriod_RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED
}

func (x *ResourceAllocationAggregatedEntry) GetSeconds() float32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *ResourceAllocationAggregatedEntry) GetByUsername() map[string]float32 {
	if x != nil {
		return x.ByUsername
	}
	return nil
}

func (x *ResourceAllocationAggregatedEntry) GetByExperimentLabel() map[string]float32 {
	if x != nil {
		return x.ByExperimentLabel
	}
	return nil
}

func (x *ResourceAllocationAggregatedEntry) GetByResourcePool() map[string]float32 {
	if x != nil {
		return x.ByResourcePool
	}
	return nil
}

func (x *ResourceAllocationAggregatedEntry) GetByAgentLabel() map[string]float32 {
	if x != nil {
		return x.ByAgentLabel
	}
	return nil
}

// The log config for Master Config
type LogConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The log level for Master Config.
	Level string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	// The color setting for log in Master Config.
	Color bool `protobuf:"varint,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *LogConfig) Reset() {
	*x = LogConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_master_v1_master_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConfig) ProtoMessage() {}

func (x *LogConfig) ProtoReflect() protoreflect.Message {
	mi := &file_determined_master_v1_master_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConfig.ProtoReflect.Descriptor instead.
func (*LogConfig) Descriptor() ([]byte, []int) {
	return file_determined_master_v1_master_proto_rawDescGZIP(), []int{2}
}

func (x *LogConfig) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *LogConfig) GetColor() bool {
	if x != nil {
		return x.Color
	}
	return false
}

// The config to be patched into Master Config.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The log config to be patched into Master Config.
	Log *LogConfig `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_master_v1_master_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_determined_master_v1_master_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_determined_master_v1_master_proto_rawDescGZIP(), []int{3}
}

func (x *Config) GetLog() *LogConfig {
	if x != nil {
		return x.Log
	}
	return nil
}

var File_determined_master_v1_master_proto protoreflect.FileDescriptor

var file_determined_master_v1_master_proto_rawDesc = []byte{
	0x0a, 0x21, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22,
	0xf7, 0x07, 0x0a, 0x21, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x68, 0x0a, 0x0b, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x62, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x7e, 0x0a, 0x13, 0x62, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x62, 0x79,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x75, 0x0a, 0x10, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x42, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x6f, 0x0a, 0x0e, 0x62, 0x79, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x79, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x3d, 0x0a, 0x0f, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x42, 0x79, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x42, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x42, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x3a, 0x67, 0x92, 0x41, 0x64, 0x0a, 0x62, 0xd2, 0x01, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0xd2, 0x01, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0xd2, 0x01,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0xd2, 0x01, 0x0a, 0x62, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x11, 0x62, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0xd2, 0x01, 0x0e, 0x62, 0x79, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0xd2, 0x01, 0x0c, 0x62, 0x79, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x3e, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x3a, 0x05, 0x92, 0x41, 0x02, 0x0a, 0x00, 0x22, 0x3b, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x2a, 0xc3, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x36,
	0x0a, 0x32, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x47,
	0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44,
	0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x02, 0x2a, 0xe8, 0x01, 0x0a,
	0x21, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x30, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x4f, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x2e, 0x0a, 0x2a, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x03, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2d, 0x61, 0x69, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_determined_master_v1_master_proto_rawDescOnce sync.Once
	file_determined_master_v1_master_proto_rawDescData = file_determined_master_v1_master_proto_rawDesc
)

func file_determined_master_v1_master_proto_rawDescGZIP() []byte {
	file_determined_master_v1_master_proto_rawDescOnce.Do(func() {
		file_determined_master_v1_master_proto_rawDescData = protoimpl.X.CompressGZIP(file_determined_master_v1_master_proto_rawDescData)
	})
	return file_determined_master_v1_master_proto_rawDescData
}

var file_determined_master_v1_master_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_determined_master_v1_master_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_determined_master_v1_master_proto_goTypes = []interface{}{
	(ResourceAllocationAggregationPeriod)(0),  // 0: determined.master.v1.ResourceAllocationAggregationPeriod
	(ResourceAllocationAggregationType)(0),    // 1: determined.master.v1.ResourceAllocationAggregationType
	(*ResourceAllocationRawEntry)(nil),        // 2: determined.master.v1.ResourceAllocationRawEntry
	(*ResourceAllocationAggregatedEntry)(nil), // 3: determined.master.v1.ResourceAllocationAggregatedEntry
	(*LogConfig)(nil),                         // 4: determined.master.v1.LogConfig
	(*Config)(nil),                            // 5: determined.master.v1.Config
	nil,                                       // 6: determined.master.v1.ResourceAllocationAggregatedEntry.ByUsernameEntry
	nil,                                       // 7: determined.master.v1.ResourceAllocationAggregatedEntry.ByExperimentLabelEntry
	nil,                                       // 8: determined.master.v1.ResourceAllocationAggregatedEntry.ByResourcePoolEntry
	nil,                                       // 9: determined.master.v1.ResourceAllocationAggregatedEntry.ByAgentLabelEntry
	(*timestamp.Timestamp)(nil),               // 10: google.protobuf.Timestamp
}
var file_determined_master_v1_master_proto_depIdxs = []int32{
	10, // 0: determined.master.v1.ResourceAllocationRawEntry.start_time:type_name -> google.protobuf.Timestamp
	10, // 1: determined.master.v1.ResourceAllocationRawEntry.end_time:type_name -> google.protobuf.Timestamp
	0,  // 2: determined.master.v1.ResourceAllocationAggregatedEntry.period:type_name -> determined.master.v1.ResourceAllocationAggregationPeriod
	6,  // 3: determined.master.v1.ResourceAllocationAggregatedEntry.by_username:type_name -> determined.master.v1.ResourceAllocationAggregatedEntry.ByUsernameEntry
	7,  // 4: determined.master.v1.ResourceAllocationAggregatedEntry.by_experiment_label:type_name -> determined.master.v1.ResourceAllocationAggregatedEntry.ByExperimentLabelEntry
	8,  // 5: determined.master.v1.ResourceAllocationAggregatedEntry.by_resource_pool:type_name -> determined.master.v1.ResourceAllocationAggregatedEntry.ByResourcePoolEntry
	9,  // 6: determined.master.v1.ResourceAllocationAggregatedEntry.by_agent_label:type_name -> determined.master.v1.ResourceAllocationAggregatedEntry.ByAgentLabelEntry
	4,  // 7: determined.master.v1.Config.log:type_name -> determined.master.v1.LogConfig
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_determined_master_v1_master_proto_init() }
func file_determined_master_v1_master_proto_init() {
	if File_determined_master_v1_master_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_determined_master_v1_master_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAllocationRawEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_master_v1_master_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceAllocationAggregatedEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_master_v1_master_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_master_v1_master_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_determined_master_v1_master_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_determined_master_v1_master_proto_goTypes,
		DependencyIndexes: file_determined_master_v1_master_proto_depIdxs,
		EnumInfos:         file_determined_master_v1_master_proto_enumTypes,
		MessageInfos:      file_determined_master_v1_master_proto_msgTypes,
	}.Build()
	File_determined_master_v1_master_proto = out.File
	file_determined_master_v1_master_proto_rawDesc = nil
	file_determined_master_v1_master_proto_goTypes = nil
	file_determined_master_v1_master_proto_depIdxs = nil
}
