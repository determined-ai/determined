// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// source: determined/experiment/v1/searcher.proto

package experimentv1

import (
	_struct "github.com/golang/protobuf/ptypes/struct"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RunnableType defines the type of operation that should be executed by trial
// runners.
type RunnableType int32

const (
	// Denotes an unknown runnable type.
	RunnableType_RUNNABLE_TYPE_UNSPECIFIED RunnableType = 0
	// Signals to a trial runner that it should run a train.
	RunnableType_RUNNABLE_TYPE_TRAIN RunnableType = 1
	// Signals to a trial runner it should compute validation metrics.
	RunnableType_RUNNABLE_TYPE_VALIDATE RunnableType = 2
)

// Enum value maps for RunnableType.
var (
	RunnableType_name = map[int32]string{
		0: "RUNNABLE_TYPE_UNSPECIFIED",
		1: "RUNNABLE_TYPE_TRAIN",
		2: "RUNNABLE_TYPE_VALIDATE",
	}
	RunnableType_value = map[string]int32{
		"RUNNABLE_TYPE_UNSPECIFIED": 0,
		"RUNNABLE_TYPE_TRAIN":       1,
		"RUNNABLE_TYPE_VALIDATE":    2,
	}
)

func (x RunnableType) Enum() *RunnableType {
	p := new(RunnableType)
	*p = x
	return p
}

func (x RunnableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunnableType) Descriptor() protoreflect.EnumDescriptor {
	return file_determined_experiment_v1_searcher_proto_enumTypes[0].Descriptor()
}

func (RunnableType) Type() protoreflect.EnumType {
	return &file_determined_experiment_v1_searcher_proto_enumTypes[0]
}

func (x RunnableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunnableType.Descriptor instead.
func (RunnableType) EnumDescriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{0}
}

// The reason for an early exit.
type TrialExitedEarly_ExitedReason int32

const (
	// Zero-value (not allowed).
	TrialExitedEarly_EXITED_REASON_UNSPECIFIED TrialExitedEarly_ExitedReason = 0
	// Indicates the trial exited due to an invalid hyperparameter.
	TrialExitedEarly_EXITED_REASON_INVALID_HP TrialExitedEarly_ExitedReason = 1
	// Indicates the trial exited due to a user requested stop, from code.
	TrialExitedEarly_EXITED_REASON_USER_REQUESTED_STOP TrialExitedEarly_ExitedReason = 2
	// Indicates the trial exited due to a user requested stop, from the CLI or
	// UI.
	TrialExitedEarly_EXITED_REASON_USER_CANCELED TrialExitedEarly_ExitedReason = 3
)

// Enum value maps for TrialExitedEarly_ExitedReason.
var (
	TrialExitedEarly_ExitedReason_name = map[int32]string{
		0: "EXITED_REASON_UNSPECIFIED",
		1: "EXITED_REASON_INVALID_HP",
		2: "EXITED_REASON_USER_REQUESTED_STOP",
		3: "EXITED_REASON_USER_CANCELED",
	}
	TrialExitedEarly_ExitedReason_value = map[string]int32{
		"EXITED_REASON_UNSPECIFIED":         0,
		"EXITED_REASON_INVALID_HP":          1,
		"EXITED_REASON_USER_REQUESTED_STOP": 2,
		"EXITED_REASON_USER_CANCELED":       3,
	}
)

func (x TrialExitedEarly_ExitedReason) Enum() *TrialExitedEarly_ExitedReason {
	p := new(TrialExitedEarly_ExitedReason)
	*p = x
	return p
}

func (x TrialExitedEarly_ExitedReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrialExitedEarly_ExitedReason) Descriptor() protoreflect.EnumDescriptor {
	return file_determined_experiment_v1_searcher_proto_enumTypes[1].Descriptor()
}

func (TrialExitedEarly_ExitedReason) Type() protoreflect.EnumType {
	return &file_determined_experiment_v1_searcher_proto_enumTypes[1]
}

func (x TrialExitedEarly_ExitedReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrialExitedEarly_ExitedReason.Descriptor instead.
func (TrialExitedEarly_ExitedReason) EnumDescriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{5, 0}
}

// InitialOperations is a searcher event signaling the creation of an
// experiment.
type InitialOperations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cannot have an empty message type.
	Placeholder int32 `protobuf:"varint,1,opt,name=placeholder,proto3" json:"placeholder,omitempty"`
}

func (x *InitialOperations) Reset() {
	*x = InitialOperations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitialOperations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitialOperations) ProtoMessage() {}

func (x *InitialOperations) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitialOperations.ProtoReflect.Descriptor instead.
func (*InitialOperations) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{0}
}

func (x *InitialOperations) GetPlaceholder() int32 {
	if x != nil {
		return x.Placeholder
	}
	return 0
}

// TrialCreated is a searcher event signaling the creation of a trial.
type TrialCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID identifying the trial to the searcher.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *TrialCreated) Reset() {
	*x = TrialCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialCreated) ProtoMessage() {}

func (x *TrialCreated) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialCreated.ProtoReflect.Descriptor instead.
func (*TrialCreated) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{1}
}

func (x *TrialCreated) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// TrialProgress is a searcher event that tells you the number of batches
// completed in the trial.
type TrialProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID identifying the trial to the searcher.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// partial_units represent partial epochs, batches or records where the Unit
	// is implied.
	PartialUnits float64 `protobuf:"fixed64,2,opt,name=partial_units,json=partialUnits,proto3" json:"partial_units,omitempty"`
}

func (x *TrialProgress) Reset() {
	*x = TrialProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialProgress) ProtoMessage() {}

func (x *TrialProgress) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialProgress.ProtoReflect.Descriptor instead.
func (*TrialProgress) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{2}
}

func (x *TrialProgress) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TrialProgress) GetPartialUnits() float64 {
	if x != nil {
		return x.PartialUnits
	}
	return 0
}

// ValidationCompleted is a searcher event triggered when a validation has been
// completed.
type ValidationCompleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID identifying the trial to the searcher.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Value of the validation metric used to direct the search.
	Metric *_struct.Value `protobuf:"bytes,2,opt,name=metric,proto3" json:"metric,omitempty"`
	// Length from ValidateAfterOperation.
	ValidateAfterLength uint64 `protobuf:"varint,3,opt,name=validate_after_length,json=validateAfterLength,proto3" json:"validate_after_length,omitempty"`
}

func (x *ValidationCompleted) Reset() {
	*x = ValidationCompleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationCompleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationCompleted) ProtoMessage() {}

func (x *ValidationCompleted) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationCompleted.ProtoReflect.Descriptor instead.
func (*ValidationCompleted) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{3}
}

func (x *ValidationCompleted) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ValidationCompleted) GetMetric() *_struct.Value {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *ValidationCompleted) GetValidateAfterLength() uint64 {
	if x != nil {
		return x.ValidateAfterLength
	}
	return 0
}

// TrialClosed is a searcher event triggered when a trial has successfully
// finished.
type TrialClosed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID identifying the trial to the searcher.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *TrialClosed) Reset() {
	*x = TrialClosed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialClosed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialClosed) ProtoMessage() {}

func (x *TrialClosed) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialClosed.ProtoReflect.Descriptor instead.
func (*TrialClosed) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{4}
}

func (x *TrialClosed) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// TrialExitedEarly is a searcher event triggered when a trial exited
// prematurely.
type TrialExitedEarly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID identifying the trial to the searcher.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The reason for the exit.
	ExitedReason TrialExitedEarly_ExitedReason `protobuf:"varint,2,opt,name=exited_reason,json=exitedReason,proto3,enum=determined.experiment.v1.TrialExitedEarly_ExitedReason" json:"exited_reason,omitempty"`
}

func (x *TrialExitedEarly) Reset() {
	*x = TrialExitedEarly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialExitedEarly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialExitedEarly) ProtoMessage() {}

func (x *TrialExitedEarly) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialExitedEarly.ProtoReflect.Descriptor instead.
func (*TrialExitedEarly) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{5}
}

func (x *TrialExitedEarly) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TrialExitedEarly) GetExitedReason() TrialExitedEarly_ExitedReason {
	if x != nil {
		return x.ExitedReason
	}
	return TrialExitedEarly_EXITED_REASON_UNSPECIFIED
}

// ExperimentInactive is a searcher event triggered when an experiment
// is no longer active.
type ExperimentInactive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current state of the experiment.
	ExperimentState State `protobuf:"varint,1,opt,name=experiment_state,json=experimentState,proto3,enum=determined.experiment.v1.State" json:"experiment_state,omitempty"`
}

func (x *ExperimentInactive) Reset() {
	*x = ExperimentInactive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentInactive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentInactive) ProtoMessage() {}

func (x *ExperimentInactive) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentInactive.ProtoReflect.Descriptor instead.
func (*ExperimentInactive) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{6}
}

func (x *ExperimentInactive) GetExperimentState() State {
	if x != nil {
		return x.ExperimentState
	}
	return State_STATE_UNSPECIFIED
}

// SearcherEvent is a message from master to a client-driven custom searcher
// informing it of relevant changes in the state of an experiment.
type SearcherEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Incremental ID of the event.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The concrete event.
	//
	// Types that are assignable to Event:
	//
	//	*SearcherEvent_InitialOperations
	//	*SearcherEvent_TrialCreated
	//	*SearcherEvent_ValidationCompleted
	//	*SearcherEvent_TrialClosed
	//	*SearcherEvent_TrialExitedEarly
	//	*SearcherEvent_TrialProgress
	//	*SearcherEvent_ExperimentInactive
	Event isSearcherEvent_Event `protobuf_oneof:"event"`
}

func (x *SearcherEvent) Reset() {
	*x = SearcherEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearcherEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearcherEvent) ProtoMessage() {}

func (x *SearcherEvent) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearcherEvent.ProtoReflect.Descriptor instead.
func (*SearcherEvent) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{7}
}

func (x *SearcherEvent) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *SearcherEvent) GetEvent() isSearcherEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *SearcherEvent) GetInitialOperations() *InitialOperations {
	if x, ok := x.GetEvent().(*SearcherEvent_InitialOperations); ok {
		return x.InitialOperations
	}
	return nil
}

func (x *SearcherEvent) GetTrialCreated() *TrialCreated {
	if x, ok := x.GetEvent().(*SearcherEvent_TrialCreated); ok {
		return x.TrialCreated
	}
	return nil
}

func (x *SearcherEvent) GetValidationCompleted() *ValidationCompleted {
	if x, ok := x.GetEvent().(*SearcherEvent_ValidationCompleted); ok {
		return x.ValidationCompleted
	}
	return nil
}

func (x *SearcherEvent) GetTrialClosed() *TrialClosed {
	if x, ok := x.GetEvent().(*SearcherEvent_TrialClosed); ok {
		return x.TrialClosed
	}
	return nil
}

func (x *SearcherEvent) GetTrialExitedEarly() *TrialExitedEarly {
	if x, ok := x.GetEvent().(*SearcherEvent_TrialExitedEarly); ok {
		return x.TrialExitedEarly
	}
	return nil
}

func (x *SearcherEvent) GetTrialProgress() *TrialProgress {
	if x, ok := x.GetEvent().(*SearcherEvent_TrialProgress); ok {
		return x.TrialProgress
	}
	return nil
}

func (x *SearcherEvent) GetExperimentInactive() *ExperimentInactive {
	if x, ok := x.GetEvent().(*SearcherEvent_ExperimentInactive); ok {
		return x.ExperimentInactive
	}
	return nil
}

type isSearcherEvent_Event interface {
	isSearcherEvent_Event()
}

type SearcherEvent_InitialOperations struct {
	// An experiment has just been created.
	InitialOperations *InitialOperations `protobuf:"bytes,3,opt,name=initial_operations,json=initialOperations,proto3,oneof"`
}

type SearcherEvent_TrialCreated struct {
	// A trial has been created.
	TrialCreated *TrialCreated `protobuf:"bytes,4,opt,name=trial_created,json=trialCreated,proto3,oneof"`
}

type SearcherEvent_ValidationCompleted struct {
	// Validation has completed.
	ValidationCompleted *ValidationCompleted `protobuf:"bytes,5,opt,name=validation_completed,json=validationCompleted,proto3,oneof"`
}

type SearcherEvent_TrialClosed struct {
	// Trial has finished.
	TrialClosed *TrialClosed `protobuf:"bytes,6,opt,name=trial_closed,json=trialClosed,proto3,oneof"`
}

type SearcherEvent_TrialExitedEarly struct {
	// Trial exited early.
	TrialExitedEarly *TrialExitedEarly `protobuf:"bytes,7,opt,name=trial_exited_early,json=trialExitedEarly,proto3,oneof"`
}

type SearcherEvent_TrialProgress struct {
	// Trial progress.
	TrialProgress *TrialProgress `protobuf:"bytes,8,opt,name=trial_progress,json=trialProgress,proto3,oneof"`
}

type SearcherEvent_ExperimentInactive struct {
	// Experiment is inactive.
	ExperimentInactive *ExperimentInactive `protobuf:"bytes,9,opt,name=experiment_inactive,json=experimentInactive,proto3,oneof"`
}

func (*SearcherEvent_InitialOperations) isSearcherEvent_Event() {}

func (*SearcherEvent_TrialCreated) isSearcherEvent_Event() {}

func (*SearcherEvent_ValidationCompleted) isSearcherEvent_Event() {}

func (*SearcherEvent_TrialClosed) isSearcherEvent_Event() {}

func (*SearcherEvent_TrialExitedEarly) isSearcherEvent_Event() {}

func (*SearcherEvent_TrialProgress) isSearcherEvent_Event() {}

func (*SearcherEvent_ExperimentInactive) isSearcherEvent_Event() {}

// ValidateAfterOperation means the trial should train and validate after
// training the given length.
type ValidateAfterOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the trial that should train.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// The length to train before reporting a validation.
	Length uint64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *ValidateAfterOperation) Reset() {
	*x = ValidateAfterOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateAfterOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateAfterOperation) ProtoMessage() {}

func (x *ValidateAfterOperation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateAfterOperation.ProtoReflect.Descriptor instead.
func (*ValidateAfterOperation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{8}
}

func (x *ValidateAfterOperation) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ValidateAfterOperation) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

// SetSearcherProgressOperation informs the master of the progress of the custom
// searcher.
type SetSearcherProgressOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Experiment progress as a float between 0.0 and 1.0.
	Progress float64 `protobuf:"fixed64,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *SetSearcherProgressOperation) Reset() {
	*x = SetSearcherProgressOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSearcherProgressOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSearcherProgressOperation) ProtoMessage() {}

func (x *SetSearcherProgressOperation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSearcherProgressOperation.ProtoReflect.Descriptor instead.
func (*SetSearcherProgressOperation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{9}
}

func (x *SetSearcherProgressOperation) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

// Used to complete a ValidateAfterOperation.
type CompleteValidateAfterOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ValidateAfterOperation being completed.
	Op *ValidateAfterOperation `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// The value of searcher metric associated with this completed operation.
	// The metric provided should be the metric used to guide HP search.
	SearcherMetric *_struct.Value `protobuf:"bytes,2,opt,name=searcher_metric,json=searcherMetric,proto3" json:"searcher_metric,omitempty"`
}

func (x *CompleteValidateAfterOperation) Reset() {
	*x = CompleteValidateAfterOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompleteValidateAfterOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteValidateAfterOperation) ProtoMessage() {}

func (x *CompleteValidateAfterOperation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteValidateAfterOperation.ProtoReflect.Descriptor instead.
func (*CompleteValidateAfterOperation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{10}
}

func (x *CompleteValidateAfterOperation) GetOp() *ValidateAfterOperation {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *CompleteValidateAfterOperation) GetSearcherMetric() *_struct.Value {
	if x != nil {
		return x.SearcherMetric
	}
	return nil
}

// Create a trial with given hyperparameters.
type CreateTrialOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the trial to create.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// A JSON object representing the hyperparameters.
	Hyperparams string `protobuf:"bytes,2,opt,name=hyperparams,proto3" json:"hyperparams,omitempty"`
}

func (x *CreateTrialOperation) Reset() {
	*x = CreateTrialOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrialOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrialOperation) ProtoMessage() {}

func (x *CreateTrialOperation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrialOperation.ProtoReflect.Descriptor instead.
func (*CreateTrialOperation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{11}
}

func (x *CreateTrialOperation) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateTrialOperation) GetHyperparams() string {
	if x != nil {
		return x.Hyperparams
	}
	return ""
}

// Close a trial with given ID.
type CloseTrialOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the trial to close.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CloseTrialOperation) Reset() {
	*x = CloseTrialOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseTrialOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseTrialOperation) ProtoMessage() {}

func (x *CloseTrialOperation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseTrialOperation.ProtoReflect.Descriptor instead.
func (*CloseTrialOperation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{12}
}

func (x *CloseTrialOperation) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Shut down custom searcher method.
type ShutDownOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines whether the Searcher was cancelled
	Cancel bool `protobuf:"varint,1,opt,name=cancel,proto3" json:"cancel,omitempty"`
	// Defines whether the Searcher failed
	Failure bool `protobuf:"varint,2,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *ShutDownOperation) Reset() {
	*x = ShutDownOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShutDownOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShutDownOperation) ProtoMessage() {}

func (x *ShutDownOperation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShutDownOperation.ProtoReflect.Descriptor instead.
func (*ShutDownOperation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{13}
}

func (x *ShutDownOperation) GetCancel() bool {
	if x != nil {
		return x.Cancel
	}
	return false
}

func (x *ShutDownOperation) GetFailure() bool {
	if x != nil {
		return x.Failure
	}
	return false
}

// SearcherOperation is an operation issued by the custom searcher.
type SearcherOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A searcher operation is one of the following operations.
	//
	// Types that are assignable to Union:
	//
	//	*SearcherOperation_TrialOperation
	//	*SearcherOperation_CreateTrial
	//	*SearcherOperation_CloseTrial
	//	*SearcherOperation_ShutDown
	//	*SearcherOperation_SetSearcherProgress
	Union isSearcherOperation_Union `protobuf_oneof:"union"`
}

func (x *SearcherOperation) Reset() {
	*x = SearcherOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearcherOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearcherOperation) ProtoMessage() {}

func (x *SearcherOperation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearcherOperation.ProtoReflect.Descriptor instead.
func (*SearcherOperation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{14}
}

func (m *SearcherOperation) GetUnion() isSearcherOperation_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *SearcherOperation) GetTrialOperation() *TrialOperation {
	if x, ok := x.GetUnion().(*SearcherOperation_TrialOperation); ok {
		return x.TrialOperation
	}
	return nil
}

func (x *SearcherOperation) GetCreateTrial() *CreateTrialOperation {
	if x, ok := x.GetUnion().(*SearcherOperation_CreateTrial); ok {
		return x.CreateTrial
	}
	return nil
}

func (x *SearcherOperation) GetCloseTrial() *CloseTrialOperation {
	if x, ok := x.GetUnion().(*SearcherOperation_CloseTrial); ok {
		return x.CloseTrial
	}
	return nil
}

func (x *SearcherOperation) GetShutDown() *ShutDownOperation {
	if x, ok := x.GetUnion().(*SearcherOperation_ShutDown); ok {
		return x.ShutDown
	}
	return nil
}

func (x *SearcherOperation) GetSetSearcherProgress() *SetSearcherProgressOperation {
	if x, ok := x.GetUnion().(*SearcherOperation_SetSearcherProgress); ok {
		return x.SetSearcherProgress
	}
	return nil
}

type isSearcherOperation_Union interface {
	isSearcherOperation_Union()
}

type SearcherOperation_TrialOperation struct {
	// TrialOperation is issued to tell an existing trial to do something.
	TrialOperation *TrialOperation `protobuf:"bytes,1,opt,name=trial_operation,json=trialOperation,proto3,oneof"`
}

type SearcherOperation_CreateTrial struct {
	// CreateTrialOperation is issued to create a trial.
	CreateTrial *CreateTrialOperation `protobuf:"bytes,2,opt,name=create_trial,json=createTrial,proto3,oneof"`
}

type SearcherOperation_CloseTrial struct {
	// CloseTrialOperation is issued to close a trial.
	CloseTrial *CloseTrialOperation `protobuf:"bytes,3,opt,name=close_trial,json=closeTrial,proto3,oneof"`
}

type SearcherOperation_ShutDown struct {
	// ShutDownOperation is issued to shut down the custom search method.
	ShutDown *ShutDownOperation `protobuf:"bytes,4,opt,name=shut_down,json=shutDown,proto3,oneof"`
}

type SearcherOperation_SetSearcherProgress struct {
	// SetSearcherProgressOperation is issued to set the progress of the custom
	// search method.
	SetSearcherProgress *SetSearcherProgressOperation `protobuf:"bytes,5,opt,name=set_searcher_progress,json=setSearcherProgress,proto3,oneof"`
}

func (*SearcherOperation_TrialOperation) isSearcherOperation_Union() {}

func (*SearcherOperation_CreateTrial) isSearcherOperation_Union() {}

func (*SearcherOperation_CloseTrial) isSearcherOperation_Union() {}

func (*SearcherOperation_ShutDown) isSearcherOperation_Union() {}

func (*SearcherOperation_SetSearcherProgress) isSearcherOperation_Union() {}

// TrialOperation is any operation that a trial can perform while it is active.
type TrialOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A trial operation is one of the following operations.
	//
	// Types that are assignable to Union:
	//
	//	*TrialOperation_ValidateAfter
	Union isTrialOperation_Union `protobuf_oneof:"union"`
}

func (x *TrialOperation) Reset() {
	*x = TrialOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialOperation) ProtoMessage() {}

func (x *TrialOperation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialOperation.ProtoReflect.Descriptor instead.
func (*TrialOperation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{15}
}

func (m *TrialOperation) GetUnion() isTrialOperation_Union {
	if m != nil {
		return m.Union
	}
	return nil
}

func (x *TrialOperation) GetValidateAfter() *ValidateAfterOperation {
	if x, ok := x.GetUnion().(*TrialOperation_ValidateAfter); ok {
		return x.ValidateAfter
	}
	return nil
}

type isTrialOperation_Union interface {
	isTrialOperation_Union()
}

type TrialOperation_ValidateAfter struct {
	// ValidateAfter means a trial is currently training and will later
	// validate.
	ValidateAfter *ValidateAfterOperation `protobuf:"bytes,1,opt,name=validate_after,json=validateAfter,proto3,oneof"`
}

func (*TrialOperation_ValidateAfter) isTrialOperation_Union() {}

// RunnableOperation represents a single runnable operation emitted by a
// searcher.
type RunnableOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the type of the operation.
	Type RunnableType `protobuf:"varint,1,opt,name=type,proto3,enum=determined.experiment.v1.RunnableType" json:"type,omitempty"`
	// If the type == WORKLOAD_KIND_TRAIN, this is the number of units
	Length uint64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *RunnableOperation) Reset() {
	*x = RunnableOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunnableOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnableOperation) ProtoMessage() {}

func (x *RunnableOperation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnableOperation.ProtoReflect.Descriptor instead.
func (*RunnableOperation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{16}
}

func (x *RunnableOperation) GetType() RunnableType {
	if x != nil {
		return x.Type
	}
	return RunnableType_RUNNABLE_TYPE_UNSPECIFIED
}

func (x *RunnableOperation) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

// TrialSimulation is a specific sequence of workloads that were run before the
// trial was completed.
type TrialSimulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of operations that were run before the trial was completed.
	Operations []*RunnableOperation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	// The number of times that this trial configuration has occurred during the
	// simulation.
	Occurrences int32 `protobuf:"varint,2,opt,name=occurrences,proto3" json:"occurrences,omitempty"`
}

func (x *TrialSimulation) Reset() {
	*x = TrialSimulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialSimulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialSimulation) ProtoMessage() {}

func (x *TrialSimulation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialSimulation.ProtoReflect.Descriptor instead.
func (*TrialSimulation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{17}
}

func (x *TrialSimulation) GetOperations() []*RunnableOperation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *TrialSimulation) GetOccurrences() int32 {
	if x != nil {
		return x.Occurrences
	}
	return 0
}

// ExperimentSimulation holds the configuration and results of simulated run of
// a searcher.
type ExperimentSimulation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The simulated experiment config.
	Config *_struct.Struct `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// The searcher simulation seed.
	Seed uint32 `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"`
	// The list of trials in the simulation.
	Trials []*TrialSimulation `protobuf:"bytes,3,rep,name=trials,proto3" json:"trials,omitempty"`
}

func (x *ExperimentSimulation) Reset() {
	*x = ExperimentSimulation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_experiment_v1_searcher_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentSimulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentSimulation) ProtoMessage() {}

func (x *ExperimentSimulation) ProtoReflect() protoreflect.Message {
	mi := &file_determined_experiment_v1_searcher_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentSimulation.ProtoReflect.Descriptor instead.
func (*ExperimentSimulation) Descriptor() ([]byte, []int) {
	return file_determined_experiment_v1_searcher_proto_rawDescGZIP(), []int{18}
}

func (x *ExperimentSimulation) GetConfig() *_struct.Struct {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ExperimentSimulation) GetSeed() uint32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *ExperimentSimulation) GetTrials() []*TrialSimulation {
	if x != nil {
		return x.Trials
	}
	return nil
}

var File_determined_experiment_v1_searcher_proto protoreflect.FileDescriptor

var file_determined_experiment_v1_searcher_proto_rawDesc = []byte{
	0x0a, 0x27, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77,
	0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x29, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x11, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x22, 0x41, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x3a, 0x12, 0x92, 0x41, 0x0f, 0x0a, 0x0d, 0xd2, 0x01, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x3a, 0x22, 0x92, 0x41, 0x1f, 0x0a, 0x1d,
	0xd2, 0x01, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0xcd, 0x01,
	0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e, 0xd2,
	0x01, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0xd2, 0x01, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x40, 0x0a,
	0x0b, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x12, 0x92, 0x41, 0x0f,
	0x0a, 0x0d, 0xd2, 0x01, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0xc9, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x45,
	0x61, 0x72, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0d, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x65,
	0x64, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x93, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x48, 0x50, 0x10, 0x01, 0x12,
	0x25, 0x0a, 0x21, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x3a, 0x22, 0x92, 0x41, 0x1f, 0x0a, 0x1d, 0xd2, 0x01,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0d, 0x65, 0x78,
	0x69, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x12, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x4a, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x18, 0x92,
	0x41, 0x15, 0x0a, 0x13, 0xd2, 0x01, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa0, 0x05, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x48, 0x00,
	0x52, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x65, 0x64, 0x45, 0x61, 0x72,
	0x6c, 0x79, 0x12, 0x50, 0x0a, 0x0e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x3a, 0x0a, 0x1c, 0x53,
	0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x3f, 0x0a, 0x0f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x57, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x11,
	0x53, 0x68, 0x75, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x22, 0xd2, 0x03, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x50, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x68, 0x75, 0x74, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x68, 0x75, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x6c, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x73, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x22, 0x67,
	0x0a, 0x11, 0x52, 0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x14, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2a, 0x62, 0x0a, 0x0c, 0x52,
	0x75, 0x6e, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52,
	0x55, 0x4e, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x55,
	0x4e, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x55, 0x4e, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x42,
	0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x61, 0x69, 0x2f, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_determined_experiment_v1_searcher_proto_rawDescOnce sync.Once
	file_determined_experiment_v1_searcher_proto_rawDescData = file_determined_experiment_v1_searcher_proto_rawDesc
)

func file_determined_experiment_v1_searcher_proto_rawDescGZIP() []byte {
	file_determined_experiment_v1_searcher_proto_rawDescOnce.Do(func() {
		file_determined_experiment_v1_searcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_determined_experiment_v1_searcher_proto_rawDescData)
	})
	return file_determined_experiment_v1_searcher_proto_rawDescData
}

var file_determined_experiment_v1_searcher_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_determined_experiment_v1_searcher_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_determined_experiment_v1_searcher_proto_goTypes = []interface{}{
	(RunnableType)(0),                      // 0: determined.experiment.v1.RunnableType
	(TrialExitedEarly_ExitedReason)(0),     // 1: determined.experiment.v1.TrialExitedEarly.ExitedReason
	(*InitialOperations)(nil),              // 2: determined.experiment.v1.InitialOperations
	(*TrialCreated)(nil),                   // 3: determined.experiment.v1.TrialCreated
	(*TrialProgress)(nil),                  // 4: determined.experiment.v1.TrialProgress
	(*ValidationCompleted)(nil),            // 5: determined.experiment.v1.ValidationCompleted
	(*TrialClosed)(nil),                    // 6: determined.experiment.v1.TrialClosed
	(*TrialExitedEarly)(nil),               // 7: determined.experiment.v1.TrialExitedEarly
	(*ExperimentInactive)(nil),             // 8: determined.experiment.v1.ExperimentInactive
	(*SearcherEvent)(nil),                  // 9: determined.experiment.v1.SearcherEvent
	(*ValidateAfterOperation)(nil),         // 10: determined.experiment.v1.ValidateAfterOperation
	(*SetSearcherProgressOperation)(nil),   // 11: determined.experiment.v1.SetSearcherProgressOperation
	(*CompleteValidateAfterOperation)(nil), // 12: determined.experiment.v1.CompleteValidateAfterOperation
	(*CreateTrialOperation)(nil),           // 13: determined.experiment.v1.CreateTrialOperation
	(*CloseTrialOperation)(nil),            // 14: determined.experiment.v1.CloseTrialOperation
	(*ShutDownOperation)(nil),              // 15: determined.experiment.v1.ShutDownOperation
	(*SearcherOperation)(nil),              // 16: determined.experiment.v1.SearcherOperation
	(*TrialOperation)(nil),                 // 17: determined.experiment.v1.TrialOperation
	(*RunnableOperation)(nil),              // 18: determined.experiment.v1.RunnableOperation
	(*TrialSimulation)(nil),                // 19: determined.experiment.v1.TrialSimulation
	(*ExperimentSimulation)(nil),           // 20: determined.experiment.v1.ExperimentSimulation
	(*_struct.Value)(nil),                  // 21: google.protobuf.Value
	(State)(0),                             // 22: determined.experiment.v1.State
	(*_struct.Struct)(nil),                 // 23: google.protobuf.Struct
}
var file_determined_experiment_v1_searcher_proto_depIdxs = []int32{
	21, // 0: determined.experiment.v1.ValidationCompleted.metric:type_name -> google.protobuf.Value
	1,  // 1: determined.experiment.v1.TrialExitedEarly.exited_reason:type_name -> determined.experiment.v1.TrialExitedEarly.ExitedReason
	22, // 2: determined.experiment.v1.ExperimentInactive.experiment_state:type_name -> determined.experiment.v1.State
	2,  // 3: determined.experiment.v1.SearcherEvent.initial_operations:type_name -> determined.experiment.v1.InitialOperations
	3,  // 4: determined.experiment.v1.SearcherEvent.trial_created:type_name -> determined.experiment.v1.TrialCreated
	5,  // 5: determined.experiment.v1.SearcherEvent.validation_completed:type_name -> determined.experiment.v1.ValidationCompleted
	6,  // 6: determined.experiment.v1.SearcherEvent.trial_closed:type_name -> determined.experiment.v1.TrialClosed
	7,  // 7: determined.experiment.v1.SearcherEvent.trial_exited_early:type_name -> determined.experiment.v1.TrialExitedEarly
	4,  // 8: determined.experiment.v1.SearcherEvent.trial_progress:type_name -> determined.experiment.v1.TrialProgress
	8,  // 9: determined.experiment.v1.SearcherEvent.experiment_inactive:type_name -> determined.experiment.v1.ExperimentInactive
	10, // 10: determined.experiment.v1.CompleteValidateAfterOperation.op:type_name -> determined.experiment.v1.ValidateAfterOperation
	21, // 11: determined.experiment.v1.CompleteValidateAfterOperation.searcher_metric:type_name -> google.protobuf.Value
	17, // 12: determined.experiment.v1.SearcherOperation.trial_operation:type_name -> determined.experiment.v1.TrialOperation
	13, // 13: determined.experiment.v1.SearcherOperation.create_trial:type_name -> determined.experiment.v1.CreateTrialOperation
	14, // 14: determined.experiment.v1.SearcherOperation.close_trial:type_name -> determined.experiment.v1.CloseTrialOperation
	15, // 15: determined.experiment.v1.SearcherOperation.shut_down:type_name -> determined.experiment.v1.ShutDownOperation
	11, // 16: determined.experiment.v1.SearcherOperation.set_searcher_progress:type_name -> determined.experiment.v1.SetSearcherProgressOperation
	10, // 17: determined.experiment.v1.TrialOperation.validate_after:type_name -> determined.experiment.v1.ValidateAfterOperation
	0,  // 18: determined.experiment.v1.RunnableOperation.type:type_name -> determined.experiment.v1.RunnableType
	18, // 19: determined.experiment.v1.TrialSimulation.operations:type_name -> determined.experiment.v1.RunnableOperation
	23, // 20: determined.experiment.v1.ExperimentSimulation.config:type_name -> google.protobuf.Struct
	19, // 21: determined.experiment.v1.ExperimentSimulation.trials:type_name -> determined.experiment.v1.TrialSimulation
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_determined_experiment_v1_searcher_proto_init() }
func file_determined_experiment_v1_searcher_proto_init() {
	if File_determined_experiment_v1_searcher_proto != nil {
		return
	}
	file_determined_experiment_v1_experiment_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_determined_experiment_v1_searcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitialOperations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationCompleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialClosed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialExitedEarly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentInactive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearcherEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateAfterOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSearcherProgressOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompleteValidateAfterOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrialOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseTrialOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShutDownOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearcherOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunnableOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialSimulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_experiment_v1_searcher_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentSimulation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_determined_experiment_v1_searcher_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SearcherEvent_InitialOperations)(nil),
		(*SearcherEvent_TrialCreated)(nil),
		(*SearcherEvent_ValidationCompleted)(nil),
		(*SearcherEvent_TrialClosed)(nil),
		(*SearcherEvent_TrialExitedEarly)(nil),
		(*SearcherEvent_TrialProgress)(nil),
		(*SearcherEvent_ExperimentInactive)(nil),
	}
	file_determined_experiment_v1_searcher_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SearcherOperation_TrialOperation)(nil),
		(*SearcherOperation_CreateTrial)(nil),
		(*SearcherOperation_CloseTrial)(nil),
		(*SearcherOperation_ShutDown)(nil),
		(*SearcherOperation_SetSearcherProgress)(nil),
	}
	file_determined_experiment_v1_searcher_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TrialOperation_ValidateAfter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_determined_experiment_v1_searcher_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_determined_experiment_v1_searcher_proto_goTypes,
		DependencyIndexes: file_determined_experiment_v1_searcher_proto_depIdxs,
		EnumInfos:         file_determined_experiment_v1_searcher_proto_enumTypes,
		MessageInfos:      file_determined_experiment_v1_searcher_proto_msgTypes,
	}.Build()
	File_determined_experiment_v1_searcher_proto = out.File
	file_determined_experiment_v1_searcher_proto_rawDesc = nil
	file_determined_experiment_v1_searcher_proto_goTypes = nil
	file_determined_experiment_v1_searcher_proto_depIdxs = nil
}
