// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// source: determined/rbac/v1/rbac.proto

package rbacv1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of permissions types.
// Value of the enum has 9xxxx for global only permissions.
// Permissions on the same object share the thousands place
// value like 2001 and 2002.
type PermissionType int32

const (
	// The permission type is unknown.
	PermissionType_PERMISSION_TYPE_UNSPECIFIED PermissionType = 0
	// Can create and update other users.
	// Allows updating other users passwords making this
	// permission give all other permissions effectively.
	PermissionType_PERMISSION_TYPE_ADMINISTRATE_USER PermissionType = 91001
	// Ability to manage OAuth clients and settings.
	PermissionType_PERMISSION_TYPE_ADMINISTRATE_OAUTH PermissionType = 91002
	// Ability to create experiments.
	PermissionType_PERMISSION_TYPE_CREATE_EXPERIMENT PermissionType = 2001
	// Ability to view experiment's model code, checkpoints, trials.
	PermissionType_PERMISSION_TYPE_VIEW_EXPERIMENT_ARTIFACTS PermissionType = 2002
	// Ability to view experiment's metadata such as experiment config, progress.
	PermissionType_PERMISSION_TYPE_VIEW_EXPERIMENT_METADATA PermissionType = 2003
	// Ability to update experiment and experiment's lifecycle.
	PermissionType_PERMISSION_TYPE_UPDATE_EXPERIMENT PermissionType = 2004
	// Ability to update experiment's metadata.
	PermissionType_PERMISSION_TYPE_UPDATE_EXPERIMENT_METADATA PermissionType = 2005
	// Ability to delete experiment.
	PermissionType_PERMISSION_TYPE_DELETE_EXPERIMENT PermissionType = 2006
	// Ability to create Notebooks, Shells, and Commands.
	PermissionType_PERMISSION_TYPE_CREATE_NSC PermissionType = 3001
	// Ability to view Notebooks, Shells, and Commands.
	PermissionType_PERMISSION_TYPE_VIEW_NSC PermissionType = 3002
	// Ability to terminate Notebooks, Shells, and Commands.
	PermissionType_PERMISSION_TYPE_UPDATE_NSC PermissionType = 3003
	// Ability to create, update, and add / remove users from groups.
	PermissionType_PERMISSION_TYPE_UPDATE_GROUP PermissionType = 93001
	// Ability to create workspaces.
	PermissionType_PERMISSION_TYPE_CREATE_WORKSPACE PermissionType = 94001
	// Ability to view workspace.
	PermissionType_PERMISSION_TYPE_VIEW_WORKSPACE PermissionType = 4002
	// Ability to update workspace.
	PermissionType_PERMISSION_TYPE_UPDATE_WORKSPACE PermissionType = 4003
	// Ability to delete workspace.
	PermissionType_PERMISSION_TYPE_DELETE_WORKSPACE PermissionType = 4004
	// Ability to set workspace agent user group config.
	PermissionType_PERMISSION_TYPE_SET_WORKSPACE_AGENT_USER_GROUP PermissionType = 4005
	// Ability to set workspace checkpoint storage config.
	PermissionType_PERMISSION_TYPE_SET_WORKSPACE_CHECKPOINT_STORAGE_CONFIG PermissionType = 4006
	// Ability to create projects.
	PermissionType_PERMISSION_TYPE_CREATE_PROJECT PermissionType = 5001
	// Ability to view projects.
	PermissionType_PERMISSION_TYPE_VIEW_PROJECT PermissionType = 5002
	// Ability to update projects.
	PermissionType_PERMISSION_TYPE_UPDATE_PROJECT PermissionType = 5003
	// Ability to delete projects.
	PermissionType_PERMISSION_TYPE_DELETE_PROJECT PermissionType = 5004
	// Ability to assign roles to groups / users.
	// If assigned at a workspace scope, can only assign roles to that workspace
	// scope.
	PermissionType_PERMISSION_TYPE_ASSIGN_ROLES PermissionType = 6002
	// Ability to view model registry.
	PermissionType_PERMISSION_TYPE_VIEW_MODEL_REGISTRY PermissionType = 7001
	// Ability to edit model registry.
	PermissionType_PERMISSION_TYPE_EDIT_MODEL_REGISTRY PermissionType = 7002
	// Ability to create model registry.
	PermissionType_PERMISSION_TYPE_CREATE_MODEL_REGISTRY PermissionType = 7003
	// Ability to delete model registry.
	PermissionType_PERMISSION_TYPE_DELETE_MODEL_REGISTRY PermissionType = 7004
	// Ability to delete model version.
	PermissionType_PERMISSION_TYPE_DELETE_MODEL_VERSION PermissionType = 7005
	// Ability to delete another user's model registry.
	PermissionType_PERMISSION_TYPE_DELETE_OTHER_USER_MODEL_REGISTRY PermissionType = 7006
	// Ability to delete another user's model version.
	PermissionType_PERMISSION_TYPE_DELETE_OTHER_USER_MODEL_VERSION PermissionType = 7007
	// Ability to view master logs.
	PermissionType_PERMISSION_TYPE_VIEW_MASTER_LOGS PermissionType = 8001
	// Ability to view detailed cluster usage info.
	PermissionType_PERMISSION_TYPE_VIEW_CLUSTER_USAGE PermissionType = 8002
	// Ability to update agents.
	PermissionType_PERMISSION_TYPE_UPDATE_AGENTS PermissionType = 8003
	// Ability to view sensitive subset of agent info.
	PermissionType_PERMISSION_TYPE_VIEW_SENSITIVE_AGENT_INFO PermissionType = 8004
	// Ability to view master configs.
	PermissionType_PERMISSION_TYPE_VIEW_MASTER_CONFIG PermissionType = 8005
	// Ability to update master configs.
	PermissionType_PERMISSION_TYPE_UPDATE_MASTER_CONFIG PermissionType = 8006
	// Ability to control strict job queue.
	PermissionType_PERMISSION_TYPE_CONTROL_STRICT_JOB_QUEUE PermissionType = 8101
	// Ability to view templates.
	PermissionType_PERMISSION_TYPE_VIEW_TEMPLATES PermissionType = 9001
	// Ability to update templates.
	PermissionType_PERMISSION_TYPE_UPDATE_TEMPLATES PermissionType = 9002
	// Ability to create templates.
	PermissionType_PERMISSION_TYPE_CREATE_TEMPLATES PermissionType = 9003
	// Ability to delete templates.
	PermissionType_PERMISSION_TYPE_DELETE_TEMPLATES PermissionType = 9004
	// Ability to create and update role definitions.
	PermissionType_PERMISSION_TYPE_UPDATE_ROLES PermissionType = 96001
	// Ability to create and delete webhooks.
	PermissionType_PERMISSION_TYPE_EDIT_WEBHOOKS PermissionType = 97001
)

// Enum value maps for PermissionType.
var (
	PermissionType_name = map[int32]string{
		0:     "PERMISSION_TYPE_UNSPECIFIED",
		91001: "PERMISSION_TYPE_ADMINISTRATE_USER",
		91002: "PERMISSION_TYPE_ADMINISTRATE_OAUTH",
		2001:  "PERMISSION_TYPE_CREATE_EXPERIMENT",
		2002:  "PERMISSION_TYPE_VIEW_EXPERIMENT_ARTIFACTS",
		2003:  "PERMISSION_TYPE_VIEW_EXPERIMENT_METADATA",
		2004:  "PERMISSION_TYPE_UPDATE_EXPERIMENT",
		2005:  "PERMISSION_TYPE_UPDATE_EXPERIMENT_METADATA",
		2006:  "PERMISSION_TYPE_DELETE_EXPERIMENT",
		3001:  "PERMISSION_TYPE_CREATE_NSC",
		3002:  "PERMISSION_TYPE_VIEW_NSC",
		3003:  "PERMISSION_TYPE_UPDATE_NSC",
		93001: "PERMISSION_TYPE_UPDATE_GROUP",
		94001: "PERMISSION_TYPE_CREATE_WORKSPACE",
		4002:  "PERMISSION_TYPE_VIEW_WORKSPACE",
		4003:  "PERMISSION_TYPE_UPDATE_WORKSPACE",
		4004:  "PERMISSION_TYPE_DELETE_WORKSPACE",
		4005:  "PERMISSION_TYPE_SET_WORKSPACE_AGENT_USER_GROUP",
		4006:  "PERMISSION_TYPE_SET_WORKSPACE_CHECKPOINT_STORAGE_CONFIG",
		5001:  "PERMISSION_TYPE_CREATE_PROJECT",
		5002:  "PERMISSION_TYPE_VIEW_PROJECT",
		5003:  "PERMISSION_TYPE_UPDATE_PROJECT",
		5004:  "PERMISSION_TYPE_DELETE_PROJECT",
		6002:  "PERMISSION_TYPE_ASSIGN_ROLES",
		7001:  "PERMISSION_TYPE_VIEW_MODEL_REGISTRY",
		7002:  "PERMISSION_TYPE_EDIT_MODEL_REGISTRY",
		7003:  "PERMISSION_TYPE_CREATE_MODEL_REGISTRY",
		7004:  "PERMISSION_TYPE_DELETE_MODEL_REGISTRY",
		7005:  "PERMISSION_TYPE_DELETE_MODEL_VERSION",
		7006:  "PERMISSION_TYPE_DELETE_OTHER_USER_MODEL_REGISTRY",
		7007:  "PERMISSION_TYPE_DELETE_OTHER_USER_MODEL_VERSION",
		8001:  "PERMISSION_TYPE_VIEW_MASTER_LOGS",
		8002:  "PERMISSION_TYPE_VIEW_CLUSTER_USAGE",
		8003:  "PERMISSION_TYPE_UPDATE_AGENTS",
		8004:  "PERMISSION_TYPE_VIEW_SENSITIVE_AGENT_INFO",
		8005:  "PERMISSION_TYPE_VIEW_MASTER_CONFIG",
		8006:  "PERMISSION_TYPE_UPDATE_MASTER_CONFIG",
		8101:  "PERMISSION_TYPE_CONTROL_STRICT_JOB_QUEUE",
		9001:  "PERMISSION_TYPE_VIEW_TEMPLATES",
		9002:  "PERMISSION_TYPE_UPDATE_TEMPLATES",
		9003:  "PERMISSION_TYPE_CREATE_TEMPLATES",
		9004:  "PERMISSION_TYPE_DELETE_TEMPLATES",
		96001: "PERMISSION_TYPE_UPDATE_ROLES",
		97001: "PERMISSION_TYPE_EDIT_WEBHOOKS",
	}
	PermissionType_value = map[string]int32{
		"PERMISSION_TYPE_UNSPECIFIED":                             0,
		"PERMISSION_TYPE_ADMINISTRATE_USER":                       91001,
		"PERMISSION_TYPE_ADMINISTRATE_OAUTH":                      91002,
		"PERMISSION_TYPE_CREATE_EXPERIMENT":                       2001,
		"PERMISSION_TYPE_VIEW_EXPERIMENT_ARTIFACTS":               2002,
		"PERMISSION_TYPE_VIEW_EXPERIMENT_METADATA":                2003,
		"PERMISSION_TYPE_UPDATE_EXPERIMENT":                       2004,
		"PERMISSION_TYPE_UPDATE_EXPERIMENT_METADATA":              2005,
		"PERMISSION_TYPE_DELETE_EXPERIMENT":                       2006,
		"PERMISSION_TYPE_CREATE_NSC":                              3001,
		"PERMISSION_TYPE_VIEW_NSC":                                3002,
		"PERMISSION_TYPE_UPDATE_NSC":                              3003,
		"PERMISSION_TYPE_UPDATE_GROUP":                            93001,
		"PERMISSION_TYPE_CREATE_WORKSPACE":                        94001,
		"PERMISSION_TYPE_VIEW_WORKSPACE":                          4002,
		"PERMISSION_TYPE_UPDATE_WORKSPACE":                        4003,
		"PERMISSION_TYPE_DELETE_WORKSPACE":                        4004,
		"PERMISSION_TYPE_SET_WORKSPACE_AGENT_USER_GROUP":          4005,
		"PERMISSION_TYPE_SET_WORKSPACE_CHECKPOINT_STORAGE_CONFIG": 4006,
		"PERMISSION_TYPE_CREATE_PROJECT":                          5001,
		"PERMISSION_TYPE_VIEW_PROJECT":                            5002,
		"PERMISSION_TYPE_UPDATE_PROJECT":                          5003,
		"PERMISSION_TYPE_DELETE_PROJECT":                          5004,
		"PERMISSION_TYPE_ASSIGN_ROLES":                            6002,
		"PERMISSION_TYPE_VIEW_MODEL_REGISTRY":                     7001,
		"PERMISSION_TYPE_EDIT_MODEL_REGISTRY":                     7002,
		"PERMISSION_TYPE_CREATE_MODEL_REGISTRY":                   7003,
		"PERMISSION_TYPE_DELETE_MODEL_REGISTRY":                   7004,
		"PERMISSION_TYPE_DELETE_MODEL_VERSION":                    7005,
		"PERMISSION_TYPE_DELETE_OTHER_USER_MODEL_REGISTRY":        7006,
		"PERMISSION_TYPE_DELETE_OTHER_USER_MODEL_VERSION":         7007,
		"PERMISSION_TYPE_VIEW_MASTER_LOGS":                        8001,
		"PERMISSION_TYPE_VIEW_CLUSTER_USAGE":                      8002,
		"PERMISSION_TYPE_UPDATE_AGENTS":                           8003,
		"PERMISSION_TYPE_VIEW_SENSITIVE_AGENT_INFO":               8004,
		"PERMISSION_TYPE_VIEW_MASTER_CONFIG":                      8005,
		"PERMISSION_TYPE_UPDATE_MASTER_CONFIG":                    8006,
		"PERMISSION_TYPE_CONTROL_STRICT_JOB_QUEUE":                8101,
		"PERMISSION_TYPE_VIEW_TEMPLATES":                          9001,
		"PERMISSION_TYPE_UPDATE_TEMPLATES":                        9002,
		"PERMISSION_TYPE_CREATE_TEMPLATES":                        9003,
		"PERMISSION_TYPE_DELETE_TEMPLATES":                        9004,
		"PERMISSION_TYPE_UPDATE_ROLES":                            96001,
		"PERMISSION_TYPE_EDIT_WEBHOOKS":                           97001,
	}
)

func (x PermissionType) Enum() *PermissionType {
	p := new(PermissionType)
	*p = x
	return p
}

func (x PermissionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermissionType) Descriptor() protoreflect.EnumDescriptor {
	return file_determined_rbac_v1_rbac_proto_enumTypes[0].Descriptor()
}

func (PermissionType) Type() protoreflect.EnumType {
	return &file_determined_rbac_v1_rbac_proto_enumTypes[0]
}

func (x PermissionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermissionType.Descriptor instead.
func (PermissionType) EnumDescriptor() ([]byte, []int) {
	return file_determined_rbac_v1_rbac_proto_rawDescGZIP(), []int{0}
}

// ScopeTypeMask lists which scope types are allowed for the given Permission or
// Role. Scope type mask is a different way to represent `is_global` flag.
// Value mapping:
// is_global: true => {cluster: true, workspace: false}
// is_global: false => {cluster: true, workspace: true}
type ScopeTypeMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this permission or role can be assigned globally, i.e.
	// cluster-wide. Currently, all permissions can be assigned globally, so this
	// is always true.
	Cluster bool `protobuf:"varint,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// Whether this permission or role can be assigned on a particular workspace.
	// For example, `ADMINISTRATE_USER` permission will have this field set to
	// false, since user creation can only be done at a cluster level, and it
	// doesn't make sense for a single workspace.
	Workspace bool `protobuf:"varint,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
}

func (x *ScopeTypeMask) Reset() {
	*x = ScopeTypeMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_rbac_v1_rbac_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeTypeMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeTypeMask) ProtoMessage() {}

func (x *ScopeTypeMask) ProtoReflect() protoreflect.Message {
	mi := &file_determined_rbac_v1_rbac_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeTypeMask.ProtoReflect.Descriptor instead.
func (*ScopeTypeMask) Descriptor() ([]byte, []int) {
	return file_determined_rbac_v1_rbac_proto_rawDescGZIP(), []int{0}
}

func (x *ScopeTypeMask) GetCluster() bool {
	if x != nil {
		return x.Cluster
	}
	return false
}

func (x *ScopeTypeMask) GetWorkspace() bool {
	if x != nil {
		return x.Workspace
	}
	return false
}

// Role contains information about a specific Role
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the role being detailed
	RoleId int32 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// The string of the role being detailed
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The permissions granted to the role
	Permissions []*Permission `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	// Allowed scope types.
	ScopeTypeMask *ScopeTypeMask `protobuf:"bytes,4,opt,name=scope_type_mask,json=scopeTypeMask,proto3" json:"scope_type_mask,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_rbac_v1_rbac_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_determined_rbac_v1_rbac_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_determined_rbac_v1_rbac_proto_rawDescGZIP(), []int{1}
}

func (x *Role) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *Role) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Role) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Role) GetScopeTypeMask() *ScopeTypeMask {
	if x != nil {
		return x.ScopeTypeMask
	}
	return nil
}

// Permission represents an action a user can take in the system
type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the permission
	Id PermissionType `protobuf:"varint,1,opt,name=id,proto3,enum=determined.rbac.v1.PermissionType" json:"id,omitempty"`
	// The name of the permission
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Allowed scope types.
	ScopeTypeMask *ScopeTypeMask `protobuf:"bytes,4,opt,name=scope_type_mask,json=scopeTypeMask,proto3" json:"scope_type_mask,omitempty"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_rbac_v1_rbac_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_determined_rbac_v1_rbac_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_determined_rbac_v1_rbac_proto_rawDescGZIP(), []int{2}
}

func (x *Permission) GetId() PermissionType {
	if x != nil {
		return x.Id
	}
	return PermissionType_PERMISSION_TYPE_UNSPECIFIED
}

func (x *Permission) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Permission) GetScopeTypeMask() *ScopeTypeMask {
	if x != nil {
		return x.ScopeTypeMask
	}
	return nil
}

// RoleAssignmentSummary is used to describe permissions a user has.
type RoleAssignmentSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the role being detailed
	RoleId int32 `protobuf:"varint,1,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// List of workspace IDs to apply the role.
	ScopeWorkspaceIds []int32 `protobuf:"varint,2,rep,packed,name=scope_workspace_ids,json=scopeWorkspaceIds,proto3" json:"scope_workspace_ids,omitempty"`
	// Whether the role is assigned cluster-wide.
	ScopeCluster bool `protobuf:"varint,3,opt,name=scope_cluster,json=scopeCluster,proto3" json:"scope_cluster,omitempty"`
}

func (x *RoleAssignmentSummary) Reset() {
	*x = RoleAssignmentSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_rbac_v1_rbac_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAssignmentSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAssignmentSummary) ProtoMessage() {}

func (x *RoleAssignmentSummary) ProtoReflect() protoreflect.Message {
	mi := &file_determined_rbac_v1_rbac_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAssignmentSummary.ProtoReflect.Descriptor instead.
func (*RoleAssignmentSummary) Descriptor() ([]byte, []int) {
	return file_determined_rbac_v1_rbac_proto_rawDescGZIP(), []int{3}
}

func (x *RoleAssignmentSummary) GetRoleId() int32 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *RoleAssignmentSummary) GetScopeWorkspaceIds() []int32 {
	if x != nil {
		return x.ScopeWorkspaceIds
	}
	return nil
}

func (x *RoleAssignmentSummary) GetScopeCluster() bool {
	if x != nil {
		return x.ScopeCluster
	}
	return false
}

// RoleAssignment contains information about the scope
// of the role.
type RoleAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The role of the assignment.
	Role *Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// The id of the workspace the role belongs to. Empty for cluster-wide scope.
	ScopeWorkspaceId *int32 `protobuf:"varint,2,opt,name=scope_workspace_id,json=scopeWorkspaceId,proto3,oneof" json:"scope_workspace_id,omitempty"`
	// Whether the role is assigned cluster-wide.
	ScopeCluster bool `protobuf:"varint,3,opt,name=scope_cluster,json=scopeCluster,proto3" json:"scope_cluster,omitempty"`
}

func (x *RoleAssignment) Reset() {
	*x = RoleAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_rbac_v1_rbac_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleAssignment) ProtoMessage() {}

func (x *RoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_determined_rbac_v1_rbac_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleAssignment.ProtoReflect.Descriptor instead.
func (*RoleAssignment) Descriptor() ([]byte, []int) {
	return file_determined_rbac_v1_rbac_proto_rawDescGZIP(), []int{4}
}

func (x *RoleAssignment) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *RoleAssignment) GetScopeWorkspaceId() int32 {
	if x != nil && x.ScopeWorkspaceId != nil {
		return *x.ScopeWorkspaceId
	}
	return 0
}

func (x *RoleAssignment) GetScopeCluster() bool {
	if x != nil {
		return x.ScopeCluster
	}
	return false
}

// GroupRoleAssignment contains information about the groups
// belonging to a role.
type GroupRoleAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The group id of the role assignment
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// The role and scope of the assignment.
	RoleAssignment *RoleAssignment `protobuf:"bytes,2,opt,name=role_assignment,json=roleAssignment,proto3" json:"role_assignment,omitempty"`
}

func (x *GroupRoleAssignment) Reset() {
	*x = GroupRoleAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_rbac_v1_rbac_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRoleAssignment) ProtoMessage() {}

func (x *GroupRoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_determined_rbac_v1_rbac_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRoleAssignment.ProtoReflect.Descriptor instead.
func (*GroupRoleAssignment) Descriptor() ([]byte, []int) {
	return file_determined_rbac_v1_rbac_proto_rawDescGZIP(), []int{5}
}

func (x *GroupRoleAssignment) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GroupRoleAssignment) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		return x.RoleAssignment
	}
	return nil
}

// UserRoleAssignment contains information about the users
// belonging to a role.
type UserRoleAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the user id of the role assignment
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// the role and scope of the assignment
	RoleAssignment *RoleAssignment `protobuf:"bytes,2,opt,name=role_assignment,json=roleAssignment,proto3" json:"role_assignment,omitempty"`
}

func (x *UserRoleAssignment) Reset() {
	*x = UserRoleAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_rbac_v1_rbac_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRoleAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleAssignment) ProtoMessage() {}

func (x *UserRoleAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_determined_rbac_v1_rbac_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleAssignment.ProtoReflect.Descriptor instead.
func (*UserRoleAssignment) Descriptor() ([]byte, []int) {
	return file_determined_rbac_v1_rbac_proto_rawDescGZIP(), []int{6}
}

func (x *UserRoleAssignment) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserRoleAssignment) GetRoleAssignment() *RoleAssignment {
	if x != nil {
		return x.RoleAssignment
	}
	return nil
}

// RoleWithAssignments contains a detailed description of
// a role and the groups and users belonging to it.
type RoleWithAssignments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The embedded Role.
	Role *Role `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// The embedded GroupRoleAssignment.
	GroupRoleAssignments []*GroupRoleAssignment `protobuf:"bytes,2,rep,name=group_role_assignments,json=groupRoleAssignments,proto3" json:"group_role_assignments,omitempty"`
	// The embedded UserRoleAssignment.
	UserRoleAssignments []*UserRoleAssignment `protobuf:"bytes,3,rep,name=user_role_assignments,json=userRoleAssignments,proto3" json:"user_role_assignments,omitempty"`
}

func (x *RoleWithAssignments) Reset() {
	*x = RoleWithAssignments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_rbac_v1_rbac_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleWithAssignments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleWithAssignments) ProtoMessage() {}

func (x *RoleWithAssignments) ProtoReflect() protoreflect.Message {
	mi := &file_determined_rbac_v1_rbac_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleWithAssignments.ProtoReflect.Descriptor instead.
func (*RoleWithAssignments) Descriptor() ([]byte, []int) {
	return file_determined_rbac_v1_rbac_proto_rawDescGZIP(), []int{7}
}

func (x *RoleWithAssignments) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *RoleWithAssignments) GetGroupRoleAssignments() []*GroupRoleAssignment {
	if x != nil {
		return x.GroupRoleAssignments
	}
	return nil
}

func (x *RoleWithAssignments) GetUserRoleAssignments() []*UserRoleAssignment {
	if x != nil {
		return x.UserRoleAssignments
	}
	return nil
}

var File_determined_rbac_v1_rbac_proto protoreflect.FileDescriptor

var file_determined_rbac_v1_rbac_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x72, 0x62, 0x61,
	0x63, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x47, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x04, 0x52,
	0x6f, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x40, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0d,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x3a, 0x0f, 0x92,
	0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xab,
	0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x3a, 0x0a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0xd2, 0x01, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a,
	0x15, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x3a, 0x0c,
	0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2, 0x01, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62, 0x61,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x3a, 0x22, 0x92, 0x41, 0x1f, 0x0a, 0x1d, 0xd2, 0x01, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62,
	0x61, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x21, 0x92, 0x41, 0x1e, 0x0a, 0x1c, 0xd2, 0x01, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xfe, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x6c, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x5d, 0x0a,
	0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x15,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x13, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2a, 0xa2, 0x0e, 0x0a, 0x0e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x21,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0xf9, 0xc6, 0x05, 0x12, 0x28, 0x0a, 0x22, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53,
	0x54, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x41, 0x55, 0x54, 0x48, 0x10, 0xfa, 0xc6, 0x05, 0x12,
	0x26, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0xd1, 0x0f, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46,
	0x41, 0x43, 0x54, 0x53, 0x10, 0xd2, 0x0f, 0x12, 0x2d, 0x0a, 0x28, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44,
	0x41, 0x54, 0x41, 0x10, 0xd3, 0x0f, 0x12, 0x26, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xd4, 0x0f, 0x12, 0x2f,
	0x0a, 0x2a, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0xd5, 0x0f, 0x12,
	0x26, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0xd6, 0x0f, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x53, 0x43, 0x10, 0xb9, 0x17, 0x12, 0x1d, 0x0a, 0x18, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57,
	0x5f, 0x4e, 0x53, 0x43, 0x10, 0xba, 0x17, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x53, 0x43, 0x10, 0xbb, 0x17, 0x12, 0x22, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xc9, 0xd6, 0x05, 0x12, 0x26, 0x0a, 0x20,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45,
	0x10, 0xb1, 0xde, 0x05, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x57, 0x4f, 0x52,
	0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0xa2, 0x1f, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0xa3, 0x1f,
	0x12, 0x25, 0x0a, 0x20, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x10, 0xa4, 0x1f, 0x12, 0x33, 0x0a, 0x2e, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x57,
	0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xa5, 0x1f, 0x12, 0x3c, 0x0a, 0x37,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0xa6, 0x1f, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x89, 0x27, 0x12,
	0x21, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10,
	0x8a, 0x27, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x8b, 0x27, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x8c, 0x27, 0x12, 0x21, 0x0a, 0x1c,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x10, 0xf2, 0x2e, 0x12,
	0x28, 0x0a, 0x23, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0xd9, 0x36, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x49,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x10, 0xda, 0x36, 0x12, 0x2a, 0x0a, 0x25, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0xdb, 0x36, 0x12,
	0x2a, 0x0a, 0x25, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0xdc, 0x36, 0x12, 0x29, 0x0a, 0x24, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0xdd, 0x36, 0x12, 0x35, 0x0a, 0x30, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0xde, 0x36, 0x12, 0x34, 0x0a,
	0x2f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0xdf, 0x36, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x53, 0x10, 0xc1, 0x3e, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45,
	0x10, 0xc2, 0x3e, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x47,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0xc3, 0x3e, 0x12, 0x2e, 0x0a, 0x29, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0xc4, 0x3e, 0x12, 0x27, 0x0a, 0x22, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0xc5, 0x3e,
	0x12, 0x29, 0x0a, 0x24, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0xc6, 0x3e, 0x12, 0x2d, 0x0a, 0x28, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x4a, 0x4f,
	0x42, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xa5, 0x3f, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x10, 0xa9, 0x46, 0x12,
	0x25, 0x0a, 0x20, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41,
	0x54, 0x45, 0x53, 0x10, 0xaa, 0x46, 0x12, 0x25, 0x0a, 0x20, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x10, 0xab, 0x46, 0x12, 0x25, 0x0a,
	0x20, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x53, 0x10, 0xac, 0x46, 0x12, 0x22, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x53, 0x10, 0x81, 0xee, 0x05, 0x12, 0x23, 0x0a, 0x1d, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54,
	0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x53, 0x10, 0xe9, 0xf5, 0x05, 0x42, 0x36, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x61, 0x69, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72,
	0x62, 0x61, 0x63, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_determined_rbac_v1_rbac_proto_rawDescOnce sync.Once
	file_determined_rbac_v1_rbac_proto_rawDescData = file_determined_rbac_v1_rbac_proto_rawDesc
)

func file_determined_rbac_v1_rbac_proto_rawDescGZIP() []byte {
	file_determined_rbac_v1_rbac_proto_rawDescOnce.Do(func() {
		file_determined_rbac_v1_rbac_proto_rawDescData = protoimpl.X.CompressGZIP(file_determined_rbac_v1_rbac_proto_rawDescData)
	})
	return file_determined_rbac_v1_rbac_proto_rawDescData
}

var file_determined_rbac_v1_rbac_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_determined_rbac_v1_rbac_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_determined_rbac_v1_rbac_proto_goTypes = []interface{}{
	(PermissionType)(0),           // 0: determined.rbac.v1.PermissionType
	(*ScopeTypeMask)(nil),         // 1: determined.rbac.v1.ScopeTypeMask
	(*Role)(nil),                  // 2: determined.rbac.v1.Role
	(*Permission)(nil),            // 3: determined.rbac.v1.Permission
	(*RoleAssignmentSummary)(nil), // 4: determined.rbac.v1.RoleAssignmentSummary
	(*RoleAssignment)(nil),        // 5: determined.rbac.v1.RoleAssignment
	(*GroupRoleAssignment)(nil),   // 6: determined.rbac.v1.GroupRoleAssignment
	(*UserRoleAssignment)(nil),    // 7: determined.rbac.v1.UserRoleAssignment
	(*RoleWithAssignments)(nil),   // 8: determined.rbac.v1.RoleWithAssignments
}
var file_determined_rbac_v1_rbac_proto_depIdxs = []int32{
	3,  // 0: determined.rbac.v1.Role.permissions:type_name -> determined.rbac.v1.Permission
	1,  // 1: determined.rbac.v1.Role.scope_type_mask:type_name -> determined.rbac.v1.ScopeTypeMask
	0,  // 2: determined.rbac.v1.Permission.id:type_name -> determined.rbac.v1.PermissionType
	1,  // 3: determined.rbac.v1.Permission.scope_type_mask:type_name -> determined.rbac.v1.ScopeTypeMask
	2,  // 4: determined.rbac.v1.RoleAssignment.role:type_name -> determined.rbac.v1.Role
	5,  // 5: determined.rbac.v1.GroupRoleAssignment.role_assignment:type_name -> determined.rbac.v1.RoleAssignment
	5,  // 6: determined.rbac.v1.UserRoleAssignment.role_assignment:type_name -> determined.rbac.v1.RoleAssignment
	2,  // 7: determined.rbac.v1.RoleWithAssignments.role:type_name -> determined.rbac.v1.Role
	6,  // 8: determined.rbac.v1.RoleWithAssignments.group_role_assignments:type_name -> determined.rbac.v1.GroupRoleAssignment
	7,  // 9: determined.rbac.v1.RoleWithAssignments.user_role_assignments:type_name -> determined.rbac.v1.UserRoleAssignment
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_determined_rbac_v1_rbac_proto_init() }
func file_determined_rbac_v1_rbac_proto_init() {
	if File_determined_rbac_v1_rbac_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_determined_rbac_v1_rbac_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeTypeMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_rbac_v1_rbac_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_rbac_v1_rbac_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_rbac_v1_rbac_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleAssignmentSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_rbac_v1_rbac_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_rbac_v1_rbac_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRoleAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_rbac_v1_rbac_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRoleAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_rbac_v1_rbac_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleWithAssignments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_determined_rbac_v1_rbac_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_determined_rbac_v1_rbac_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_determined_rbac_v1_rbac_proto_goTypes,
		DependencyIndexes: file_determined_rbac_v1_rbac_proto_depIdxs,
		EnumInfos:         file_determined_rbac_v1_rbac_proto_enumTypes,
		MessageInfos:      file_determined_rbac_v1_rbac_proto_msgTypes,
	}.Build()
	File_determined_rbac_v1_rbac_proto = out.File
	file_determined_rbac_v1_rbac_proto_rawDesc = nil
	file_determined_rbac_v1_rbac_proto_goTypes = nil
	file_determined_rbac_v1_rbac_proto_depIdxs = nil
}
