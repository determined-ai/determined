// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// source: determined/api/v1/api.proto

package apiv1

import (
	context "context"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_determined_api_v1_api_proto protoreflect.FileDescriptor

var file_determined_api_v1_api_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x21, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xa9, 0xeb, 0x01, 0x0a, 0x0a, 0x44,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x7e, 0x0a, 0x05, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x1f, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x12, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x0b, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x12, 0x20, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x74, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x92, 0x41, 0x07, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x28,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x92, 0x41, 0x07, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x9a, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x92,
	0x41, 0x07, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x0f, 0x50, 0x6f,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x07, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x7b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x7d, 0x92, 0x41, 0x07, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0xa6, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x62, 0x79, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x92, 0x41, 0x07, 0x0a,
	0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x12,
	0x1f, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x92, 0x41, 0x07, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x77, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x07, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x92, 0x41, 0x07, 0x0a, 0x05, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x32, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x92, 0x41, 0x07, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x90, 0x01, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x26, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x92, 0x41, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x62, 0x00, 0x12,
	0x7c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12,
	0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x92,
	0x41, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x62, 0x00, 0x12, 0x93, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x92, 0x41, 0x09, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x73, 0x92, 0x41, 0x09, 0x0a,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x09, 0x0a, 0x07, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x82, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x92,
	0x41, 0x09, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x88, 0x01, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x92, 0x41, 0x09, 0x0a, 0x07, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x8f, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x21, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x09, 0x0a,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x92, 0x01, 0x0a, 0x0b, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22,
	0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x92, 0x41, 0x09, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x99, 0x01,
	0x0a, 0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x26,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x09,
	0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x9f, 0x01, 0x0a, 0x0a, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x30, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2f, 0x7b,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x92,
	0x41, 0x09, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xa3, 0x01, 0x0a, 0x0b,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x25, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6c,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x92, 0x41, 0x09, 0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x9f, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41,
	0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x92,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x44, 0x65, 0x66, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xaf, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x54, 0x72, 0x65, 0x65, 0x12, 0x29, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65, 0x92, 0x41, 0x0d, 0x0a, 0x0b,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0d, 0x0a, 0x0b,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xe5, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x39, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x92, 0x41, 0x0d,
	0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xac, 0x01,
	0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x92, 0x41, 0x0d, 0x0a,
	0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a,
	0x0f, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22,
	0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x92,
	0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0xa4, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0e, 0x4b, 0x69, 0x6c, 0x6c, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69,
	0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x6b, 0x69, 0x6c, 0x6c, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x20,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0xb0, 0x01, 0x0a, 0x13, 0x55, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0xb1, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x32, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x69, 0x64, 0x7d, 0x3a, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x2a, 0x23, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0xfb, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x39, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x65, 0x73, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4e, 0x12, 0x4c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x2f, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0xc1, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x48, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x48, 0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48,
	0x50, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2d, 0x68, 0x70, 0x2d, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xc0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2d, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73,
	0x92, 0x41, 0x15, 0x0a, 0x06, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x0a, 0x0b, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x92, 0x41, 0x0d,
	0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x9c, 0x01,
	0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x12, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0xb4, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22,
	0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2d, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x74, 0x61, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x12, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x12, 0xba, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x92, 0x41, 0x12, 0x0a, 0x10,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x12, 0xc3, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x12, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0xc0, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x44, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x32, 0x24, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x12, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x20, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0xc0, 0x01, 0x0a, 0x16, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x2a, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x92, 0x41, 0x12, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x8e, 0x01, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x15, 0x0a, 0x06, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73,
	0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb0, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x92, 0x41, 0x12, 0x0a, 0x06,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0x9b, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x23,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x88, 0x02, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6c, 0x6f, 0x67, 0x73, 0x92, 0x41, 0x15, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x0a, 0x06, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x30, 0x01, 0x12, 0xb4,
	0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x73,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x88, 0x02, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x92, 0x41, 0x15, 0x0a, 0x0b,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x0a, 0x06, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x30, 0x01, 0x12, 0xaa, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x69, 0x7a, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x92, 0x41, 0x15, 0x0a, 0x06, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x12, 0xb3, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x22, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x8b, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x73, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f,
	0x67, 0x73, 0x92, 0x41, 0x0d, 0x0a, 0x04, 0x4a, 0x6f, 0x62, 0x73, 0x0a, 0x05, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x30, 0x01, 0x12, 0xa4, 0x01, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67,
	0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f,
	0x67, 0x73, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x92, 0x41, 0x0d, 0x0a, 0x04, 0x4a, 0x6f,
	0x62, 0x73, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x30, 0x01, 0x12, 0xca, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x31, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x30, 0x01, 0x12, 0xe4, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x39, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x92, 0x41, 0x0a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x30, 0x01, 0x12,
	0xcb, 0x01, 0x0a, 0x1d, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x37, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x90, 0x01,
	0x0a, 0x09, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x23, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x18,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x69, 0x6c, 0x6c, 0x92, 0x41, 0x15, 0x0a, 0x0b, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x0a, 0x06, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0xad, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12,
	0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0xd6, 0x01, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x34, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x2f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x41, 0x0a, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xf6, 0x01, 0x0a, 0x21, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12,
	0x3b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x43, 0x22, 0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x12, 0xe6, 0x01, 0x0a, 0x1d, 0x41, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x37, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22,
	0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2f, 0x61, 0x63, 0x6b,
	0x5f, 0x70, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xef, 0x01, 0x0a, 0x1d,
	0x4d, 0x61, 0x72, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x12, 0x37, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x22, 0x43, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xe1, 0x01,
	0x0a, 0x18, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x64,
	0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x7a, 0x76,
	0x6f, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x12, 0x47, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x7b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x7a,
	0x76, 0x6f, 0x75, 0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0xd4, 0x01, 0x0a, 0x1a, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x34, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xbc, 0x01, 0x0a, 0x13, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x6c, 0x6c, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x6c, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x6c, 0x6c,
	0x5f, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xd3, 0x01, 0x0a, 0x16, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x30, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22,
	0x3c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xde, 0x01,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xfa,
	0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4d, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x92, 0x41,
	0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xd6, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x45, 0x78, 0x69, 0x74, 0x12, 0x36, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x45, 0x61, 0x72, 0x6c,
	0x79, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x32, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x3a, 0x0a, 0x65, 0x61, 0x72,
	0x6c, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0xb7, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2d, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x22, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xca,
	0x01, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x6e,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x74, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x3a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x92, 0x41,
	0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xed, 0x01, 0x0a, 0x1a,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x34, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4f, 0x22,
	0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f,
	0x7b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x10, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x92, 0x41,
	0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xf9, 0x01, 0x0a, 0x1c,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x36, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x2f, 0x7b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x3a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x13, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x3a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x92, 0x41,
	0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x79, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x21, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a,
	0x6f, 0x62, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x9a, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62,
	0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x88, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x0b, 0x0a,
	0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x0b, 0x50,
	0x75, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2d, 0x1a, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x92, 0x41,
	0x0b, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x9e, 0x01, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92,
	0x41, 0x0b, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x88, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x26,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x4e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x93, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12,
	0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x7d,
	0x92, 0x41, 0x0b, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0xa4,
	0x01, 0x0a, 0x0c, 0x49, 0x64, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12,
	0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x6c, 0x65,
	0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x9b, 0x01, 0x0a, 0x0c, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f,
	0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x4e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22,
	0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6b, 0x69, 0x6c, 0x6c, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x22, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x73, 0x12, 0x91, 0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0b, 0x0a, 0x09, 0x4e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x79, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x73, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73,
	0x12, 0x81, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x22, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x7b,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x6b, 0x69, 0x6c, 0x6c, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73,
	0x12, 0xa9, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x7b, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x82, 0x01, 0x0a,
	0x0b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x25, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x73, 0x12, 0x83, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x0b, 0x4b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x22,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6b, 0x69,
	0x6c, 0x6c, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0xb5, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2f, 0x7b, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x92,
	0x41, 0x0e, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27,
	0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x0e, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0xad, 0x01, 0x0a, 0x0f, 0x4b, 0x69, 0x6c,
	0x6c, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x29, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x69, 0x6c, 0x6c,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x2a, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6b, 0x69, 0x6c, 0x6c, 0x92, 0x41, 0x0e, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0xcd, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x30, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37,
	0x22, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0e, 0x0a, 0x0c, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x2b,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0e, 0x0a, 0x0c, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x92,
	0x41, 0x07, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x7b, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x21, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x07, 0x0a,
	0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x7c, 0x0a, 0x09,
	0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x0a, 0x50,
	0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x32, 0x1b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x97, 0x01,
	0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x26,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x92, 0x41, 0x08, 0x0a,
	0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x0e, 0x55, 0x6e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x75, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x92, 0x41,
	0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x09, 0x4d, 0x6f,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x92,
	0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x2a, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41,
	0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x79, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0xb5, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0xa4, 0x01,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0xca,
	0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x32, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x7d, 0x3a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x92, 0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0xbe, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x2a, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x7b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x7d, 0x92, 0x41, 0x08, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0xa1, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0xc8, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0d, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x9e, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x2a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0d, 0x0a,
	0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xbb, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x16, 0x50,
	0x6f, 0x73, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3c, 0x22, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xb4,
	0x01, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x41, 0x12, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x30, 0x01, 0x12, 0xb5, 0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3c, 0x12, 0x3a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x92, 0x41,
	0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x30, 0x01, 0x12, 0xc0, 0x01,
	0x0a, 0x0e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2f, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x2d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x30, 0x01,
	0x12, 0xb8, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x55, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x74,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x92, 0x41, 0x0a, 0x0a,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2d, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xc8, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x48, 0x50, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x48, 0x50, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x48, 0x50, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x12, 0xbe, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x48, 0x50, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x50, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x50, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x30, 0x01, 0x12, 0xb3, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x12, 0x2f, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x37, 0x88, 0x02, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x61, 0x77, 0x92, 0x41, 0x09, 0x0a,
	0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0xcc, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x92, 0x41, 0x09, 0x0a, 0x07,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x12, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x12, 0x2e, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x92, 0x41, 0x0c,
	0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x8d, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x27,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x92, 0x41, 0x0c,
	0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x90, 0x01, 0x0a,
	0x0d, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x27,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12,
	0xa0, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x32,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41,
	0x0c, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0xa3, 0x01,
	0x0a, 0x10, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x55, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22,
	0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x93, 0x01, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x1b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x69, 0x6e, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x55, 0x6e, 0x70, 0x69,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x6e, 0x70, 0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x70, 0x69, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x92, 0x41, 0x0a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xa0, 0x01,
	0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x3a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x92, 0x41, 0x0a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x0f, 0x50, 0x75, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x1a, 0x23, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x94, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x32, 0x15, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x3a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x0a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x0e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x55, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x75, 0x6e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x92, 0x41, 0x0a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22,
	0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d,
	0x6f, 0x76, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x76, 0x65, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x0d, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x83, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x10, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x3a,
	0x07, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x2a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x1a, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x92,
	0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x85, 0x01, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x23, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0x84, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x8f, 0x01, 0x0a, 0x0b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x1a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x8c, 0x01,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x92,
	0x41, 0x0a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0xa8, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2f, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x92, 0x41,
	0x06, 0x0a, 0x04, 0x52, 0x42, 0x41, 0x43, 0x12, 0xe0, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x3e, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x41, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2f, 0x7b, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x7d, 0x92, 0x41, 0x06, 0x0a, 0x04, 0x52, 0x42, 0x41, 0x43, 0x12, 0x90, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x62, 0x79, 0x2d, 0x69, 0x64,
	0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x06, 0x0a, 0x04, 0x52, 0x42, 0x41, 0x43, 0x12, 0xb6, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x62, 0x79, 0x2d, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x06,
	0x0a, 0x04, 0x52, 0x42, 0x41, 0x43, 0x12, 0xbb, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x31, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2a, 0x12, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x62, 0x79, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x06, 0x0a, 0x04,
	0x52, 0x42, 0x41, 0x43, 0x12, 0xca, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x2f, 0x62, 0x79, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x06, 0x0a, 0x04, 0x52, 0x42, 0x41,
	0x43, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x23, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x22, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x06, 0x0a, 0x04,
	0x52, 0x42, 0x41, 0x43, 0x12, 0x8f, 0x01, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x61, 0x64, 0x64, 0x2d, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x06,
	0x0a, 0x04, 0x52, 0x42, 0x41, 0x43, 0x12, 0xa4, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22,
	0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2f, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x06, 0x0a, 0x04, 0x52, 0x42, 0x41, 0x43, 0x12, 0x98, 0x01,
	0x0a, 0x10, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x2a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x07, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x33, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x92, 0x41, 0x0a, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0xda, 0x07, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2d, 0x61, 0x69, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x92, 0x41,
	0xa1, 0x07, 0x12, 0x95, 0x06, 0x0a, 0x15, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65,
	0x64, 0x20, 0x41, 0x50, 0x49, 0x20, 0x28, 0x42, 0x65, 0x74, 0x61, 0x29, 0x12, 0xf5, 0x04, 0x44,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x68, 0x65, 0x6c, 0x70, 0x73, 0x20,
	0x64, 0x65, 0x65, 0x70, 0x20, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x65,
	0x61, 0x6d, 0x73, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x6c, 0x79, 0x2c, 0x20, 0x65,
	0x61, 0x73, 0x69, 0x6c, 0x79, 0x20, 0x73, 0x68, 0x61, 0x72, 0x65, 0x20, 0x47, 0x50, 0x55, 0x20,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x2e, 0x20, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x64, 0x65, 0x65, 0x70, 0x20, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72,
	0x73, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x20, 0x61, 0x74, 0x20, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x2c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x20, 0x6e, 0x65, 0x65,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x72, 0x79, 0x20, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x20, 0x44, 0x65, 0x76, 0x4f, 0x70, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x77, 0x72,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x0a,
	0x0a, 0x59, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x74, 0x68, 0x69, 0x6e, 0x6b, 0x20, 0x6f,
	0x66, 0x20, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20,
	0x61, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x61, 0x70, 0x20,
	0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x20, 0x6c, 0x69,
	0x6b, 0x65, 0x20, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x46, 0x6c, 0x6f, 0x77, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x50, 0x79, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x20, 0x2d, 0x2d, 0x2d, 0x20, 0x77, 0x68,
	0x69, 0x63, 0x68, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x47, 0x50, 0x55, 0x20, 0x2d, 0x2d, 0x2d, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x61, 0x72, 0x69, 0x73, 0x65, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64,
	0x6f, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x65, 0x65, 0x70, 0x20, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x20, 0x61, 0x74, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2c, 0x20, 0x61, 0x73, 0x20,
	0x74, 0x65, 0x61, 0x6d, 0x73, 0x2c, 0x20, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2c,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x73, 0x65, 0x74, 0x73, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x73,
	0x69, 0x7a, 0x65, 0x2e, 0x22, 0x40, 0x0a, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x65, 0x64, 0x20, 0x41, 0x49, 0x12, 0x16, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x69, 0x2f, 0x1a, 0x17, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x40, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x65, 0x64, 0x2e, 0x61, 0x69, 0x2a, 0x3d, 0x0a, 0x0a, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x20, 0x32, 0x2e, 0x30, 0x12, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
	0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x73, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x2d, 0x32, 0x2e, 0x30,
	0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x32, 0x03, 0x30, 0x2e, 0x31, 0x2a, 0x02, 0x01, 0x02, 0x5a, 0x4a,
	0x0a, 0x48, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x39, 0x08, 0x02, 0x12, 0x24, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x72, 0x24, 0x0a,
	0x1b, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x41, 0x49, 0x20, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x05, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_determined_api_v1_api_proto_goTypes = []interface{}{
	(*LoginRequest)(nil),                                 // 0: determined.api.v1.LoginRequest
	(*CurrentUserRequest)(nil),                           // 1: determined.api.v1.CurrentUserRequest
	(*LogoutRequest)(nil),                                // 2: determined.api.v1.LogoutRequest
	(*GetUsersRequest)(nil),                              // 3: determined.api.v1.GetUsersRequest
	(*GetUserSettingRequest)(nil),                        // 4: determined.api.v1.GetUserSettingRequest
	(*ResetUserSettingRequest)(nil),                      // 5: determined.api.v1.ResetUserSettingRequest
	(*PostUserSettingRequest)(nil),                       // 6: determined.api.v1.PostUserSettingRequest
	(*GetUserRequest)(nil),                               // 7: determined.api.v1.GetUserRequest
	(*GetUserByUsernameRequest)(nil),                     // 8: determined.api.v1.GetUserByUsernameRequest
	(*GetMeRequest)(nil),                                 // 9: determined.api.v1.GetMeRequest
	(*PostUserRequest)(nil),                              // 10: determined.api.v1.PostUserRequest
	(*SetUserPasswordRequest)(nil),                       // 11: determined.api.v1.SetUserPasswordRequest
	(*PatchUserRequest)(nil),                             // 12: determined.api.v1.PatchUserRequest
	(*GetTelemetryRequest)(nil),                          // 13: determined.api.v1.GetTelemetryRequest
	(*GetMasterRequest)(nil),                             // 14: determined.api.v1.GetMasterRequest
	(*GetMasterConfigRequest)(nil),                       // 15: determined.api.v1.GetMasterConfigRequest
	(*MasterLogsRequest)(nil),                            // 16: determined.api.v1.MasterLogsRequest
	(*GetAgentsRequest)(nil),                             // 17: determined.api.v1.GetAgentsRequest
	(*GetAgentRequest)(nil),                              // 18: determined.api.v1.GetAgentRequest
	(*GetSlotsRequest)(nil),                              // 19: determined.api.v1.GetSlotsRequest
	(*GetSlotRequest)(nil),                               // 20: determined.api.v1.GetSlotRequest
	(*EnableAgentRequest)(nil),                           // 21: determined.api.v1.EnableAgentRequest
	(*DisableAgentRequest)(nil),                          // 22: determined.api.v1.DisableAgentRequest
	(*EnableSlotRequest)(nil),                            // 23: determined.api.v1.EnableSlotRequest
	(*DisableSlotRequest)(nil),                           // 24: determined.api.v1.DisableSlotRequest
	(*CreateExperimentRequest)(nil),                      // 25: determined.api.v1.CreateExperimentRequest
	(*GetExperimentRequest)(nil),                         // 26: determined.api.v1.GetExperimentRequest
	(*GetExperimentsRequest)(nil),                        // 27: determined.api.v1.GetExperimentsRequest
	(*GetModelDefRequest)(nil),                           // 28: determined.api.v1.GetModelDefRequest
	(*GetModelDefTreeRequest)(nil),                       // 29: determined.api.v1.GetModelDefTreeRequest
	(*GetModelDefFileRequest)(nil),                       // 30: determined.api.v1.GetModelDefFileRequest
	(*GetExperimentLabelsRequest)(nil),                   // 31: determined.api.v1.GetExperimentLabelsRequest
	(*GetExperimentValidationHistoryRequest)(nil),        // 32: determined.api.v1.GetExperimentValidationHistoryRequest
	(*ActivateExperimentRequest)(nil),                    // 33: determined.api.v1.ActivateExperimentRequest
	(*PauseExperimentRequest)(nil),                       // 34: determined.api.v1.PauseExperimentRequest
	(*CancelExperimentRequest)(nil),                      // 35: determined.api.v1.CancelExperimentRequest
	(*KillExperimentRequest)(nil),                        // 36: determined.api.v1.KillExperimentRequest
	(*ArchiveExperimentRequest)(nil),                     // 37: determined.api.v1.ArchiveExperimentRequest
	(*UnarchiveExperimentRequest)(nil),                   // 38: determined.api.v1.UnarchiveExperimentRequest
	(*PatchExperimentRequest)(nil),                       // 39: determined.api.v1.PatchExperimentRequest
	(*DeleteExperimentRequest)(nil),                      // 40: determined.api.v1.DeleteExperimentRequest
	(*GetBestSearcherValidationMetricRequest)(nil),       // 41: determined.api.v1.GetBestSearcherValidationMetricRequest
	(*GetExperimentCheckpointsRequest)(nil),              // 42: determined.api.v1.GetExperimentCheckpointsRequest
	(*PreviewHPSearchRequest)(nil),                       // 43: determined.api.v1.PreviewHPSearchRequest
	(*GetExperimentTrialsRequest)(nil),                   // 44: determined.api.v1.GetExperimentTrialsRequest
	(*CompareTrialsRequest)(nil),                         // 45: determined.api.v1.CompareTrialsRequest
	(*QueryTrialsRequest)(nil),                           // 46: determined.api.v1.QueryTrialsRequest
	(*UpdateTrialTagsRequest)(nil),                       // 47: determined.api.v1.UpdateTrialTagsRequest
	(*GetTrialsCollectionsRequest)(nil),                  // 48: determined.api.v1.GetTrialsCollectionsRequest
	(*CreateTrialsCollectionRequest)(nil),                // 49: determined.api.v1.CreateTrialsCollectionRequest
	(*PatchTrialsCollectionRequest)(nil),                 // 50: determined.api.v1.PatchTrialsCollectionRequest
	(*DeleteTrialsCollectionRequest)(nil),                // 51: determined.api.v1.DeleteTrialsCollectionRequest
	(*GetTrialRequest)(nil),                              // 52: determined.api.v1.GetTrialRequest
	(*GetTrialWorkloadsRequest)(nil),                     // 53: determined.api.v1.GetTrialWorkloadsRequest
	(*TrialLogsRequest)(nil),                             // 54: determined.api.v1.TrialLogsRequest
	(*TrialLogsFieldsRequest)(nil),                       // 55: determined.api.v1.TrialLogsFieldsRequest
	(*SummarizeTrialRequest)(nil),                        // 56: determined.api.v1.SummarizeTrialRequest
	(*AllocationReadyRequest)(nil),                       // 57: determined.api.v1.AllocationReadyRequest
	(*AllocationWaitingRequest)(nil),                     // 58: determined.api.v1.AllocationWaitingRequest
	(*TaskLogsRequest)(nil),                              // 59: determined.api.v1.TaskLogsRequest
	(*TaskLogsFieldsRequest)(nil),                        // 60: determined.api.v1.TaskLogsFieldsRequest
	(*GetTrialProfilerMetricsRequest)(nil),               // 61: determined.api.v1.GetTrialProfilerMetricsRequest
	(*GetTrialProfilerAvailableSeriesRequest)(nil),       // 62: determined.api.v1.GetTrialProfilerAvailableSeriesRequest
	(*PostTrialProfilerMetricsBatchRequest)(nil),         // 63: determined.api.v1.PostTrialProfilerMetricsBatchRequest
	(*KillTrialRequest)(nil),                             // 64: determined.api.v1.KillTrialRequest
	(*GetTrialCheckpointsRequest)(nil),                   // 65: determined.api.v1.GetTrialCheckpointsRequest
	(*AllocationPreemptionSignalRequest)(nil),            // 66: determined.api.v1.AllocationPreemptionSignalRequest
	(*AllocationPendingPreemptionSignalRequest)(nil),     // 67: determined.api.v1.AllocationPendingPreemptionSignalRequest
	(*AckAllocationPreemptionSignalRequest)(nil),         // 68: determined.api.v1.AckAllocationPreemptionSignalRequest
	(*MarkAllocationResourcesDaemonRequest)(nil),         // 69: determined.api.v1.MarkAllocationResourcesDaemonRequest
	(*AllocationRendezvousInfoRequest)(nil),              // 70: determined.api.v1.AllocationRendezvousInfoRequest
	(*PostAllocationProxyAddressRequest)(nil),            // 71: determined.api.v1.PostAllocationProxyAddressRequest
	(*AllocationAllGatherRequest)(nil),                   // 72: determined.api.v1.AllocationAllGatherRequest
	(*NotifyContainerRunningRequest)(nil),                // 73: determined.api.v1.NotifyContainerRunningRequest
	(*GetCurrentTrialSearcherOperationRequest)(nil),      // 74: determined.api.v1.GetCurrentTrialSearcherOperationRequest
	(*CompleteTrialSearcherValidationRequest)(nil),       // 75: determined.api.v1.CompleteTrialSearcherValidationRequest
	(*ReportTrialSearcherEarlyExitRequest)(nil),          // 76: determined.api.v1.ReportTrialSearcherEarlyExitRequest
	(*ReportTrialProgressRequest)(nil),                   // 77: determined.api.v1.ReportTrialProgressRequest
	(*PostTrialRunnerMetadataRequest)(nil),               // 78: determined.api.v1.PostTrialRunnerMetadataRequest
	(*ReportTrialTrainingMetricsRequest)(nil),            // 79: determined.api.v1.ReportTrialTrainingMetricsRequest
	(*ReportTrialValidationMetricsRequest)(nil),          // 80: determined.api.v1.ReportTrialValidationMetricsRequest
	(*ReportCheckpointRequest)(nil),                      // 81: determined.api.v1.ReportCheckpointRequest
	(*GetJobsRequest)(nil),                               // 82: determined.api.v1.GetJobsRequest
	(*GetJobQueueStatsRequest)(nil),                      // 83: determined.api.v1.GetJobQueueStatsRequest
	(*UpdateJobQueueRequest)(nil),                        // 84: determined.api.v1.UpdateJobQueueRequest
	(*GetTemplatesRequest)(nil),                          // 85: determined.api.v1.GetTemplatesRequest
	(*GetTemplateRequest)(nil),                           // 86: determined.api.v1.GetTemplateRequest
	(*PutTemplateRequest)(nil),                           // 87: determined.api.v1.PutTemplateRequest
	(*DeleteTemplateRequest)(nil),                        // 88: determined.api.v1.DeleteTemplateRequest
	(*GetNotebooksRequest)(nil),                          // 89: determined.api.v1.GetNotebooksRequest
	(*GetNotebookRequest)(nil),                           // 90: determined.api.v1.GetNotebookRequest
	(*IdleNotebookRequest)(nil),                          // 91: determined.api.v1.IdleNotebookRequest
	(*KillNotebookRequest)(nil),                          // 92: determined.api.v1.KillNotebookRequest
	(*SetNotebookPriorityRequest)(nil),                   // 93: determined.api.v1.SetNotebookPriorityRequest
	(*LaunchNotebookRequest)(nil),                        // 94: determined.api.v1.LaunchNotebookRequest
	(*GetShellsRequest)(nil),                             // 95: determined.api.v1.GetShellsRequest
	(*GetShellRequest)(nil),                              // 96: determined.api.v1.GetShellRequest
	(*KillShellRequest)(nil),                             // 97: determined.api.v1.KillShellRequest
	(*SetShellPriorityRequest)(nil),                      // 98: determined.api.v1.SetShellPriorityRequest
	(*LaunchShellRequest)(nil),                           // 99: determined.api.v1.LaunchShellRequest
	(*GetCommandsRequest)(nil),                           // 100: determined.api.v1.GetCommandsRequest
	(*GetCommandRequest)(nil),                            // 101: determined.api.v1.GetCommandRequest
	(*KillCommandRequest)(nil),                           // 102: determined.api.v1.KillCommandRequest
	(*SetCommandPriorityRequest)(nil),                    // 103: determined.api.v1.SetCommandPriorityRequest
	(*LaunchCommandRequest)(nil),                         // 104: determined.api.v1.LaunchCommandRequest
	(*GetTensorboardsRequest)(nil),                       // 105: determined.api.v1.GetTensorboardsRequest
	(*GetTensorboardRequest)(nil),                        // 106: determined.api.v1.GetTensorboardRequest
	(*KillTensorboardRequest)(nil),                       // 107: determined.api.v1.KillTensorboardRequest
	(*SetTensorboardPriorityRequest)(nil),                // 108: determined.api.v1.SetTensorboardPriorityRequest
	(*LaunchTensorboardRequest)(nil),                     // 109: determined.api.v1.LaunchTensorboardRequest
	(*GetActiveTasksCountRequest)(nil),                   // 110: determined.api.v1.GetActiveTasksCountRequest
	(*GetTaskRequest)(nil),                               // 111: determined.api.v1.GetTaskRequest
	(*GetModelRequest)(nil),                              // 112: determined.api.v1.GetModelRequest
	(*PostModelRequest)(nil),                             // 113: determined.api.v1.PostModelRequest
	(*PatchModelRequest)(nil),                            // 114: determined.api.v1.PatchModelRequest
	(*ArchiveModelRequest)(nil),                          // 115: determined.api.v1.ArchiveModelRequest
	(*UnarchiveModelRequest)(nil),                        // 116: determined.api.v1.UnarchiveModelRequest
	(*MoveModelRequest)(nil),                             // 117: determined.api.v1.MoveModelRequest
	(*DeleteModelRequest)(nil),                           // 118: determined.api.v1.DeleteModelRequest
	(*GetModelsRequest)(nil),                             // 119: determined.api.v1.GetModelsRequest
	(*GetModelLabelsRequest)(nil),                        // 120: determined.api.v1.GetModelLabelsRequest
	(*GetModelVersionRequest)(nil),                       // 121: determined.api.v1.GetModelVersionRequest
	(*GetModelVersionsRequest)(nil),                      // 122: determined.api.v1.GetModelVersionsRequest
	(*PostModelVersionRequest)(nil),                      // 123: determined.api.v1.PostModelVersionRequest
	(*PatchModelVersionRequest)(nil),                     // 124: determined.api.v1.PatchModelVersionRequest
	(*DeleteModelVersionRequest)(nil),                    // 125: determined.api.v1.DeleteModelVersionRequest
	(*GetCheckpointRequest)(nil),                         // 126: determined.api.v1.GetCheckpointRequest
	(*PostCheckpointMetadataRequest)(nil),                // 127: determined.api.v1.PostCheckpointMetadataRequest
	(*DeleteCheckpointsRequest)(nil),                     // 128: determined.api.v1.DeleteCheckpointsRequest
	(*GetSearcherEventsRequest)(nil),                     // 129: determined.api.v1.GetSearcherEventsRequest
	(*PostSearcherOperationsRequest)(nil),                // 130: determined.api.v1.PostSearcherOperationsRequest
	(*MetricNamesRequest)(nil),                           // 131: determined.api.v1.MetricNamesRequest
	(*MetricBatchesRequest)(nil),                         // 132: determined.api.v1.MetricBatchesRequest
	(*TrialsSnapshotRequest)(nil),                        // 133: determined.api.v1.TrialsSnapshotRequest
	(*TrialsSampleRequest)(nil),                          // 134: determined.api.v1.TrialsSampleRequest
	(*GetResourcePoolsRequest)(nil),                      // 135: determined.api.v1.GetResourcePoolsRequest
	(*ComputeHPImportanceRequest)(nil),                   // 136: determined.api.v1.ComputeHPImportanceRequest
	(*GetHPImportanceRequest)(nil),                       // 137: determined.api.v1.GetHPImportanceRequest
	(*ResourceAllocationRawRequest)(nil),                 // 138: determined.api.v1.ResourceAllocationRawRequest
	(*ResourceAllocationAggregatedRequest)(nil),          // 139: determined.api.v1.ResourceAllocationAggregatedRequest
	(*GetWorkspaceRequest)(nil),                          // 140: determined.api.v1.GetWorkspaceRequest
	(*GetWorkspaceProjectsRequest)(nil),                  // 141: determined.api.v1.GetWorkspaceProjectsRequest
	(*GetWorkspacesRequest)(nil),                         // 142: determined.api.v1.GetWorkspacesRequest
	(*PostWorkspaceRequest)(nil),                         // 143: determined.api.v1.PostWorkspaceRequest
	(*PatchWorkspaceRequest)(nil),                        // 144: determined.api.v1.PatchWorkspaceRequest
	(*DeleteWorkspaceRequest)(nil),                       // 145: determined.api.v1.DeleteWorkspaceRequest
	(*ArchiveWorkspaceRequest)(nil),                      // 146: determined.api.v1.ArchiveWorkspaceRequest
	(*UnarchiveWorkspaceRequest)(nil),                    // 147: determined.api.v1.UnarchiveWorkspaceRequest
	(*PinWorkspaceRequest)(nil),                          // 148: determined.api.v1.PinWorkspaceRequest
	(*UnpinWorkspaceRequest)(nil),                        // 149: determined.api.v1.UnpinWorkspaceRequest
	(*GetProjectRequest)(nil),                            // 150: determined.api.v1.GetProjectRequest
	(*PostProjectRequest)(nil),                           // 151: determined.api.v1.PostProjectRequest
	(*AddProjectNoteRequest)(nil),                        // 152: determined.api.v1.AddProjectNoteRequest
	(*PutProjectNotesRequest)(nil),                       // 153: determined.api.v1.PutProjectNotesRequest
	(*PatchProjectRequest)(nil),                          // 154: determined.api.v1.PatchProjectRequest
	(*DeleteProjectRequest)(nil),                         // 155: determined.api.v1.DeleteProjectRequest
	(*ArchiveProjectRequest)(nil),                        // 156: determined.api.v1.ArchiveProjectRequest
	(*UnarchiveProjectRequest)(nil),                      // 157: determined.api.v1.UnarchiveProjectRequest
	(*MoveProjectRequest)(nil),                           // 158: determined.api.v1.MoveProjectRequest
	(*MoveExperimentRequest)(nil),                        // 159: determined.api.v1.MoveExperimentRequest
	(*GetWebhooksRequest)(nil),                           // 160: determined.api.v1.GetWebhooksRequest
	(*PostWebhookRequest)(nil),                           // 161: determined.api.v1.PostWebhookRequest
	(*DeleteWebhookRequest)(nil),                         // 162: determined.api.v1.DeleteWebhookRequest
	(*TestWebhookRequest)(nil),                           // 163: determined.api.v1.TestWebhookRequest
	(*GetGroupRequest)(nil),                              // 164: determined.api.v1.GetGroupRequest
	(*GetGroupsRequest)(nil),                             // 165: determined.api.v1.GetGroupsRequest
	(*CreateGroupRequest)(nil),                           // 166: determined.api.v1.CreateGroupRequest
	(*UpdateGroupRequest)(nil),                           // 167: determined.api.v1.UpdateGroupRequest
	(*DeleteGroupRequest)(nil),                           // 168: determined.api.v1.DeleteGroupRequest
	(*GetPermissionsSummaryRequest)(nil),                 // 169: determined.api.v1.GetPermissionsSummaryRequest
	(*GetGroupsAndUsersAssignedToWorkspaceRequest)(nil),  // 170: determined.api.v1.GetGroupsAndUsersAssignedToWorkspaceRequest
	(*GetRolesByIDRequest)(nil),                          // 171: determined.api.v1.GetRolesByIDRequest
	(*GetRolesAssignedToUserRequest)(nil),                // 172: determined.api.v1.GetRolesAssignedToUserRequest
	(*GetRolesAssignedToGroupRequest)(nil),               // 173: determined.api.v1.GetRolesAssignedToGroupRequest
	(*SearchRolesAssignableToScopeRequest)(nil),          // 174: determined.api.v1.SearchRolesAssignableToScopeRequest
	(*ListRolesRequest)(nil),                             // 175: determined.api.v1.ListRolesRequest
	(*AssignRolesRequest)(nil),                           // 176: determined.api.v1.AssignRolesRequest
	(*RemoveAssignmentsRequest)(nil),                     // 177: determined.api.v1.RemoveAssignmentsRequest
	(*PostUserActivityRequest)(nil),                      // 178: determined.api.v1.PostUserActivityRequest
	(*GetProjectsByUserActivityRequest)(nil),             // 179: determined.api.v1.GetProjectsByUserActivityRequest
	(*LoginResponse)(nil),                                // 180: determined.api.v1.LoginResponse
	(*CurrentUserResponse)(nil),                          // 181: determined.api.v1.CurrentUserResponse
	(*LogoutResponse)(nil),                               // 182: determined.api.v1.LogoutResponse
	(*GetUsersResponse)(nil),                             // 183: determined.api.v1.GetUsersResponse
	(*GetUserSettingResponse)(nil),                       // 184: determined.api.v1.GetUserSettingResponse
	(*ResetUserSettingResponse)(nil),                     // 185: determined.api.v1.ResetUserSettingResponse
	(*PostUserSettingResponse)(nil),                      // 186: determined.api.v1.PostUserSettingResponse
	(*GetUserResponse)(nil),                              // 187: determined.api.v1.GetUserResponse
	(*GetUserByUsernameResponse)(nil),                    // 188: determined.api.v1.GetUserByUsernameResponse
	(*GetMeResponse)(nil),                                // 189: determined.api.v1.GetMeResponse
	(*PostUserResponse)(nil),                             // 190: determined.api.v1.PostUserResponse
	(*SetUserPasswordResponse)(nil),                      // 191: determined.api.v1.SetUserPasswordResponse
	(*PatchUserResponse)(nil),                            // 192: determined.api.v1.PatchUserResponse
	(*GetTelemetryResponse)(nil),                         // 193: determined.api.v1.GetTelemetryResponse
	(*GetMasterResponse)(nil),                            // 194: determined.api.v1.GetMasterResponse
	(*GetMasterConfigResponse)(nil),                      // 195: determined.api.v1.GetMasterConfigResponse
	(*MasterLogsResponse)(nil),                           // 196: determined.api.v1.MasterLogsResponse
	(*GetAgentsResponse)(nil),                            // 197: determined.api.v1.GetAgentsResponse
	(*GetAgentResponse)(nil),                             // 198: determined.api.v1.GetAgentResponse
	(*GetSlotsResponse)(nil),                             // 199: determined.api.v1.GetSlotsResponse
	(*GetSlotResponse)(nil),                              // 200: determined.api.v1.GetSlotResponse
	(*EnableAgentResponse)(nil),                          // 201: determined.api.v1.EnableAgentResponse
	(*DisableAgentResponse)(nil),                         // 202: determined.api.v1.DisableAgentResponse
	(*EnableSlotResponse)(nil),                           // 203: determined.api.v1.EnableSlotResponse
	(*DisableSlotResponse)(nil),                          // 204: determined.api.v1.DisableSlotResponse
	(*CreateExperimentResponse)(nil),                     // 205: determined.api.v1.CreateExperimentResponse
	(*GetExperimentResponse)(nil),                        // 206: determined.api.v1.GetExperimentResponse
	(*GetExperimentsResponse)(nil),                       // 207: determined.api.v1.GetExperimentsResponse
	(*GetModelDefResponse)(nil),                          // 208: determined.api.v1.GetModelDefResponse
	(*GetModelDefTreeResponse)(nil),                      // 209: determined.api.v1.GetModelDefTreeResponse
	(*GetModelDefFileResponse)(nil),                      // 210: determined.api.v1.GetModelDefFileResponse
	(*GetExperimentLabelsResponse)(nil),                  // 211: determined.api.v1.GetExperimentLabelsResponse
	(*GetExperimentValidationHistoryResponse)(nil),       // 212: determined.api.v1.GetExperimentValidationHistoryResponse
	(*ActivateExperimentResponse)(nil),                   // 213: determined.api.v1.ActivateExperimentResponse
	(*PauseExperimentResponse)(nil),                      // 214: determined.api.v1.PauseExperimentResponse
	(*CancelExperimentResponse)(nil),                     // 215: determined.api.v1.CancelExperimentResponse
	(*KillExperimentResponse)(nil),                       // 216: determined.api.v1.KillExperimentResponse
	(*ArchiveExperimentResponse)(nil),                    // 217: determined.api.v1.ArchiveExperimentResponse
	(*UnarchiveExperimentResponse)(nil),                  // 218: determined.api.v1.UnarchiveExperimentResponse
	(*PatchExperimentResponse)(nil),                      // 219: determined.api.v1.PatchExperimentResponse
	(*DeleteExperimentResponse)(nil),                     // 220: determined.api.v1.DeleteExperimentResponse
	(*GetBestSearcherValidationMetricResponse)(nil),      // 221: determined.api.v1.GetBestSearcherValidationMetricResponse
	(*GetExperimentCheckpointsResponse)(nil),             // 222: determined.api.v1.GetExperimentCheckpointsResponse
	(*PreviewHPSearchResponse)(nil),                      // 223: determined.api.v1.PreviewHPSearchResponse
	(*GetExperimentTrialsResponse)(nil),                  // 224: determined.api.v1.GetExperimentTrialsResponse
	(*CompareTrialsResponse)(nil),                        // 225: determined.api.v1.CompareTrialsResponse
	(*QueryTrialsResponse)(nil),                          // 226: determined.api.v1.QueryTrialsResponse
	(*UpdateTrialTagsResponse)(nil),                      // 227: determined.api.v1.UpdateTrialTagsResponse
	(*GetTrialsCollectionsResponse)(nil),                 // 228: determined.api.v1.GetTrialsCollectionsResponse
	(*CreateTrialsCollectionResponse)(nil),               // 229: determined.api.v1.CreateTrialsCollectionResponse
	(*PatchTrialsCollectionResponse)(nil),                // 230: determined.api.v1.PatchTrialsCollectionResponse
	(*DeleteTrialsCollectionResponse)(nil),               // 231: determined.api.v1.DeleteTrialsCollectionResponse
	(*GetTrialResponse)(nil),                             // 232: determined.api.v1.GetTrialResponse
	(*GetTrialWorkloadsResponse)(nil),                    // 233: determined.api.v1.GetTrialWorkloadsResponse
	(*TrialLogsResponse)(nil),                            // 234: determined.api.v1.TrialLogsResponse
	(*TrialLogsFieldsResponse)(nil),                      // 235: determined.api.v1.TrialLogsFieldsResponse
	(*SummarizeTrialResponse)(nil),                       // 236: determined.api.v1.SummarizeTrialResponse
	(*AllocationReadyResponse)(nil),                      // 237: determined.api.v1.AllocationReadyResponse
	(*AllocationWaitingResponse)(nil),                    // 238: determined.api.v1.AllocationWaitingResponse
	(*TaskLogsResponse)(nil),                             // 239: determined.api.v1.TaskLogsResponse
	(*TaskLogsFieldsResponse)(nil),                       // 240: determined.api.v1.TaskLogsFieldsResponse
	(*GetTrialProfilerMetricsResponse)(nil),              // 241: determined.api.v1.GetTrialProfilerMetricsResponse
	(*GetTrialProfilerAvailableSeriesResponse)(nil),      // 242: determined.api.v1.GetTrialProfilerAvailableSeriesResponse
	(*PostTrialProfilerMetricsBatchResponse)(nil),        // 243: determined.api.v1.PostTrialProfilerMetricsBatchResponse
	(*KillTrialResponse)(nil),                            // 244: determined.api.v1.KillTrialResponse
	(*GetTrialCheckpointsResponse)(nil),                  // 245: determined.api.v1.GetTrialCheckpointsResponse
	(*AllocationPreemptionSignalResponse)(nil),           // 246: determined.api.v1.AllocationPreemptionSignalResponse
	(*AllocationPendingPreemptionSignalResponse)(nil),    // 247: determined.api.v1.AllocationPendingPreemptionSignalResponse
	(*AckAllocationPreemptionSignalResponse)(nil),        // 248: determined.api.v1.AckAllocationPreemptionSignalResponse
	(*MarkAllocationResourcesDaemonResponse)(nil),        // 249: determined.api.v1.MarkAllocationResourcesDaemonResponse
	(*AllocationRendezvousInfoResponse)(nil),             // 250: determined.api.v1.AllocationRendezvousInfoResponse
	(*PostAllocationProxyAddressResponse)(nil),           // 251: determined.api.v1.PostAllocationProxyAddressResponse
	(*AllocationAllGatherResponse)(nil),                  // 252: determined.api.v1.AllocationAllGatherResponse
	(*NotifyContainerRunningResponse)(nil),               // 253: determined.api.v1.NotifyContainerRunningResponse
	(*GetCurrentTrialSearcherOperationResponse)(nil),     // 254: determined.api.v1.GetCurrentTrialSearcherOperationResponse
	(*CompleteTrialSearcherValidationResponse)(nil),      // 255: determined.api.v1.CompleteTrialSearcherValidationResponse
	(*ReportTrialSearcherEarlyExitResponse)(nil),         // 256: determined.api.v1.ReportTrialSearcherEarlyExitResponse
	(*ReportTrialProgressResponse)(nil),                  // 257: determined.api.v1.ReportTrialProgressResponse
	(*PostTrialRunnerMetadataResponse)(nil),              // 258: determined.api.v1.PostTrialRunnerMetadataResponse
	(*ReportTrialTrainingMetricsResponse)(nil),           // 259: determined.api.v1.ReportTrialTrainingMetricsResponse
	(*ReportTrialValidationMetricsResponse)(nil),         // 260: determined.api.v1.ReportTrialValidationMetricsResponse
	(*ReportCheckpointResponse)(nil),                     // 261: determined.api.v1.ReportCheckpointResponse
	(*GetJobsResponse)(nil),                              // 262: determined.api.v1.GetJobsResponse
	(*GetJobQueueStatsResponse)(nil),                     // 263: determined.api.v1.GetJobQueueStatsResponse
	(*UpdateJobQueueResponse)(nil),                       // 264: determined.api.v1.UpdateJobQueueResponse
	(*GetTemplatesResponse)(nil),                         // 265: determined.api.v1.GetTemplatesResponse
	(*GetTemplateResponse)(nil),                          // 266: determined.api.v1.GetTemplateResponse
	(*PutTemplateResponse)(nil),                          // 267: determined.api.v1.PutTemplateResponse
	(*DeleteTemplateResponse)(nil),                       // 268: determined.api.v1.DeleteTemplateResponse
	(*GetNotebooksResponse)(nil),                         // 269: determined.api.v1.GetNotebooksResponse
	(*GetNotebookResponse)(nil),                          // 270: determined.api.v1.GetNotebookResponse
	(*IdleNotebookResponse)(nil),                         // 271: determined.api.v1.IdleNotebookResponse
	(*KillNotebookResponse)(nil),                         // 272: determined.api.v1.KillNotebookResponse
	(*SetNotebookPriorityResponse)(nil),                  // 273: determined.api.v1.SetNotebookPriorityResponse
	(*LaunchNotebookResponse)(nil),                       // 274: determined.api.v1.LaunchNotebookResponse
	(*GetShellsResponse)(nil),                            // 275: determined.api.v1.GetShellsResponse
	(*GetShellResponse)(nil),                             // 276: determined.api.v1.GetShellResponse
	(*KillShellResponse)(nil),                            // 277: determined.api.v1.KillShellResponse
	(*SetShellPriorityResponse)(nil),                     // 278: determined.api.v1.SetShellPriorityResponse
	(*LaunchShellResponse)(nil),                          // 279: determined.api.v1.LaunchShellResponse
	(*GetCommandsResponse)(nil),                          // 280: determined.api.v1.GetCommandsResponse
	(*GetCommandResponse)(nil),                           // 281: determined.api.v1.GetCommandResponse
	(*KillCommandResponse)(nil),                          // 282: determined.api.v1.KillCommandResponse
	(*SetCommandPriorityResponse)(nil),                   // 283: determined.api.v1.SetCommandPriorityResponse
	(*LaunchCommandResponse)(nil),                        // 284: determined.api.v1.LaunchCommandResponse
	(*GetTensorboardsResponse)(nil),                      // 285: determined.api.v1.GetTensorboardsResponse
	(*GetTensorboardResponse)(nil),                       // 286: determined.api.v1.GetTensorboardResponse
	(*KillTensorboardResponse)(nil),                      // 287: determined.api.v1.KillTensorboardResponse
	(*SetTensorboardPriorityResponse)(nil),               // 288: determined.api.v1.SetTensorboardPriorityResponse
	(*LaunchTensorboardResponse)(nil),                    // 289: determined.api.v1.LaunchTensorboardResponse
	(*GetActiveTasksCountResponse)(nil),                  // 290: determined.api.v1.GetActiveTasksCountResponse
	(*GetTaskResponse)(nil),                              // 291: determined.api.v1.GetTaskResponse
	(*GetModelResponse)(nil),                             // 292: determined.api.v1.GetModelResponse
	(*PostModelResponse)(nil),                            // 293: determined.api.v1.PostModelResponse
	(*PatchModelResponse)(nil),                           // 294: determined.api.v1.PatchModelResponse
	(*ArchiveModelResponse)(nil),                         // 295: determined.api.v1.ArchiveModelResponse
	(*UnarchiveModelResponse)(nil),                       // 296: determined.api.v1.UnarchiveModelResponse
	(*MoveModelResponse)(nil),                            // 297: determined.api.v1.MoveModelResponse
	(*DeleteModelResponse)(nil),                          // 298: determined.api.v1.DeleteModelResponse
	(*GetModelsResponse)(nil),                            // 299: determined.api.v1.GetModelsResponse
	(*GetModelLabelsResponse)(nil),                       // 300: determined.api.v1.GetModelLabelsResponse
	(*GetModelVersionResponse)(nil),                      // 301: determined.api.v1.GetModelVersionResponse
	(*GetModelVersionsResponse)(nil),                     // 302: determined.api.v1.GetModelVersionsResponse
	(*PostModelVersionResponse)(nil),                     // 303: determined.api.v1.PostModelVersionResponse
	(*PatchModelVersionResponse)(nil),                    // 304: determined.api.v1.PatchModelVersionResponse
	(*DeleteModelVersionResponse)(nil),                   // 305: determined.api.v1.DeleteModelVersionResponse
	(*GetCheckpointResponse)(nil),                        // 306: determined.api.v1.GetCheckpointResponse
	(*PostCheckpointMetadataResponse)(nil),               // 307: determined.api.v1.PostCheckpointMetadataResponse
	(*DeleteCheckpointsResponse)(nil),                    // 308: determined.api.v1.DeleteCheckpointsResponse
	(*GetSearcherEventsResponse)(nil),                    // 309: determined.api.v1.GetSearcherEventsResponse
	(*PostSearcherOperationsResponse)(nil),               // 310: determined.api.v1.PostSearcherOperationsResponse
	(*MetricNamesResponse)(nil),                          // 311: determined.api.v1.MetricNamesResponse
	(*MetricBatchesResponse)(nil),                        // 312: determined.api.v1.MetricBatchesResponse
	(*TrialsSnapshotResponse)(nil),                       // 313: determined.api.v1.TrialsSnapshotResponse
	(*TrialsSampleResponse)(nil),                         // 314: determined.api.v1.TrialsSampleResponse
	(*GetResourcePoolsResponse)(nil),                     // 315: determined.api.v1.GetResourcePoolsResponse
	(*ComputeHPImportanceResponse)(nil),                  // 316: determined.api.v1.ComputeHPImportanceResponse
	(*GetHPImportanceResponse)(nil),                      // 317: determined.api.v1.GetHPImportanceResponse
	(*ResourceAllocationRawResponse)(nil),                // 318: determined.api.v1.ResourceAllocationRawResponse
	(*ResourceAllocationAggregatedResponse)(nil),         // 319: determined.api.v1.ResourceAllocationAggregatedResponse
	(*GetWorkspaceResponse)(nil),                         // 320: determined.api.v1.GetWorkspaceResponse
	(*GetWorkspaceProjectsResponse)(nil),                 // 321: determined.api.v1.GetWorkspaceProjectsResponse
	(*GetWorkspacesResponse)(nil),                        // 322: determined.api.v1.GetWorkspacesResponse
	(*PostWorkspaceResponse)(nil),                        // 323: determined.api.v1.PostWorkspaceResponse
	(*PatchWorkspaceResponse)(nil),                       // 324: determined.api.v1.PatchWorkspaceResponse
	(*DeleteWorkspaceResponse)(nil),                      // 325: determined.api.v1.DeleteWorkspaceResponse
	(*ArchiveWorkspaceResponse)(nil),                     // 326: determined.api.v1.ArchiveWorkspaceResponse
	(*UnarchiveWorkspaceResponse)(nil),                   // 327: determined.api.v1.UnarchiveWorkspaceResponse
	(*PinWorkspaceResponse)(nil),                         // 328: determined.api.v1.PinWorkspaceResponse
	(*UnpinWorkspaceResponse)(nil),                       // 329: determined.api.v1.UnpinWorkspaceResponse
	(*GetProjectResponse)(nil),                           // 330: determined.api.v1.GetProjectResponse
	(*PostProjectResponse)(nil),                          // 331: determined.api.v1.PostProjectResponse
	(*AddProjectNoteResponse)(nil),                       // 332: determined.api.v1.AddProjectNoteResponse
	(*PutProjectNotesResponse)(nil),                      // 333: determined.api.v1.PutProjectNotesResponse
	(*PatchProjectResponse)(nil),                         // 334: determined.api.v1.PatchProjectResponse
	(*DeleteProjectResponse)(nil),                        // 335: determined.api.v1.DeleteProjectResponse
	(*ArchiveProjectResponse)(nil),                       // 336: determined.api.v1.ArchiveProjectResponse
	(*UnarchiveProjectResponse)(nil),                     // 337: determined.api.v1.UnarchiveProjectResponse
	(*MoveProjectResponse)(nil),                          // 338: determined.api.v1.MoveProjectResponse
	(*MoveExperimentResponse)(nil),                       // 339: determined.api.v1.MoveExperimentResponse
	(*GetWebhooksResponse)(nil),                          // 340: determined.api.v1.GetWebhooksResponse
	(*PostWebhookResponse)(nil),                          // 341: determined.api.v1.PostWebhookResponse
	(*DeleteWebhookResponse)(nil),                        // 342: determined.api.v1.DeleteWebhookResponse
	(*TestWebhookResponse)(nil),                          // 343: determined.api.v1.TestWebhookResponse
	(*GetGroupResponse)(nil),                             // 344: determined.api.v1.GetGroupResponse
	(*GetGroupsResponse)(nil),                            // 345: determined.api.v1.GetGroupsResponse
	(*CreateGroupResponse)(nil),                          // 346: determined.api.v1.CreateGroupResponse
	(*UpdateGroupResponse)(nil),                          // 347: determined.api.v1.UpdateGroupResponse
	(*DeleteGroupResponse)(nil),                          // 348: determined.api.v1.DeleteGroupResponse
	(*GetPermissionsSummaryResponse)(nil),                // 349: determined.api.v1.GetPermissionsSummaryResponse
	(*GetGroupsAndUsersAssignedToWorkspaceResponse)(nil), // 350: determined.api.v1.GetGroupsAndUsersAssignedToWorkspaceResponse
	(*GetRolesByIDResponse)(nil),                         // 351: determined.api.v1.GetRolesByIDResponse
	(*GetRolesAssignedToUserResponse)(nil),               // 352: determined.api.v1.GetRolesAssignedToUserResponse
	(*GetRolesAssignedToGroupResponse)(nil),              // 353: determined.api.v1.GetRolesAssignedToGroupResponse
	(*SearchRolesAssignableToScopeResponse)(nil),         // 354: determined.api.v1.SearchRolesAssignableToScopeResponse
	(*ListRolesResponse)(nil),                            // 355: determined.api.v1.ListRolesResponse
	(*AssignRolesResponse)(nil),                          // 356: determined.api.v1.AssignRolesResponse
	(*RemoveAssignmentsResponse)(nil),                    // 357: determined.api.v1.RemoveAssignmentsResponse
	(*PostUserActivityResponse)(nil),                     // 358: determined.api.v1.PostUserActivityResponse
	(*GetProjectsByUserActivityResponse)(nil),            // 359: determined.api.v1.GetProjectsByUserActivityResponse
}
var file_determined_api_v1_api_proto_depIdxs = []int32{
	0,   // 0: determined.api.v1.Determined.Login:input_type -> determined.api.v1.LoginRequest
	1,   // 1: determined.api.v1.Determined.CurrentUser:input_type -> determined.api.v1.CurrentUserRequest
	2,   // 2: determined.api.v1.Determined.Logout:input_type -> determined.api.v1.LogoutRequest
	3,   // 3: determined.api.v1.Determined.GetUsers:input_type -> determined.api.v1.GetUsersRequest
	4,   // 4: determined.api.v1.Determined.GetUserSetting:input_type -> determined.api.v1.GetUserSettingRequest
	5,   // 5: determined.api.v1.Determined.ResetUserSetting:input_type -> determined.api.v1.ResetUserSettingRequest
	6,   // 6: determined.api.v1.Determined.PostUserSetting:input_type -> determined.api.v1.PostUserSettingRequest
	7,   // 7: determined.api.v1.Determined.GetUser:input_type -> determined.api.v1.GetUserRequest
	8,   // 8: determined.api.v1.Determined.GetUserByUsername:input_type -> determined.api.v1.GetUserByUsernameRequest
	9,   // 9: determined.api.v1.Determined.GetMe:input_type -> determined.api.v1.GetMeRequest
	10,  // 10: determined.api.v1.Determined.PostUser:input_type -> determined.api.v1.PostUserRequest
	11,  // 11: determined.api.v1.Determined.SetUserPassword:input_type -> determined.api.v1.SetUserPasswordRequest
	12,  // 12: determined.api.v1.Determined.PatchUser:input_type -> determined.api.v1.PatchUserRequest
	13,  // 13: determined.api.v1.Determined.GetTelemetry:input_type -> determined.api.v1.GetTelemetryRequest
	14,  // 14: determined.api.v1.Determined.GetMaster:input_type -> determined.api.v1.GetMasterRequest
	15,  // 15: determined.api.v1.Determined.GetMasterConfig:input_type -> determined.api.v1.GetMasterConfigRequest
	16,  // 16: determined.api.v1.Determined.MasterLogs:input_type -> determined.api.v1.MasterLogsRequest
	17,  // 17: determined.api.v1.Determined.GetAgents:input_type -> determined.api.v1.GetAgentsRequest
	18,  // 18: determined.api.v1.Determined.GetAgent:input_type -> determined.api.v1.GetAgentRequest
	19,  // 19: determined.api.v1.Determined.GetSlots:input_type -> determined.api.v1.GetSlotsRequest
	20,  // 20: determined.api.v1.Determined.GetSlot:input_type -> determined.api.v1.GetSlotRequest
	21,  // 21: determined.api.v1.Determined.EnableAgent:input_type -> determined.api.v1.EnableAgentRequest
	22,  // 22: determined.api.v1.Determined.DisableAgent:input_type -> determined.api.v1.DisableAgentRequest
	23,  // 23: determined.api.v1.Determined.EnableSlot:input_type -> determined.api.v1.EnableSlotRequest
	24,  // 24: determined.api.v1.Determined.DisableSlot:input_type -> determined.api.v1.DisableSlotRequest
	25,  // 25: determined.api.v1.Determined.CreateExperiment:input_type -> determined.api.v1.CreateExperimentRequest
	26,  // 26: determined.api.v1.Determined.GetExperiment:input_type -> determined.api.v1.GetExperimentRequest
	27,  // 27: determined.api.v1.Determined.GetExperiments:input_type -> determined.api.v1.GetExperimentsRequest
	28,  // 28: determined.api.v1.Determined.GetModelDef:input_type -> determined.api.v1.GetModelDefRequest
	29,  // 29: determined.api.v1.Determined.GetModelDefTree:input_type -> determined.api.v1.GetModelDefTreeRequest
	30,  // 30: determined.api.v1.Determined.GetModelDefFile:input_type -> determined.api.v1.GetModelDefFileRequest
	31,  // 31: determined.api.v1.Determined.GetExperimentLabels:input_type -> determined.api.v1.GetExperimentLabelsRequest
	32,  // 32: determined.api.v1.Determined.GetExperimentValidationHistory:input_type -> determined.api.v1.GetExperimentValidationHistoryRequest
	33,  // 33: determined.api.v1.Determined.ActivateExperiment:input_type -> determined.api.v1.ActivateExperimentRequest
	34,  // 34: determined.api.v1.Determined.PauseExperiment:input_type -> determined.api.v1.PauseExperimentRequest
	35,  // 35: determined.api.v1.Determined.CancelExperiment:input_type -> determined.api.v1.CancelExperimentRequest
	36,  // 36: determined.api.v1.Determined.KillExperiment:input_type -> determined.api.v1.KillExperimentRequest
	37,  // 37: determined.api.v1.Determined.ArchiveExperiment:input_type -> determined.api.v1.ArchiveExperimentRequest
	38,  // 38: determined.api.v1.Determined.UnarchiveExperiment:input_type -> determined.api.v1.UnarchiveExperimentRequest
	39,  // 39: determined.api.v1.Determined.PatchExperiment:input_type -> determined.api.v1.PatchExperimentRequest
	40,  // 40: determined.api.v1.Determined.DeleteExperiment:input_type -> determined.api.v1.DeleteExperimentRequest
	41,  // 41: determined.api.v1.Determined.GetBestSearcherValidationMetric:input_type -> determined.api.v1.GetBestSearcherValidationMetricRequest
	42,  // 42: determined.api.v1.Determined.GetExperimentCheckpoints:input_type -> determined.api.v1.GetExperimentCheckpointsRequest
	43,  // 43: determined.api.v1.Determined.PreviewHPSearch:input_type -> determined.api.v1.PreviewHPSearchRequest
	44,  // 44: determined.api.v1.Determined.GetExperimentTrials:input_type -> determined.api.v1.GetExperimentTrialsRequest
	45,  // 45: determined.api.v1.Determined.CompareTrials:input_type -> determined.api.v1.CompareTrialsRequest
	46,  // 46: determined.api.v1.Determined.QueryTrials:input_type -> determined.api.v1.QueryTrialsRequest
	47,  // 47: determined.api.v1.Determined.UpdateTrialTags:input_type -> determined.api.v1.UpdateTrialTagsRequest
	48,  // 48: determined.api.v1.Determined.GetTrialsCollections:input_type -> determined.api.v1.GetTrialsCollectionsRequest
	49,  // 49: determined.api.v1.Determined.CreateTrialsCollection:input_type -> determined.api.v1.CreateTrialsCollectionRequest
	50,  // 50: determined.api.v1.Determined.PatchTrialsCollection:input_type -> determined.api.v1.PatchTrialsCollectionRequest
	51,  // 51: determined.api.v1.Determined.DeleteTrialsCollection:input_type -> determined.api.v1.DeleteTrialsCollectionRequest
	52,  // 52: determined.api.v1.Determined.GetTrial:input_type -> determined.api.v1.GetTrialRequest
	53,  // 53: determined.api.v1.Determined.GetTrialWorkloads:input_type -> determined.api.v1.GetTrialWorkloadsRequest
	54,  // 54: determined.api.v1.Determined.TrialLogs:input_type -> determined.api.v1.TrialLogsRequest
	55,  // 55: determined.api.v1.Determined.TrialLogsFields:input_type -> determined.api.v1.TrialLogsFieldsRequest
	56,  // 56: determined.api.v1.Determined.SummarizeTrial:input_type -> determined.api.v1.SummarizeTrialRequest
	57,  // 57: determined.api.v1.Determined.AllocationReady:input_type -> determined.api.v1.AllocationReadyRequest
	58,  // 58: determined.api.v1.Determined.AllocationWaiting:input_type -> determined.api.v1.AllocationWaitingRequest
	59,  // 59: determined.api.v1.Determined.TaskLogs:input_type -> determined.api.v1.TaskLogsRequest
	60,  // 60: determined.api.v1.Determined.TaskLogsFields:input_type -> determined.api.v1.TaskLogsFieldsRequest
	61,  // 61: determined.api.v1.Determined.GetTrialProfilerMetrics:input_type -> determined.api.v1.GetTrialProfilerMetricsRequest
	62,  // 62: determined.api.v1.Determined.GetTrialProfilerAvailableSeries:input_type -> determined.api.v1.GetTrialProfilerAvailableSeriesRequest
	63,  // 63: determined.api.v1.Determined.PostTrialProfilerMetricsBatch:input_type -> determined.api.v1.PostTrialProfilerMetricsBatchRequest
	64,  // 64: determined.api.v1.Determined.KillTrial:input_type -> determined.api.v1.KillTrialRequest
	65,  // 65: determined.api.v1.Determined.GetTrialCheckpoints:input_type -> determined.api.v1.GetTrialCheckpointsRequest
	66,  // 66: determined.api.v1.Determined.AllocationPreemptionSignal:input_type -> determined.api.v1.AllocationPreemptionSignalRequest
	67,  // 67: determined.api.v1.Determined.AllocationPendingPreemptionSignal:input_type -> determined.api.v1.AllocationPendingPreemptionSignalRequest
	68,  // 68: determined.api.v1.Determined.AckAllocationPreemptionSignal:input_type -> determined.api.v1.AckAllocationPreemptionSignalRequest
	69,  // 69: determined.api.v1.Determined.MarkAllocationResourcesDaemon:input_type -> determined.api.v1.MarkAllocationResourcesDaemonRequest
	70,  // 70: determined.api.v1.Determined.AllocationRendezvousInfo:input_type -> determined.api.v1.AllocationRendezvousInfoRequest
	71,  // 71: determined.api.v1.Determined.PostAllocationProxyAddress:input_type -> determined.api.v1.PostAllocationProxyAddressRequest
	72,  // 72: determined.api.v1.Determined.AllocationAllGather:input_type -> determined.api.v1.AllocationAllGatherRequest
	73,  // 73: determined.api.v1.Determined.NotifyContainerRunning:input_type -> determined.api.v1.NotifyContainerRunningRequest
	74,  // 74: determined.api.v1.Determined.GetCurrentTrialSearcherOperation:input_type -> determined.api.v1.GetCurrentTrialSearcherOperationRequest
	75,  // 75: determined.api.v1.Determined.CompleteTrialSearcherValidation:input_type -> determined.api.v1.CompleteTrialSearcherValidationRequest
	76,  // 76: determined.api.v1.Determined.ReportTrialSearcherEarlyExit:input_type -> determined.api.v1.ReportTrialSearcherEarlyExitRequest
	77,  // 77: determined.api.v1.Determined.ReportTrialProgress:input_type -> determined.api.v1.ReportTrialProgressRequest
	78,  // 78: determined.api.v1.Determined.PostTrialRunnerMetadata:input_type -> determined.api.v1.PostTrialRunnerMetadataRequest
	79,  // 79: determined.api.v1.Determined.ReportTrialTrainingMetrics:input_type -> determined.api.v1.ReportTrialTrainingMetricsRequest
	80,  // 80: determined.api.v1.Determined.ReportTrialValidationMetrics:input_type -> determined.api.v1.ReportTrialValidationMetricsRequest
	81,  // 81: determined.api.v1.Determined.ReportCheckpoint:input_type -> determined.api.v1.ReportCheckpointRequest
	82,  // 82: determined.api.v1.Determined.GetJobs:input_type -> determined.api.v1.GetJobsRequest
	83,  // 83: determined.api.v1.Determined.GetJobQueueStats:input_type -> determined.api.v1.GetJobQueueStatsRequest
	84,  // 84: determined.api.v1.Determined.UpdateJobQueue:input_type -> determined.api.v1.UpdateJobQueueRequest
	85,  // 85: determined.api.v1.Determined.GetTemplates:input_type -> determined.api.v1.GetTemplatesRequest
	86,  // 86: determined.api.v1.Determined.GetTemplate:input_type -> determined.api.v1.GetTemplateRequest
	87,  // 87: determined.api.v1.Determined.PutTemplate:input_type -> determined.api.v1.PutTemplateRequest
	88,  // 88: determined.api.v1.Determined.DeleteTemplate:input_type -> determined.api.v1.DeleteTemplateRequest
	89,  // 89: determined.api.v1.Determined.GetNotebooks:input_type -> determined.api.v1.GetNotebooksRequest
	90,  // 90: determined.api.v1.Determined.GetNotebook:input_type -> determined.api.v1.GetNotebookRequest
	91,  // 91: determined.api.v1.Determined.IdleNotebook:input_type -> determined.api.v1.IdleNotebookRequest
	92,  // 92: determined.api.v1.Determined.KillNotebook:input_type -> determined.api.v1.KillNotebookRequest
	93,  // 93: determined.api.v1.Determined.SetNotebookPriority:input_type -> determined.api.v1.SetNotebookPriorityRequest
	94,  // 94: determined.api.v1.Determined.LaunchNotebook:input_type -> determined.api.v1.LaunchNotebookRequest
	95,  // 95: determined.api.v1.Determined.GetShells:input_type -> determined.api.v1.GetShellsRequest
	96,  // 96: determined.api.v1.Determined.GetShell:input_type -> determined.api.v1.GetShellRequest
	97,  // 97: determined.api.v1.Determined.KillShell:input_type -> determined.api.v1.KillShellRequest
	98,  // 98: determined.api.v1.Determined.SetShellPriority:input_type -> determined.api.v1.SetShellPriorityRequest
	99,  // 99: determined.api.v1.Determined.LaunchShell:input_type -> determined.api.v1.LaunchShellRequest
	100, // 100: determined.api.v1.Determined.GetCommands:input_type -> determined.api.v1.GetCommandsRequest
	101, // 101: determined.api.v1.Determined.GetCommand:input_type -> determined.api.v1.GetCommandRequest
	102, // 102: determined.api.v1.Determined.KillCommand:input_type -> determined.api.v1.KillCommandRequest
	103, // 103: determined.api.v1.Determined.SetCommandPriority:input_type -> determined.api.v1.SetCommandPriorityRequest
	104, // 104: determined.api.v1.Determined.LaunchCommand:input_type -> determined.api.v1.LaunchCommandRequest
	105, // 105: determined.api.v1.Determined.GetTensorboards:input_type -> determined.api.v1.GetTensorboardsRequest
	106, // 106: determined.api.v1.Determined.GetTensorboard:input_type -> determined.api.v1.GetTensorboardRequest
	107, // 107: determined.api.v1.Determined.KillTensorboard:input_type -> determined.api.v1.KillTensorboardRequest
	108, // 108: determined.api.v1.Determined.SetTensorboardPriority:input_type -> determined.api.v1.SetTensorboardPriorityRequest
	109, // 109: determined.api.v1.Determined.LaunchTensorboard:input_type -> determined.api.v1.LaunchTensorboardRequest
	110, // 110: determined.api.v1.Determined.GetActiveTasksCount:input_type -> determined.api.v1.GetActiveTasksCountRequest
	111, // 111: determined.api.v1.Determined.GetTask:input_type -> determined.api.v1.GetTaskRequest
	112, // 112: determined.api.v1.Determined.GetModel:input_type -> determined.api.v1.GetModelRequest
	113, // 113: determined.api.v1.Determined.PostModel:input_type -> determined.api.v1.PostModelRequest
	114, // 114: determined.api.v1.Determined.PatchModel:input_type -> determined.api.v1.PatchModelRequest
	115, // 115: determined.api.v1.Determined.ArchiveModel:input_type -> determined.api.v1.ArchiveModelRequest
	116, // 116: determined.api.v1.Determined.UnarchiveModel:input_type -> determined.api.v1.UnarchiveModelRequest
	117, // 117: determined.api.v1.Determined.MoveModel:input_type -> determined.api.v1.MoveModelRequest
	118, // 118: determined.api.v1.Determined.DeleteModel:input_type -> determined.api.v1.DeleteModelRequest
	119, // 119: determined.api.v1.Determined.GetModels:input_type -> determined.api.v1.GetModelsRequest
	120, // 120: determined.api.v1.Determined.GetModelLabels:input_type -> determined.api.v1.GetModelLabelsRequest
	121, // 121: determined.api.v1.Determined.GetModelVersion:input_type -> determined.api.v1.GetModelVersionRequest
	122, // 122: determined.api.v1.Determined.GetModelVersions:input_type -> determined.api.v1.GetModelVersionsRequest
	123, // 123: determined.api.v1.Determined.PostModelVersion:input_type -> determined.api.v1.PostModelVersionRequest
	124, // 124: determined.api.v1.Determined.PatchModelVersion:input_type -> determined.api.v1.PatchModelVersionRequest
	125, // 125: determined.api.v1.Determined.DeleteModelVersion:input_type -> determined.api.v1.DeleteModelVersionRequest
	126, // 126: determined.api.v1.Determined.GetCheckpoint:input_type -> determined.api.v1.GetCheckpointRequest
	127, // 127: determined.api.v1.Determined.PostCheckpointMetadata:input_type -> determined.api.v1.PostCheckpointMetadataRequest
	128, // 128: determined.api.v1.Determined.DeleteCheckpoints:input_type -> determined.api.v1.DeleteCheckpointsRequest
	129, // 129: determined.api.v1.Determined.GetSearcherEvents:input_type -> determined.api.v1.GetSearcherEventsRequest
	130, // 130: determined.api.v1.Determined.PostSearcherOperations:input_type -> determined.api.v1.PostSearcherOperationsRequest
	131, // 131: determined.api.v1.Determined.MetricNames:input_type -> determined.api.v1.MetricNamesRequest
	132, // 132: determined.api.v1.Determined.MetricBatches:input_type -> determined.api.v1.MetricBatchesRequest
	133, // 133: determined.api.v1.Determined.TrialsSnapshot:input_type -> determined.api.v1.TrialsSnapshotRequest
	134, // 134: determined.api.v1.Determined.TrialsSample:input_type -> determined.api.v1.TrialsSampleRequest
	135, // 135: determined.api.v1.Determined.GetResourcePools:input_type -> determined.api.v1.GetResourcePoolsRequest
	136, // 136: determined.api.v1.Determined.ComputeHPImportance:input_type -> determined.api.v1.ComputeHPImportanceRequest
	137, // 137: determined.api.v1.Determined.GetHPImportance:input_type -> determined.api.v1.GetHPImportanceRequest
	138, // 138: determined.api.v1.Determined.ResourceAllocationRaw:input_type -> determined.api.v1.ResourceAllocationRawRequest
	139, // 139: determined.api.v1.Determined.ResourceAllocationAggregated:input_type -> determined.api.v1.ResourceAllocationAggregatedRequest
	140, // 140: determined.api.v1.Determined.GetWorkspace:input_type -> determined.api.v1.GetWorkspaceRequest
	141, // 141: determined.api.v1.Determined.GetWorkspaceProjects:input_type -> determined.api.v1.GetWorkspaceProjectsRequest
	142, // 142: determined.api.v1.Determined.GetWorkspaces:input_type -> determined.api.v1.GetWorkspacesRequest
	143, // 143: determined.api.v1.Determined.PostWorkspace:input_type -> determined.api.v1.PostWorkspaceRequest
	144, // 144: determined.api.v1.Determined.PatchWorkspace:input_type -> determined.api.v1.PatchWorkspaceRequest
	145, // 145: determined.api.v1.Determined.DeleteWorkspace:input_type -> determined.api.v1.DeleteWorkspaceRequest
	146, // 146: determined.api.v1.Determined.ArchiveWorkspace:input_type -> determined.api.v1.ArchiveWorkspaceRequest
	147, // 147: determined.api.v1.Determined.UnarchiveWorkspace:input_type -> determined.api.v1.UnarchiveWorkspaceRequest
	148, // 148: determined.api.v1.Determined.PinWorkspace:input_type -> determined.api.v1.PinWorkspaceRequest
	149, // 149: determined.api.v1.Determined.UnpinWorkspace:input_type -> determined.api.v1.UnpinWorkspaceRequest
	150, // 150: determined.api.v1.Determined.GetProject:input_type -> determined.api.v1.GetProjectRequest
	151, // 151: determined.api.v1.Determined.PostProject:input_type -> determined.api.v1.PostProjectRequest
	152, // 152: determined.api.v1.Determined.AddProjectNote:input_type -> determined.api.v1.AddProjectNoteRequest
	153, // 153: determined.api.v1.Determined.PutProjectNotes:input_type -> determined.api.v1.PutProjectNotesRequest
	154, // 154: determined.api.v1.Determined.PatchProject:input_type -> determined.api.v1.PatchProjectRequest
	155, // 155: determined.api.v1.Determined.DeleteProject:input_type -> determined.api.v1.DeleteProjectRequest
	156, // 156: determined.api.v1.Determined.ArchiveProject:input_type -> determined.api.v1.ArchiveProjectRequest
	157, // 157: determined.api.v1.Determined.UnarchiveProject:input_type -> determined.api.v1.UnarchiveProjectRequest
	158, // 158: determined.api.v1.Determined.MoveProject:input_type -> determined.api.v1.MoveProjectRequest
	159, // 159: determined.api.v1.Determined.MoveExperiment:input_type -> determined.api.v1.MoveExperimentRequest
	160, // 160: determined.api.v1.Determined.GetWebhooks:input_type -> determined.api.v1.GetWebhooksRequest
	161, // 161: determined.api.v1.Determined.PostWebhook:input_type -> determined.api.v1.PostWebhookRequest
	162, // 162: determined.api.v1.Determined.DeleteWebhook:input_type -> determined.api.v1.DeleteWebhookRequest
	163, // 163: determined.api.v1.Determined.TestWebhook:input_type -> determined.api.v1.TestWebhookRequest
	164, // 164: determined.api.v1.Determined.GetGroup:input_type -> determined.api.v1.GetGroupRequest
	165, // 165: determined.api.v1.Determined.GetGroups:input_type -> determined.api.v1.GetGroupsRequest
	166, // 166: determined.api.v1.Determined.CreateGroup:input_type -> determined.api.v1.CreateGroupRequest
	167, // 167: determined.api.v1.Determined.UpdateGroup:input_type -> determined.api.v1.UpdateGroupRequest
	168, // 168: determined.api.v1.Determined.DeleteGroup:input_type -> determined.api.v1.DeleteGroupRequest
	169, // 169: determined.api.v1.Determined.GetPermissionsSummary:input_type -> determined.api.v1.GetPermissionsSummaryRequest
	170, // 170: determined.api.v1.Determined.GetGroupsAndUsersAssignedToWorkspace:input_type -> determined.api.v1.GetGroupsAndUsersAssignedToWorkspaceRequest
	171, // 171: determined.api.v1.Determined.GetRolesByID:input_type -> determined.api.v1.GetRolesByIDRequest
	172, // 172: determined.api.v1.Determined.GetRolesAssignedToUser:input_type -> determined.api.v1.GetRolesAssignedToUserRequest
	173, // 173: determined.api.v1.Determined.GetRolesAssignedToGroup:input_type -> determined.api.v1.GetRolesAssignedToGroupRequest
	174, // 174: determined.api.v1.Determined.SearchRolesAssignableToScope:input_type -> determined.api.v1.SearchRolesAssignableToScopeRequest
	175, // 175: determined.api.v1.Determined.ListRoles:input_type -> determined.api.v1.ListRolesRequest
	176, // 176: determined.api.v1.Determined.AssignRoles:input_type -> determined.api.v1.AssignRolesRequest
	177, // 177: determined.api.v1.Determined.RemoveAssignments:input_type -> determined.api.v1.RemoveAssignmentsRequest
	178, // 178: determined.api.v1.Determined.PostUserActivity:input_type -> determined.api.v1.PostUserActivityRequest
	179, // 179: determined.api.v1.Determined.GetProjectsByUserActivity:input_type -> determined.api.v1.GetProjectsByUserActivityRequest
	180, // 180: determined.api.v1.Determined.Login:output_type -> determined.api.v1.LoginResponse
	181, // 181: determined.api.v1.Determined.CurrentUser:output_type -> determined.api.v1.CurrentUserResponse
	182, // 182: determined.api.v1.Determined.Logout:output_type -> determined.api.v1.LogoutResponse
	183, // 183: determined.api.v1.Determined.GetUsers:output_type -> determined.api.v1.GetUsersResponse
	184, // 184: determined.api.v1.Determined.GetUserSetting:output_type -> determined.api.v1.GetUserSettingResponse
	185, // 185: determined.api.v1.Determined.ResetUserSetting:output_type -> determined.api.v1.ResetUserSettingResponse
	186, // 186: determined.api.v1.Determined.PostUserSetting:output_type -> determined.api.v1.PostUserSettingResponse
	187, // 187: determined.api.v1.Determined.GetUser:output_type -> determined.api.v1.GetUserResponse
	188, // 188: determined.api.v1.Determined.GetUserByUsername:output_type -> determined.api.v1.GetUserByUsernameResponse
	189, // 189: determined.api.v1.Determined.GetMe:output_type -> determined.api.v1.GetMeResponse
	190, // 190: determined.api.v1.Determined.PostUser:output_type -> determined.api.v1.PostUserResponse
	191, // 191: determined.api.v1.Determined.SetUserPassword:output_type -> determined.api.v1.SetUserPasswordResponse
	192, // 192: determined.api.v1.Determined.PatchUser:output_type -> determined.api.v1.PatchUserResponse
	193, // 193: determined.api.v1.Determined.GetTelemetry:output_type -> determined.api.v1.GetTelemetryResponse
	194, // 194: determined.api.v1.Determined.GetMaster:output_type -> determined.api.v1.GetMasterResponse
	195, // 195: determined.api.v1.Determined.GetMasterConfig:output_type -> determined.api.v1.GetMasterConfigResponse
	196, // 196: determined.api.v1.Determined.MasterLogs:output_type -> determined.api.v1.MasterLogsResponse
	197, // 197: determined.api.v1.Determined.GetAgents:output_type -> determined.api.v1.GetAgentsResponse
	198, // 198: determined.api.v1.Determined.GetAgent:output_type -> determined.api.v1.GetAgentResponse
	199, // 199: determined.api.v1.Determined.GetSlots:output_type -> determined.api.v1.GetSlotsResponse
	200, // 200: determined.api.v1.Determined.GetSlot:output_type -> determined.api.v1.GetSlotResponse
	201, // 201: determined.api.v1.Determined.EnableAgent:output_type -> determined.api.v1.EnableAgentResponse
	202, // 202: determined.api.v1.Determined.DisableAgent:output_type -> determined.api.v1.DisableAgentResponse
	203, // 203: determined.api.v1.Determined.EnableSlot:output_type -> determined.api.v1.EnableSlotResponse
	204, // 204: determined.api.v1.Determined.DisableSlot:output_type -> determined.api.v1.DisableSlotResponse
	205, // 205: determined.api.v1.Determined.CreateExperiment:output_type -> determined.api.v1.CreateExperimentResponse
	206, // 206: determined.api.v1.Determined.GetExperiment:output_type -> determined.api.v1.GetExperimentResponse
	207, // 207: determined.api.v1.Determined.GetExperiments:output_type -> determined.api.v1.GetExperimentsResponse
	208, // 208: determined.api.v1.Determined.GetModelDef:output_type -> determined.api.v1.GetModelDefResponse
	209, // 209: determined.api.v1.Determined.GetModelDefTree:output_type -> determined.api.v1.GetModelDefTreeResponse
	210, // 210: determined.api.v1.Determined.GetModelDefFile:output_type -> determined.api.v1.GetModelDefFileResponse
	211, // 211: determined.api.v1.Determined.GetExperimentLabels:output_type -> determined.api.v1.GetExperimentLabelsResponse
	212, // 212: determined.api.v1.Determined.GetExperimentValidationHistory:output_type -> determined.api.v1.GetExperimentValidationHistoryResponse
	213, // 213: determined.api.v1.Determined.ActivateExperiment:output_type -> determined.api.v1.ActivateExperimentResponse
	214, // 214: determined.api.v1.Determined.PauseExperiment:output_type -> determined.api.v1.PauseExperimentResponse
	215, // 215: determined.api.v1.Determined.CancelExperiment:output_type -> determined.api.v1.CancelExperimentResponse
	216, // 216: determined.api.v1.Determined.KillExperiment:output_type -> determined.api.v1.KillExperimentResponse
	217, // 217: determined.api.v1.Determined.ArchiveExperiment:output_type -> determined.api.v1.ArchiveExperimentResponse
	218, // 218: determined.api.v1.Determined.UnarchiveExperiment:output_type -> determined.api.v1.UnarchiveExperimentResponse
	219, // 219: determined.api.v1.Determined.PatchExperiment:output_type -> determined.api.v1.PatchExperimentResponse
	220, // 220: determined.api.v1.Determined.DeleteExperiment:output_type -> determined.api.v1.DeleteExperimentResponse
	221, // 221: determined.api.v1.Determined.GetBestSearcherValidationMetric:output_type -> determined.api.v1.GetBestSearcherValidationMetricResponse
	222, // 222: determined.api.v1.Determined.GetExperimentCheckpoints:output_type -> determined.api.v1.GetExperimentCheckpointsResponse
	223, // 223: determined.api.v1.Determined.PreviewHPSearch:output_type -> determined.api.v1.PreviewHPSearchResponse
	224, // 224: determined.api.v1.Determined.GetExperimentTrials:output_type -> determined.api.v1.GetExperimentTrialsResponse
	225, // 225: determined.api.v1.Determined.CompareTrials:output_type -> determined.api.v1.CompareTrialsResponse
	226, // 226: determined.api.v1.Determined.QueryTrials:output_type -> determined.api.v1.QueryTrialsResponse
	227, // 227: determined.api.v1.Determined.UpdateTrialTags:output_type -> determined.api.v1.UpdateTrialTagsResponse
	228, // 228: determined.api.v1.Determined.GetTrialsCollections:output_type -> determined.api.v1.GetTrialsCollectionsResponse
	229, // 229: determined.api.v1.Determined.CreateTrialsCollection:output_type -> determined.api.v1.CreateTrialsCollectionResponse
	230, // 230: determined.api.v1.Determined.PatchTrialsCollection:output_type -> determined.api.v1.PatchTrialsCollectionResponse
	231, // 231: determined.api.v1.Determined.DeleteTrialsCollection:output_type -> determined.api.v1.DeleteTrialsCollectionResponse
	232, // 232: determined.api.v1.Determined.GetTrial:output_type -> determined.api.v1.GetTrialResponse
	233, // 233: determined.api.v1.Determined.GetTrialWorkloads:output_type -> determined.api.v1.GetTrialWorkloadsResponse
	234, // 234: determined.api.v1.Determined.TrialLogs:output_type -> determined.api.v1.TrialLogsResponse
	235, // 235: determined.api.v1.Determined.TrialLogsFields:output_type -> determined.api.v1.TrialLogsFieldsResponse
	236, // 236: determined.api.v1.Determined.SummarizeTrial:output_type -> determined.api.v1.SummarizeTrialResponse
	237, // 237: determined.api.v1.Determined.AllocationReady:output_type -> determined.api.v1.AllocationReadyResponse
	238, // 238: determined.api.v1.Determined.AllocationWaiting:output_type -> determined.api.v1.AllocationWaitingResponse
	239, // 239: determined.api.v1.Determined.TaskLogs:output_type -> determined.api.v1.TaskLogsResponse
	240, // 240: determined.api.v1.Determined.TaskLogsFields:output_type -> determined.api.v1.TaskLogsFieldsResponse
	241, // 241: determined.api.v1.Determined.GetTrialProfilerMetrics:output_type -> determined.api.v1.GetTrialProfilerMetricsResponse
	242, // 242: determined.api.v1.Determined.GetTrialProfilerAvailableSeries:output_type -> determined.api.v1.GetTrialProfilerAvailableSeriesResponse
	243, // 243: determined.api.v1.Determined.PostTrialProfilerMetricsBatch:output_type -> determined.api.v1.PostTrialProfilerMetricsBatchResponse
	244, // 244: determined.api.v1.Determined.KillTrial:output_type -> determined.api.v1.KillTrialResponse
	245, // 245: determined.api.v1.Determined.GetTrialCheckpoints:output_type -> determined.api.v1.GetTrialCheckpointsResponse
	246, // 246: determined.api.v1.Determined.AllocationPreemptionSignal:output_type -> determined.api.v1.AllocationPreemptionSignalResponse
	247, // 247: determined.api.v1.Determined.AllocationPendingPreemptionSignal:output_type -> determined.api.v1.AllocationPendingPreemptionSignalResponse
	248, // 248: determined.api.v1.Determined.AckAllocationPreemptionSignal:output_type -> determined.api.v1.AckAllocationPreemptionSignalResponse
	249, // 249: determined.api.v1.Determined.MarkAllocationResourcesDaemon:output_type -> determined.api.v1.MarkAllocationResourcesDaemonResponse
	250, // 250: determined.api.v1.Determined.AllocationRendezvousInfo:output_type -> determined.api.v1.AllocationRendezvousInfoResponse
	251, // 251: determined.api.v1.Determined.PostAllocationProxyAddress:output_type -> determined.api.v1.PostAllocationProxyAddressResponse
	252, // 252: determined.api.v1.Determined.AllocationAllGather:output_type -> determined.api.v1.AllocationAllGatherResponse
	253, // 253: determined.api.v1.Determined.NotifyContainerRunning:output_type -> determined.api.v1.NotifyContainerRunningResponse
	254, // 254: determined.api.v1.Determined.GetCurrentTrialSearcherOperation:output_type -> determined.api.v1.GetCurrentTrialSearcherOperationResponse
	255, // 255: determined.api.v1.Determined.CompleteTrialSearcherValidation:output_type -> determined.api.v1.CompleteTrialSearcherValidationResponse
	256, // 256: determined.api.v1.Determined.ReportTrialSearcherEarlyExit:output_type -> determined.api.v1.ReportTrialSearcherEarlyExitResponse
	257, // 257: determined.api.v1.Determined.ReportTrialProgress:output_type -> determined.api.v1.ReportTrialProgressResponse
	258, // 258: determined.api.v1.Determined.PostTrialRunnerMetadata:output_type -> determined.api.v1.PostTrialRunnerMetadataResponse
	259, // 259: determined.api.v1.Determined.ReportTrialTrainingMetrics:output_type -> determined.api.v1.ReportTrialTrainingMetricsResponse
	260, // 260: determined.api.v1.Determined.ReportTrialValidationMetrics:output_type -> determined.api.v1.ReportTrialValidationMetricsResponse
	261, // 261: determined.api.v1.Determined.ReportCheckpoint:output_type -> determined.api.v1.ReportCheckpointResponse
	262, // 262: determined.api.v1.Determined.GetJobs:output_type -> determined.api.v1.GetJobsResponse
	263, // 263: determined.api.v1.Determined.GetJobQueueStats:output_type -> determined.api.v1.GetJobQueueStatsResponse
	264, // 264: determined.api.v1.Determined.UpdateJobQueue:output_type -> determined.api.v1.UpdateJobQueueResponse
	265, // 265: determined.api.v1.Determined.GetTemplates:output_type -> determined.api.v1.GetTemplatesResponse
	266, // 266: determined.api.v1.Determined.GetTemplate:output_type -> determined.api.v1.GetTemplateResponse
	267, // 267: determined.api.v1.Determined.PutTemplate:output_type -> determined.api.v1.PutTemplateResponse
	268, // 268: determined.api.v1.Determined.DeleteTemplate:output_type -> determined.api.v1.DeleteTemplateResponse
	269, // 269: determined.api.v1.Determined.GetNotebooks:output_type -> determined.api.v1.GetNotebooksResponse
	270, // 270: determined.api.v1.Determined.GetNotebook:output_type -> determined.api.v1.GetNotebookResponse
	271, // 271: determined.api.v1.Determined.IdleNotebook:output_type -> determined.api.v1.IdleNotebookResponse
	272, // 272: determined.api.v1.Determined.KillNotebook:output_type -> determined.api.v1.KillNotebookResponse
	273, // 273: determined.api.v1.Determined.SetNotebookPriority:output_type -> determined.api.v1.SetNotebookPriorityResponse
	274, // 274: determined.api.v1.Determined.LaunchNotebook:output_type -> determined.api.v1.LaunchNotebookResponse
	275, // 275: determined.api.v1.Determined.GetShells:output_type -> determined.api.v1.GetShellsResponse
	276, // 276: determined.api.v1.Determined.GetShell:output_type -> determined.api.v1.GetShellResponse
	277, // 277: determined.api.v1.Determined.KillShell:output_type -> determined.api.v1.KillShellResponse
	278, // 278: determined.api.v1.Determined.SetShellPriority:output_type -> determined.api.v1.SetShellPriorityResponse
	279, // 279: determined.api.v1.Determined.LaunchShell:output_type -> determined.api.v1.LaunchShellResponse
	280, // 280: determined.api.v1.Determined.GetCommands:output_type -> determined.api.v1.GetCommandsResponse
	281, // 281: determined.api.v1.Determined.GetCommand:output_type -> determined.api.v1.GetCommandResponse
	282, // 282: determined.api.v1.Determined.KillCommand:output_type -> determined.api.v1.KillCommandResponse
	283, // 283: determined.api.v1.Determined.SetCommandPriority:output_type -> determined.api.v1.SetCommandPriorityResponse
	284, // 284: determined.api.v1.Determined.LaunchCommand:output_type -> determined.api.v1.LaunchCommandResponse
	285, // 285: determined.api.v1.Determined.GetTensorboards:output_type -> determined.api.v1.GetTensorboardsResponse
	286, // 286: determined.api.v1.Determined.GetTensorboard:output_type -> determined.api.v1.GetTensorboardResponse
	287, // 287: determined.api.v1.Determined.KillTensorboard:output_type -> determined.api.v1.KillTensorboardResponse
	288, // 288: determined.api.v1.Determined.SetTensorboardPriority:output_type -> determined.api.v1.SetTensorboardPriorityResponse
	289, // 289: determined.api.v1.Determined.LaunchTensorboard:output_type -> determined.api.v1.LaunchTensorboardResponse
	290, // 290: determined.api.v1.Determined.GetActiveTasksCount:output_type -> determined.api.v1.GetActiveTasksCountResponse
	291, // 291: determined.api.v1.Determined.GetTask:output_type -> determined.api.v1.GetTaskResponse
	292, // 292: determined.api.v1.Determined.GetModel:output_type -> determined.api.v1.GetModelResponse
	293, // 293: determined.api.v1.Determined.PostModel:output_type -> determined.api.v1.PostModelResponse
	294, // 294: determined.api.v1.Determined.PatchModel:output_type -> determined.api.v1.PatchModelResponse
	295, // 295: determined.api.v1.Determined.ArchiveModel:output_type -> determined.api.v1.ArchiveModelResponse
	296, // 296: determined.api.v1.Determined.UnarchiveModel:output_type -> determined.api.v1.UnarchiveModelResponse
	297, // 297: determined.api.v1.Determined.MoveModel:output_type -> determined.api.v1.MoveModelResponse
	298, // 298: determined.api.v1.Determined.DeleteModel:output_type -> determined.api.v1.DeleteModelResponse
	299, // 299: determined.api.v1.Determined.GetModels:output_type -> determined.api.v1.GetModelsResponse
	300, // 300: determined.api.v1.Determined.GetModelLabels:output_type -> determined.api.v1.GetModelLabelsResponse
	301, // 301: determined.api.v1.Determined.GetModelVersion:output_type -> determined.api.v1.GetModelVersionResponse
	302, // 302: determined.api.v1.Determined.GetModelVersions:output_type -> determined.api.v1.GetModelVersionsResponse
	303, // 303: determined.api.v1.Determined.PostModelVersion:output_type -> determined.api.v1.PostModelVersionResponse
	304, // 304: determined.api.v1.Determined.PatchModelVersion:output_type -> determined.api.v1.PatchModelVersionResponse
	305, // 305: determined.api.v1.Determined.DeleteModelVersion:output_type -> determined.api.v1.DeleteModelVersionResponse
	306, // 306: determined.api.v1.Determined.GetCheckpoint:output_type -> determined.api.v1.GetCheckpointResponse
	307, // 307: determined.api.v1.Determined.PostCheckpointMetadata:output_type -> determined.api.v1.PostCheckpointMetadataResponse
	308, // 308: determined.api.v1.Determined.DeleteCheckpoints:output_type -> determined.api.v1.DeleteCheckpointsResponse
	309, // 309: determined.api.v1.Determined.GetSearcherEvents:output_type -> determined.api.v1.GetSearcherEventsResponse
	310, // 310: determined.api.v1.Determined.PostSearcherOperations:output_type -> determined.api.v1.PostSearcherOperationsResponse
	311, // 311: determined.api.v1.Determined.MetricNames:output_type -> determined.api.v1.MetricNamesResponse
	312, // 312: determined.api.v1.Determined.MetricBatches:output_type -> determined.api.v1.MetricBatchesResponse
	313, // 313: determined.api.v1.Determined.TrialsSnapshot:output_type -> determined.api.v1.TrialsSnapshotResponse
	314, // 314: determined.api.v1.Determined.TrialsSample:output_type -> determined.api.v1.TrialsSampleResponse
	315, // 315: determined.api.v1.Determined.GetResourcePools:output_type -> determined.api.v1.GetResourcePoolsResponse
	316, // 316: determined.api.v1.Determined.ComputeHPImportance:output_type -> determined.api.v1.ComputeHPImportanceResponse
	317, // 317: determined.api.v1.Determined.GetHPImportance:output_type -> determined.api.v1.GetHPImportanceResponse
	318, // 318: determined.api.v1.Determined.ResourceAllocationRaw:output_type -> determined.api.v1.ResourceAllocationRawResponse
	319, // 319: determined.api.v1.Determined.ResourceAllocationAggregated:output_type -> determined.api.v1.ResourceAllocationAggregatedResponse
	320, // 320: determined.api.v1.Determined.GetWorkspace:output_type -> determined.api.v1.GetWorkspaceResponse
	321, // 321: determined.api.v1.Determined.GetWorkspaceProjects:output_type -> determined.api.v1.GetWorkspaceProjectsResponse
	322, // 322: determined.api.v1.Determined.GetWorkspaces:output_type -> determined.api.v1.GetWorkspacesResponse
	323, // 323: determined.api.v1.Determined.PostWorkspace:output_type -> determined.api.v1.PostWorkspaceResponse
	324, // 324: determined.api.v1.Determined.PatchWorkspace:output_type -> determined.api.v1.PatchWorkspaceResponse
	325, // 325: determined.api.v1.Determined.DeleteWorkspace:output_type -> determined.api.v1.DeleteWorkspaceResponse
	326, // 326: determined.api.v1.Determined.ArchiveWorkspace:output_type -> determined.api.v1.ArchiveWorkspaceResponse
	327, // 327: determined.api.v1.Determined.UnarchiveWorkspace:output_type -> determined.api.v1.UnarchiveWorkspaceResponse
	328, // 328: determined.api.v1.Determined.PinWorkspace:output_type -> determined.api.v1.PinWorkspaceResponse
	329, // 329: determined.api.v1.Determined.UnpinWorkspace:output_type -> determined.api.v1.UnpinWorkspaceResponse
	330, // 330: determined.api.v1.Determined.GetProject:output_type -> determined.api.v1.GetProjectResponse
	331, // 331: determined.api.v1.Determined.PostProject:output_type -> determined.api.v1.PostProjectResponse
	332, // 332: determined.api.v1.Determined.AddProjectNote:output_type -> determined.api.v1.AddProjectNoteResponse
	333, // 333: determined.api.v1.Determined.PutProjectNotes:output_type -> determined.api.v1.PutProjectNotesResponse
	334, // 334: determined.api.v1.Determined.PatchProject:output_type -> determined.api.v1.PatchProjectResponse
	335, // 335: determined.api.v1.Determined.DeleteProject:output_type -> determined.api.v1.DeleteProjectResponse
	336, // 336: determined.api.v1.Determined.ArchiveProject:output_type -> determined.api.v1.ArchiveProjectResponse
	337, // 337: determined.api.v1.Determined.UnarchiveProject:output_type -> determined.api.v1.UnarchiveProjectResponse
	338, // 338: determined.api.v1.Determined.MoveProject:output_type -> determined.api.v1.MoveProjectResponse
	339, // 339: determined.api.v1.Determined.MoveExperiment:output_type -> determined.api.v1.MoveExperimentResponse
	340, // 340: determined.api.v1.Determined.GetWebhooks:output_type -> determined.api.v1.GetWebhooksResponse
	341, // 341: determined.api.v1.Determined.PostWebhook:output_type -> determined.api.v1.PostWebhookResponse
	342, // 342: determined.api.v1.Determined.DeleteWebhook:output_type -> determined.api.v1.DeleteWebhookResponse
	343, // 343: determined.api.v1.Determined.TestWebhook:output_type -> determined.api.v1.TestWebhookResponse
	344, // 344: determined.api.v1.Determined.GetGroup:output_type -> determined.api.v1.GetGroupResponse
	345, // 345: determined.api.v1.Determined.GetGroups:output_type -> determined.api.v1.GetGroupsResponse
	346, // 346: determined.api.v1.Determined.CreateGroup:output_type -> determined.api.v1.CreateGroupResponse
	347, // 347: determined.api.v1.Determined.UpdateGroup:output_type -> determined.api.v1.UpdateGroupResponse
	348, // 348: determined.api.v1.Determined.DeleteGroup:output_type -> determined.api.v1.DeleteGroupResponse
	349, // 349: determined.api.v1.Determined.GetPermissionsSummary:output_type -> determined.api.v1.GetPermissionsSummaryResponse
	350, // 350: determined.api.v1.Determined.GetGroupsAndUsersAssignedToWorkspace:output_type -> determined.api.v1.GetGroupsAndUsersAssignedToWorkspaceResponse
	351, // 351: determined.api.v1.Determined.GetRolesByID:output_type -> determined.api.v1.GetRolesByIDResponse
	352, // 352: determined.api.v1.Determined.GetRolesAssignedToUser:output_type -> determined.api.v1.GetRolesAssignedToUserResponse
	353, // 353: determined.api.v1.Determined.GetRolesAssignedToGroup:output_type -> determined.api.v1.GetRolesAssignedToGroupResponse
	354, // 354: determined.api.v1.Determined.SearchRolesAssignableToScope:output_type -> determined.api.v1.SearchRolesAssignableToScopeResponse
	355, // 355: determined.api.v1.Determined.ListRoles:output_type -> determined.api.v1.ListRolesResponse
	356, // 356: determined.api.v1.Determined.AssignRoles:output_type -> determined.api.v1.AssignRolesResponse
	357, // 357: determined.api.v1.Determined.RemoveAssignments:output_type -> determined.api.v1.RemoveAssignmentsResponse
	358, // 358: determined.api.v1.Determined.PostUserActivity:output_type -> determined.api.v1.PostUserActivityResponse
	359, // 359: determined.api.v1.Determined.GetProjectsByUserActivity:output_type -> determined.api.v1.GetProjectsByUserActivityResponse
	180, // [180:360] is the sub-list for method output_type
	0,   // [0:180] is the sub-list for method input_type
	0,   // [0:0] is the sub-list for extension type_name
	0,   // [0:0] is the sub-list for extension extendee
	0,   // [0:0] is the sub-list for field type_name
}

func init() { file_determined_api_v1_api_proto_init() }
func file_determined_api_v1_api_proto_init() {
	if File_determined_api_v1_api_proto != nil {
		return
	}
	file_determined_api_v1_agent_proto_init()
	file_determined_api_v1_auth_proto_init()
	file_determined_api_v1_checkpoint_proto_init()
	file_determined_api_v1_command_proto_init()
	file_determined_api_v1_experiment_proto_init()
	file_determined_api_v1_group_proto_init()
	file_determined_api_v1_job_proto_init()
	file_determined_api_v1_master_proto_init()
	file_determined_api_v1_model_proto_init()
	file_determined_api_v1_notebook_proto_init()
	file_determined_api_v1_project_proto_init()
	file_determined_api_v1_rbac_proto_init()
	file_determined_api_v1_task_proto_init()
	file_determined_api_v1_template_proto_init()
	file_determined_api_v1_tensorboard_proto_init()
	file_determined_api_v1_trial_proto_init()
	file_determined_api_v1_shell_proto_init()
	file_determined_api_v1_user_proto_init()
	file_determined_api_v1_webhook_proto_init()
	file_determined_api_v1_workspace_proto_init()
	file_determined_api_v1_resourcepool_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_determined_api_v1_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_determined_api_v1_api_proto_goTypes,
		DependencyIndexes: file_determined_api_v1_api_proto_depIdxs,
	}.Build()
	File_determined_api_v1_api_proto = out.File
	file_determined_api_v1_api_proto_rawDesc = nil
	file_determined_api_v1_api_proto_goTypes = nil
	file_determined_api_v1_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeterminedClient is the client API for Determined service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeterminedClient interface {
	// Login the user.
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Get the current user.
	CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUserResponse, error)
	// Logout the user.
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// Get a list of users.
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	// Get a user's settings for website
	GetUserSetting(ctx context.Context, in *GetUserSettingRequest, opts ...grpc.CallOption) (*GetUserSettingResponse, error)
	// Reset a user's settings for website
	ResetUserSetting(ctx context.Context, in *ResetUserSettingRequest, opts ...grpc.CallOption) (*ResetUserSettingResponse, error)
	// Patch a user's settings for website
	PostUserSetting(ctx context.Context, in *PostUserSettingRequest, opts ...grpc.CallOption) (*PostUserSettingResponse, error)
	// Get the requested user.
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Get the requested user with username.
	GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserByUsernameResponse, error)
	// Get the current user.
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error)
	// Create a new user.
	PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*PostUserResponse, error)
	// Set the requested user's password.
	SetUserPassword(ctx context.Context, in *SetUserPasswordRequest, opts ...grpc.CallOption) (*SetUserPasswordResponse, error)
	// Patch a user's fields.
	PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error)
	// Get telemetry information.
	GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (*GetTelemetryResponse, error)
	// Get master information.
	GetMaster(ctx context.Context, in *GetMasterRequest, opts ...grpc.CallOption) (*GetMasterResponse, error)
	// Get master config.
	GetMasterConfig(ctx context.Context, in *GetMasterConfigRequest, opts ...grpc.CallOption) (*GetMasterConfigResponse, error)
	// Stream master logs.
	MasterLogs(ctx context.Context, in *MasterLogsRequest, opts ...grpc.CallOption) (Determined_MasterLogsClient, error)
	// Get a set of agents from the cluster.
	GetAgents(ctx context.Context, in *GetAgentsRequest, opts ...grpc.CallOption) (*GetAgentsResponse, error)
	// Get the requested agent.
	GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error)
	// Get all the slots for an agent.
	GetSlots(ctx context.Context, in *GetSlotsRequest, opts ...grpc.CallOption) (*GetSlotsResponse, error)
	// Get the requested slot for an agent.
	GetSlot(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*GetSlotResponse, error)
	// Enable the agent.
	EnableAgent(ctx context.Context, in *EnableAgentRequest, opts ...grpc.CallOption) (*EnableAgentResponse, error)
	// Disable the agent.
	DisableAgent(ctx context.Context, in *DisableAgentRequest, opts ...grpc.CallOption) (*DisableAgentResponse, error)
	// Enable the slot.
	EnableSlot(ctx context.Context, in *EnableSlotRequest, opts ...grpc.CallOption) (*EnableSlotResponse, error)
	// Disable the slot.
	DisableSlot(ctx context.Context, in *DisableSlotRequest, opts ...grpc.CallOption) (*DisableSlotResponse, error)
	// Create an experiment.
	CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentResponse, error)
	// Get the requested experiment.
	GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentResponse, error)
	// Get a list of experiments.
	GetExperiments(ctx context.Context, in *GetExperimentsRequest, opts ...grpc.CallOption) (*GetExperimentsResponse, error)
	// Get the model definition of an experiment.
	GetModelDef(ctx context.Context, in *GetModelDefRequest, opts ...grpc.CallOption) (*GetModelDefResponse, error)
	// Get the model definition file tree of an experiment.
	GetModelDefTree(ctx context.Context, in *GetModelDefTreeRequest, opts ...grpc.CallOption) (*GetModelDefTreeResponse, error)
	// Get one file content of model definition of an experiment.
	GetModelDefFile(ctx context.Context, in *GetModelDefFileRequest, opts ...grpc.CallOption) (*GetModelDefFileResponse, error)
	// Get a list of unique experiment labels (sorted by popularity).
	GetExperimentLabels(ctx context.Context, in *GetExperimentLabelsRequest, opts ...grpc.CallOption) (*GetExperimentLabelsResponse, error)
	// Get the validation history for an experiment.
	GetExperimentValidationHistory(ctx context.Context, in *GetExperimentValidationHistoryRequest, opts ...grpc.CallOption) (*GetExperimentValidationHistoryResponse, error)
	// Activate an experiment.
	ActivateExperiment(ctx context.Context, in *ActivateExperimentRequest, opts ...grpc.CallOption) (*ActivateExperimentResponse, error)
	// Pause an experiment.
	PauseExperiment(ctx context.Context, in *PauseExperimentRequest, opts ...grpc.CallOption) (*PauseExperimentResponse, error)
	// Cancel an experiment.
	CancelExperiment(ctx context.Context, in *CancelExperimentRequest, opts ...grpc.CallOption) (*CancelExperimentResponse, error)
	// Kill an experiment.
	KillExperiment(ctx context.Context, in *KillExperimentRequest, opts ...grpc.CallOption) (*KillExperimentResponse, error)
	// Archive an experiment.
	ArchiveExperiment(ctx context.Context, in *ArchiveExperimentRequest, opts ...grpc.CallOption) (*ArchiveExperimentResponse, error)
	// Unarchive an experiment.
	UnarchiveExperiment(ctx context.Context, in *UnarchiveExperimentRequest, opts ...grpc.CallOption) (*UnarchiveExperimentResponse, error)
	// Patch an experiment's fields.
	PatchExperiment(ctx context.Context, in *PatchExperimentRequest, opts ...grpc.CallOption) (*PatchExperimentResponse, error)
	// Delete the requested experiment.
	DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentResponse, error)
	// Get the best searcher validation for an experiment by the given metric.
	GetBestSearcherValidationMetric(ctx context.Context, in *GetBestSearcherValidationMetricRequest, opts ...grpc.CallOption) (*GetBestSearcherValidationMetricResponse, error)
	// Get a list of checkpoints for an experiment.
	GetExperimentCheckpoints(ctx context.Context, in *GetExperimentCheckpointsRequest, opts ...grpc.CallOption) (*GetExperimentCheckpointsResponse, error)
	// Preview hyperparameter search.
	PreviewHPSearch(ctx context.Context, in *PreviewHPSearchRequest, opts ...grpc.CallOption) (*PreviewHPSearchResponse, error)
	// Get the list of trials for an experiment.
	GetExperimentTrials(ctx context.Context, in *GetExperimentTrialsRequest, opts ...grpc.CallOption) (*GetExperimentTrialsResponse, error)
	// Return downsampled metrics from multiple trials to compare them
	// side-by-side.
	CompareTrials(ctx context.Context, in *CompareTrialsRequest, opts ...grpc.CallOption) (*CompareTrialsResponse, error)
	// Return trials matching a set of TrialFilters.
	QueryTrials(ctx context.Context, in *QueryTrialsRequest, opts ...grpc.CallOption) (*QueryTrialsResponse, error)
	// Update tags for trials by IDs or filters.
	UpdateTrialTags(ctx context.Context, in *UpdateTrialTagsRequest, opts ...grpc.CallOption) (*UpdateTrialTagsResponse, error)
	// Return all collectiions for a specific project.
	GetTrialsCollections(ctx context.Context, in *GetTrialsCollectionsRequest, opts ...grpc.CallOption) (*GetTrialsCollectionsResponse, error)
	// Create a Trial Collection for a set of TrialFilters.
	CreateTrialsCollection(ctx context.Context, in *CreateTrialsCollectionRequest, opts ...grpc.CallOption) (*CreateTrialsCollectionResponse, error)
	// Modify collection attributes: name, filters, etc.
	PatchTrialsCollection(ctx context.Context, in *PatchTrialsCollectionRequest, opts ...grpc.CallOption) (*PatchTrialsCollectionResponse, error)
	// Removes a TrialCollection.
	DeleteTrialsCollection(ctx context.Context, in *DeleteTrialsCollectionRequest, opts ...grpc.CallOption) (*DeleteTrialsCollectionResponse, error)
	// Get a single trial.
	GetTrial(ctx context.Context, in *GetTrialRequest, opts ...grpc.CallOption) (*GetTrialResponse, error)
	// Get the list of workloads for a trial.
	GetTrialWorkloads(ctx context.Context, in *GetTrialWorkloadsRequest, opts ...grpc.CallOption) (*GetTrialWorkloadsResponse, error)
	// Deprecated: Do not use.
	// Stream trial logs.
	TrialLogs(ctx context.Context, in *TrialLogsRequest, opts ...grpc.CallOption) (Determined_TrialLogsClient, error)
	// Deprecated: Do not use.
	// Stream trial log fields.
	TrialLogsFields(ctx context.Context, in *TrialLogsFieldsRequest, opts ...grpc.CallOption) (Determined_TrialLogsFieldsClient, error)
	// Downsample metrics collected during a trial.
	SummarizeTrial(ctx context.Context, in *SummarizeTrialRequest, opts ...grpc.CallOption) (*SummarizeTrialResponse, error)
	// Set allocation to ready state.
	AllocationReady(ctx context.Context, in *AllocationReadyRequest, opts ...grpc.CallOption) (*AllocationReadyResponse, error)
	// Set allocation to waiting state.
	AllocationWaiting(ctx context.Context, in *AllocationWaitingRequest, opts ...grpc.CallOption) (*AllocationWaitingResponse, error)
	// Stream task logs.
	TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Determined_TaskLogsClient, error)
	// Stream task log fields.
	TaskLogsFields(ctx context.Context, in *TaskLogsFieldsRequest, opts ...grpc.CallOption) (Determined_TaskLogsFieldsClient, error)
	// Stream trial profiler metrics.
	GetTrialProfilerMetrics(ctx context.Context, in *GetTrialProfilerMetricsRequest, opts ...grpc.CallOption) (Determined_GetTrialProfilerMetricsClient, error)
	// Stream the available series in a trial's profiler metrics.
	GetTrialProfilerAvailableSeries(ctx context.Context, in *GetTrialProfilerAvailableSeriesRequest, opts ...grpc.CallOption) (Determined_GetTrialProfilerAvailableSeriesClient, error)
	// Persist the given TrialProfilerMetricsBatch. The trial ID is in the labels.
	PostTrialProfilerMetricsBatch(ctx context.Context, in *PostTrialProfilerMetricsBatchRequest, opts ...grpc.CallOption) (*PostTrialProfilerMetricsBatchResponse, error)
	// Kill a trial.
	KillTrial(ctx context.Context, in *KillTrialRequest, opts ...grpc.CallOption) (*KillTrialResponse, error)
	// Get a list of checkpoints for a trial.
	GetTrialCheckpoints(ctx context.Context, in *GetTrialCheckpointsRequest, opts ...grpc.CallOption) (*GetTrialCheckpointsResponse, error)
	// Long poll preemption signals for the given allocation. If the allocation
	// has been preempted when called, it will return so immediately. Otherwise,
	// the connection will be kept open until the timeout is reached or
	// the allocation is preempted.
	AllocationPreemptionSignal(ctx context.Context, in *AllocationPreemptionSignalRequest, opts ...grpc.CallOption) (*AllocationPreemptionSignalResponse, error)
	// Report the receipt of a signal to stop the given allocation early.
	// This is used to communicate back from a SLURM job that it has been
	// notified of a pending preememption. Upon a call to this API
	// the RM should then trigger a checkpoint and immediate exit.
	AllocationPendingPreemptionSignal(ctx context.Context, in *AllocationPendingPreemptionSignalRequest, opts ...grpc.CallOption) (*AllocationPendingPreemptionSignalResponse, error)
	// Acknowledge the receipt of a signal to stop the given allocation early.
	// This is used indicate and exit 0 isn't final; specifically, it is used
	// for HP search directed early stops and preemption signals (not necessarily
	// just scheduler preemption).
	AckAllocationPreemptionSignal(ctx context.Context, in *AckAllocationPreemptionSignalRequest, opts ...grpc.CallOption) (*AckAllocationPreemptionSignalResponse, error)
	// Mark the given reservation (container, pod, etc) within an allocation as
	// a daemon reservation. In the exit of a successful exit, Determined will
	// wait for all resources to exit - unless they are marked as daemon
	// resources, in which case Determined will clean them up regardless of
	// exit status after all non-daemon resources have exited.
	MarkAllocationResourcesDaemon(ctx context.Context, in *MarkAllocationResourcesDaemonRequest, opts ...grpc.CallOption) (*MarkAllocationResourcesDaemonResponse, error)
	// Gather an allocation's rendezvous info. Blocks until all trial containers
	// connect to gather their rendezvous information and responds to them all at
	// once.
	AllocationRendezvousInfo(ctx context.Context, in *AllocationRendezvousInfoRequest, opts ...grpc.CallOption) (*AllocationRendezvousInfoResponse, error)
	// PostAllocationProxyAddress sets the proxy address to use when proxying to
	// services provided by an allocation. Upon receipt, the master will also
	// register any proxies specified by the task.
	PostAllocationProxyAddress(ctx context.Context, in *PostAllocationProxyAddressRequest, opts ...grpc.CallOption) (*PostAllocationProxyAddressResponse, error)
	// AllocationAllGather performs an all gather through the master. An
	// allocation can only perform once all gather at a time.
	AllocationAllGather(ctx context.Context, in *AllocationAllGatherRequest, opts ...grpc.CallOption) (*AllocationAllGatherResponse, error)
	// NotifyContainterRunning is used to notify the master that the container
	// is running.  On HPC, the launcher will report a state of "Running" as
	// soon as Slurm starts the job, but the container may be in the process
	// of getting pulled down from the Internet, so the experiment is not
	// really considered to be in a "Running" state until all the containers
	// that are part of the experiment are running and not being pulled.
	NotifyContainerRunning(ctx context.Context, in *NotifyContainerRunningRequest, opts ...grpc.CallOption) (*NotifyContainerRunningResponse, error)
	// Get the current searcher operation.
	GetCurrentTrialSearcherOperation(ctx context.Context, in *GetCurrentTrialSearcherOperationRequest, opts ...grpc.CallOption) (*GetCurrentTrialSearcherOperationResponse, error)
	// Reports to the searcher that the trial has completed the given searcher
	// operation.
	CompleteTrialSearcherValidation(ctx context.Context, in *CompleteTrialSearcherValidationRequest, opts ...grpc.CallOption) (*CompleteTrialSearcherValidationResponse, error)
	// Reports to the searcher that the trial has completed the current
	// requested amount of training with the given searcher validation
	// metric.
	ReportTrialSearcherEarlyExit(ctx context.Context, in *ReportTrialSearcherEarlyExitRequest, opts ...grpc.CallOption) (*ReportTrialSearcherEarlyExitResponse, error)
	// For bookkeeping, updates the progress towards to current requested searcher
	// training length.
	ReportTrialProgress(ctx context.Context, in *ReportTrialProgressRequest, opts ...grpc.CallOption) (*ReportTrialProgressResponse, error)
	// For bookkeeping, update trial runner metadata (currently just state).
	PostTrialRunnerMetadata(ctx context.Context, in *PostTrialRunnerMetadataRequest, opts ...grpc.CallOption) (*PostTrialRunnerMetadataResponse, error)
	// Record training metrics for specified training.
	ReportTrialTrainingMetrics(ctx context.Context, in *ReportTrialTrainingMetricsRequest, opts ...grpc.CallOption) (*ReportTrialTrainingMetricsResponse, error)
	// Record validation metrics.
	ReportTrialValidationMetrics(ctx context.Context, in *ReportTrialValidationMetricsRequest, opts ...grpc.CallOption) (*ReportTrialValidationMetricsResponse, error)
	// Record a checkpoint.
	ReportCheckpoint(ctx context.Context, in *ReportCheckpointRequest, opts ...grpc.CallOption) (*ReportCheckpointResponse, error)
	// Get a list of jobs in queue.
	GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error)
	// Get job queue stats for a resource pool.
	GetJobQueueStats(ctx context.Context, in *GetJobQueueStatsRequest, opts ...grpc.CallOption) (*GetJobQueueStatsResponse, error)
	// Control the job queues.
	UpdateJobQueue(ctx context.Context, in *UpdateJobQueueRequest, opts ...grpc.CallOption) (*UpdateJobQueueResponse, error)
	// Get a list of templates.
	GetTemplates(ctx context.Context, in *GetTemplatesRequest, opts ...grpc.CallOption) (*GetTemplatesResponse, error)
	// Get the requested template.
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// Update or create (upsert) the requested template.
	PutTemplate(ctx context.Context, in *PutTemplateRequest, opts ...grpc.CallOption) (*PutTemplateResponse, error)
	// Delete a template.
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
	// Get a list of notebooks.
	GetNotebooks(ctx context.Context, in *GetNotebooksRequest, opts ...grpc.CallOption) (*GetNotebooksResponse, error)
	// Get the requested notebook.
	GetNotebook(ctx context.Context, in *GetNotebookRequest, opts ...grpc.CallOption) (*GetNotebookResponse, error)
	// Send notebook idle data to master
	IdleNotebook(ctx context.Context, in *IdleNotebookRequest, opts ...grpc.CallOption) (*IdleNotebookResponse, error)
	// Kill the requested notebook.
	KillNotebook(ctx context.Context, in *KillNotebookRequest, opts ...grpc.CallOption) (*KillNotebookResponse, error)
	// Set the priority of the requested notebook.
	SetNotebookPriority(ctx context.Context, in *SetNotebookPriorityRequest, opts ...grpc.CallOption) (*SetNotebookPriorityResponse, error)
	// Launch a notebook.
	LaunchNotebook(ctx context.Context, in *LaunchNotebookRequest, opts ...grpc.CallOption) (*LaunchNotebookResponse, error)
	// Get a list of shells.
	GetShells(ctx context.Context, in *GetShellsRequest, opts ...grpc.CallOption) (*GetShellsResponse, error)
	// Get the requested shell.
	GetShell(ctx context.Context, in *GetShellRequest, opts ...grpc.CallOption) (*GetShellResponse, error)
	// Kill the requested shell.
	KillShell(ctx context.Context, in *KillShellRequest, opts ...grpc.CallOption) (*KillShellResponse, error)
	// Set the priority of the requested shell.
	SetShellPriority(ctx context.Context, in *SetShellPriorityRequest, opts ...grpc.CallOption) (*SetShellPriorityResponse, error)
	// Launch a shell.
	LaunchShell(ctx context.Context, in *LaunchShellRequest, opts ...grpc.CallOption) (*LaunchShellResponse, error)
	// Get a list of commands.
	GetCommands(ctx context.Context, in *GetCommandsRequest, opts ...grpc.CallOption) (*GetCommandsResponse, error)
	// Get the requested command.
	GetCommand(ctx context.Context, in *GetCommandRequest, opts ...grpc.CallOption) (*GetCommandResponse, error)
	// Kill the requested command.
	KillCommand(ctx context.Context, in *KillCommandRequest, opts ...grpc.CallOption) (*KillCommandResponse, error)
	// Set the priority of the requested command.
	SetCommandPriority(ctx context.Context, in *SetCommandPriorityRequest, opts ...grpc.CallOption) (*SetCommandPriorityResponse, error)
	// Launch a command.
	LaunchCommand(ctx context.Context, in *LaunchCommandRequest, opts ...grpc.CallOption) (*LaunchCommandResponse, error)
	// Get a list of tensorboards.
	GetTensorboards(ctx context.Context, in *GetTensorboardsRequest, opts ...grpc.CallOption) (*GetTensorboardsResponse, error)
	// Get the requested tensorboard.
	GetTensorboard(ctx context.Context, in *GetTensorboardRequest, opts ...grpc.CallOption) (*GetTensorboardResponse, error)
	// Kill the requested tensorboard.
	KillTensorboard(ctx context.Context, in *KillTensorboardRequest, opts ...grpc.CallOption) (*KillTensorboardResponse, error)
	// Set the priority of the requested TensorBoard.
	SetTensorboardPriority(ctx context.Context, in *SetTensorboardPriorityRequest, opts ...grpc.CallOption) (*SetTensorboardPriorityResponse, error)
	// Launch a tensorboard.
	LaunchTensorboard(ctx context.Context, in *LaunchTensorboardRequest, opts ...grpc.CallOption) (*LaunchTensorboardResponse, error)
	// Get a count of active tasks.
	GetActiveTasksCount(ctx context.Context, in *GetActiveTasksCountRequest, opts ...grpc.CallOption) (*GetActiveTasksCountResponse, error)
	// Check the status of a requested task.
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	// Get the requested model.
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error)
	// Create a model in the registry.
	PostModel(ctx context.Context, in *PostModelRequest, opts ...grpc.CallOption) (*PostModelResponse, error)
	// Patch a model's fields.
	PatchModel(ctx context.Context, in *PatchModelRequest, opts ...grpc.CallOption) (*PatchModelResponse, error)
	// Archive a model
	ArchiveModel(ctx context.Context, in *ArchiveModelRequest, opts ...grpc.CallOption) (*ArchiveModelResponse, error)
	// Unarchive a model
	UnarchiveModel(ctx context.Context, in *UnarchiveModelRequest, opts ...grpc.CallOption) (*UnarchiveModelResponse, error)
	// Move a model into a workspace
	MoveModel(ctx context.Context, in *MoveModelRequest, opts ...grpc.CallOption) (*MoveModelResponse, error)
	// Delete a model
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error)
	// Get a list of models.
	GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error)
	// Get a list of unique model labels (sorted by popularity).
	GetModelLabels(ctx context.Context, in *GetModelLabelsRequest, opts ...grpc.CallOption) (*GetModelLabelsResponse, error)
	// Get the requested model version.
	GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*GetModelVersionResponse, error)
	// Get a list of versions for the requested model.
	GetModelVersions(ctx context.Context, in *GetModelVersionsRequest, opts ...grpc.CallOption) (*GetModelVersionsResponse, error)
	// Create a model version.
	PostModelVersion(ctx context.Context, in *PostModelVersionRequest, opts ...grpc.CallOption) (*PostModelVersionResponse, error)
	// Patch a model version's fields.
	PatchModelVersion(ctx context.Context, in *PatchModelVersionRequest, opts ...grpc.CallOption) (*PatchModelVersionResponse, error)
	// Delete a model version
	DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*DeleteModelVersionResponse, error)
	// Get the requested checkpoint.
	GetCheckpoint(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (*GetCheckpointResponse, error)
	// Update checkpoint metadata.
	PostCheckpointMetadata(ctx context.Context, in *PostCheckpointMetadataRequest, opts ...grpc.CallOption) (*PostCheckpointMetadataResponse, error)
	// Delete Checkpoints.
	DeleteCheckpoints(ctx context.Context, in *DeleteCheckpointsRequest, opts ...grpc.CallOption) (*DeleteCheckpointsResponse, error)
	// Get the list of custom searcher events with long polling.
	GetSearcherEvents(ctx context.Context, in *GetSearcherEventsRequest, opts ...grpc.CallOption) (*GetSearcherEventsResponse, error)
	// Submit operations to a custom searcher.
	PostSearcherOperations(ctx context.Context, in *PostSearcherOperationsRequest, opts ...grpc.CallOption) (*PostSearcherOperationsResponse, error)
	// Get the set of metric names recorded for an experiment.
	MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (Determined_MetricNamesClient, error)
	// Get the milestones (in batches processed) at which a metric is recorded by
	// an experiment.
	MetricBatches(ctx context.Context, in *MetricBatchesRequest, opts ...grpc.CallOption) (Determined_MetricBatchesClient, error)
	// Get a snapshot of a metric across all trials at a certain point of
	// progress.
	TrialsSnapshot(ctx context.Context, in *TrialsSnapshotRequest, opts ...grpc.CallOption) (Determined_TrialsSnapshotClient, error)
	// Get a sample of the metrics over time for a sample of the trials.
	TrialsSample(ctx context.Context, in *TrialsSampleRequest, opts ...grpc.CallOption) (Determined_TrialsSampleClient, error)
	// Get a list of all resource pools from the cluster.
	GetResourcePools(ctx context.Context, in *GetResourcePoolsRequest, opts ...grpc.CallOption) (*GetResourcePoolsResponse, error)
	// Trigger the computation of hyperparameter importance on-demand for a
	// specific metric on a specific experiment. The status and results can be
	// retrieved with GetHPImportance.
	ComputeHPImportance(ctx context.Context, in *ComputeHPImportanceRequest, opts ...grpc.CallOption) (*ComputeHPImportanceResponse, error)
	// Retrieve the latest computation of hyperparameter importance. Currently
	// this is triggered for training loss (if emitted) and the searcher metric
	// after 10% increments in an experiment's progress, but no more than every 10
	// minutes.
	GetHPImportance(ctx context.Context, in *GetHPImportanceRequest, opts ...grpc.CallOption) (Determined_GetHPImportanceClient, error)
	// Deprecated: Do not use.
	// Get a detailed view of resource allocation during the given time period.
	ResourceAllocationRaw(ctx context.Context, in *ResourceAllocationRawRequest, opts ...grpc.CallOption) (*ResourceAllocationRawResponse, error)
	// Get an aggregated view of resource allocation during the given time period.
	ResourceAllocationAggregated(ctx context.Context, in *ResourceAllocationAggregatedRequest, opts ...grpc.CallOption) (*ResourceAllocationAggregatedResponse, error)
	// Get the requested workspace.
	GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error)
	// Get projects associated with a workspace.
	GetWorkspaceProjects(ctx context.Context, in *GetWorkspaceProjectsRequest, opts ...grpc.CallOption) (*GetWorkspaceProjectsResponse, error)
	// Get a list of workspaces.
	GetWorkspaces(ctx context.Context, in *GetWorkspacesRequest, opts ...grpc.CallOption) (*GetWorkspacesResponse, error)
	// Create a workspace.
	PostWorkspace(ctx context.Context, in *PostWorkspaceRequest, opts ...grpc.CallOption) (*PostWorkspaceResponse, error)
	// Update a workspace.
	PatchWorkspace(ctx context.Context, in *PatchWorkspaceRequest, opts ...grpc.CallOption) (*PatchWorkspaceResponse, error)
	// Delete a workspace.
	DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error)
	// Archive a workspace.
	ArchiveWorkspace(ctx context.Context, in *ArchiveWorkspaceRequest, opts ...grpc.CallOption) (*ArchiveWorkspaceResponse, error)
	// Unarchive a workspace.
	UnarchiveWorkspace(ctx context.Context, in *UnarchiveWorkspaceRequest, opts ...grpc.CallOption) (*UnarchiveWorkspaceResponse, error)
	// Pin a workspace.
	PinWorkspace(ctx context.Context, in *PinWorkspaceRequest, opts ...grpc.CallOption) (*PinWorkspaceResponse, error)
	// Unpin a workspace.
	UnpinWorkspace(ctx context.Context, in *UnpinWorkspaceRequest, opts ...grpc.CallOption) (*UnpinWorkspaceResponse, error)
	// Get the requested project.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// Create a project.
	PostProject(ctx context.Context, in *PostProjectRequest, opts ...grpc.CallOption) (*PostProjectResponse, error)
	// Add a note to a project.
	AddProjectNote(ctx context.Context, in *AddProjectNoteRequest, opts ...grpc.CallOption) (*AddProjectNoteResponse, error)
	// Set project notes.
	PutProjectNotes(ctx context.Context, in *PutProjectNotesRequest, opts ...grpc.CallOption) (*PutProjectNotesResponse, error)
	// Update a project.
	PatchProject(ctx context.Context, in *PatchProjectRequest, opts ...grpc.CallOption) (*PatchProjectResponse, error)
	// Delete a project.
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// Archive a project.
	ArchiveProject(ctx context.Context, in *ArchiveProjectRequest, opts ...grpc.CallOption) (*ArchiveProjectResponse, error)
	// Unarchive a project.
	UnarchiveProject(ctx context.Context, in *UnarchiveProjectRequest, opts ...grpc.CallOption) (*UnarchiveProjectResponse, error)
	// Move a project into a workspace.
	MoveProject(ctx context.Context, in *MoveProjectRequest, opts ...grpc.CallOption) (*MoveProjectResponse, error)
	// Move an experiment into a project.
	MoveExperiment(ctx context.Context, in *MoveExperimentRequest, opts ...grpc.CallOption) (*MoveExperimentResponse, error)
	// Get a list of webhooks.
	GetWebhooks(ctx context.Context, in *GetWebhooksRequest, opts ...grpc.CallOption) (*GetWebhooksResponse, error)
	// Create a webhook.
	// TODO(???): Simplify req/response structs?
	PostWebhook(ctx context.Context, in *PostWebhookRequest, opts ...grpc.CallOption) (*PostWebhookResponse, error)
	// Delete a webhook.
	DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error)
	// Test a webhook.
	TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookResponse, error)
	// Get a group by id.
	GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error)
	// Search for groups with optional filters.
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error)
	// Create a group with optional members on creation.
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	// Update group info.
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	// Remove a group.
	DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	// List all permissions for the logged in user in all scopes.
	GetPermissionsSummary(ctx context.Context, in *GetPermissionsSummaryRequest, opts ...grpc.CallOption) (*GetPermissionsSummaryResponse, error)
	// Get groups and users assigned to a given workspace with what roles are
	// assigned.
	GetGroupsAndUsersAssignedToWorkspace(ctx context.Context, in *GetGroupsAndUsersAssignedToWorkspaceRequest, opts ...grpc.CallOption) (*GetGroupsAndUsersAssignedToWorkspaceResponse, error)
	// Get a set of roles with the corresponding IDs.
	GetRolesByID(ctx context.Context, in *GetRolesByIDRequest, opts ...grpc.CallOption) (*GetRolesByIDResponse, error)
	// Get the roles which are assigned to a user.
	GetRolesAssignedToUser(ctx context.Context, in *GetRolesAssignedToUserRequest, opts ...grpc.CallOption) (*GetRolesAssignedToUserResponse, error)
	// Get the roles which are assigned to a group.
	GetRolesAssignedToGroup(ctx context.Context, in *GetRolesAssignedToGroupRequest, opts ...grpc.CallOption) (*GetRolesAssignedToGroupResponse, error)
	// Search for roles assignable to a given scope.
	SearchRolesAssignableToScope(ctx context.Context, in *SearchRolesAssignableToScopeRequest, opts ...grpc.CallOption) (*SearchRolesAssignableToScopeResponse, error)
	// ListRoles returns roles and groups/users granted that role.
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	// AssignRoles adds a set of role assignments to the system.
	AssignRoles(ctx context.Context, in *AssignRolesRequest, opts ...grpc.CallOption) (*AssignRolesResponse, error)
	// RemoveAssignments removes a set of role assignments from the system.
	RemoveAssignments(ctx context.Context, in *RemoveAssignmentsRequest, opts ...grpc.CallOption) (*RemoveAssignmentsResponse, error)
	// Patch a user's activity
	PostUserActivity(ctx context.Context, in *PostUserActivityRequest, opts ...grpc.CallOption) (*PostUserActivityResponse, error)
	// Get projects by user activity
	GetProjectsByUserActivity(ctx context.Context, in *GetProjectsByUserActivityRequest, opts ...grpc.CallOption) (*GetProjectsByUserActivityResponse, error)
}

type determinedClient struct {
	cc grpc.ClientConnInterface
}

func NewDeterminedClient(cc grpc.ClientConnInterface) DeterminedClient {
	return &determinedClient{cc}
}

func (c *determinedClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*CurrentUserResponse, error) {
	out := new(CurrentUserResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/CurrentUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetUserSetting(ctx context.Context, in *GetUserSettingRequest, opts ...grpc.CallOption) (*GetUserSettingResponse, error) {
	out := new(GetUserSettingResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ResetUserSetting(ctx context.Context, in *ResetUserSettingRequest, opts ...grpc.CallOption) (*ResetUserSettingResponse, error) {
	out := new(ResetUserSettingResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ResetUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostUserSetting(ctx context.Context, in *PostUserSettingRequest, opts ...grpc.CallOption) (*PostUserSettingResponse, error) {
	out := new(PostUserSettingResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostUserSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetUserByUsername(ctx context.Context, in *GetUserByUsernameRequest, opts ...grpc.CallOption) (*GetUserByUsernameResponse, error) {
	out := new(GetUserByUsernameResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetUserByUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error) {
	out := new(GetMeResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostUser(ctx context.Context, in *PostUserRequest, opts ...grpc.CallOption) (*PostUserResponse, error) {
	out := new(PostUserResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) SetUserPassword(ctx context.Context, in *SetUserPasswordRequest, opts ...grpc.CallOption) (*SetUserPasswordResponse, error) {
	out := new(SetUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/SetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PatchUser(ctx context.Context, in *PatchUserRequest, opts ...grpc.CallOption) (*PatchUserResponse, error) {
	out := new(PatchUserResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PatchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (*GetTelemetryResponse, error) {
	out := new(GetTelemetryResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTelemetry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetMaster(ctx context.Context, in *GetMasterRequest, opts ...grpc.CallOption) (*GetMasterResponse, error) {
	out := new(GetMasterResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetMaster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetMasterConfig(ctx context.Context, in *GetMasterConfigRequest, opts ...grpc.CallOption) (*GetMasterConfigResponse, error) {
	out := new(GetMasterConfigResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetMasterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) MasterLogs(ctx context.Context, in *MasterLogsRequest, opts ...grpc.CallOption) (Determined_MasterLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[0], "/determined.api.v1.Determined/MasterLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedMasterLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_MasterLogsClient interface {
	Recv() (*MasterLogsResponse, error)
	grpc.ClientStream
}

type determinedMasterLogsClient struct {
	grpc.ClientStream
}

func (x *determinedMasterLogsClient) Recv() (*MasterLogsResponse, error) {
	m := new(MasterLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) GetAgents(ctx context.Context, in *GetAgentsRequest, opts ...grpc.CallOption) (*GetAgentsResponse, error) {
	out := new(GetAgentsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*GetAgentResponse, error) {
	out := new(GetAgentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetSlots(ctx context.Context, in *GetSlotsRequest, opts ...grpc.CallOption) (*GetSlotsResponse, error) {
	out := new(GetSlotsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetSlot(ctx context.Context, in *GetSlotRequest, opts ...grpc.CallOption) (*GetSlotResponse, error) {
	out := new(GetSlotResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) EnableAgent(ctx context.Context, in *EnableAgentRequest, opts ...grpc.CallOption) (*EnableAgentResponse, error) {
	out := new(EnableAgentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/EnableAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DisableAgent(ctx context.Context, in *DisableAgentRequest, opts ...grpc.CallOption) (*DisableAgentResponse, error) {
	out := new(DisableAgentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DisableAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) EnableSlot(ctx context.Context, in *EnableSlotRequest, opts ...grpc.CallOption) (*EnableSlotResponse, error) {
	out := new(EnableSlotResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/EnableSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DisableSlot(ctx context.Context, in *DisableSlotRequest, opts ...grpc.CallOption) (*DisableSlotResponse, error) {
	out := new(DisableSlotResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DisableSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentResponse, error) {
	out := new(CreateExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/CreateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentResponse, error) {
	out := new(GetExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetExperiments(ctx context.Context, in *GetExperimentsRequest, opts ...grpc.CallOption) (*GetExperimentsResponse, error) {
	out := new(GetExperimentsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetModelDef(ctx context.Context, in *GetModelDefRequest, opts ...grpc.CallOption) (*GetModelDefResponse, error) {
	out := new(GetModelDefResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetModelDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetModelDefTree(ctx context.Context, in *GetModelDefTreeRequest, opts ...grpc.CallOption) (*GetModelDefTreeResponse, error) {
	out := new(GetModelDefTreeResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetModelDefTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetModelDefFile(ctx context.Context, in *GetModelDefFileRequest, opts ...grpc.CallOption) (*GetModelDefFileResponse, error) {
	out := new(GetModelDefFileResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetModelDefFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetExperimentLabels(ctx context.Context, in *GetExperimentLabelsRequest, opts ...grpc.CallOption) (*GetExperimentLabelsResponse, error) {
	out := new(GetExperimentLabelsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetExperimentLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetExperimentValidationHistory(ctx context.Context, in *GetExperimentValidationHistoryRequest, opts ...grpc.CallOption) (*GetExperimentValidationHistoryResponse, error) {
	out := new(GetExperimentValidationHistoryResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetExperimentValidationHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ActivateExperiment(ctx context.Context, in *ActivateExperimentRequest, opts ...grpc.CallOption) (*ActivateExperimentResponse, error) {
	out := new(ActivateExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ActivateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PauseExperiment(ctx context.Context, in *PauseExperimentRequest, opts ...grpc.CallOption) (*PauseExperimentResponse, error) {
	out := new(PauseExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PauseExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) CancelExperiment(ctx context.Context, in *CancelExperimentRequest, opts ...grpc.CallOption) (*CancelExperimentResponse, error) {
	out := new(CancelExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/CancelExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) KillExperiment(ctx context.Context, in *KillExperimentRequest, opts ...grpc.CallOption) (*KillExperimentResponse, error) {
	out := new(KillExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/KillExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ArchiveExperiment(ctx context.Context, in *ArchiveExperimentRequest, opts ...grpc.CallOption) (*ArchiveExperimentResponse, error) {
	out := new(ArchiveExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ArchiveExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) UnarchiveExperiment(ctx context.Context, in *UnarchiveExperimentRequest, opts ...grpc.CallOption) (*UnarchiveExperimentResponse, error) {
	out := new(UnarchiveExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/UnarchiveExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PatchExperiment(ctx context.Context, in *PatchExperimentRequest, opts ...grpc.CallOption) (*PatchExperimentResponse, error) {
	out := new(PatchExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PatchExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentResponse, error) {
	out := new(DeleteExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetBestSearcherValidationMetric(ctx context.Context, in *GetBestSearcherValidationMetricRequest, opts ...grpc.CallOption) (*GetBestSearcherValidationMetricResponse, error) {
	out := new(GetBestSearcherValidationMetricResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetBestSearcherValidationMetric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetExperimentCheckpoints(ctx context.Context, in *GetExperimentCheckpointsRequest, opts ...grpc.CallOption) (*GetExperimentCheckpointsResponse, error) {
	out := new(GetExperimentCheckpointsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetExperimentCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PreviewHPSearch(ctx context.Context, in *PreviewHPSearchRequest, opts ...grpc.CallOption) (*PreviewHPSearchResponse, error) {
	out := new(PreviewHPSearchResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PreviewHPSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetExperimentTrials(ctx context.Context, in *GetExperimentTrialsRequest, opts ...grpc.CallOption) (*GetExperimentTrialsResponse, error) {
	out := new(GetExperimentTrialsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetExperimentTrials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) CompareTrials(ctx context.Context, in *CompareTrialsRequest, opts ...grpc.CallOption) (*CompareTrialsResponse, error) {
	out := new(CompareTrialsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/CompareTrials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) QueryTrials(ctx context.Context, in *QueryTrialsRequest, opts ...grpc.CallOption) (*QueryTrialsResponse, error) {
	out := new(QueryTrialsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/QueryTrials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) UpdateTrialTags(ctx context.Context, in *UpdateTrialTagsRequest, opts ...grpc.CallOption) (*UpdateTrialTagsResponse, error) {
	out := new(UpdateTrialTagsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/UpdateTrialTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTrialsCollections(ctx context.Context, in *GetTrialsCollectionsRequest, opts ...grpc.CallOption) (*GetTrialsCollectionsResponse, error) {
	out := new(GetTrialsCollectionsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTrialsCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) CreateTrialsCollection(ctx context.Context, in *CreateTrialsCollectionRequest, opts ...grpc.CallOption) (*CreateTrialsCollectionResponse, error) {
	out := new(CreateTrialsCollectionResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/CreateTrialsCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PatchTrialsCollection(ctx context.Context, in *PatchTrialsCollectionRequest, opts ...grpc.CallOption) (*PatchTrialsCollectionResponse, error) {
	out := new(PatchTrialsCollectionResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PatchTrialsCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteTrialsCollection(ctx context.Context, in *DeleteTrialsCollectionRequest, opts ...grpc.CallOption) (*DeleteTrialsCollectionResponse, error) {
	out := new(DeleteTrialsCollectionResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteTrialsCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTrial(ctx context.Context, in *GetTrialRequest, opts ...grpc.CallOption) (*GetTrialResponse, error) {
	out := new(GetTrialResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTrial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTrialWorkloads(ctx context.Context, in *GetTrialWorkloadsRequest, opts ...grpc.CallOption) (*GetTrialWorkloadsResponse, error) {
	out := new(GetTrialWorkloadsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTrialWorkloads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *determinedClient) TrialLogs(ctx context.Context, in *TrialLogsRequest, opts ...grpc.CallOption) (Determined_TrialLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[1], "/determined.api.v1.Determined/TrialLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedTrialLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_TrialLogsClient interface {
	Recv() (*TrialLogsResponse, error)
	grpc.ClientStream
}

type determinedTrialLogsClient struct {
	grpc.ClientStream
}

func (x *determinedTrialLogsClient) Recv() (*TrialLogsResponse, error) {
	m := new(TrialLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *determinedClient) TrialLogsFields(ctx context.Context, in *TrialLogsFieldsRequest, opts ...grpc.CallOption) (Determined_TrialLogsFieldsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[2], "/determined.api.v1.Determined/TrialLogsFields", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedTrialLogsFieldsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_TrialLogsFieldsClient interface {
	Recv() (*TrialLogsFieldsResponse, error)
	grpc.ClientStream
}

type determinedTrialLogsFieldsClient struct {
	grpc.ClientStream
}

func (x *determinedTrialLogsFieldsClient) Recv() (*TrialLogsFieldsResponse, error) {
	m := new(TrialLogsFieldsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) SummarizeTrial(ctx context.Context, in *SummarizeTrialRequest, opts ...grpc.CallOption) (*SummarizeTrialResponse, error) {
	out := new(SummarizeTrialResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/SummarizeTrial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) AllocationReady(ctx context.Context, in *AllocationReadyRequest, opts ...grpc.CallOption) (*AllocationReadyResponse, error) {
	out := new(AllocationReadyResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/AllocationReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) AllocationWaiting(ctx context.Context, in *AllocationWaitingRequest, opts ...grpc.CallOption) (*AllocationWaitingResponse, error) {
	out := new(AllocationWaitingResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/AllocationWaiting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) TaskLogs(ctx context.Context, in *TaskLogsRequest, opts ...grpc.CallOption) (Determined_TaskLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[3], "/determined.api.v1.Determined/TaskLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedTaskLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_TaskLogsClient interface {
	Recv() (*TaskLogsResponse, error)
	grpc.ClientStream
}

type determinedTaskLogsClient struct {
	grpc.ClientStream
}

func (x *determinedTaskLogsClient) Recv() (*TaskLogsResponse, error) {
	m := new(TaskLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) TaskLogsFields(ctx context.Context, in *TaskLogsFieldsRequest, opts ...grpc.CallOption) (Determined_TaskLogsFieldsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[4], "/determined.api.v1.Determined/TaskLogsFields", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedTaskLogsFieldsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_TaskLogsFieldsClient interface {
	Recv() (*TaskLogsFieldsResponse, error)
	grpc.ClientStream
}

type determinedTaskLogsFieldsClient struct {
	grpc.ClientStream
}

func (x *determinedTaskLogsFieldsClient) Recv() (*TaskLogsFieldsResponse, error) {
	m := new(TaskLogsFieldsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) GetTrialProfilerMetrics(ctx context.Context, in *GetTrialProfilerMetricsRequest, opts ...grpc.CallOption) (Determined_GetTrialProfilerMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[5], "/determined.api.v1.Determined/GetTrialProfilerMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedGetTrialProfilerMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_GetTrialProfilerMetricsClient interface {
	Recv() (*GetTrialProfilerMetricsResponse, error)
	grpc.ClientStream
}

type determinedGetTrialProfilerMetricsClient struct {
	grpc.ClientStream
}

func (x *determinedGetTrialProfilerMetricsClient) Recv() (*GetTrialProfilerMetricsResponse, error) {
	m := new(GetTrialProfilerMetricsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) GetTrialProfilerAvailableSeries(ctx context.Context, in *GetTrialProfilerAvailableSeriesRequest, opts ...grpc.CallOption) (Determined_GetTrialProfilerAvailableSeriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[6], "/determined.api.v1.Determined/GetTrialProfilerAvailableSeries", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedGetTrialProfilerAvailableSeriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_GetTrialProfilerAvailableSeriesClient interface {
	Recv() (*GetTrialProfilerAvailableSeriesResponse, error)
	grpc.ClientStream
}

type determinedGetTrialProfilerAvailableSeriesClient struct {
	grpc.ClientStream
}

func (x *determinedGetTrialProfilerAvailableSeriesClient) Recv() (*GetTrialProfilerAvailableSeriesResponse, error) {
	m := new(GetTrialProfilerAvailableSeriesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) PostTrialProfilerMetricsBatch(ctx context.Context, in *PostTrialProfilerMetricsBatchRequest, opts ...grpc.CallOption) (*PostTrialProfilerMetricsBatchResponse, error) {
	out := new(PostTrialProfilerMetricsBatchResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostTrialProfilerMetricsBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) KillTrial(ctx context.Context, in *KillTrialRequest, opts ...grpc.CallOption) (*KillTrialResponse, error) {
	out := new(KillTrialResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/KillTrial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTrialCheckpoints(ctx context.Context, in *GetTrialCheckpointsRequest, opts ...grpc.CallOption) (*GetTrialCheckpointsResponse, error) {
	out := new(GetTrialCheckpointsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTrialCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) AllocationPreemptionSignal(ctx context.Context, in *AllocationPreemptionSignalRequest, opts ...grpc.CallOption) (*AllocationPreemptionSignalResponse, error) {
	out := new(AllocationPreemptionSignalResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/AllocationPreemptionSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) AllocationPendingPreemptionSignal(ctx context.Context, in *AllocationPendingPreemptionSignalRequest, opts ...grpc.CallOption) (*AllocationPendingPreemptionSignalResponse, error) {
	out := new(AllocationPendingPreemptionSignalResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/AllocationPendingPreemptionSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) AckAllocationPreemptionSignal(ctx context.Context, in *AckAllocationPreemptionSignalRequest, opts ...grpc.CallOption) (*AckAllocationPreemptionSignalResponse, error) {
	out := new(AckAllocationPreemptionSignalResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/AckAllocationPreemptionSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) MarkAllocationResourcesDaemon(ctx context.Context, in *MarkAllocationResourcesDaemonRequest, opts ...grpc.CallOption) (*MarkAllocationResourcesDaemonResponse, error) {
	out := new(MarkAllocationResourcesDaemonResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/MarkAllocationResourcesDaemon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) AllocationRendezvousInfo(ctx context.Context, in *AllocationRendezvousInfoRequest, opts ...grpc.CallOption) (*AllocationRendezvousInfoResponse, error) {
	out := new(AllocationRendezvousInfoResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/AllocationRendezvousInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostAllocationProxyAddress(ctx context.Context, in *PostAllocationProxyAddressRequest, opts ...grpc.CallOption) (*PostAllocationProxyAddressResponse, error) {
	out := new(PostAllocationProxyAddressResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostAllocationProxyAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) AllocationAllGather(ctx context.Context, in *AllocationAllGatherRequest, opts ...grpc.CallOption) (*AllocationAllGatherResponse, error) {
	out := new(AllocationAllGatherResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/AllocationAllGather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) NotifyContainerRunning(ctx context.Context, in *NotifyContainerRunningRequest, opts ...grpc.CallOption) (*NotifyContainerRunningResponse, error) {
	out := new(NotifyContainerRunningResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/NotifyContainerRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetCurrentTrialSearcherOperation(ctx context.Context, in *GetCurrentTrialSearcherOperationRequest, opts ...grpc.CallOption) (*GetCurrentTrialSearcherOperationResponse, error) {
	out := new(GetCurrentTrialSearcherOperationResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetCurrentTrialSearcherOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) CompleteTrialSearcherValidation(ctx context.Context, in *CompleteTrialSearcherValidationRequest, opts ...grpc.CallOption) (*CompleteTrialSearcherValidationResponse, error) {
	out := new(CompleteTrialSearcherValidationResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/CompleteTrialSearcherValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ReportTrialSearcherEarlyExit(ctx context.Context, in *ReportTrialSearcherEarlyExitRequest, opts ...grpc.CallOption) (*ReportTrialSearcherEarlyExitResponse, error) {
	out := new(ReportTrialSearcherEarlyExitResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ReportTrialSearcherEarlyExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ReportTrialProgress(ctx context.Context, in *ReportTrialProgressRequest, opts ...grpc.CallOption) (*ReportTrialProgressResponse, error) {
	out := new(ReportTrialProgressResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ReportTrialProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostTrialRunnerMetadata(ctx context.Context, in *PostTrialRunnerMetadataRequest, opts ...grpc.CallOption) (*PostTrialRunnerMetadataResponse, error) {
	out := new(PostTrialRunnerMetadataResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostTrialRunnerMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ReportTrialTrainingMetrics(ctx context.Context, in *ReportTrialTrainingMetricsRequest, opts ...grpc.CallOption) (*ReportTrialTrainingMetricsResponse, error) {
	out := new(ReportTrialTrainingMetricsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ReportTrialTrainingMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ReportTrialValidationMetrics(ctx context.Context, in *ReportTrialValidationMetricsRequest, opts ...grpc.CallOption) (*ReportTrialValidationMetricsResponse, error) {
	out := new(ReportTrialValidationMetricsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ReportTrialValidationMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ReportCheckpoint(ctx context.Context, in *ReportCheckpointRequest, opts ...grpc.CallOption) (*ReportCheckpointResponse, error) {
	out := new(ReportCheckpointResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ReportCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error) {
	out := new(GetJobsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetJobQueueStats(ctx context.Context, in *GetJobQueueStatsRequest, opts ...grpc.CallOption) (*GetJobQueueStatsResponse, error) {
	out := new(GetJobQueueStatsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetJobQueueStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) UpdateJobQueue(ctx context.Context, in *UpdateJobQueueRequest, opts ...grpc.CallOption) (*UpdateJobQueueResponse, error) {
	out := new(UpdateJobQueueResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/UpdateJobQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTemplates(ctx context.Context, in *GetTemplatesRequest, opts ...grpc.CallOption) (*GetTemplatesResponse, error) {
	out := new(GetTemplatesResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PutTemplate(ctx context.Context, in *PutTemplateRequest, opts ...grpc.CallOption) (*PutTemplateResponse, error) {
	out := new(PutTemplateResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PutTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetNotebooks(ctx context.Context, in *GetNotebooksRequest, opts ...grpc.CallOption) (*GetNotebooksResponse, error) {
	out := new(GetNotebooksResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetNotebooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetNotebook(ctx context.Context, in *GetNotebookRequest, opts ...grpc.CallOption) (*GetNotebookResponse, error) {
	out := new(GetNotebookResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) IdleNotebook(ctx context.Context, in *IdleNotebookRequest, opts ...grpc.CallOption) (*IdleNotebookResponse, error) {
	out := new(IdleNotebookResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/IdleNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) KillNotebook(ctx context.Context, in *KillNotebookRequest, opts ...grpc.CallOption) (*KillNotebookResponse, error) {
	out := new(KillNotebookResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/KillNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) SetNotebookPriority(ctx context.Context, in *SetNotebookPriorityRequest, opts ...grpc.CallOption) (*SetNotebookPriorityResponse, error) {
	out := new(SetNotebookPriorityResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/SetNotebookPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) LaunchNotebook(ctx context.Context, in *LaunchNotebookRequest, opts ...grpc.CallOption) (*LaunchNotebookResponse, error) {
	out := new(LaunchNotebookResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/LaunchNotebook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetShells(ctx context.Context, in *GetShellsRequest, opts ...grpc.CallOption) (*GetShellsResponse, error) {
	out := new(GetShellsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetShells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetShell(ctx context.Context, in *GetShellRequest, opts ...grpc.CallOption) (*GetShellResponse, error) {
	out := new(GetShellResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetShell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) KillShell(ctx context.Context, in *KillShellRequest, opts ...grpc.CallOption) (*KillShellResponse, error) {
	out := new(KillShellResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/KillShell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) SetShellPriority(ctx context.Context, in *SetShellPriorityRequest, opts ...grpc.CallOption) (*SetShellPriorityResponse, error) {
	out := new(SetShellPriorityResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/SetShellPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) LaunchShell(ctx context.Context, in *LaunchShellRequest, opts ...grpc.CallOption) (*LaunchShellResponse, error) {
	out := new(LaunchShellResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/LaunchShell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetCommands(ctx context.Context, in *GetCommandsRequest, opts ...grpc.CallOption) (*GetCommandsResponse, error) {
	out := new(GetCommandsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetCommand(ctx context.Context, in *GetCommandRequest, opts ...grpc.CallOption) (*GetCommandResponse, error) {
	out := new(GetCommandResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) KillCommand(ctx context.Context, in *KillCommandRequest, opts ...grpc.CallOption) (*KillCommandResponse, error) {
	out := new(KillCommandResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/KillCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) SetCommandPriority(ctx context.Context, in *SetCommandPriorityRequest, opts ...grpc.CallOption) (*SetCommandPriorityResponse, error) {
	out := new(SetCommandPriorityResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/SetCommandPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) LaunchCommand(ctx context.Context, in *LaunchCommandRequest, opts ...grpc.CallOption) (*LaunchCommandResponse, error) {
	out := new(LaunchCommandResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/LaunchCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTensorboards(ctx context.Context, in *GetTensorboardsRequest, opts ...grpc.CallOption) (*GetTensorboardsResponse, error) {
	out := new(GetTensorboardsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTensorboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTensorboard(ctx context.Context, in *GetTensorboardRequest, opts ...grpc.CallOption) (*GetTensorboardResponse, error) {
	out := new(GetTensorboardResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) KillTensorboard(ctx context.Context, in *KillTensorboardRequest, opts ...grpc.CallOption) (*KillTensorboardResponse, error) {
	out := new(KillTensorboardResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/KillTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) SetTensorboardPriority(ctx context.Context, in *SetTensorboardPriorityRequest, opts ...grpc.CallOption) (*SetTensorboardPriorityResponse, error) {
	out := new(SetTensorboardPriorityResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/SetTensorboardPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) LaunchTensorboard(ctx context.Context, in *LaunchTensorboardRequest, opts ...grpc.CallOption) (*LaunchTensorboardResponse, error) {
	out := new(LaunchTensorboardResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/LaunchTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetActiveTasksCount(ctx context.Context, in *GetActiveTasksCountRequest, opts ...grpc.CallOption) (*GetActiveTasksCountResponse, error) {
	out := new(GetActiveTasksCountResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetActiveTasksCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelResponse, error) {
	out := new(GetModelResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostModel(ctx context.Context, in *PostModelRequest, opts ...grpc.CallOption) (*PostModelResponse, error) {
	out := new(PostModelResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PatchModel(ctx context.Context, in *PatchModelRequest, opts ...grpc.CallOption) (*PatchModelResponse, error) {
	out := new(PatchModelResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PatchModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ArchiveModel(ctx context.Context, in *ArchiveModelRequest, opts ...grpc.CallOption) (*ArchiveModelResponse, error) {
	out := new(ArchiveModelResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ArchiveModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) UnarchiveModel(ctx context.Context, in *UnarchiveModelRequest, opts ...grpc.CallOption) (*UnarchiveModelResponse, error) {
	out := new(UnarchiveModelResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/UnarchiveModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) MoveModel(ctx context.Context, in *MoveModelRequest, opts ...grpc.CallOption) (*MoveModelResponse, error) {
	out := new(MoveModelResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/MoveModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error) {
	out := new(DeleteModelResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetModels(ctx context.Context, in *GetModelsRequest, opts ...grpc.CallOption) (*GetModelsResponse, error) {
	out := new(GetModelsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetModels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetModelLabels(ctx context.Context, in *GetModelLabelsRequest, opts ...grpc.CallOption) (*GetModelLabelsResponse, error) {
	out := new(GetModelLabelsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetModelLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetModelVersion(ctx context.Context, in *GetModelVersionRequest, opts ...grpc.CallOption) (*GetModelVersionResponse, error) {
	out := new(GetModelVersionResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetModelVersions(ctx context.Context, in *GetModelVersionsRequest, opts ...grpc.CallOption) (*GetModelVersionsResponse, error) {
	out := new(GetModelVersionsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetModelVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostModelVersion(ctx context.Context, in *PostModelVersionRequest, opts ...grpc.CallOption) (*PostModelVersionResponse, error) {
	out := new(PostModelVersionResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PatchModelVersion(ctx context.Context, in *PatchModelVersionRequest, opts ...grpc.CallOption) (*PatchModelVersionResponse, error) {
	out := new(PatchModelVersionResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PatchModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteModelVersion(ctx context.Context, in *DeleteModelVersionRequest, opts ...grpc.CallOption) (*DeleteModelVersionResponse, error) {
	out := new(DeleteModelVersionResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteModelVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetCheckpoint(ctx context.Context, in *GetCheckpointRequest, opts ...grpc.CallOption) (*GetCheckpointResponse, error) {
	out := new(GetCheckpointResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostCheckpointMetadata(ctx context.Context, in *PostCheckpointMetadataRequest, opts ...grpc.CallOption) (*PostCheckpointMetadataResponse, error) {
	out := new(PostCheckpointMetadataResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostCheckpointMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteCheckpoints(ctx context.Context, in *DeleteCheckpointsRequest, opts ...grpc.CallOption) (*DeleteCheckpointsResponse, error) {
	out := new(DeleteCheckpointsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteCheckpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetSearcherEvents(ctx context.Context, in *GetSearcherEventsRequest, opts ...grpc.CallOption) (*GetSearcherEventsResponse, error) {
	out := new(GetSearcherEventsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetSearcherEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostSearcherOperations(ctx context.Context, in *PostSearcherOperationsRequest, opts ...grpc.CallOption) (*PostSearcherOperationsResponse, error) {
	out := new(PostSearcherOperationsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostSearcherOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) MetricNames(ctx context.Context, in *MetricNamesRequest, opts ...grpc.CallOption) (Determined_MetricNamesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[7], "/determined.api.v1.Determined/MetricNames", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedMetricNamesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_MetricNamesClient interface {
	Recv() (*MetricNamesResponse, error)
	grpc.ClientStream
}

type determinedMetricNamesClient struct {
	grpc.ClientStream
}

func (x *determinedMetricNamesClient) Recv() (*MetricNamesResponse, error) {
	m := new(MetricNamesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) MetricBatches(ctx context.Context, in *MetricBatchesRequest, opts ...grpc.CallOption) (Determined_MetricBatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[8], "/determined.api.v1.Determined/MetricBatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedMetricBatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_MetricBatchesClient interface {
	Recv() (*MetricBatchesResponse, error)
	grpc.ClientStream
}

type determinedMetricBatchesClient struct {
	grpc.ClientStream
}

func (x *determinedMetricBatchesClient) Recv() (*MetricBatchesResponse, error) {
	m := new(MetricBatchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) TrialsSnapshot(ctx context.Context, in *TrialsSnapshotRequest, opts ...grpc.CallOption) (Determined_TrialsSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[9], "/determined.api.v1.Determined/TrialsSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedTrialsSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_TrialsSnapshotClient interface {
	Recv() (*TrialsSnapshotResponse, error)
	grpc.ClientStream
}

type determinedTrialsSnapshotClient struct {
	grpc.ClientStream
}

func (x *determinedTrialsSnapshotClient) Recv() (*TrialsSnapshotResponse, error) {
	m := new(TrialsSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) TrialsSample(ctx context.Context, in *TrialsSampleRequest, opts ...grpc.CallOption) (Determined_TrialsSampleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[10], "/determined.api.v1.Determined/TrialsSample", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedTrialsSampleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_TrialsSampleClient interface {
	Recv() (*TrialsSampleResponse, error)
	grpc.ClientStream
}

type determinedTrialsSampleClient struct {
	grpc.ClientStream
}

func (x *determinedTrialsSampleClient) Recv() (*TrialsSampleResponse, error) {
	m := new(TrialsSampleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *determinedClient) GetResourcePools(ctx context.Context, in *GetResourcePoolsRequest, opts ...grpc.CallOption) (*GetResourcePoolsResponse, error) {
	out := new(GetResourcePoolsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetResourcePools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ComputeHPImportance(ctx context.Context, in *ComputeHPImportanceRequest, opts ...grpc.CallOption) (*ComputeHPImportanceResponse, error) {
	out := new(ComputeHPImportanceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ComputeHPImportance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetHPImportance(ctx context.Context, in *GetHPImportanceRequest, opts ...grpc.CallOption) (Determined_GetHPImportanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Determined_serviceDesc.Streams[11], "/determined.api.v1.Determined/GetHPImportance", opts...)
	if err != nil {
		return nil, err
	}
	x := &determinedGetHPImportanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Determined_GetHPImportanceClient interface {
	Recv() (*GetHPImportanceResponse, error)
	grpc.ClientStream
}

type determinedGetHPImportanceClient struct {
	grpc.ClientStream
}

func (x *determinedGetHPImportanceClient) Recv() (*GetHPImportanceResponse, error) {
	m := new(GetHPImportanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *determinedClient) ResourceAllocationRaw(ctx context.Context, in *ResourceAllocationRawRequest, opts ...grpc.CallOption) (*ResourceAllocationRawResponse, error) {
	out := new(ResourceAllocationRawResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ResourceAllocationRaw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ResourceAllocationAggregated(ctx context.Context, in *ResourceAllocationAggregatedRequest, opts ...grpc.CallOption) (*ResourceAllocationAggregatedResponse, error) {
	out := new(ResourceAllocationAggregatedResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ResourceAllocationAggregated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetWorkspace(ctx context.Context, in *GetWorkspaceRequest, opts ...grpc.CallOption) (*GetWorkspaceResponse, error) {
	out := new(GetWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetWorkspaceProjects(ctx context.Context, in *GetWorkspaceProjectsRequest, opts ...grpc.CallOption) (*GetWorkspaceProjectsResponse, error) {
	out := new(GetWorkspaceProjectsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetWorkspaceProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetWorkspaces(ctx context.Context, in *GetWorkspacesRequest, opts ...grpc.CallOption) (*GetWorkspacesResponse, error) {
	out := new(GetWorkspacesResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetWorkspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostWorkspace(ctx context.Context, in *PostWorkspaceRequest, opts ...grpc.CallOption) (*PostWorkspaceResponse, error) {
	out := new(PostWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PatchWorkspace(ctx context.Context, in *PatchWorkspaceRequest, opts ...grpc.CallOption) (*PatchWorkspaceResponse, error) {
	out := new(PatchWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PatchWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteWorkspace(ctx context.Context, in *DeleteWorkspaceRequest, opts ...grpc.CallOption) (*DeleteWorkspaceResponse, error) {
	out := new(DeleteWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ArchiveWorkspace(ctx context.Context, in *ArchiveWorkspaceRequest, opts ...grpc.CallOption) (*ArchiveWorkspaceResponse, error) {
	out := new(ArchiveWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ArchiveWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) UnarchiveWorkspace(ctx context.Context, in *UnarchiveWorkspaceRequest, opts ...grpc.CallOption) (*UnarchiveWorkspaceResponse, error) {
	out := new(UnarchiveWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/UnarchiveWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PinWorkspace(ctx context.Context, in *PinWorkspaceRequest, opts ...grpc.CallOption) (*PinWorkspaceResponse, error) {
	out := new(PinWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PinWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) UnpinWorkspace(ctx context.Context, in *UnpinWorkspaceRequest, opts ...grpc.CallOption) (*UnpinWorkspaceResponse, error) {
	out := new(UnpinWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/UnpinWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostProject(ctx context.Context, in *PostProjectRequest, opts ...grpc.CallOption) (*PostProjectResponse, error) {
	out := new(PostProjectResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) AddProjectNote(ctx context.Context, in *AddProjectNoteRequest, opts ...grpc.CallOption) (*AddProjectNoteResponse, error) {
	out := new(AddProjectNoteResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/AddProjectNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PutProjectNotes(ctx context.Context, in *PutProjectNotesRequest, opts ...grpc.CallOption) (*PutProjectNotesResponse, error) {
	out := new(PutProjectNotesResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PutProjectNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PatchProject(ctx context.Context, in *PatchProjectRequest, opts ...grpc.CallOption) (*PatchProjectResponse, error) {
	out := new(PatchProjectResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PatchProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ArchiveProject(ctx context.Context, in *ArchiveProjectRequest, opts ...grpc.CallOption) (*ArchiveProjectResponse, error) {
	out := new(ArchiveProjectResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ArchiveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) UnarchiveProject(ctx context.Context, in *UnarchiveProjectRequest, opts ...grpc.CallOption) (*UnarchiveProjectResponse, error) {
	out := new(UnarchiveProjectResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/UnarchiveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) MoveProject(ctx context.Context, in *MoveProjectRequest, opts ...grpc.CallOption) (*MoveProjectResponse, error) {
	out := new(MoveProjectResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/MoveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) MoveExperiment(ctx context.Context, in *MoveExperimentRequest, opts ...grpc.CallOption) (*MoveExperimentResponse, error) {
	out := new(MoveExperimentResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/MoveExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetWebhooks(ctx context.Context, in *GetWebhooksRequest, opts ...grpc.CallOption) (*GetWebhooksResponse, error) {
	out := new(GetWebhooksResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostWebhook(ctx context.Context, in *PostWebhookRequest, opts ...grpc.CallOption) (*PostWebhookResponse, error) {
	out := new(PostWebhookResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error) {
	out := new(DeleteWebhookResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookResponse, error) {
	out := new(TestWebhookResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/TestWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetGroup(ctx context.Context, in *GetGroupRequest, opts ...grpc.CallOption) (*GetGroupResponse, error) {
	out := new(GetGroupResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error) {
	out := new(GetGroupsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) DeleteGroup(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetPermissionsSummary(ctx context.Context, in *GetPermissionsSummaryRequest, opts ...grpc.CallOption) (*GetPermissionsSummaryResponse, error) {
	out := new(GetPermissionsSummaryResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetPermissionsSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetGroupsAndUsersAssignedToWorkspace(ctx context.Context, in *GetGroupsAndUsersAssignedToWorkspaceRequest, opts ...grpc.CallOption) (*GetGroupsAndUsersAssignedToWorkspaceResponse, error) {
	out := new(GetGroupsAndUsersAssignedToWorkspaceResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetGroupsAndUsersAssignedToWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetRolesByID(ctx context.Context, in *GetRolesByIDRequest, opts ...grpc.CallOption) (*GetRolesByIDResponse, error) {
	out := new(GetRolesByIDResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetRolesByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetRolesAssignedToUser(ctx context.Context, in *GetRolesAssignedToUserRequest, opts ...grpc.CallOption) (*GetRolesAssignedToUserResponse, error) {
	out := new(GetRolesAssignedToUserResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetRolesAssignedToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetRolesAssignedToGroup(ctx context.Context, in *GetRolesAssignedToGroupRequest, opts ...grpc.CallOption) (*GetRolesAssignedToGroupResponse, error) {
	out := new(GetRolesAssignedToGroupResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetRolesAssignedToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) SearchRolesAssignableToScope(ctx context.Context, in *SearchRolesAssignableToScopeRequest, opts ...grpc.CallOption) (*SearchRolesAssignableToScopeResponse, error) {
	out := new(SearchRolesAssignableToScopeResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/SearchRolesAssignableToScope", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) AssignRoles(ctx context.Context, in *AssignRolesRequest, opts ...grpc.CallOption) (*AssignRolesResponse, error) {
	out := new(AssignRolesResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/AssignRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) RemoveAssignments(ctx context.Context, in *RemoveAssignmentsRequest, opts ...grpc.CallOption) (*RemoveAssignmentsResponse, error) {
	out := new(RemoveAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/RemoveAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) PostUserActivity(ctx context.Context, in *PostUserActivityRequest, opts ...grpc.CallOption) (*PostUserActivityResponse, error) {
	out := new(PostUserActivityResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/PostUserActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *determinedClient) GetProjectsByUserActivity(ctx context.Context, in *GetProjectsByUserActivityRequest, opts ...grpc.CallOption) (*GetProjectsByUserActivityResponse, error) {
	out := new(GetProjectsByUserActivityResponse)
	err := c.cc.Invoke(ctx, "/determined.api.v1.Determined/GetProjectsByUserActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeterminedServer is the server API for Determined service.
type DeterminedServer interface {
	// Login the user.
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Get the current user.
	CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserResponse, error)
	// Logout the user.
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// Get a list of users.
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	// Get a user's settings for website
	GetUserSetting(context.Context, *GetUserSettingRequest) (*GetUserSettingResponse, error)
	// Reset a user's settings for website
	ResetUserSetting(context.Context, *ResetUserSettingRequest) (*ResetUserSettingResponse, error)
	// Patch a user's settings for website
	PostUserSetting(context.Context, *PostUserSettingRequest) (*PostUserSettingResponse, error)
	// Get the requested user.
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Get the requested user with username.
	GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*GetUserByUsernameResponse, error)
	// Get the current user.
	GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error)
	// Create a new user.
	PostUser(context.Context, *PostUserRequest) (*PostUserResponse, error)
	// Set the requested user's password.
	SetUserPassword(context.Context, *SetUserPasswordRequest) (*SetUserPasswordResponse, error)
	// Patch a user's fields.
	PatchUser(context.Context, *PatchUserRequest) (*PatchUserResponse, error)
	// Get telemetry information.
	GetTelemetry(context.Context, *GetTelemetryRequest) (*GetTelemetryResponse, error)
	// Get master information.
	GetMaster(context.Context, *GetMasterRequest) (*GetMasterResponse, error)
	// Get master config.
	GetMasterConfig(context.Context, *GetMasterConfigRequest) (*GetMasterConfigResponse, error)
	// Stream master logs.
	MasterLogs(*MasterLogsRequest, Determined_MasterLogsServer) error
	// Get a set of agents from the cluster.
	GetAgents(context.Context, *GetAgentsRequest) (*GetAgentsResponse, error)
	// Get the requested agent.
	GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error)
	// Get all the slots for an agent.
	GetSlots(context.Context, *GetSlotsRequest) (*GetSlotsResponse, error)
	// Get the requested slot for an agent.
	GetSlot(context.Context, *GetSlotRequest) (*GetSlotResponse, error)
	// Enable the agent.
	EnableAgent(context.Context, *EnableAgentRequest) (*EnableAgentResponse, error)
	// Disable the agent.
	DisableAgent(context.Context, *DisableAgentRequest) (*DisableAgentResponse, error)
	// Enable the slot.
	EnableSlot(context.Context, *EnableSlotRequest) (*EnableSlotResponse, error)
	// Disable the slot.
	DisableSlot(context.Context, *DisableSlotRequest) (*DisableSlotResponse, error)
	// Create an experiment.
	CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentResponse, error)
	// Get the requested experiment.
	GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentResponse, error)
	// Get a list of experiments.
	GetExperiments(context.Context, *GetExperimentsRequest) (*GetExperimentsResponse, error)
	// Get the model definition of an experiment.
	GetModelDef(context.Context, *GetModelDefRequest) (*GetModelDefResponse, error)
	// Get the model definition file tree of an experiment.
	GetModelDefTree(context.Context, *GetModelDefTreeRequest) (*GetModelDefTreeResponse, error)
	// Get one file content of model definition of an experiment.
	GetModelDefFile(context.Context, *GetModelDefFileRequest) (*GetModelDefFileResponse, error)
	// Get a list of unique experiment labels (sorted by popularity).
	GetExperimentLabels(context.Context, *GetExperimentLabelsRequest) (*GetExperimentLabelsResponse, error)
	// Get the validation history for an experiment.
	GetExperimentValidationHistory(context.Context, *GetExperimentValidationHistoryRequest) (*GetExperimentValidationHistoryResponse, error)
	// Activate an experiment.
	ActivateExperiment(context.Context, *ActivateExperimentRequest) (*ActivateExperimentResponse, error)
	// Pause an experiment.
	PauseExperiment(context.Context, *PauseExperimentRequest) (*PauseExperimentResponse, error)
	// Cancel an experiment.
	CancelExperiment(context.Context, *CancelExperimentRequest) (*CancelExperimentResponse, error)
	// Kill an experiment.
	KillExperiment(context.Context, *KillExperimentRequest) (*KillExperimentResponse, error)
	// Archive an experiment.
	ArchiveExperiment(context.Context, *ArchiveExperimentRequest) (*ArchiveExperimentResponse, error)
	// Unarchive an experiment.
	UnarchiveExperiment(context.Context, *UnarchiveExperimentRequest) (*UnarchiveExperimentResponse, error)
	// Patch an experiment's fields.
	PatchExperiment(context.Context, *PatchExperimentRequest) (*PatchExperimentResponse, error)
	// Delete the requested experiment.
	DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentResponse, error)
	// Get the best searcher validation for an experiment by the given metric.
	GetBestSearcherValidationMetric(context.Context, *GetBestSearcherValidationMetricRequest) (*GetBestSearcherValidationMetricResponse, error)
	// Get a list of checkpoints for an experiment.
	GetExperimentCheckpoints(context.Context, *GetExperimentCheckpointsRequest) (*GetExperimentCheckpointsResponse, error)
	// Preview hyperparameter search.
	PreviewHPSearch(context.Context, *PreviewHPSearchRequest) (*PreviewHPSearchResponse, error)
	// Get the list of trials for an experiment.
	GetExperimentTrials(context.Context, *GetExperimentTrialsRequest) (*GetExperimentTrialsResponse, error)
	// Return downsampled metrics from multiple trials to compare them
	// side-by-side.
	CompareTrials(context.Context, *CompareTrialsRequest) (*CompareTrialsResponse, error)
	// Return trials matching a set of TrialFilters.
	QueryTrials(context.Context, *QueryTrialsRequest) (*QueryTrialsResponse, error)
	// Update tags for trials by IDs or filters.
	UpdateTrialTags(context.Context, *UpdateTrialTagsRequest) (*UpdateTrialTagsResponse, error)
	// Return all collectiions for a specific project.
	GetTrialsCollections(context.Context, *GetTrialsCollectionsRequest) (*GetTrialsCollectionsResponse, error)
	// Create a Trial Collection for a set of TrialFilters.
	CreateTrialsCollection(context.Context, *CreateTrialsCollectionRequest) (*CreateTrialsCollectionResponse, error)
	// Modify collection attributes: name, filters, etc.
	PatchTrialsCollection(context.Context, *PatchTrialsCollectionRequest) (*PatchTrialsCollectionResponse, error)
	// Removes a TrialCollection.
	DeleteTrialsCollection(context.Context, *DeleteTrialsCollectionRequest) (*DeleteTrialsCollectionResponse, error)
	// Get a single trial.
	GetTrial(context.Context, *GetTrialRequest) (*GetTrialResponse, error)
	// Get the list of workloads for a trial.
	GetTrialWorkloads(context.Context, *GetTrialWorkloadsRequest) (*GetTrialWorkloadsResponse, error)
	// Deprecated: Do not use.
	// Stream trial logs.
	TrialLogs(*TrialLogsRequest, Determined_TrialLogsServer) error
	// Deprecated: Do not use.
	// Stream trial log fields.
	TrialLogsFields(*TrialLogsFieldsRequest, Determined_TrialLogsFieldsServer) error
	// Downsample metrics collected during a trial.
	SummarizeTrial(context.Context, *SummarizeTrialRequest) (*SummarizeTrialResponse, error)
	// Set allocation to ready state.
	AllocationReady(context.Context, *AllocationReadyRequest) (*AllocationReadyResponse, error)
	// Set allocation to waiting state.
	AllocationWaiting(context.Context, *AllocationWaitingRequest) (*AllocationWaitingResponse, error)
	// Stream task logs.
	TaskLogs(*TaskLogsRequest, Determined_TaskLogsServer) error
	// Stream task log fields.
	TaskLogsFields(*TaskLogsFieldsRequest, Determined_TaskLogsFieldsServer) error
	// Stream trial profiler metrics.
	GetTrialProfilerMetrics(*GetTrialProfilerMetricsRequest, Determined_GetTrialProfilerMetricsServer) error
	// Stream the available series in a trial's profiler metrics.
	GetTrialProfilerAvailableSeries(*GetTrialProfilerAvailableSeriesRequest, Determined_GetTrialProfilerAvailableSeriesServer) error
	// Persist the given TrialProfilerMetricsBatch. The trial ID is in the labels.
	PostTrialProfilerMetricsBatch(context.Context, *PostTrialProfilerMetricsBatchRequest) (*PostTrialProfilerMetricsBatchResponse, error)
	// Kill a trial.
	KillTrial(context.Context, *KillTrialRequest) (*KillTrialResponse, error)
	// Get a list of checkpoints for a trial.
	GetTrialCheckpoints(context.Context, *GetTrialCheckpointsRequest) (*GetTrialCheckpointsResponse, error)
	// Long poll preemption signals for the given allocation. If the allocation
	// has been preempted when called, it will return so immediately. Otherwise,
	// the connection will be kept open until the timeout is reached or
	// the allocation is preempted.
	AllocationPreemptionSignal(context.Context, *AllocationPreemptionSignalRequest) (*AllocationPreemptionSignalResponse, error)
	// Report the receipt of a signal to stop the given allocation early.
	// This is used to communicate back from a SLURM job that it has been
	// notified of a pending preememption. Upon a call to this API
	// the RM should then trigger a checkpoint and immediate exit.
	AllocationPendingPreemptionSignal(context.Context, *AllocationPendingPreemptionSignalRequest) (*AllocationPendingPreemptionSignalResponse, error)
	// Acknowledge the receipt of a signal to stop the given allocation early.
	// This is used indicate and exit 0 isn't final; specifically, it is used
	// for HP search directed early stops and preemption signals (not necessarily
	// just scheduler preemption).
	AckAllocationPreemptionSignal(context.Context, *AckAllocationPreemptionSignalRequest) (*AckAllocationPreemptionSignalResponse, error)
	// Mark the given reservation (container, pod, etc) within an allocation as
	// a daemon reservation. In the exit of a successful exit, Determined will
	// wait for all resources to exit - unless they are marked as daemon
	// resources, in which case Determined will clean them up regardless of
	// exit status after all non-daemon resources have exited.
	MarkAllocationResourcesDaemon(context.Context, *MarkAllocationResourcesDaemonRequest) (*MarkAllocationResourcesDaemonResponse, error)
	// Gather an allocation's rendezvous info. Blocks until all trial containers
	// connect to gather their rendezvous information and responds to them all at
	// once.
	AllocationRendezvousInfo(context.Context, *AllocationRendezvousInfoRequest) (*AllocationRendezvousInfoResponse, error)
	// PostAllocationProxyAddress sets the proxy address to use when proxying to
	// services provided by an allocation. Upon receipt, the master will also
	// register any proxies specified by the task.
	PostAllocationProxyAddress(context.Context, *PostAllocationProxyAddressRequest) (*PostAllocationProxyAddressResponse, error)
	// AllocationAllGather performs an all gather through the master. An
	// allocation can only perform once all gather at a time.
	AllocationAllGather(context.Context, *AllocationAllGatherRequest) (*AllocationAllGatherResponse, error)
	// NotifyContainterRunning is used to notify the master that the container
	// is running.  On HPC, the launcher will report a state of "Running" as
	// soon as Slurm starts the job, but the container may be in the process
	// of getting pulled down from the Internet, so the experiment is not
	// really considered to be in a "Running" state until all the containers
	// that are part of the experiment are running and not being pulled.
	NotifyContainerRunning(context.Context, *NotifyContainerRunningRequest) (*NotifyContainerRunningResponse, error)
	// Get the current searcher operation.
	GetCurrentTrialSearcherOperation(context.Context, *GetCurrentTrialSearcherOperationRequest) (*GetCurrentTrialSearcherOperationResponse, error)
	// Reports to the searcher that the trial has completed the given searcher
	// operation.
	CompleteTrialSearcherValidation(context.Context, *CompleteTrialSearcherValidationRequest) (*CompleteTrialSearcherValidationResponse, error)
	// Reports to the searcher that the trial has completed the current
	// requested amount of training with the given searcher validation
	// metric.
	ReportTrialSearcherEarlyExit(context.Context, *ReportTrialSearcherEarlyExitRequest) (*ReportTrialSearcherEarlyExitResponse, error)
	// For bookkeeping, updates the progress towards to current requested searcher
	// training length.
	ReportTrialProgress(context.Context, *ReportTrialProgressRequest) (*ReportTrialProgressResponse, error)
	// For bookkeeping, update trial runner metadata (currently just state).
	PostTrialRunnerMetadata(context.Context, *PostTrialRunnerMetadataRequest) (*PostTrialRunnerMetadataResponse, error)
	// Record training metrics for specified training.
	ReportTrialTrainingMetrics(context.Context, *ReportTrialTrainingMetricsRequest) (*ReportTrialTrainingMetricsResponse, error)
	// Record validation metrics.
	ReportTrialValidationMetrics(context.Context, *ReportTrialValidationMetricsRequest) (*ReportTrialValidationMetricsResponse, error)
	// Record a checkpoint.
	ReportCheckpoint(context.Context, *ReportCheckpointRequest) (*ReportCheckpointResponse, error)
	// Get a list of jobs in queue.
	GetJobs(context.Context, *GetJobsRequest) (*GetJobsResponse, error)
	// Get job queue stats for a resource pool.
	GetJobQueueStats(context.Context, *GetJobQueueStatsRequest) (*GetJobQueueStatsResponse, error)
	// Control the job queues.
	UpdateJobQueue(context.Context, *UpdateJobQueueRequest) (*UpdateJobQueueResponse, error)
	// Get a list of templates.
	GetTemplates(context.Context, *GetTemplatesRequest) (*GetTemplatesResponse, error)
	// Get the requested template.
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	// Update or create (upsert) the requested template.
	PutTemplate(context.Context, *PutTemplateRequest) (*PutTemplateResponse, error)
	// Delete a template.
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	// Get a list of notebooks.
	GetNotebooks(context.Context, *GetNotebooksRequest) (*GetNotebooksResponse, error)
	// Get the requested notebook.
	GetNotebook(context.Context, *GetNotebookRequest) (*GetNotebookResponse, error)
	// Send notebook idle data to master
	IdleNotebook(context.Context, *IdleNotebookRequest) (*IdleNotebookResponse, error)
	// Kill the requested notebook.
	KillNotebook(context.Context, *KillNotebookRequest) (*KillNotebookResponse, error)
	// Set the priority of the requested notebook.
	SetNotebookPriority(context.Context, *SetNotebookPriorityRequest) (*SetNotebookPriorityResponse, error)
	// Launch a notebook.
	LaunchNotebook(context.Context, *LaunchNotebookRequest) (*LaunchNotebookResponse, error)
	// Get a list of shells.
	GetShells(context.Context, *GetShellsRequest) (*GetShellsResponse, error)
	// Get the requested shell.
	GetShell(context.Context, *GetShellRequest) (*GetShellResponse, error)
	// Kill the requested shell.
	KillShell(context.Context, *KillShellRequest) (*KillShellResponse, error)
	// Set the priority of the requested shell.
	SetShellPriority(context.Context, *SetShellPriorityRequest) (*SetShellPriorityResponse, error)
	// Launch a shell.
	LaunchShell(context.Context, *LaunchShellRequest) (*LaunchShellResponse, error)
	// Get a list of commands.
	GetCommands(context.Context, *GetCommandsRequest) (*GetCommandsResponse, error)
	// Get the requested command.
	GetCommand(context.Context, *GetCommandRequest) (*GetCommandResponse, error)
	// Kill the requested command.
	KillCommand(context.Context, *KillCommandRequest) (*KillCommandResponse, error)
	// Set the priority of the requested command.
	SetCommandPriority(context.Context, *SetCommandPriorityRequest) (*SetCommandPriorityResponse, error)
	// Launch a command.
	LaunchCommand(context.Context, *LaunchCommandRequest) (*LaunchCommandResponse, error)
	// Get a list of tensorboards.
	GetTensorboards(context.Context, *GetTensorboardsRequest) (*GetTensorboardsResponse, error)
	// Get the requested tensorboard.
	GetTensorboard(context.Context, *GetTensorboardRequest) (*GetTensorboardResponse, error)
	// Kill the requested tensorboard.
	KillTensorboard(context.Context, *KillTensorboardRequest) (*KillTensorboardResponse, error)
	// Set the priority of the requested TensorBoard.
	SetTensorboardPriority(context.Context, *SetTensorboardPriorityRequest) (*SetTensorboardPriorityResponse, error)
	// Launch a tensorboard.
	LaunchTensorboard(context.Context, *LaunchTensorboardRequest) (*LaunchTensorboardResponse, error)
	// Get a count of active tasks.
	GetActiveTasksCount(context.Context, *GetActiveTasksCountRequest) (*GetActiveTasksCountResponse, error)
	// Check the status of a requested task.
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	// Get the requested model.
	GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error)
	// Create a model in the registry.
	PostModel(context.Context, *PostModelRequest) (*PostModelResponse, error)
	// Patch a model's fields.
	PatchModel(context.Context, *PatchModelRequest) (*PatchModelResponse, error)
	// Archive a model
	ArchiveModel(context.Context, *ArchiveModelRequest) (*ArchiveModelResponse, error)
	// Unarchive a model
	UnarchiveModel(context.Context, *UnarchiveModelRequest) (*UnarchiveModelResponse, error)
	// Move a model into a workspace
	MoveModel(context.Context, *MoveModelRequest) (*MoveModelResponse, error)
	// Delete a model
	DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error)
	// Get a list of models.
	GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error)
	// Get a list of unique model labels (sorted by popularity).
	GetModelLabels(context.Context, *GetModelLabelsRequest) (*GetModelLabelsResponse, error)
	// Get the requested model version.
	GetModelVersion(context.Context, *GetModelVersionRequest) (*GetModelVersionResponse, error)
	// Get a list of versions for the requested model.
	GetModelVersions(context.Context, *GetModelVersionsRequest) (*GetModelVersionsResponse, error)
	// Create a model version.
	PostModelVersion(context.Context, *PostModelVersionRequest) (*PostModelVersionResponse, error)
	// Patch a model version's fields.
	PatchModelVersion(context.Context, *PatchModelVersionRequest) (*PatchModelVersionResponse, error)
	// Delete a model version
	DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*DeleteModelVersionResponse, error)
	// Get the requested checkpoint.
	GetCheckpoint(context.Context, *GetCheckpointRequest) (*GetCheckpointResponse, error)
	// Update checkpoint metadata.
	PostCheckpointMetadata(context.Context, *PostCheckpointMetadataRequest) (*PostCheckpointMetadataResponse, error)
	// Delete Checkpoints.
	DeleteCheckpoints(context.Context, *DeleteCheckpointsRequest) (*DeleteCheckpointsResponse, error)
	// Get the list of custom searcher events with long polling.
	GetSearcherEvents(context.Context, *GetSearcherEventsRequest) (*GetSearcherEventsResponse, error)
	// Submit operations to a custom searcher.
	PostSearcherOperations(context.Context, *PostSearcherOperationsRequest) (*PostSearcherOperationsResponse, error)
	// Get the set of metric names recorded for an experiment.
	MetricNames(*MetricNamesRequest, Determined_MetricNamesServer) error
	// Get the milestones (in batches processed) at which a metric is recorded by
	// an experiment.
	MetricBatches(*MetricBatchesRequest, Determined_MetricBatchesServer) error
	// Get a snapshot of a metric across all trials at a certain point of
	// progress.
	TrialsSnapshot(*TrialsSnapshotRequest, Determined_TrialsSnapshotServer) error
	// Get a sample of the metrics over time for a sample of the trials.
	TrialsSample(*TrialsSampleRequest, Determined_TrialsSampleServer) error
	// Get a list of all resource pools from the cluster.
	GetResourcePools(context.Context, *GetResourcePoolsRequest) (*GetResourcePoolsResponse, error)
	// Trigger the computation of hyperparameter importance on-demand for a
	// specific metric on a specific experiment. The status and results can be
	// retrieved with GetHPImportance.
	ComputeHPImportance(context.Context, *ComputeHPImportanceRequest) (*ComputeHPImportanceResponse, error)
	// Retrieve the latest computation of hyperparameter importance. Currently
	// this is triggered for training loss (if emitted) and the searcher metric
	// after 10% increments in an experiment's progress, but no more than every 10
	// minutes.
	GetHPImportance(*GetHPImportanceRequest, Determined_GetHPImportanceServer) error
	// Deprecated: Do not use.
	// Get a detailed view of resource allocation during the given time period.
	ResourceAllocationRaw(context.Context, *ResourceAllocationRawRequest) (*ResourceAllocationRawResponse, error)
	// Get an aggregated view of resource allocation during the given time period.
	ResourceAllocationAggregated(context.Context, *ResourceAllocationAggregatedRequest) (*ResourceAllocationAggregatedResponse, error)
	// Get the requested workspace.
	GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error)
	// Get projects associated with a workspace.
	GetWorkspaceProjects(context.Context, *GetWorkspaceProjectsRequest) (*GetWorkspaceProjectsResponse, error)
	// Get a list of workspaces.
	GetWorkspaces(context.Context, *GetWorkspacesRequest) (*GetWorkspacesResponse, error)
	// Create a workspace.
	PostWorkspace(context.Context, *PostWorkspaceRequest) (*PostWorkspaceResponse, error)
	// Update a workspace.
	PatchWorkspace(context.Context, *PatchWorkspaceRequest) (*PatchWorkspaceResponse, error)
	// Delete a workspace.
	DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error)
	// Archive a workspace.
	ArchiveWorkspace(context.Context, *ArchiveWorkspaceRequest) (*ArchiveWorkspaceResponse, error)
	// Unarchive a workspace.
	UnarchiveWorkspace(context.Context, *UnarchiveWorkspaceRequest) (*UnarchiveWorkspaceResponse, error)
	// Pin a workspace.
	PinWorkspace(context.Context, *PinWorkspaceRequest) (*PinWorkspaceResponse, error)
	// Unpin a workspace.
	UnpinWorkspace(context.Context, *UnpinWorkspaceRequest) (*UnpinWorkspaceResponse, error)
	// Get the requested project.
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// Create a project.
	PostProject(context.Context, *PostProjectRequest) (*PostProjectResponse, error)
	// Add a note to a project.
	AddProjectNote(context.Context, *AddProjectNoteRequest) (*AddProjectNoteResponse, error)
	// Set project notes.
	PutProjectNotes(context.Context, *PutProjectNotesRequest) (*PutProjectNotesResponse, error)
	// Update a project.
	PatchProject(context.Context, *PatchProjectRequest) (*PatchProjectResponse, error)
	// Delete a project.
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// Archive a project.
	ArchiveProject(context.Context, *ArchiveProjectRequest) (*ArchiveProjectResponse, error)
	// Unarchive a project.
	UnarchiveProject(context.Context, *UnarchiveProjectRequest) (*UnarchiveProjectResponse, error)
	// Move a project into a workspace.
	MoveProject(context.Context, *MoveProjectRequest) (*MoveProjectResponse, error)
	// Move an experiment into a project.
	MoveExperiment(context.Context, *MoveExperimentRequest) (*MoveExperimentResponse, error)
	// Get a list of webhooks.
	GetWebhooks(context.Context, *GetWebhooksRequest) (*GetWebhooksResponse, error)
	// Create a webhook.
	// TODO(???): Simplify req/response structs?
	PostWebhook(context.Context, *PostWebhookRequest) (*PostWebhookResponse, error)
	// Delete a webhook.
	DeleteWebhook(context.Context, *DeleteWebhookRequest) (*DeleteWebhookResponse, error)
	// Test a webhook.
	TestWebhook(context.Context, *TestWebhookRequest) (*TestWebhookResponse, error)
	// Get a group by id.
	GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error)
	// Search for groups with optional filters.
	GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error)
	// Create a group with optional members on creation.
	CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	// Update group info.
	UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	// Remove a group.
	DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	// List all permissions for the logged in user in all scopes.
	GetPermissionsSummary(context.Context, *GetPermissionsSummaryRequest) (*GetPermissionsSummaryResponse, error)
	// Get groups and users assigned to a given workspace with what roles are
	// assigned.
	GetGroupsAndUsersAssignedToWorkspace(context.Context, *GetGroupsAndUsersAssignedToWorkspaceRequest) (*GetGroupsAndUsersAssignedToWorkspaceResponse, error)
	// Get a set of roles with the corresponding IDs.
	GetRolesByID(context.Context, *GetRolesByIDRequest) (*GetRolesByIDResponse, error)
	// Get the roles which are assigned to a user.
	GetRolesAssignedToUser(context.Context, *GetRolesAssignedToUserRequest) (*GetRolesAssignedToUserResponse, error)
	// Get the roles which are assigned to a group.
	GetRolesAssignedToGroup(context.Context, *GetRolesAssignedToGroupRequest) (*GetRolesAssignedToGroupResponse, error)
	// Search for roles assignable to a given scope.
	SearchRolesAssignableToScope(context.Context, *SearchRolesAssignableToScopeRequest) (*SearchRolesAssignableToScopeResponse, error)
	// ListRoles returns roles and groups/users granted that role.
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	// AssignRoles adds a set of role assignments to the system.
	AssignRoles(context.Context, *AssignRolesRequest) (*AssignRolesResponse, error)
	// RemoveAssignments removes a set of role assignments from the system.
	RemoveAssignments(context.Context, *RemoveAssignmentsRequest) (*RemoveAssignmentsResponse, error)
	// Patch a user's activity
	PostUserActivity(context.Context, *PostUserActivityRequest) (*PostUserActivityResponse, error)
	// Get projects by user activity
	GetProjectsByUserActivity(context.Context, *GetProjectsByUserActivityRequest) (*GetProjectsByUserActivityResponse, error)
}

// UnimplementedDeterminedServer can be embedded to have forward compatible implementations.
type UnimplementedDeterminedServer struct {
}

func (*UnimplementedDeterminedServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedDeterminedServer) CurrentUser(context.Context, *CurrentUserRequest) (*CurrentUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (*UnimplementedDeterminedServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (*UnimplementedDeterminedServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (*UnimplementedDeterminedServer) GetUserSetting(context.Context, *GetUserSettingRequest) (*GetUserSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSetting not implemented")
}
func (*UnimplementedDeterminedServer) ResetUserSetting(context.Context, *ResetUserSettingRequest) (*ResetUserSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserSetting not implemented")
}
func (*UnimplementedDeterminedServer) PostUserSetting(context.Context, *PostUserSettingRequest) (*PostUserSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUserSetting not implemented")
}
func (*UnimplementedDeterminedServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedDeterminedServer) GetUserByUsername(context.Context, *GetUserByUsernameRequest) (*GetUserByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByUsername not implemented")
}
func (*UnimplementedDeterminedServer) GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (*UnimplementedDeterminedServer) PostUser(context.Context, *PostUserRequest) (*PostUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUser not implemented")
}
func (*UnimplementedDeterminedServer) SetUserPassword(context.Context, *SetUserPasswordRequest) (*SetUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPassword not implemented")
}
func (*UnimplementedDeterminedServer) PatchUser(context.Context, *PatchUserRequest) (*PatchUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUser not implemented")
}
func (*UnimplementedDeterminedServer) GetTelemetry(context.Context, *GetTelemetryRequest) (*GetTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetry not implemented")
}
func (*UnimplementedDeterminedServer) GetMaster(context.Context, *GetMasterRequest) (*GetMasterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaster not implemented")
}
func (*UnimplementedDeterminedServer) GetMasterConfig(context.Context, *GetMasterConfigRequest) (*GetMasterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterConfig not implemented")
}
func (*UnimplementedDeterminedServer) MasterLogs(*MasterLogsRequest, Determined_MasterLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method MasterLogs not implemented")
}
func (*UnimplementedDeterminedServer) GetAgents(context.Context, *GetAgentsRequest) (*GetAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgents not implemented")
}
func (*UnimplementedDeterminedServer) GetAgent(context.Context, *GetAgentRequest) (*GetAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (*UnimplementedDeterminedServer) GetSlots(context.Context, *GetSlotsRequest) (*GetSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlots not implemented")
}
func (*UnimplementedDeterminedServer) GetSlot(context.Context, *GetSlotRequest) (*GetSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlot not implemented")
}
func (*UnimplementedDeterminedServer) EnableAgent(context.Context, *EnableAgentRequest) (*EnableAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAgent not implemented")
}
func (*UnimplementedDeterminedServer) DisableAgent(context.Context, *DisableAgentRequest) (*DisableAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAgent not implemented")
}
func (*UnimplementedDeterminedServer) EnableSlot(context.Context, *EnableSlotRequest) (*EnableSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableSlot not implemented")
}
func (*UnimplementedDeterminedServer) DisableSlot(context.Context, *DisableSlotRequest) (*DisableSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableSlot not implemented")
}
func (*UnimplementedDeterminedServer) CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperiment not implemented")
}
func (*UnimplementedDeterminedServer) GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperiment not implemented")
}
func (*UnimplementedDeterminedServer) GetExperiments(context.Context, *GetExperimentsRequest) (*GetExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperiments not implemented")
}
func (*UnimplementedDeterminedServer) GetModelDef(context.Context, *GetModelDefRequest) (*GetModelDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelDef not implemented")
}
func (*UnimplementedDeterminedServer) GetModelDefTree(context.Context, *GetModelDefTreeRequest) (*GetModelDefTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelDefTree not implemented")
}
func (*UnimplementedDeterminedServer) GetModelDefFile(context.Context, *GetModelDefFileRequest) (*GetModelDefFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelDefFile not implemented")
}
func (*UnimplementedDeterminedServer) GetExperimentLabels(context.Context, *GetExperimentLabelsRequest) (*GetExperimentLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentLabels not implemented")
}
func (*UnimplementedDeterminedServer) GetExperimentValidationHistory(context.Context, *GetExperimentValidationHistoryRequest) (*GetExperimentValidationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentValidationHistory not implemented")
}
func (*UnimplementedDeterminedServer) ActivateExperiment(context.Context, *ActivateExperimentRequest) (*ActivateExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateExperiment not implemented")
}
func (*UnimplementedDeterminedServer) PauseExperiment(context.Context, *PauseExperimentRequest) (*PauseExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseExperiment not implemented")
}
func (*UnimplementedDeterminedServer) CancelExperiment(context.Context, *CancelExperimentRequest) (*CancelExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExperiment not implemented")
}
func (*UnimplementedDeterminedServer) KillExperiment(context.Context, *KillExperimentRequest) (*KillExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillExperiment not implemented")
}
func (*UnimplementedDeterminedServer) ArchiveExperiment(context.Context, *ArchiveExperimentRequest) (*ArchiveExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveExperiment not implemented")
}
func (*UnimplementedDeterminedServer) UnarchiveExperiment(context.Context, *UnarchiveExperimentRequest) (*UnarchiveExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnarchiveExperiment not implemented")
}
func (*UnimplementedDeterminedServer) PatchExperiment(context.Context, *PatchExperimentRequest) (*PatchExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchExperiment not implemented")
}
func (*UnimplementedDeterminedServer) DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}
func (*UnimplementedDeterminedServer) GetBestSearcherValidationMetric(context.Context, *GetBestSearcherValidationMetricRequest) (*GetBestSearcherValidationMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestSearcherValidationMetric not implemented")
}
func (*UnimplementedDeterminedServer) GetExperimentCheckpoints(context.Context, *GetExperimentCheckpointsRequest) (*GetExperimentCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentCheckpoints not implemented")
}
func (*UnimplementedDeterminedServer) PreviewHPSearch(context.Context, *PreviewHPSearchRequest) (*PreviewHPSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewHPSearch not implemented")
}
func (*UnimplementedDeterminedServer) GetExperimentTrials(context.Context, *GetExperimentTrialsRequest) (*GetExperimentTrialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentTrials not implemented")
}
func (*UnimplementedDeterminedServer) CompareTrials(context.Context, *CompareTrialsRequest) (*CompareTrialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareTrials not implemented")
}
func (*UnimplementedDeterminedServer) QueryTrials(context.Context, *QueryTrialsRequest) (*QueryTrialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTrials not implemented")
}
func (*UnimplementedDeterminedServer) UpdateTrialTags(context.Context, *UpdateTrialTagsRequest) (*UpdateTrialTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrialTags not implemented")
}
func (*UnimplementedDeterminedServer) GetTrialsCollections(context.Context, *GetTrialsCollectionsRequest) (*GetTrialsCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrialsCollections not implemented")
}
func (*UnimplementedDeterminedServer) CreateTrialsCollection(context.Context, *CreateTrialsCollectionRequest) (*CreateTrialsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrialsCollection not implemented")
}
func (*UnimplementedDeterminedServer) PatchTrialsCollection(context.Context, *PatchTrialsCollectionRequest) (*PatchTrialsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTrialsCollection not implemented")
}
func (*UnimplementedDeterminedServer) DeleteTrialsCollection(context.Context, *DeleteTrialsCollectionRequest) (*DeleteTrialsCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTrialsCollection not implemented")
}
func (*UnimplementedDeterminedServer) GetTrial(context.Context, *GetTrialRequest) (*GetTrialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrial not implemented")
}
func (*UnimplementedDeterminedServer) GetTrialWorkloads(context.Context, *GetTrialWorkloadsRequest) (*GetTrialWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrialWorkloads not implemented")
}
func (*UnimplementedDeterminedServer) TrialLogs(*TrialLogsRequest, Determined_TrialLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method TrialLogs not implemented")
}
func (*UnimplementedDeterminedServer) TrialLogsFields(*TrialLogsFieldsRequest, Determined_TrialLogsFieldsServer) error {
	return status.Errorf(codes.Unimplemented, "method TrialLogsFields not implemented")
}
func (*UnimplementedDeterminedServer) SummarizeTrial(context.Context, *SummarizeTrialRequest) (*SummarizeTrialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummarizeTrial not implemented")
}
func (*UnimplementedDeterminedServer) AllocationReady(context.Context, *AllocationReadyRequest) (*AllocationReadyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationReady not implemented")
}
func (*UnimplementedDeterminedServer) AllocationWaiting(context.Context, *AllocationWaitingRequest) (*AllocationWaitingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationWaiting not implemented")
}
func (*UnimplementedDeterminedServer) TaskLogs(*TaskLogsRequest, Determined_TaskLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method TaskLogs not implemented")
}
func (*UnimplementedDeterminedServer) TaskLogsFields(*TaskLogsFieldsRequest, Determined_TaskLogsFieldsServer) error {
	return status.Errorf(codes.Unimplemented, "method TaskLogsFields not implemented")
}
func (*UnimplementedDeterminedServer) GetTrialProfilerMetrics(*GetTrialProfilerMetricsRequest, Determined_GetTrialProfilerMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrialProfilerMetrics not implemented")
}
func (*UnimplementedDeterminedServer) GetTrialProfilerAvailableSeries(*GetTrialProfilerAvailableSeriesRequest, Determined_GetTrialProfilerAvailableSeriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTrialProfilerAvailableSeries not implemented")
}
func (*UnimplementedDeterminedServer) PostTrialProfilerMetricsBatch(context.Context, *PostTrialProfilerMetricsBatchRequest) (*PostTrialProfilerMetricsBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTrialProfilerMetricsBatch not implemented")
}
func (*UnimplementedDeterminedServer) KillTrial(context.Context, *KillTrialRequest) (*KillTrialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillTrial not implemented")
}
func (*UnimplementedDeterminedServer) GetTrialCheckpoints(context.Context, *GetTrialCheckpointsRequest) (*GetTrialCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrialCheckpoints not implemented")
}
func (*UnimplementedDeterminedServer) AllocationPreemptionSignal(context.Context, *AllocationPreemptionSignalRequest) (*AllocationPreemptionSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationPreemptionSignal not implemented")
}
func (*UnimplementedDeterminedServer) AllocationPendingPreemptionSignal(context.Context, *AllocationPendingPreemptionSignalRequest) (*AllocationPendingPreemptionSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationPendingPreemptionSignal not implemented")
}
func (*UnimplementedDeterminedServer) AckAllocationPreemptionSignal(context.Context, *AckAllocationPreemptionSignalRequest) (*AckAllocationPreemptionSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckAllocationPreemptionSignal not implemented")
}
func (*UnimplementedDeterminedServer) MarkAllocationResourcesDaemon(context.Context, *MarkAllocationResourcesDaemonRequest) (*MarkAllocationResourcesDaemonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAllocationResourcesDaemon not implemented")
}
func (*UnimplementedDeterminedServer) AllocationRendezvousInfo(context.Context, *AllocationRendezvousInfoRequest) (*AllocationRendezvousInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationRendezvousInfo not implemented")
}
func (*UnimplementedDeterminedServer) PostAllocationProxyAddress(context.Context, *PostAllocationProxyAddressRequest) (*PostAllocationProxyAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAllocationProxyAddress not implemented")
}
func (*UnimplementedDeterminedServer) AllocationAllGather(context.Context, *AllocationAllGatherRequest) (*AllocationAllGatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocationAllGather not implemented")
}
func (*UnimplementedDeterminedServer) NotifyContainerRunning(context.Context, *NotifyContainerRunningRequest) (*NotifyContainerRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyContainerRunning not implemented")
}
func (*UnimplementedDeterminedServer) GetCurrentTrialSearcherOperation(context.Context, *GetCurrentTrialSearcherOperationRequest) (*GetCurrentTrialSearcherOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentTrialSearcherOperation not implemented")
}
func (*UnimplementedDeterminedServer) CompleteTrialSearcherValidation(context.Context, *CompleteTrialSearcherValidationRequest) (*CompleteTrialSearcherValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTrialSearcherValidation not implemented")
}
func (*UnimplementedDeterminedServer) ReportTrialSearcherEarlyExit(context.Context, *ReportTrialSearcherEarlyExitRequest) (*ReportTrialSearcherEarlyExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTrialSearcherEarlyExit not implemented")
}
func (*UnimplementedDeterminedServer) ReportTrialProgress(context.Context, *ReportTrialProgressRequest) (*ReportTrialProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTrialProgress not implemented")
}
func (*UnimplementedDeterminedServer) PostTrialRunnerMetadata(context.Context, *PostTrialRunnerMetadataRequest) (*PostTrialRunnerMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTrialRunnerMetadata not implemented")
}
func (*UnimplementedDeterminedServer) ReportTrialTrainingMetrics(context.Context, *ReportTrialTrainingMetricsRequest) (*ReportTrialTrainingMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTrialTrainingMetrics not implemented")
}
func (*UnimplementedDeterminedServer) ReportTrialValidationMetrics(context.Context, *ReportTrialValidationMetricsRequest) (*ReportTrialValidationMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTrialValidationMetrics not implemented")
}
func (*UnimplementedDeterminedServer) ReportCheckpoint(context.Context, *ReportCheckpointRequest) (*ReportCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportCheckpoint not implemented")
}
func (*UnimplementedDeterminedServer) GetJobs(context.Context, *GetJobsRequest) (*GetJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (*UnimplementedDeterminedServer) GetJobQueueStats(context.Context, *GetJobQueueStatsRequest) (*GetJobQueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobQueueStats not implemented")
}
func (*UnimplementedDeterminedServer) UpdateJobQueue(context.Context, *UpdateJobQueueRequest) (*UpdateJobQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobQueue not implemented")
}
func (*UnimplementedDeterminedServer) GetTemplates(context.Context, *GetTemplatesRequest) (*GetTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplates not implemented")
}
func (*UnimplementedDeterminedServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (*UnimplementedDeterminedServer) PutTemplate(context.Context, *PutTemplateRequest) (*PutTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutTemplate not implemented")
}
func (*UnimplementedDeterminedServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (*UnimplementedDeterminedServer) GetNotebooks(context.Context, *GetNotebooksRequest) (*GetNotebooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotebooks not implemented")
}
func (*UnimplementedDeterminedServer) GetNotebook(context.Context, *GetNotebookRequest) (*GetNotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotebook not implemented")
}
func (*UnimplementedDeterminedServer) IdleNotebook(context.Context, *IdleNotebookRequest) (*IdleNotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdleNotebook not implemented")
}
func (*UnimplementedDeterminedServer) KillNotebook(context.Context, *KillNotebookRequest) (*KillNotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillNotebook not implemented")
}
func (*UnimplementedDeterminedServer) SetNotebookPriority(context.Context, *SetNotebookPriorityRequest) (*SetNotebookPriorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNotebookPriority not implemented")
}
func (*UnimplementedDeterminedServer) LaunchNotebook(context.Context, *LaunchNotebookRequest) (*LaunchNotebookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchNotebook not implemented")
}
func (*UnimplementedDeterminedServer) GetShells(context.Context, *GetShellsRequest) (*GetShellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShells not implemented")
}
func (*UnimplementedDeterminedServer) GetShell(context.Context, *GetShellRequest) (*GetShellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShell not implemented")
}
func (*UnimplementedDeterminedServer) KillShell(context.Context, *KillShellRequest) (*KillShellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillShell not implemented")
}
func (*UnimplementedDeterminedServer) SetShellPriority(context.Context, *SetShellPriorityRequest) (*SetShellPriorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetShellPriority not implemented")
}
func (*UnimplementedDeterminedServer) LaunchShell(context.Context, *LaunchShellRequest) (*LaunchShellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchShell not implemented")
}
func (*UnimplementedDeterminedServer) GetCommands(context.Context, *GetCommandsRequest) (*GetCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommands not implemented")
}
func (*UnimplementedDeterminedServer) GetCommand(context.Context, *GetCommandRequest) (*GetCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommand not implemented")
}
func (*UnimplementedDeterminedServer) KillCommand(context.Context, *KillCommandRequest) (*KillCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillCommand not implemented")
}
func (*UnimplementedDeterminedServer) SetCommandPriority(context.Context, *SetCommandPriorityRequest) (*SetCommandPriorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommandPriority not implemented")
}
func (*UnimplementedDeterminedServer) LaunchCommand(context.Context, *LaunchCommandRequest) (*LaunchCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchCommand not implemented")
}
func (*UnimplementedDeterminedServer) GetTensorboards(context.Context, *GetTensorboardsRequest) (*GetTensorboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTensorboards not implemented")
}
func (*UnimplementedDeterminedServer) GetTensorboard(context.Context, *GetTensorboardRequest) (*GetTensorboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTensorboard not implemented")
}
func (*UnimplementedDeterminedServer) KillTensorboard(context.Context, *KillTensorboardRequest) (*KillTensorboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillTensorboard not implemented")
}
func (*UnimplementedDeterminedServer) SetTensorboardPriority(context.Context, *SetTensorboardPriorityRequest) (*SetTensorboardPriorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTensorboardPriority not implemented")
}
func (*UnimplementedDeterminedServer) LaunchTensorboard(context.Context, *LaunchTensorboardRequest) (*LaunchTensorboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchTensorboard not implemented")
}
func (*UnimplementedDeterminedServer) GetActiveTasksCount(context.Context, *GetActiveTasksCountRequest) (*GetActiveTasksCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveTasksCount not implemented")
}
func (*UnimplementedDeterminedServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (*UnimplementedDeterminedServer) GetModel(context.Context, *GetModelRequest) (*GetModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (*UnimplementedDeterminedServer) PostModel(context.Context, *PostModelRequest) (*PostModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostModel not implemented")
}
func (*UnimplementedDeterminedServer) PatchModel(context.Context, *PatchModelRequest) (*PatchModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchModel not implemented")
}
func (*UnimplementedDeterminedServer) ArchiveModel(context.Context, *ArchiveModelRequest) (*ArchiveModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveModel not implemented")
}
func (*UnimplementedDeterminedServer) UnarchiveModel(context.Context, *UnarchiveModelRequest) (*UnarchiveModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnarchiveModel not implemented")
}
func (*UnimplementedDeterminedServer) MoveModel(context.Context, *MoveModelRequest) (*MoveModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveModel not implemented")
}
func (*UnimplementedDeterminedServer) DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (*UnimplementedDeterminedServer) GetModels(context.Context, *GetModelsRequest) (*GetModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModels not implemented")
}
func (*UnimplementedDeterminedServer) GetModelLabels(context.Context, *GetModelLabelsRequest) (*GetModelLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelLabels not implemented")
}
func (*UnimplementedDeterminedServer) GetModelVersion(context.Context, *GetModelVersionRequest) (*GetModelVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelVersion not implemented")
}
func (*UnimplementedDeterminedServer) GetModelVersions(context.Context, *GetModelVersionsRequest) (*GetModelVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelVersions not implemented")
}
func (*UnimplementedDeterminedServer) PostModelVersion(context.Context, *PostModelVersionRequest) (*PostModelVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostModelVersion not implemented")
}
func (*UnimplementedDeterminedServer) PatchModelVersion(context.Context, *PatchModelVersionRequest) (*PatchModelVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchModelVersion not implemented")
}
func (*UnimplementedDeterminedServer) DeleteModelVersion(context.Context, *DeleteModelVersionRequest) (*DeleteModelVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelVersion not implemented")
}
func (*UnimplementedDeterminedServer) GetCheckpoint(context.Context, *GetCheckpointRequest) (*GetCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoint not implemented")
}
func (*UnimplementedDeterminedServer) PostCheckpointMetadata(context.Context, *PostCheckpointMetadataRequest) (*PostCheckpointMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCheckpointMetadata not implemented")
}
func (*UnimplementedDeterminedServer) DeleteCheckpoints(context.Context, *DeleteCheckpointsRequest) (*DeleteCheckpointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheckpoints not implemented")
}
func (*UnimplementedDeterminedServer) GetSearcherEvents(context.Context, *GetSearcherEventsRequest) (*GetSearcherEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearcherEvents not implemented")
}
func (*UnimplementedDeterminedServer) PostSearcherOperations(context.Context, *PostSearcherOperationsRequest) (*PostSearcherOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSearcherOperations not implemented")
}
func (*UnimplementedDeterminedServer) MetricNames(*MetricNamesRequest, Determined_MetricNamesServer) error {
	return status.Errorf(codes.Unimplemented, "method MetricNames not implemented")
}
func (*UnimplementedDeterminedServer) MetricBatches(*MetricBatchesRequest, Determined_MetricBatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method MetricBatches not implemented")
}
func (*UnimplementedDeterminedServer) TrialsSnapshot(*TrialsSnapshotRequest, Determined_TrialsSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method TrialsSnapshot not implemented")
}
func (*UnimplementedDeterminedServer) TrialsSample(*TrialsSampleRequest, Determined_TrialsSampleServer) error {
	return status.Errorf(codes.Unimplemented, "method TrialsSample not implemented")
}
func (*UnimplementedDeterminedServer) GetResourcePools(context.Context, *GetResourcePoolsRequest) (*GetResourcePoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcePools not implemented")
}
func (*UnimplementedDeterminedServer) ComputeHPImportance(context.Context, *ComputeHPImportanceRequest) (*ComputeHPImportanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComputeHPImportance not implemented")
}
func (*UnimplementedDeterminedServer) GetHPImportance(*GetHPImportanceRequest, Determined_GetHPImportanceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHPImportance not implemented")
}
func (*UnimplementedDeterminedServer) ResourceAllocationRaw(context.Context, *ResourceAllocationRawRequest) (*ResourceAllocationRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceAllocationRaw not implemented")
}
func (*UnimplementedDeterminedServer) ResourceAllocationAggregated(context.Context, *ResourceAllocationAggregatedRequest) (*ResourceAllocationAggregatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceAllocationAggregated not implemented")
}
func (*UnimplementedDeterminedServer) GetWorkspace(context.Context, *GetWorkspaceRequest) (*GetWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspace not implemented")
}
func (*UnimplementedDeterminedServer) GetWorkspaceProjects(context.Context, *GetWorkspaceProjectsRequest) (*GetWorkspaceProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceProjects not implemented")
}
func (*UnimplementedDeterminedServer) GetWorkspaces(context.Context, *GetWorkspacesRequest) (*GetWorkspacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaces not implemented")
}
func (*UnimplementedDeterminedServer) PostWorkspace(context.Context, *PostWorkspaceRequest) (*PostWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostWorkspace not implemented")
}
func (*UnimplementedDeterminedServer) PatchWorkspace(context.Context, *PatchWorkspaceRequest) (*PatchWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchWorkspace not implemented")
}
func (*UnimplementedDeterminedServer) DeleteWorkspace(context.Context, *DeleteWorkspaceRequest) (*DeleteWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkspace not implemented")
}
func (*UnimplementedDeterminedServer) ArchiveWorkspace(context.Context, *ArchiveWorkspaceRequest) (*ArchiveWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveWorkspace not implemented")
}
func (*UnimplementedDeterminedServer) UnarchiveWorkspace(context.Context, *UnarchiveWorkspaceRequest) (*UnarchiveWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnarchiveWorkspace not implemented")
}
func (*UnimplementedDeterminedServer) PinWorkspace(context.Context, *PinWorkspaceRequest) (*PinWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinWorkspace not implemented")
}
func (*UnimplementedDeterminedServer) UnpinWorkspace(context.Context, *UnpinWorkspaceRequest) (*UnpinWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpinWorkspace not implemented")
}
func (*UnimplementedDeterminedServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedDeterminedServer) PostProject(context.Context, *PostProjectRequest) (*PostProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostProject not implemented")
}
func (*UnimplementedDeterminedServer) AddProjectNote(context.Context, *AddProjectNoteRequest) (*AddProjectNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProjectNote not implemented")
}
func (*UnimplementedDeterminedServer) PutProjectNotes(context.Context, *PutProjectNotesRequest) (*PutProjectNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutProjectNotes not implemented")
}
func (*UnimplementedDeterminedServer) PatchProject(context.Context, *PatchProjectRequest) (*PatchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProject not implemented")
}
func (*UnimplementedDeterminedServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedDeterminedServer) ArchiveProject(context.Context, *ArchiveProjectRequest) (*ArchiveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveProject not implemented")
}
func (*UnimplementedDeterminedServer) UnarchiveProject(context.Context, *UnarchiveProjectRequest) (*UnarchiveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnarchiveProject not implemented")
}
func (*UnimplementedDeterminedServer) MoveProject(context.Context, *MoveProjectRequest) (*MoveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveProject not implemented")
}
func (*UnimplementedDeterminedServer) MoveExperiment(context.Context, *MoveExperimentRequest) (*MoveExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveExperiment not implemented")
}
func (*UnimplementedDeterminedServer) GetWebhooks(context.Context, *GetWebhooksRequest) (*GetWebhooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhooks not implemented")
}
func (*UnimplementedDeterminedServer) PostWebhook(context.Context, *PostWebhookRequest) (*PostWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostWebhook not implemented")
}
func (*UnimplementedDeterminedServer) DeleteWebhook(context.Context, *DeleteWebhookRequest) (*DeleteWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (*UnimplementedDeterminedServer) TestWebhook(context.Context, *TestWebhookRequest) (*TestWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestWebhook not implemented")
}
func (*UnimplementedDeterminedServer) GetGroup(context.Context, *GetGroupRequest) (*GetGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedDeterminedServer) GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (*UnimplementedDeterminedServer) CreateGroup(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedDeterminedServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedDeterminedServer) DeleteGroup(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedDeterminedServer) GetPermissionsSummary(context.Context, *GetPermissionsSummaryRequest) (*GetPermissionsSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsSummary not implemented")
}
func (*UnimplementedDeterminedServer) GetGroupsAndUsersAssignedToWorkspace(context.Context, *GetGroupsAndUsersAssignedToWorkspaceRequest) (*GetGroupsAndUsersAssignedToWorkspaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupsAndUsersAssignedToWorkspace not implemented")
}
func (*UnimplementedDeterminedServer) GetRolesByID(context.Context, *GetRolesByIDRequest) (*GetRolesByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesByID not implemented")
}
func (*UnimplementedDeterminedServer) GetRolesAssignedToUser(context.Context, *GetRolesAssignedToUserRequest) (*GetRolesAssignedToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesAssignedToUser not implemented")
}
func (*UnimplementedDeterminedServer) GetRolesAssignedToGroup(context.Context, *GetRolesAssignedToGroupRequest) (*GetRolesAssignedToGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesAssignedToGroup not implemented")
}
func (*UnimplementedDeterminedServer) SearchRolesAssignableToScope(context.Context, *SearchRolesAssignableToScopeRequest) (*SearchRolesAssignableToScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRolesAssignableToScope not implemented")
}
func (*UnimplementedDeterminedServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedDeterminedServer) AssignRoles(context.Context, *AssignRolesRequest) (*AssignRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRoles not implemented")
}
func (*UnimplementedDeterminedServer) RemoveAssignments(context.Context, *RemoveAssignmentsRequest) (*RemoveAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAssignments not implemented")
}
func (*UnimplementedDeterminedServer) PostUserActivity(context.Context, *PostUserActivityRequest) (*PostUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUserActivity not implemented")
}
func (*UnimplementedDeterminedServer) GetProjectsByUserActivity(context.Context, *GetProjectsByUserActivityRequest) (*GetProjectsByUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectsByUserActivity not implemented")
}

func RegisterDeterminedServer(s *grpc.Server, srv DeterminedServer) {
	s.RegisterService(&_Determined_serviceDesc, srv)
}

func _Determined_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/CurrentUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).CurrentUser(ctx, req.(*CurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetUserSetting(ctx, req.(*GetUserSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ResetUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ResetUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ResetUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ResetUserSetting(ctx, req.(*ResetUserSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostUserSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostUserSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostUserSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostUserSetting(ctx, req.(*PostUserSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetUserByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetUserByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetUserByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetUserByUsername(ctx, req.(*GetUserByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostUser(ctx, req.(*PostUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_SetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).SetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/SetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).SetUserPassword(ctx, req.(*SetUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PatchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PatchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PatchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PatchUser(ctx, req.(*PatchUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTelemetry(ctx, req.(*GetTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetMaster(ctx, req.(*GetMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetMasterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetMasterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetMasterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetMasterConfig(ctx, req.(*GetMasterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_MasterLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MasterLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).MasterLogs(m, &determinedMasterLogsServer{stream})
}

type Determined_MasterLogsServer interface {
	Send(*MasterLogsResponse) error
	grpc.ServerStream
}

type determinedMasterLogsServer struct {
	grpc.ServerStream
}

func (x *determinedMasterLogsServer) Send(m *MasterLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_GetAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetAgents(ctx, req.(*GetAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetAgent(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetSlots(ctx, req.(*GetSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetSlot(ctx, req.(*GetSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_EnableAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).EnableAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/EnableAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).EnableAgent(ctx, req.(*EnableAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DisableAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DisableAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DisableAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DisableAgent(ctx, req.(*DisableAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_EnableSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).EnableSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/EnableSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).EnableSlot(ctx, req.(*EnableSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DisableSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DisableSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DisableSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DisableSlot(ctx, req.(*DisableSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/CreateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).CreateExperiment(ctx, req.(*CreateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetExperiment(ctx, req.(*GetExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetExperiments(ctx, req.(*GetExperimentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetModelDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetModelDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetModelDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetModelDef(ctx, req.(*GetModelDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetModelDefTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelDefTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetModelDefTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetModelDefTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetModelDefTree(ctx, req.(*GetModelDefTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetModelDefFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelDefFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetModelDefFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetModelDefFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetModelDefFile(ctx, req.(*GetModelDefFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetExperimentLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetExperimentLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetExperimentLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetExperimentLabels(ctx, req.(*GetExperimentLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetExperimentValidationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentValidationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetExperimentValidationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetExperimentValidationHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetExperimentValidationHistory(ctx, req.(*GetExperimentValidationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ActivateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ActivateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ActivateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ActivateExperiment(ctx, req.(*ActivateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PauseExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PauseExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PauseExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PauseExperiment(ctx, req.(*PauseExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_CancelExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).CancelExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/CancelExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).CancelExperiment(ctx, req.(*CancelExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_KillExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).KillExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/KillExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).KillExperiment(ctx, req.(*KillExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ArchiveExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ArchiveExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ArchiveExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ArchiveExperiment(ctx, req.(*ArchiveExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_UnarchiveExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnarchiveExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).UnarchiveExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/UnarchiveExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).UnarchiveExperiment(ctx, req.(*UnarchiveExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PatchExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PatchExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PatchExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PatchExperiment(ctx, req.(*PatchExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteExperiment(ctx, req.(*DeleteExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetBestSearcherValidationMetric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBestSearcherValidationMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetBestSearcherValidationMetric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetBestSearcherValidationMetric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetBestSearcherValidationMetric(ctx, req.(*GetBestSearcherValidationMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetExperimentCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetExperimentCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetExperimentCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetExperimentCheckpoints(ctx, req.(*GetExperimentCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PreviewHPSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewHPSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PreviewHPSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PreviewHPSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PreviewHPSearch(ctx, req.(*PreviewHPSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetExperimentTrials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentTrialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetExperimentTrials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetExperimentTrials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetExperimentTrials(ctx, req.(*GetExperimentTrialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_CompareTrials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareTrialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).CompareTrials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/CompareTrials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).CompareTrials(ctx, req.(*CompareTrialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_QueryTrials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).QueryTrials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/QueryTrials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).QueryTrials(ctx, req.(*QueryTrialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_UpdateTrialTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrialTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).UpdateTrialTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/UpdateTrialTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).UpdateTrialTags(ctx, req.(*UpdateTrialTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTrialsCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrialsCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTrialsCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTrialsCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTrialsCollections(ctx, req.(*GetTrialsCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_CreateTrialsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrialsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).CreateTrialsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/CreateTrialsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).CreateTrialsCollection(ctx, req.(*CreateTrialsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PatchTrialsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTrialsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PatchTrialsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PatchTrialsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PatchTrialsCollection(ctx, req.(*PatchTrialsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteTrialsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTrialsCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteTrialsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteTrialsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteTrialsCollection(ctx, req.(*DeleteTrialsCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTrial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTrial(ctx, req.(*GetTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTrialWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrialWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTrialWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTrialWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTrialWorkloads(ctx, req.(*GetTrialWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_TrialLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrialLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).TrialLogs(m, &determinedTrialLogsServer{stream})
}

type Determined_TrialLogsServer interface {
	Send(*TrialLogsResponse) error
	grpc.ServerStream
}

type determinedTrialLogsServer struct {
	grpc.ServerStream
}

func (x *determinedTrialLogsServer) Send(m *TrialLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_TrialLogsFields_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrialLogsFieldsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).TrialLogsFields(m, &determinedTrialLogsFieldsServer{stream})
}

type Determined_TrialLogsFieldsServer interface {
	Send(*TrialLogsFieldsResponse) error
	grpc.ServerStream
}

type determinedTrialLogsFieldsServer struct {
	grpc.ServerStream
}

func (x *determinedTrialLogsFieldsServer) Send(m *TrialLogsFieldsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_SummarizeTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).SummarizeTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/SummarizeTrial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).SummarizeTrial(ctx, req.(*SummarizeTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_AllocationReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).AllocationReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/AllocationReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).AllocationReady(ctx, req.(*AllocationReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_AllocationWaiting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationWaitingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).AllocationWaiting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/AllocationWaiting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).AllocationWaiting(ctx, req.(*AllocationWaitingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_TaskLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).TaskLogs(m, &determinedTaskLogsServer{stream})
}

type Determined_TaskLogsServer interface {
	Send(*TaskLogsResponse) error
	grpc.ServerStream
}

type determinedTaskLogsServer struct {
	grpc.ServerStream
}

func (x *determinedTaskLogsServer) Send(m *TaskLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_TaskLogsFields_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TaskLogsFieldsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).TaskLogsFields(m, &determinedTaskLogsFieldsServer{stream})
}

type Determined_TaskLogsFieldsServer interface {
	Send(*TaskLogsFieldsResponse) error
	grpc.ServerStream
}

type determinedTaskLogsFieldsServer struct {
	grpc.ServerStream
}

func (x *determinedTaskLogsFieldsServer) Send(m *TaskLogsFieldsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_GetTrialProfilerMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTrialProfilerMetricsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).GetTrialProfilerMetrics(m, &determinedGetTrialProfilerMetricsServer{stream})
}

type Determined_GetTrialProfilerMetricsServer interface {
	Send(*GetTrialProfilerMetricsResponse) error
	grpc.ServerStream
}

type determinedGetTrialProfilerMetricsServer struct {
	grpc.ServerStream
}

func (x *determinedGetTrialProfilerMetricsServer) Send(m *GetTrialProfilerMetricsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_GetTrialProfilerAvailableSeries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTrialProfilerAvailableSeriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).GetTrialProfilerAvailableSeries(m, &determinedGetTrialProfilerAvailableSeriesServer{stream})
}

type Determined_GetTrialProfilerAvailableSeriesServer interface {
	Send(*GetTrialProfilerAvailableSeriesResponse) error
	grpc.ServerStream
}

type determinedGetTrialProfilerAvailableSeriesServer struct {
	grpc.ServerStream
}

func (x *determinedGetTrialProfilerAvailableSeriesServer) Send(m *GetTrialProfilerAvailableSeriesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_PostTrialProfilerMetricsBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTrialProfilerMetricsBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostTrialProfilerMetricsBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostTrialProfilerMetricsBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostTrialProfilerMetricsBatch(ctx, req.(*PostTrialProfilerMetricsBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_KillTrial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillTrialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).KillTrial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/KillTrial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).KillTrial(ctx, req.(*KillTrialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTrialCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrialCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTrialCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTrialCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTrialCheckpoints(ctx, req.(*GetTrialCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_AllocationPreemptionSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationPreemptionSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).AllocationPreemptionSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/AllocationPreemptionSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).AllocationPreemptionSignal(ctx, req.(*AllocationPreemptionSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_AllocationPendingPreemptionSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationPendingPreemptionSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).AllocationPendingPreemptionSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/AllocationPendingPreemptionSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).AllocationPendingPreemptionSignal(ctx, req.(*AllocationPendingPreemptionSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_AckAllocationPreemptionSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckAllocationPreemptionSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).AckAllocationPreemptionSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/AckAllocationPreemptionSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).AckAllocationPreemptionSignal(ctx, req.(*AckAllocationPreemptionSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_MarkAllocationResourcesDaemon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAllocationResourcesDaemonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).MarkAllocationResourcesDaemon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/MarkAllocationResourcesDaemon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).MarkAllocationResourcesDaemon(ctx, req.(*MarkAllocationResourcesDaemonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_AllocationRendezvousInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationRendezvousInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).AllocationRendezvousInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/AllocationRendezvousInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).AllocationRendezvousInfo(ctx, req.(*AllocationRendezvousInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostAllocationProxyAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAllocationProxyAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostAllocationProxyAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostAllocationProxyAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostAllocationProxyAddress(ctx, req.(*PostAllocationProxyAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_AllocationAllGather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocationAllGatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).AllocationAllGather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/AllocationAllGather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).AllocationAllGather(ctx, req.(*AllocationAllGatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_NotifyContainerRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyContainerRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).NotifyContainerRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/NotifyContainerRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).NotifyContainerRunning(ctx, req.(*NotifyContainerRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetCurrentTrialSearcherOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentTrialSearcherOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetCurrentTrialSearcherOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetCurrentTrialSearcherOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetCurrentTrialSearcherOperation(ctx, req.(*GetCurrentTrialSearcherOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_CompleteTrialSearcherValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTrialSearcherValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).CompleteTrialSearcherValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/CompleteTrialSearcherValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).CompleteTrialSearcherValidation(ctx, req.(*CompleteTrialSearcherValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ReportTrialSearcherEarlyExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTrialSearcherEarlyExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ReportTrialSearcherEarlyExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ReportTrialSearcherEarlyExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ReportTrialSearcherEarlyExit(ctx, req.(*ReportTrialSearcherEarlyExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ReportTrialProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTrialProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ReportTrialProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ReportTrialProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ReportTrialProgress(ctx, req.(*ReportTrialProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostTrialRunnerMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTrialRunnerMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostTrialRunnerMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostTrialRunnerMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostTrialRunnerMetadata(ctx, req.(*PostTrialRunnerMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ReportTrialTrainingMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTrialTrainingMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ReportTrialTrainingMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ReportTrialTrainingMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ReportTrialTrainingMetrics(ctx, req.(*ReportTrialTrainingMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ReportTrialValidationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTrialValidationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ReportTrialValidationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ReportTrialValidationMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ReportTrialValidationMetrics(ctx, req.(*ReportTrialValidationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ReportCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ReportCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ReportCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ReportCheckpoint(ctx, req.(*ReportCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetJobs(ctx, req.(*GetJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetJobQueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobQueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetJobQueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetJobQueueStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetJobQueueStats(ctx, req.(*GetJobQueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_UpdateJobQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).UpdateJobQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/UpdateJobQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).UpdateJobQueue(ctx, req.(*UpdateJobQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTemplates(ctx, req.(*GetTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PutTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PutTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PutTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PutTemplate(ctx, req.(*PutTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetNotebooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotebooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetNotebooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetNotebooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetNotebooks(ctx, req.(*GetNotebooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetNotebook(ctx, req.(*GetNotebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_IdleNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdleNotebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).IdleNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/IdleNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).IdleNotebook(ctx, req.(*IdleNotebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_KillNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillNotebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).KillNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/KillNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).KillNotebook(ctx, req.(*KillNotebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_SetNotebookPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNotebookPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).SetNotebookPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/SetNotebookPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).SetNotebookPriority(ctx, req.(*SetNotebookPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_LaunchNotebook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchNotebookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).LaunchNotebook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/LaunchNotebook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).LaunchNotebook(ctx, req.(*LaunchNotebookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetShells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetShells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetShells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetShells(ctx, req.(*GetShellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetShell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetShell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetShell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetShell(ctx, req.(*GetShellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_KillShell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillShellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).KillShell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/KillShell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).KillShell(ctx, req.(*KillShellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_SetShellPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetShellPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).SetShellPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/SetShellPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).SetShellPriority(ctx, req.(*SetShellPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_LaunchShell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchShellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).LaunchShell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/LaunchShell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).LaunchShell(ctx, req.(*LaunchShellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetCommands(ctx, req.(*GetCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetCommand(ctx, req.(*GetCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_KillCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).KillCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/KillCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).KillCommand(ctx, req.(*KillCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_SetCommandPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCommandPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).SetCommandPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/SetCommandPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).SetCommandPriority(ctx, req.(*SetCommandPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_LaunchCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).LaunchCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/LaunchCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).LaunchCommand(ctx, req.(*LaunchCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTensorboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTensorboardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTensorboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTensorboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTensorboards(ctx, req.(*GetTensorboardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTensorboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTensorboard(ctx, req.(*GetTensorboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_KillTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillTensorboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).KillTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/KillTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).KillTensorboard(ctx, req.(*KillTensorboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_SetTensorboardPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTensorboardPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).SetTensorboardPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/SetTensorboardPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).SetTensorboardPriority(ctx, req.(*SetTensorboardPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_LaunchTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchTensorboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).LaunchTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/LaunchTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).LaunchTensorboard(ctx, req.(*LaunchTensorboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetActiveTasksCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveTasksCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetActiveTasksCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetActiveTasksCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetActiveTasksCount(ctx, req.(*GetActiveTasksCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostModel(ctx, req.(*PostModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PatchModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PatchModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PatchModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PatchModel(ctx, req.(*PatchModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ArchiveModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ArchiveModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ArchiveModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ArchiveModel(ctx, req.(*ArchiveModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_UnarchiveModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnarchiveModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).UnarchiveModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/UnarchiveModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).UnarchiveModel(ctx, req.(*UnarchiveModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_MoveModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).MoveModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/MoveModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).MoveModel(ctx, req.(*MoveModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetModels(ctx, req.(*GetModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetModelLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetModelLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetModelLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetModelLabels(ctx, req.(*GetModelLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetModelVersion(ctx, req.(*GetModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetModelVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetModelVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetModelVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetModelVersions(ctx, req.(*GetModelVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostModelVersion(ctx, req.(*PostModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PatchModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PatchModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PatchModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PatchModelVersion(ctx, req.(*PatchModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteModelVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteModelVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteModelVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteModelVersion(ctx, req.(*DeleteModelVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetCheckpoint(ctx, req.(*GetCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostCheckpointMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCheckpointMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostCheckpointMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostCheckpointMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostCheckpointMetadata(ctx, req.(*PostCheckpointMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteCheckpoints(ctx, req.(*DeleteCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetSearcherEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearcherEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetSearcherEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetSearcherEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetSearcherEvents(ctx, req.(*GetSearcherEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostSearcherOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostSearcherOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostSearcherOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostSearcherOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostSearcherOperations(ctx, req.(*PostSearcherOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_MetricNames_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricNamesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).MetricNames(m, &determinedMetricNamesServer{stream})
}

type Determined_MetricNamesServer interface {
	Send(*MetricNamesResponse) error
	grpc.ServerStream
}

type determinedMetricNamesServer struct {
	grpc.ServerStream
}

func (x *determinedMetricNamesServer) Send(m *MetricNamesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_MetricBatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MetricBatchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).MetricBatches(m, &determinedMetricBatchesServer{stream})
}

type Determined_MetricBatchesServer interface {
	Send(*MetricBatchesResponse) error
	grpc.ServerStream
}

type determinedMetricBatchesServer struct {
	grpc.ServerStream
}

func (x *determinedMetricBatchesServer) Send(m *MetricBatchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_TrialsSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrialsSnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).TrialsSnapshot(m, &determinedTrialsSnapshotServer{stream})
}

type Determined_TrialsSnapshotServer interface {
	Send(*TrialsSnapshotResponse) error
	grpc.ServerStream
}

type determinedTrialsSnapshotServer struct {
	grpc.ServerStream
}

func (x *determinedTrialsSnapshotServer) Send(m *TrialsSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_TrialsSample_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrialsSampleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).TrialsSample(m, &determinedTrialsSampleServer{stream})
}

type Determined_TrialsSampleServer interface {
	Send(*TrialsSampleResponse) error
	grpc.ServerStream
}

type determinedTrialsSampleServer struct {
	grpc.ServerStream
}

func (x *determinedTrialsSampleServer) Send(m *TrialsSampleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_GetResourcePools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourcePoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetResourcePools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetResourcePools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetResourcePools(ctx, req.(*GetResourcePoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ComputeHPImportance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeHPImportanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ComputeHPImportance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ComputeHPImportance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ComputeHPImportance(ctx, req.(*ComputeHPImportanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetHPImportance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHPImportanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeterminedServer).GetHPImportance(m, &determinedGetHPImportanceServer{stream})
}

type Determined_GetHPImportanceServer interface {
	Send(*GetHPImportanceResponse) error
	grpc.ServerStream
}

type determinedGetHPImportanceServer struct {
	grpc.ServerStream
}

func (x *determinedGetHPImportanceServer) Send(m *GetHPImportanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Determined_ResourceAllocationRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllocationRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ResourceAllocationRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ResourceAllocationRaw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ResourceAllocationRaw(ctx, req.(*ResourceAllocationRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ResourceAllocationAggregated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceAllocationAggregatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ResourceAllocationAggregated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ResourceAllocationAggregated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ResourceAllocationAggregated(ctx, req.(*ResourceAllocationAggregatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetWorkspace(ctx, req.(*GetWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetWorkspaceProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspaceProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetWorkspaceProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetWorkspaceProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetWorkspaceProjects(ctx, req.(*GetWorkspaceProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetWorkspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetWorkspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetWorkspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetWorkspaces(ctx, req.(*GetWorkspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostWorkspace(ctx, req.(*PostWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PatchWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PatchWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PatchWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PatchWorkspace(ctx, req.(*PatchWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteWorkspace(ctx, req.(*DeleteWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ArchiveWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ArchiveWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ArchiveWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ArchiveWorkspace(ctx, req.(*ArchiveWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_UnarchiveWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnarchiveWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).UnarchiveWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/UnarchiveWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).UnarchiveWorkspace(ctx, req.(*UnarchiveWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PinWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PinWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PinWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PinWorkspace(ctx, req.(*PinWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_UnpinWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpinWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).UnpinWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/UnpinWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).UnpinWorkspace(ctx, req.(*UnpinWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostProject(ctx, req.(*PostProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_AddProjectNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).AddProjectNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/AddProjectNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).AddProjectNote(ctx, req.(*AddProjectNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PutProjectNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutProjectNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PutProjectNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PutProjectNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PutProjectNotes(ctx, req.(*PutProjectNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PatchProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PatchProject(ctx, req.(*PatchProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ArchiveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ArchiveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ArchiveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ArchiveProject(ctx, req.(*ArchiveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_UnarchiveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnarchiveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).UnarchiveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/UnarchiveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).UnarchiveProject(ctx, req.(*UnarchiveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_MoveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).MoveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/MoveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).MoveProject(ctx, req.(*MoveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_MoveExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).MoveExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/MoveExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).MoveExperiment(ctx, req.(*MoveExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetWebhooks(ctx, req.(*GetWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostWebhook(ctx, req.(*PostWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteWebhook(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_TestWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).TestWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/TestWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).TestWebhook(ctx, req.(*TestWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetGroup(ctx, req.(*GetGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetGroups(ctx, req.(*GetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).CreateGroup(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).DeleteGroup(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetPermissionsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetPermissionsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetPermissionsSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetPermissionsSummary(ctx, req.(*GetPermissionsSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetGroupsAndUsersAssignedToWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsAndUsersAssignedToWorkspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetGroupsAndUsersAssignedToWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetGroupsAndUsersAssignedToWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetGroupsAndUsersAssignedToWorkspace(ctx, req.(*GetGroupsAndUsersAssignedToWorkspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetRolesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetRolesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetRolesByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetRolesByID(ctx, req.(*GetRolesByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetRolesAssignedToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesAssignedToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetRolesAssignedToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetRolesAssignedToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetRolesAssignedToUser(ctx, req.(*GetRolesAssignedToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetRolesAssignedToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesAssignedToGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetRolesAssignedToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetRolesAssignedToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetRolesAssignedToGroup(ctx, req.(*GetRolesAssignedToGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_SearchRolesAssignableToScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRolesAssignableToScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).SearchRolesAssignableToScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/SearchRolesAssignableToScope",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).SearchRolesAssignableToScope(ctx, req.(*SearchRolesAssignableToScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_AssignRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).AssignRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/AssignRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).AssignRoles(ctx, req.(*AssignRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_RemoveAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).RemoveAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/RemoveAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).RemoveAssignments(ctx, req.(*RemoveAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_PostUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).PostUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/PostUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).PostUserActivity(ctx, req.(*PostUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Determined_GetProjectsByUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsByUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeterminedServer).GetProjectsByUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/determined.api.v1.Determined/GetProjectsByUserActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeterminedServer).GetProjectsByUserActivity(ctx, req.(*GetProjectsByUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Determined_serviceDesc = grpc.ServiceDesc{
	ServiceName: "determined.api.v1.Determined",
	HandlerType: (*DeterminedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Determined_Login_Handler,
		},
		{
			MethodName: "CurrentUser",
			Handler:    _Determined_CurrentUser_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Determined_Logout_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _Determined_GetUsers_Handler,
		},
		{
			MethodName: "GetUserSetting",
			Handler:    _Determined_GetUserSetting_Handler,
		},
		{
			MethodName: "ResetUserSetting",
			Handler:    _Determined_ResetUserSetting_Handler,
		},
		{
			MethodName: "PostUserSetting",
			Handler:    _Determined_PostUserSetting_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Determined_GetUser_Handler,
		},
		{
			MethodName: "GetUserByUsername",
			Handler:    _Determined_GetUserByUsername_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _Determined_GetMe_Handler,
		},
		{
			MethodName: "PostUser",
			Handler:    _Determined_PostUser_Handler,
		},
		{
			MethodName: "SetUserPassword",
			Handler:    _Determined_SetUserPassword_Handler,
		},
		{
			MethodName: "PatchUser",
			Handler:    _Determined_PatchUser_Handler,
		},
		{
			MethodName: "GetTelemetry",
			Handler:    _Determined_GetTelemetry_Handler,
		},
		{
			MethodName: "GetMaster",
			Handler:    _Determined_GetMaster_Handler,
		},
		{
			MethodName: "GetMasterConfig",
			Handler:    _Determined_GetMasterConfig_Handler,
		},
		{
			MethodName: "GetAgents",
			Handler:    _Determined_GetAgents_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _Determined_GetAgent_Handler,
		},
		{
			MethodName: "GetSlots",
			Handler:    _Determined_GetSlots_Handler,
		},
		{
			MethodName: "GetSlot",
			Handler:    _Determined_GetSlot_Handler,
		},
		{
			MethodName: "EnableAgent",
			Handler:    _Determined_EnableAgent_Handler,
		},
		{
			MethodName: "DisableAgent",
			Handler:    _Determined_DisableAgent_Handler,
		},
		{
			MethodName: "EnableSlot",
			Handler:    _Determined_EnableSlot_Handler,
		},
		{
			MethodName: "DisableSlot",
			Handler:    _Determined_DisableSlot_Handler,
		},
		{
			MethodName: "CreateExperiment",
			Handler:    _Determined_CreateExperiment_Handler,
		},
		{
			MethodName: "GetExperiment",
			Handler:    _Determined_GetExperiment_Handler,
		},
		{
			MethodName: "GetExperiments",
			Handler:    _Determined_GetExperiments_Handler,
		},
		{
			MethodName: "GetModelDef",
			Handler:    _Determined_GetModelDef_Handler,
		},
		{
			MethodName: "GetModelDefTree",
			Handler:    _Determined_GetModelDefTree_Handler,
		},
		{
			MethodName: "GetModelDefFile",
			Handler:    _Determined_GetModelDefFile_Handler,
		},
		{
			MethodName: "GetExperimentLabels",
			Handler:    _Determined_GetExperimentLabels_Handler,
		},
		{
			MethodName: "GetExperimentValidationHistory",
			Handler:    _Determined_GetExperimentValidationHistory_Handler,
		},
		{
			MethodName: "ActivateExperiment",
			Handler:    _Determined_ActivateExperiment_Handler,
		},
		{
			MethodName: "PauseExperiment",
			Handler:    _Determined_PauseExperiment_Handler,
		},
		{
			MethodName: "CancelExperiment",
			Handler:    _Determined_CancelExperiment_Handler,
		},
		{
			MethodName: "KillExperiment",
			Handler:    _Determined_KillExperiment_Handler,
		},
		{
			MethodName: "ArchiveExperiment",
			Handler:    _Determined_ArchiveExperiment_Handler,
		},
		{
			MethodName: "UnarchiveExperiment",
			Handler:    _Determined_UnarchiveExperiment_Handler,
		},
		{
			MethodName: "PatchExperiment",
			Handler:    _Determined_PatchExperiment_Handler,
		},
		{
			MethodName: "DeleteExperiment",
			Handler:    _Determined_DeleteExperiment_Handler,
		},
		{
			MethodName: "GetBestSearcherValidationMetric",
			Handler:    _Determined_GetBestSearcherValidationMetric_Handler,
		},
		{
			MethodName: "GetExperimentCheckpoints",
			Handler:    _Determined_GetExperimentCheckpoints_Handler,
		},
		{
			MethodName: "PreviewHPSearch",
			Handler:    _Determined_PreviewHPSearch_Handler,
		},
		{
			MethodName: "GetExperimentTrials",
			Handler:    _Determined_GetExperimentTrials_Handler,
		},
		{
			MethodName: "CompareTrials",
			Handler:    _Determined_CompareTrials_Handler,
		},
		{
			MethodName: "QueryTrials",
			Handler:    _Determined_QueryTrials_Handler,
		},
		{
			MethodName: "UpdateTrialTags",
			Handler:    _Determined_UpdateTrialTags_Handler,
		},
		{
			MethodName: "GetTrialsCollections",
			Handler:    _Determined_GetTrialsCollections_Handler,
		},
		{
			MethodName: "CreateTrialsCollection",
			Handler:    _Determined_CreateTrialsCollection_Handler,
		},
		{
			MethodName: "PatchTrialsCollection",
			Handler:    _Determined_PatchTrialsCollection_Handler,
		},
		{
			MethodName: "DeleteTrialsCollection",
			Handler:    _Determined_DeleteTrialsCollection_Handler,
		},
		{
			MethodName: "GetTrial",
			Handler:    _Determined_GetTrial_Handler,
		},
		{
			MethodName: "GetTrialWorkloads",
			Handler:    _Determined_GetTrialWorkloads_Handler,
		},
		{
			MethodName: "SummarizeTrial",
			Handler:    _Determined_SummarizeTrial_Handler,
		},
		{
			MethodName: "AllocationReady",
			Handler:    _Determined_AllocationReady_Handler,
		},
		{
			MethodName: "AllocationWaiting",
			Handler:    _Determined_AllocationWaiting_Handler,
		},
		{
			MethodName: "PostTrialProfilerMetricsBatch",
			Handler:    _Determined_PostTrialProfilerMetricsBatch_Handler,
		},
		{
			MethodName: "KillTrial",
			Handler:    _Determined_KillTrial_Handler,
		},
		{
			MethodName: "GetTrialCheckpoints",
			Handler:    _Determined_GetTrialCheckpoints_Handler,
		},
		{
			MethodName: "AllocationPreemptionSignal",
			Handler:    _Determined_AllocationPreemptionSignal_Handler,
		},
		{
			MethodName: "AllocationPendingPreemptionSignal",
			Handler:    _Determined_AllocationPendingPreemptionSignal_Handler,
		},
		{
			MethodName: "AckAllocationPreemptionSignal",
			Handler:    _Determined_AckAllocationPreemptionSignal_Handler,
		},
		{
			MethodName: "MarkAllocationResourcesDaemon",
			Handler:    _Determined_MarkAllocationResourcesDaemon_Handler,
		},
		{
			MethodName: "AllocationRendezvousInfo",
			Handler:    _Determined_AllocationRendezvousInfo_Handler,
		},
		{
			MethodName: "PostAllocationProxyAddress",
			Handler:    _Determined_PostAllocationProxyAddress_Handler,
		},
		{
			MethodName: "AllocationAllGather",
			Handler:    _Determined_AllocationAllGather_Handler,
		},
		{
			MethodName: "NotifyContainerRunning",
			Handler:    _Determined_NotifyContainerRunning_Handler,
		},
		{
			MethodName: "GetCurrentTrialSearcherOperation",
			Handler:    _Determined_GetCurrentTrialSearcherOperation_Handler,
		},
		{
			MethodName: "CompleteTrialSearcherValidation",
			Handler:    _Determined_CompleteTrialSearcherValidation_Handler,
		},
		{
			MethodName: "ReportTrialSearcherEarlyExit",
			Handler:    _Determined_ReportTrialSearcherEarlyExit_Handler,
		},
		{
			MethodName: "ReportTrialProgress",
			Handler:    _Determined_ReportTrialProgress_Handler,
		},
		{
			MethodName: "PostTrialRunnerMetadata",
			Handler:    _Determined_PostTrialRunnerMetadata_Handler,
		},
		{
			MethodName: "ReportTrialTrainingMetrics",
			Handler:    _Determined_ReportTrialTrainingMetrics_Handler,
		},
		{
			MethodName: "ReportTrialValidationMetrics",
			Handler:    _Determined_ReportTrialValidationMetrics_Handler,
		},
		{
			MethodName: "ReportCheckpoint",
			Handler:    _Determined_ReportCheckpoint_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _Determined_GetJobs_Handler,
		},
		{
			MethodName: "GetJobQueueStats",
			Handler:    _Determined_GetJobQueueStats_Handler,
		},
		{
			MethodName: "UpdateJobQueue",
			Handler:    _Determined_UpdateJobQueue_Handler,
		},
		{
			MethodName: "GetTemplates",
			Handler:    _Determined_GetTemplates_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _Determined_GetTemplate_Handler,
		},
		{
			MethodName: "PutTemplate",
			Handler:    _Determined_PutTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _Determined_DeleteTemplate_Handler,
		},
		{
			MethodName: "GetNotebooks",
			Handler:    _Determined_GetNotebooks_Handler,
		},
		{
			MethodName: "GetNotebook",
			Handler:    _Determined_GetNotebook_Handler,
		},
		{
			MethodName: "IdleNotebook",
			Handler:    _Determined_IdleNotebook_Handler,
		},
		{
			MethodName: "KillNotebook",
			Handler:    _Determined_KillNotebook_Handler,
		},
		{
			MethodName: "SetNotebookPriority",
			Handler:    _Determined_SetNotebookPriority_Handler,
		},
		{
			MethodName: "LaunchNotebook",
			Handler:    _Determined_LaunchNotebook_Handler,
		},
		{
			MethodName: "GetShells",
			Handler:    _Determined_GetShells_Handler,
		},
		{
			MethodName: "GetShell",
			Handler:    _Determined_GetShell_Handler,
		},
		{
			MethodName: "KillShell",
			Handler:    _Determined_KillShell_Handler,
		},
		{
			MethodName: "SetShellPriority",
			Handler:    _Determined_SetShellPriority_Handler,
		},
		{
			MethodName: "LaunchShell",
			Handler:    _Determined_LaunchShell_Handler,
		},
		{
			MethodName: "GetCommands",
			Handler:    _Determined_GetCommands_Handler,
		},
		{
			MethodName: "GetCommand",
			Handler:    _Determined_GetCommand_Handler,
		},
		{
			MethodName: "KillCommand",
			Handler:    _Determined_KillCommand_Handler,
		},
		{
			MethodName: "SetCommandPriority",
			Handler:    _Determined_SetCommandPriority_Handler,
		},
		{
			MethodName: "LaunchCommand",
			Handler:    _Determined_LaunchCommand_Handler,
		},
		{
			MethodName: "GetTensorboards",
			Handler:    _Determined_GetTensorboards_Handler,
		},
		{
			MethodName: "GetTensorboard",
			Handler:    _Determined_GetTensorboard_Handler,
		},
		{
			MethodName: "KillTensorboard",
			Handler:    _Determined_KillTensorboard_Handler,
		},
		{
			MethodName: "SetTensorboardPriority",
			Handler:    _Determined_SetTensorboardPriority_Handler,
		},
		{
			MethodName: "LaunchTensorboard",
			Handler:    _Determined_LaunchTensorboard_Handler,
		},
		{
			MethodName: "GetActiveTasksCount",
			Handler:    _Determined_GetActiveTasksCount_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _Determined_GetTask_Handler,
		},
		{
			MethodName: "GetModel",
			Handler:    _Determined_GetModel_Handler,
		},
		{
			MethodName: "PostModel",
			Handler:    _Determined_PostModel_Handler,
		},
		{
			MethodName: "PatchModel",
			Handler:    _Determined_PatchModel_Handler,
		},
		{
			MethodName: "ArchiveModel",
			Handler:    _Determined_ArchiveModel_Handler,
		},
		{
			MethodName: "UnarchiveModel",
			Handler:    _Determined_UnarchiveModel_Handler,
		},
		{
			MethodName: "MoveModel",
			Handler:    _Determined_MoveModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _Determined_DeleteModel_Handler,
		},
		{
			MethodName: "GetModels",
			Handler:    _Determined_GetModels_Handler,
		},
		{
			MethodName: "GetModelLabels",
			Handler:    _Determined_GetModelLabels_Handler,
		},
		{
			MethodName: "GetModelVersion",
			Handler:    _Determined_GetModelVersion_Handler,
		},
		{
			MethodName: "GetModelVersions",
			Handler:    _Determined_GetModelVersions_Handler,
		},
		{
			MethodName: "PostModelVersion",
			Handler:    _Determined_PostModelVersion_Handler,
		},
		{
			MethodName: "PatchModelVersion",
			Handler:    _Determined_PatchModelVersion_Handler,
		},
		{
			MethodName: "DeleteModelVersion",
			Handler:    _Determined_DeleteModelVersion_Handler,
		},
		{
			MethodName: "GetCheckpoint",
			Handler:    _Determined_GetCheckpoint_Handler,
		},
		{
			MethodName: "PostCheckpointMetadata",
			Handler:    _Determined_PostCheckpointMetadata_Handler,
		},
		{
			MethodName: "DeleteCheckpoints",
			Handler:    _Determined_DeleteCheckpoints_Handler,
		},
		{
			MethodName: "GetSearcherEvents",
			Handler:    _Determined_GetSearcherEvents_Handler,
		},
		{
			MethodName: "PostSearcherOperations",
			Handler:    _Determined_PostSearcherOperations_Handler,
		},
		{
			MethodName: "GetResourcePools",
			Handler:    _Determined_GetResourcePools_Handler,
		},
		{
			MethodName: "ComputeHPImportance",
			Handler:    _Determined_ComputeHPImportance_Handler,
		},
		{
			MethodName: "ResourceAllocationRaw",
			Handler:    _Determined_ResourceAllocationRaw_Handler,
		},
		{
			MethodName: "ResourceAllocationAggregated",
			Handler:    _Determined_ResourceAllocationAggregated_Handler,
		},
		{
			MethodName: "GetWorkspace",
			Handler:    _Determined_GetWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspaceProjects",
			Handler:    _Determined_GetWorkspaceProjects_Handler,
		},
		{
			MethodName: "GetWorkspaces",
			Handler:    _Determined_GetWorkspaces_Handler,
		},
		{
			MethodName: "PostWorkspace",
			Handler:    _Determined_PostWorkspace_Handler,
		},
		{
			MethodName: "PatchWorkspace",
			Handler:    _Determined_PatchWorkspace_Handler,
		},
		{
			MethodName: "DeleteWorkspace",
			Handler:    _Determined_DeleteWorkspace_Handler,
		},
		{
			MethodName: "ArchiveWorkspace",
			Handler:    _Determined_ArchiveWorkspace_Handler,
		},
		{
			MethodName: "UnarchiveWorkspace",
			Handler:    _Determined_UnarchiveWorkspace_Handler,
		},
		{
			MethodName: "PinWorkspace",
			Handler:    _Determined_PinWorkspace_Handler,
		},
		{
			MethodName: "UnpinWorkspace",
			Handler:    _Determined_UnpinWorkspace_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Determined_GetProject_Handler,
		},
		{
			MethodName: "PostProject",
			Handler:    _Determined_PostProject_Handler,
		},
		{
			MethodName: "AddProjectNote",
			Handler:    _Determined_AddProjectNote_Handler,
		},
		{
			MethodName: "PutProjectNotes",
			Handler:    _Determined_PutProjectNotes_Handler,
		},
		{
			MethodName: "PatchProject",
			Handler:    _Determined_PatchProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Determined_DeleteProject_Handler,
		},
		{
			MethodName: "ArchiveProject",
			Handler:    _Determined_ArchiveProject_Handler,
		},
		{
			MethodName: "UnarchiveProject",
			Handler:    _Determined_UnarchiveProject_Handler,
		},
		{
			MethodName: "MoveProject",
			Handler:    _Determined_MoveProject_Handler,
		},
		{
			MethodName: "MoveExperiment",
			Handler:    _Determined_MoveExperiment_Handler,
		},
		{
			MethodName: "GetWebhooks",
			Handler:    _Determined_GetWebhooks_Handler,
		},
		{
			MethodName: "PostWebhook",
			Handler:    _Determined_PostWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _Determined_DeleteWebhook_Handler,
		},
		{
			MethodName: "TestWebhook",
			Handler:    _Determined_TestWebhook_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Determined_GetGroup_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Determined_GetGroups_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Determined_CreateGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Determined_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _Determined_DeleteGroup_Handler,
		},
		{
			MethodName: "GetPermissionsSummary",
			Handler:    _Determined_GetPermissionsSummary_Handler,
		},
		{
			MethodName: "GetGroupsAndUsersAssignedToWorkspace",
			Handler:    _Determined_GetGroupsAndUsersAssignedToWorkspace_Handler,
		},
		{
			MethodName: "GetRolesByID",
			Handler:    _Determined_GetRolesByID_Handler,
		},
		{
			MethodName: "GetRolesAssignedToUser",
			Handler:    _Determined_GetRolesAssignedToUser_Handler,
		},
		{
			MethodName: "GetRolesAssignedToGroup",
			Handler:    _Determined_GetRolesAssignedToGroup_Handler,
		},
		{
			MethodName: "SearchRolesAssignableToScope",
			Handler:    _Determined_SearchRolesAssignableToScope_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _Determined_ListRoles_Handler,
		},
		{
			MethodName: "AssignRoles",
			Handler:    _Determined_AssignRoles_Handler,
		},
		{
			MethodName: "RemoveAssignments",
			Handler:    _Determined_RemoveAssignments_Handler,
		},
		{
			MethodName: "PostUserActivity",
			Handler:    _Determined_PostUserActivity_Handler,
		},
		{
			MethodName: "GetProjectsByUserActivity",
			Handler:    _Determined_GetProjectsByUserActivity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MasterLogs",
			Handler:       _Determined_MasterLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TrialLogs",
			Handler:       _Determined_TrialLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TrialLogsFields",
			Handler:       _Determined_TrialLogsFields_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskLogs",
			Handler:       _Determined_TaskLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TaskLogsFields",
			Handler:       _Determined_TaskLogsFields_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrialProfilerMetrics",
			Handler:       _Determined_GetTrialProfilerMetrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTrialProfilerAvailableSeries",
			Handler:       _Determined_GetTrialProfilerAvailableSeries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MetricNames",
			Handler:       _Determined_MetricNames_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MetricBatches",
			Handler:       _Determined_MetricBatches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TrialsSnapshot",
			Handler:       _Determined_TrialsSnapshot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TrialsSample",
			Handler:       _Determined_TrialsSample_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetHPImportance",
			Handler:       _Determined_GetHPImportance_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "determined/api/v1/api.proto",
}
