// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// source: determined/api/v1/task.proto

package apiv1

import (
	checkpointv1 "github.com/determined-ai/determined/proto/pkg/checkpointv1"
	logv1 "github.com/determined-ai/determined/proto/pkg/logv1"
	taskv1 "github.com/determined-ai/determined/proto/pkg/taskv1"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Get the requested task.
type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested task id.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{0}
}

func (x *GetTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// Response to GetTaskRequest.
type GetTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested task.
	Task *taskv1.Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *GetTaskResponse) Reset() {
	*x = GetTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskResponse) ProtoMessage() {}

func (x *GetTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskResponse.ProtoReflect.Descriptor instead.
func (*GetTaskResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{1}
}

func (x *GetTaskResponse) GetTask() *taskv1.Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// Request a count of active tasks by type.
type GetActiveTasksCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetActiveTasksCountRequest) Reset() {
	*x = GetActiveTasksCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveTasksCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveTasksCountRequest) ProtoMessage() {}

func (x *GetActiveTasksCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveTasksCountRequest.ProtoReflect.Descriptor instead.
func (*GetActiveTasksCountRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{2}
}

// Response to GetActiveTasksCountRequest.
type GetActiveTasksCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The count of commands.
	Commands int32 `protobuf:"varint,1,opt,name=commands,proto3" json:"commands,omitempty"`
	// The count of notebooks.
	Notebooks int32 `protobuf:"varint,2,opt,name=notebooks,proto3" json:"notebooks,omitempty"`
	// The count of shells.
	Shells int32 `protobuf:"varint,3,opt,name=shells,proto3" json:"shells,omitempty"`
	// The count of TensorBoards.
	Tensorboards int32 `protobuf:"varint,4,opt,name=tensorboards,proto3" json:"tensorboards,omitempty"`
}

func (x *GetActiveTasksCountResponse) Reset() {
	*x = GetActiveTasksCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveTasksCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveTasksCountResponse) ProtoMessage() {}

func (x *GetActiveTasksCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveTasksCountResponse.ProtoReflect.Descriptor instead.
func (*GetActiveTasksCountResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{3}
}

func (x *GetActiveTasksCountResponse) GetCommands() int32 {
	if x != nil {
		return x.Commands
	}
	return 0
}

func (x *GetActiveTasksCountResponse) GetNotebooks() int32 {
	if x != nil {
		return x.Notebooks
	}
	return 0
}

func (x *GetActiveTasksCountResponse) GetShells() int32 {
	if x != nil {
		return x.Shells
	}
	return 0
}

func (x *GetActiveTasksCountResponse) GetTensorboards() int32 {
	if x != nil {
		return x.Tensorboards
	}
	return 0
}

// Mark the given task as ready.
type AllocationReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the allocation.
	AllocationId string `protobuf:"bytes,1,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
}

func (x *AllocationReadyRequest) Reset() {
	*x = AllocationReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationReadyRequest) ProtoMessage() {}

func (x *AllocationReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationReadyRequest.ProtoReflect.Descriptor instead.
func (*AllocationReadyRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{4}
}

func (x *AllocationReadyRequest) GetAllocationId() string {
	if x != nil {
		return x.AllocationId
	}
	return ""
}

// Response to AllocationReadyRequest.
type AllocationReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllocationReadyResponse) Reset() {
	*x = AllocationReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationReadyResponse) ProtoMessage() {}

func (x *AllocationReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationReadyResponse.ProtoReflect.Descriptor instead.
func (*AllocationReadyResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{5}
}

// Mark the given task as waiting.
type AllocationWaitingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the allocation.
	AllocationId string `protobuf:"bytes,1,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
}

func (x *AllocationWaitingRequest) Reset() {
	*x = AllocationWaitingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationWaitingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationWaitingRequest) ProtoMessage() {}

func (x *AllocationWaitingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationWaitingRequest.ProtoReflect.Descriptor instead.
func (*AllocationWaitingRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{6}
}

func (x *AllocationWaitingRequest) GetAllocationId() string {
	if x != nil {
		return x.AllocationId
	}
	return ""
}

// Response to AllocationWaitingRequest.
type AllocationWaitingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllocationWaitingResponse) Reset() {
	*x = AllocationWaitingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocationWaitingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocationWaitingResponse) ProtoMessage() {}

func (x *AllocationWaitingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocationWaitingResponse.ProtoReflect.Descriptor instead.
func (*AllocationWaitingResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{7}
}

// Stream task logs.
type TaskLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the task.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Limit the number of trial logs. A value of 0 denotes no limit.
	Limit int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Continue following logs until the trial stops.
	Follow bool `protobuf:"varint,5,opt,name=follow,proto3" json:"follow,omitempty"`
	// Limit the task logs to particular allocations.
	AllocationIds []string `protobuf:"bytes,6,rep,name=allocation_ids,json=allocationIds,proto3" json:"allocation_ids,omitempty"`
	// Limit the trial logs to a subset of agents.
	AgentIds []string `protobuf:"bytes,7,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	// Limit the trial logs to a subset of containers.
	ContainerIds []string `protobuf:"bytes,8,rep,name=container_ids,json=containerIds,proto3" json:"container_ids,omitempty"`
	// Limit the trial logs to a subset of ranks.
	RankIds []int32 `protobuf:"varint,9,rep,packed,name=rank_ids,json=rankIds,proto3" json:"rank_ids,omitempty"`
	// Limit the trial logs to a subset of agents.
	Levels []logv1.LogLevel `protobuf:"varint,10,rep,packed,name=levels,proto3,enum=determined.log.v1.LogLevel" json:"levels,omitempty"`
	// Limit the trial logs to a subset of output streams.
	Stdtypes []string `protobuf:"bytes,11,rep,name=stdtypes,proto3" json:"stdtypes,omitempty"`
	// Limit the trial logs to a subset of sources.
	Sources []string `protobuf:"bytes,12,rep,name=sources,proto3" json:"sources,omitempty"`
	// Limit the trial logs to ones with a timestamp before a given time.
	TimestampBefore *timestamp.Timestamp `protobuf:"bytes,13,opt,name=timestamp_before,json=timestampBefore,proto3" json:"timestamp_before,omitempty"`
	// Limit the trial logs to ones with a timestamp after a given time.
	TimestampAfter *timestamp.Timestamp `protobuf:"bytes,14,opt,name=timestamp_after,json=timestampAfter,proto3" json:"timestamp_after,omitempty"`
	// Order logs in either ascending or descending order by timestamp.
	OrderBy OrderBy `protobuf:"varint,15,opt,name=order_by,json=orderBy,proto3,enum=determined.api.v1.OrderBy" json:"order_by,omitempty"`
	// Search the logs by whether the text contains a substring.
	SearchText string `protobuf:"bytes,16,opt,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
}

func (x *TaskLogsRequest) Reset() {
	*x = TaskLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogsRequest) ProtoMessage() {}

func (x *TaskLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogsRequest.ProtoReflect.Descriptor instead.
func (*TaskLogsRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{8}
}

func (x *TaskLogsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskLogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TaskLogsRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

func (x *TaskLogsRequest) GetAllocationIds() []string {
	if x != nil {
		return x.AllocationIds
	}
	return nil
}

func (x *TaskLogsRequest) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *TaskLogsRequest) GetContainerIds() []string {
	if x != nil {
		return x.ContainerIds
	}
	return nil
}

func (x *TaskLogsRequest) GetRankIds() []int32 {
	if x != nil {
		return x.RankIds
	}
	return nil
}

func (x *TaskLogsRequest) GetLevels() []logv1.LogLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *TaskLogsRequest) GetStdtypes() []string {
	if x != nil {
		return x.Stdtypes
	}
	return nil
}

func (x *TaskLogsRequest) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *TaskLogsRequest) GetTimestampBefore() *timestamp.Timestamp {
	if x != nil {
		return x.TimestampBefore
	}
	return nil
}

func (x *TaskLogsRequest) GetTimestampAfter() *timestamp.Timestamp {
	if x != nil {
		return x.TimestampAfter
	}
	return nil
}

func (x *TaskLogsRequest) GetOrderBy() OrderBy {
	if x != nil {
		return x.OrderBy
	}
	return OrderBy_ORDER_BY_UNSPECIFIED
}

func (x *TaskLogsRequest) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

// Response to TaskLogsRequest.
type TaskLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the log.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The timestamp of the log.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The flat version of the log that UIs have shown historically.
	//
	// Deprecated: Do not use.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// The level of the log.
	Level logv1.LogLevel `protobuf:"varint,4,opt,name=level,proto3,enum=determined.log.v1.LogLevel" json:"level,omitempty"`
	// The ID of the task.
	TaskId string `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The ID of the allocation.
	AllocationId *string `protobuf:"bytes,6,opt,name=allocation_id,json=allocationId,proto3,oneof" json:"allocation_id,omitempty"`
	// The agent the logs came from.
	AgentId *string `protobuf:"bytes,7,opt,name=agent_id,json=agentId,proto3,oneof" json:"agent_id,omitempty"`
	// The ID of the container or, in the case of k8s, the pod name.
	ContainerId *string `protobuf:"bytes,8,opt,name=container_id,json=containerId,proto3,oneof" json:"container_id,omitempty"`
	// The rank ID.
	RankId *int32 `protobuf:"varint,9,opt,name=rank_id,json=rankId,proto3,oneof" json:"rank_id,omitempty"`
	// The text of the log entry.
	Log string `protobuf:"bytes,10,opt,name=log,proto3" json:"log,omitempty"`
	// The source of the log entry.
	Source *string `protobuf:"bytes,11,opt,name=source,proto3,oneof" json:"source,omitempty"`
	// The output stream (e.g. stdout, stderr).
	Stdtype *string `protobuf:"bytes,12,opt,name=stdtype,proto3,oneof" json:"stdtype,omitempty"`
}

func (x *TaskLogsResponse) Reset() {
	*x = TaskLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogsResponse) ProtoMessage() {}

func (x *TaskLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogsResponse.ProtoReflect.Descriptor instead.
func (*TaskLogsResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{9}
}

func (x *TaskLogsResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskLogsResponse) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Deprecated: Do not use.
func (x *TaskLogsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TaskLogsResponse) GetLevel() logv1.LogLevel {
	if x != nil {
		return x.Level
	}
	return logv1.LogLevel_LOG_LEVEL_UNSPECIFIED
}

func (x *TaskLogsResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskLogsResponse) GetAllocationId() string {
	if x != nil && x.AllocationId != nil {
		return *x.AllocationId
	}
	return ""
}

func (x *TaskLogsResponse) GetAgentId() string {
	if x != nil && x.AgentId != nil {
		return *x.AgentId
	}
	return ""
}

func (x *TaskLogsResponse) GetContainerId() string {
	if x != nil && x.ContainerId != nil {
		return *x.ContainerId
	}
	return ""
}

func (x *TaskLogsResponse) GetRankId() int32 {
	if x != nil && x.RankId != nil {
		return *x.RankId
	}
	return 0
}

func (x *TaskLogsResponse) GetLog() string {
	if x != nil {
		return x.Log
	}
	return ""
}

func (x *TaskLogsResponse) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

func (x *TaskLogsResponse) GetStdtype() string {
	if x != nil && x.Stdtype != nil {
		return *x.Stdtype
	}
	return ""
}

// Stream distinct task log fields.
type TaskLogsFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the task.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Continue following fields until the task stops.
	Follow bool `protobuf:"varint,2,opt,name=follow,proto3" json:"follow,omitempty"`
}

func (x *TaskLogsFieldsRequest) Reset() {
	*x = TaskLogsFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogsFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogsFieldsRequest) ProtoMessage() {}

func (x *TaskLogsFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogsFieldsRequest.ProtoReflect.Descriptor instead.
func (*TaskLogsFieldsRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{10}
}

func (x *TaskLogsFieldsRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskLogsFieldsRequest) GetFollow() bool {
	if x != nil {
		return x.Follow
	}
	return false
}

// Response to TaskLogsFieldsRequest.
type TaskLogsFieldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The distint allocation IDs present in the logs.
	AllocationIds []string `protobuf:"bytes,1,rep,name=allocation_ids,json=allocationIds,proto3" json:"allocation_ids,omitempty"`
	// The distinct agent IDs present in the logs.
	AgentIds []string `protobuf:"bytes,2,rep,name=agent_ids,json=agentIds,proto3" json:"agent_ids,omitempty"`
	// The distinct container IDs present in the logs.
	ContainerIds []string `protobuf:"bytes,3,rep,name=container_ids,json=containerIds,proto3" json:"container_ids,omitempty"`
	// The distinct rank IDs present in the logs.
	RankIds []int32 `protobuf:"varint,4,rep,packed,name=rank_ids,json=rankIds,proto3" json:"rank_ids,omitempty"`
	// The distinct stdtypes present in the logs.
	Stdtypes []string `protobuf:"bytes,5,rep,name=stdtypes,proto3" json:"stdtypes,omitempty"`
	// The distinct sources present in the logs.
	Sources []string `protobuf:"bytes,6,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *TaskLogsFieldsResponse) Reset() {
	*x = TaskLogsFieldsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLogsFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLogsFieldsResponse) ProtoMessage() {}

func (x *TaskLogsFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLogsFieldsResponse.ProtoReflect.Descriptor instead.
func (*TaskLogsFieldsResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{11}
}

func (x *TaskLogsFieldsResponse) GetAllocationIds() []string {
	if x != nil {
		return x.AllocationIds
	}
	return nil
}

func (x *TaskLogsFieldsResponse) GetAgentIds() []string {
	if x != nil {
		return x.AgentIds
	}
	return nil
}

func (x *TaskLogsFieldsResponse) GetContainerIds() []string {
	if x != nil {
		return x.ContainerIds
	}
	return nil
}

func (x *TaskLogsFieldsResponse) GetRankIds() []int32 {
	if x != nil {
		return x.RankIds
	}
	return nil
}

func (x *TaskLogsFieldsResponse) GetStdtypes() []string {
	if x != nil {
		return x.Stdtypes
	}
	return nil
}

func (x *TaskLogsFieldsResponse) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

// Report the given checkpoint for the task.
type ReportCheckpointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The training metrics to persist.
	Checkpoint *checkpointv1.Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
}

func (x *ReportCheckpointRequest) Reset() {
	*x = ReportCheckpointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCheckpointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCheckpointRequest) ProtoMessage() {}

func (x *ReportCheckpointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCheckpointRequest.ProtoReflect.Descriptor instead.
func (*ReportCheckpointRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{12}
}

func (x *ReportCheckpointRequest) GetCheckpoint() *checkpointv1.Checkpoint {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

// Response to ReportCheckpointRequest.
type ReportCheckpointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReportCheckpointResponse) Reset() {
	*x = ReportCheckpointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportCheckpointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportCheckpointResponse) ProtoMessage() {}

func (x *ReportCheckpointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportCheckpointResponse.ProtoReflect.Descriptor instead.
func (*ReportCheckpointResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{13}
}

// Request the information of all tasks.
type GetTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTasksRequest) Reset() {
	*x = GetTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksRequest) ProtoMessage() {}

func (x *GetTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksRequest.ProtoReflect.Descriptor instead.
func (*GetTasksRequest) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{14}
}

// Response to GetTasksRequest.
type GetTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about a task for external display.
	AllocationIdToSummary map[string]*taskv1.AllocationSummary `protobuf:"bytes,1,rep,name=allocation_id_to_summary,json=allocationIdToSummary,proto3" json:"allocation_id_to_summary,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTasksResponse) Reset() {
	*x = GetTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_determined_api_v1_task_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTasksResponse) ProtoMessage() {}

func (x *GetTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_determined_api_v1_task_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTasksResponse.ProtoReflect.Descriptor instead.
func (*GetTasksResponse) Descriptor() ([]byte, []int) {
	return file_determined_api_v1_task_proto_rawDescGZIP(), []int{15}
}

func (x *GetTasksResponse) GetAllocationIdToSummary() map[string]*taskv1.AllocationSummary {
	if x != nil {
		return x.AllocationIdToSummary
	}
	return nil
}

var File_determined_api_v1_task_proto protoreflect.FileDescriptor

var file_determined_api_v1_task_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x29, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x64,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x6c, 0x6f, 0x67,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65,
	0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x3a, 0x0c, 0x92, 0x41, 0x09, 0x0a, 0x07, 0xd2,
	0x01, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x34, 0x92, 0x41, 0x31, 0x0a,
	0x2f, 0xd2, 0x01, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0xd2, 0x01, 0x09, 0x6e,
	0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0xd2, 0x01, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x73, 0xd2, 0x01, 0x0c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x22, 0x3d, 0x0a, 0x16, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x19, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x18, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbc, 0x04, 0x0a, 0x0f, 0x54, 0x61, 0x73,
	0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x64, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x64, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0xb1, 0x04, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b,
	0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x06, 0x72, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c,
	0x6f, 0x67, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x07, 0x73, 0x74, 0x64, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x3a, 0x38,
	0x92, 0x41, 0x35, 0x0a, 0x33, 0xd2, 0x01, 0x02, 0x69, 0x64, 0xd2, 0x01, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0xd2, 0x01, 0x03, 0x6c, 0x6f, 0x67, 0xd2, 0x01, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0xd2, 0x01, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x61, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x64, 0x74, 0x79, 0x70, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x54,
	0x61, 0x73, 0x6b, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x66,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x3a, 0x0f, 0x92, 0x41, 0x0c, 0x0a, 0x0a, 0xd2, 0x01, 0x07, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x73, 0x6b, 0x4c,
	0x6f, 0x67, 0x73, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61,
	0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x3a, 0x05, 0x92, 0x41, 0x02,
	0x0a, 0x00, 0x22, 0x73, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x3a, 0x12, 0x92, 0x41, 0x0f, 0x0a, 0x0d, 0xd2, 0x01, 0x0a, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x18, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x54,
	0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x54, 0x6f, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x1a, 0x6f, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x54, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2d, 0x61,
	0x69, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_determined_api_v1_task_proto_rawDescOnce sync.Once
	file_determined_api_v1_task_proto_rawDescData = file_determined_api_v1_task_proto_rawDesc
)

func file_determined_api_v1_task_proto_rawDescGZIP() []byte {
	file_determined_api_v1_task_proto_rawDescOnce.Do(func() {
		file_determined_api_v1_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_determined_api_v1_task_proto_rawDescData)
	})
	return file_determined_api_v1_task_proto_rawDescData
}

var file_determined_api_v1_task_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_determined_api_v1_task_proto_goTypes = []interface{}{
	(*GetTaskRequest)(nil),              // 0: determined.api.v1.GetTaskRequest
	(*GetTaskResponse)(nil),             // 1: determined.api.v1.GetTaskResponse
	(*GetActiveTasksCountRequest)(nil),  // 2: determined.api.v1.GetActiveTasksCountRequest
	(*GetActiveTasksCountResponse)(nil), // 3: determined.api.v1.GetActiveTasksCountResponse
	(*AllocationReadyRequest)(nil),      // 4: determined.api.v1.AllocationReadyRequest
	(*AllocationReadyResponse)(nil),     // 5: determined.api.v1.AllocationReadyResponse
	(*AllocationWaitingRequest)(nil),    // 6: determined.api.v1.AllocationWaitingRequest
	(*AllocationWaitingResponse)(nil),   // 7: determined.api.v1.AllocationWaitingResponse
	(*TaskLogsRequest)(nil),             // 8: determined.api.v1.TaskLogsRequest
	(*TaskLogsResponse)(nil),            // 9: determined.api.v1.TaskLogsResponse
	(*TaskLogsFieldsRequest)(nil),       // 10: determined.api.v1.TaskLogsFieldsRequest
	(*TaskLogsFieldsResponse)(nil),      // 11: determined.api.v1.TaskLogsFieldsResponse
	(*ReportCheckpointRequest)(nil),     // 12: determined.api.v1.ReportCheckpointRequest
	(*ReportCheckpointResponse)(nil),    // 13: determined.api.v1.ReportCheckpointResponse
	(*GetTasksRequest)(nil),             // 14: determined.api.v1.GetTasksRequest
	(*GetTasksResponse)(nil),            // 15: determined.api.v1.GetTasksResponse
	nil,                                 // 16: determined.api.v1.GetTasksResponse.AllocationIdToSummaryEntry
	(*taskv1.Task)(nil),                 // 17: determined.task.v1.Task
	(logv1.LogLevel)(0),                 // 18: determined.log.v1.LogLevel
	(*timestamp.Timestamp)(nil),         // 19: google.protobuf.Timestamp
	(OrderBy)(0),                        // 20: determined.api.v1.OrderBy
	(*checkpointv1.Checkpoint)(nil),     // 21: determined.checkpoint.v1.Checkpoint
	(*taskv1.AllocationSummary)(nil),    // 22: determined.task.v1.AllocationSummary
}
var file_determined_api_v1_task_proto_depIdxs = []int32{
	17, // 0: determined.api.v1.GetTaskResponse.task:type_name -> determined.task.v1.Task
	18, // 1: determined.api.v1.TaskLogsRequest.levels:type_name -> determined.log.v1.LogLevel
	19, // 2: determined.api.v1.TaskLogsRequest.timestamp_before:type_name -> google.protobuf.Timestamp
	19, // 3: determined.api.v1.TaskLogsRequest.timestamp_after:type_name -> google.protobuf.Timestamp
	20, // 4: determined.api.v1.TaskLogsRequest.order_by:type_name -> determined.api.v1.OrderBy
	19, // 5: determined.api.v1.TaskLogsResponse.timestamp:type_name -> google.protobuf.Timestamp
	18, // 6: determined.api.v1.TaskLogsResponse.level:type_name -> determined.log.v1.LogLevel
	21, // 7: determined.api.v1.ReportCheckpointRequest.checkpoint:type_name -> determined.checkpoint.v1.Checkpoint
	16, // 8: determined.api.v1.GetTasksResponse.allocation_id_to_summary:type_name -> determined.api.v1.GetTasksResponse.AllocationIdToSummaryEntry
	22, // 9: determined.api.v1.GetTasksResponse.AllocationIdToSummaryEntry.value:type_name -> determined.task.v1.AllocationSummary
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_determined_api_v1_task_proto_init() }
func file_determined_api_v1_task_proto_init() {
	if File_determined_api_v1_task_proto != nil {
		return
	}
	file_determined_api_v1_pagination_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_determined_api_v1_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveTasksCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveTasksCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationWaitingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocationWaitingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogsFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLogsFieldsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCheckpointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportCheckpointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_determined_api_v1_task_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_determined_api_v1_task_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_determined_api_v1_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_determined_api_v1_task_proto_goTypes,
		DependencyIndexes: file_determined_api_v1_task_proto_depIdxs,
		MessageInfos:      file_determined_api_v1_task_proto_msgTypes,
	}.Build()
	File_determined_api_v1_task_proto = out.File
	file_determined_api_v1_task_proto_rawDesc = nil
	file_determined_api_v1_task_proto_goTypes = nil
	file_determined_api_v1_task_proto_depIdxs = nil
}
