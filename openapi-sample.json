{
  "swagger": "2.0",
  "info": {
    "title": "Determined API (Beta)",
    "description": "Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.\n\nYou can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.",
    "version": "0.1",
    "contact": {
      "name": "Determined AI",
      "url": "https://determined.ai/",
      "email": "community@determined.ai"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/agents": {
      "get": {
        "summary": "Get a set of agents from the cluster.",
        "operationId": "GetAgents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAgentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "sortBy",
            "description": "Sort agents by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns agents in an unsorted list.\n - SORT_BY_ID: Returns agents sorted by id.\n - SORT_BY_TIME: Returns agents sorted by time.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_ID",
              "SORT_BY_TIME"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order agents in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of agents before returning results. Negative values\ndenote number of agents to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of agents. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "label",
            "description": "Filter agents by their label. If no label is specified or is empty, all\nagents are returned.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/agents/{agentId}": {
      "get": {
        "summary": "Get the requested agent.",
        "operationId": "GetAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAgentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "description": "The id of the agent.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/agents/{agentId}/disable": {
      "post": {
        "summary": "Disable the agent.",
        "operationId": "DisableAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DisableAgentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "description": "The id of the agent.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DisableAgentRequest"
            }
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/agents/{agentId}/enable": {
      "post": {
        "summary": "Enable the agent.",
        "operationId": "EnableAgent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EnableAgentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "description": "The id of the agent.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/agents/{agentId}/slots": {
      "get": {
        "summary": "Get all the slots for an agent.",
        "operationId": "GetSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "description": "The id of the agent.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/agents/{agentId}/slots/{slotId}": {
      "get": {
        "summary": "Get the requested slot for an agent.",
        "operationId": "GetSlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSlotResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "description": "The id of the agent.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotId",
            "description": "The id of the slot.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/agents/{agentId}/slots/{slotId}/disable": {
      "post": {
        "summary": "Disable the slot.",
        "operationId": "DisableSlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DisableSlotResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "description": "The id of the agent.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotId",
            "description": "The id of the slot.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/agents/{agentId}/slots/{slotId}/enable": {
      "post": {
        "summary": "Enable the slot.",
        "operationId": "EnableSlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EnableSlotResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "agentId",
            "description": "The id of the agent.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "slotId",
            "description": "The id of the slot.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/allocations/{allocationId}/containers/{containerId}/daemon": {
      "post": {
        "summary": "Mark the given reservation (container, pod, etc) within an allocation as\na daemon reservation. In the exit of a successful exit, Determined will\nwait for all reservations to exit - unless they are marked as daemon\nreservations, in which case Determined will clean them up regardless of\nexit status after all non-daemon reservations have exited.",
        "operationId": "MarkAllocationReservationDaemon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MarkAllocationReservationDaemonResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "allocationId",
            "description": "The allocation ID for the reservation.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "containerId",
            "description": "The container ID for the reservation.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MarkAllocationReservationDaemonRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/allocations/{allocationId}/rendezvous_info/{containerId}": {
      "get": {
        "summary": "Gather an allocation's rendezvous info. Blocks until all trial containers\nconnect to gather their rendezvous information and responds to them all at\nonce.",
        "operationId": "AllocationRendezvousInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AllocationRendezvousInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "allocationId",
            "description": "The id of the allocation.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "containerId",
            "description": "The id of the allocation. Used to verify all allocations are connected.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/allocations/{allocationId}/signals/ack_preemption": {
      "post": {
        "summary": "Acknowledge the receipt of a signal to stop the given allocation early.\nThis is used indicate and exit 0 isn't final; specifically, it is used\nfor HP search directed early stops and preemption signals (not necessarily\njust scheduler preemption).",
        "operationId": "AckAllocationPreemptionSignal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AckAllocationPreemptionSignalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "allocationId",
            "description": "The allocation that is acknowledging the request.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AckAllocationPreemptionSignalRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/allocations/{allocationId}/signals/preemption": {
      "get": {
        "summary": "Long poll preemption signals for the given allocation. If the allocation\nhas been preempted when called, it will return so immediately. Otherwise,\nthe connection will be kept open until the timeout is reached or\nthe allocation is preempted.",
        "operationId": "AllocationPreemptionSignal",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AllocationPreemptionSignalResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "allocationId",
            "description": "The id of the allocation.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "timeoutSeconds",
            "description": "The timeout in seconds.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "summary": "Login the user.",
        "operationId": "Login",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LoginRequest"
            }
          }
        ],
        "tags": [
          "Authentication"
        ],
        "security": []
      }
    },
    "/api/v1/auth/logout": {
      "post": {
        "summary": "Logout the user.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LogoutResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/auth/user": {
      "get": {
        "summary": "Get the current user.",
        "operationId": "CurrentUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CurrentUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/v1/checkpoints/{checkpoint.uuid}/metadata": {
      "post": {
        "summary": "Update checkpoint metadata.",
        "operationId": "PostCheckpointMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PostCheckpointMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "checkpoint.uuid",
            "description": "UUID of the checkpoint.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PostCheckpointMetadataRequest"
            }
          }
        ],
        "tags": [
          "Checkpoints"
        ]
      }
    },
    "/api/v1/checkpoints/{checkpointUuid}": {
      "get": {
        "summary": "Get the requested checkpoint.",
        "operationId": "GetCheckpoint",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCheckpointResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "checkpointUuid",
            "description": "The uuid for the requested checkpoint.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Checkpoints"
        ]
      }
    },
    "/api/v1/commands": {
      "get": {
        "summary": "Get a list of commands.",
        "operationId": "GetCommands",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCommandsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "sortBy",
            "description": "Sort commands by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns commands in an unsorted list.\n - SORT_BY_ID: Returns commands sorted by id.\n - SORT_BY_DESCRIPTION: Returns commands sorted by description.\n - SORT_BY_START_TIME: Return commands sorted by start time.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_ID",
              "SORT_BY_DESCRIPTION",
              "SORT_BY_START_TIME"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order commands in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of commands before returning results. Negative values\ndenote number of commands to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of commands. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "users",
            "description": "Limit commands to those that are owned by the specified users.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Commands"
        ]
      },
      "post": {
        "summary": "Launch a command.",
        "operationId": "LaunchCommand",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LaunchCommandResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LaunchCommandRequest"
            }
          }
        ],
        "tags": [
          "Commands"
        ]
      }
    },
    "/api/v1/commands/{commandId}": {
      "get": {
        "summary": "Get the requested command.",
        "operationId": "GetCommand",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCommandResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "commandId",
            "description": "The id of the command.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Commands"
        ]
      }
    },
    "/api/v1/commands/{commandId}/kill": {
      "post": {
        "summary": "Kill the requested command.",
        "operationId": "KillCommand",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1KillCommandResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "commandId",
            "description": "The id of the command.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Commands"
        ]
      }
    },
    "/api/v1/commands/{commandId}/set_priority": {
      "post": {
        "summary": "Set the priority of the requested command.",
        "operationId": "SetCommandPriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetCommandPriorityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "commandId",
            "description": "The id of the command.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetCommandPriorityRequest"
            }
          }
        ],
        "tags": [
          "Commands"
        ]
      }
    },
    "/api/v1/experiment/labels": {
      "get": {
        "summary": "Get a list of unique experiment labels (sorted by popularity).",
        "operationId": "GetExperimentLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetExperimentLabelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments": {
      "get": {
        "summary": "Get a list of experiments.",
        "operationId": "GetExperiments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetExperimentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "sortBy",
            "description": "Sort experiments by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns experiments in an unsorted list.\n - SORT_BY_ID: Returns experiments sorted by id.\n - SORT_BY_DESCRIPTION: Returns experiments sorted by description.\n - SORT_BY_START_TIME: Return experiments sorted by start time.\n - SORT_BY_END_TIME: Return experiments sorted by end time. Experiments without end_time are\nreturned after the ones with end_time.\n - SORT_BY_STATE: Return experiments sorted by state.\n - SORT_BY_NUM_TRIALS: Return experiments sorted by number of trials.\n - SORT_BY_PROGRESS: Return experiments sorted by progress.\n - SORT_BY_USER: Return experiments sorted by user.\n - SORT_BY_NAME: Returns experiments sorted by name.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_ID",
              "SORT_BY_DESCRIPTION",
              "SORT_BY_START_TIME",
              "SORT_BY_END_TIME",
              "SORT_BY_STATE",
              "SORT_BY_NUM_TRIALS",
              "SORT_BY_PROGRESS",
              "SORT_BY_USER",
              "SORT_BY_NAME"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order experiments in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of experiments before returning results. Negative values\ndenote number of experiments to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of experiments.\n0 or Unspecified - returns a default of 100.\n-1               - returns everything.\n-2               - returns pagination info but no experiments.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "description",
            "description": "Limit experiments to those that match the description.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "description": "Limit experiments to those that match the name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labels",
            "description": "Limit experiments to those that match the provided labels.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "archived",
            "description": "Limit experiments to those that are archived.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "states",
            "description": "Limit experiments to those that match the provided state.\n\n - STATE_UNSPECIFIED: The state of the experiment is unknown.\n - STATE_ACTIVE: The experiment is in an active state.\n - STATE_PAUSED: The experiment is in a paused state\n - STATE_STOPPING_COMPLETED: The experiment is completed and is shutting down.\n - STATE_STOPPING_CANCELED: The experiment is canceled and is shutting down.\n - STATE_STOPPING_ERROR: The experiment is errored and is shutting down.\n - STATE_COMPLETED: The experiment is completed and is shut down.\n - STATE_CANCELED: The experiment is canceled and is shut down.\n - STATE_ERROR: The experiment is errored and is shut down.\n - STATE_DELETED: The experiment has been deleted.\n - STATE_DELETING: The experiment is deleting.\n - STATE_DELETE_FAILED: The experiment failed to delete.\n - STATE_STOPPING_KILLED: The experiment is killed and is shutting down.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATE_UNSPECIFIED",
                "STATE_ACTIVE",
                "STATE_PAUSED",
                "STATE_STOPPING_COMPLETED",
                "STATE_STOPPING_CANCELED",
                "STATE_STOPPING_ERROR",
                "STATE_COMPLETED",
                "STATE_CANCELED",
                "STATE_ERROR",
                "STATE_DELETED",
                "STATE_DELETING",
                "STATE_DELETE_FAILED",
                "STATE_STOPPING_KILLED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "users",
            "description": "Limit experiments to those that are owned by the specified users.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Experiments"
        ]
      },
      "post": {
        "summary": "Create an experiment.",
        "operationId": "CreateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateExperimentRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/experiments/{experiment.id}": {
      "patch": {
        "summary": "Patch an experiment's fields.",
        "operationId": "PatchExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PatchExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experiment.id",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "description": "Patched experiment attributes.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Experiment"
            }
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}": {
      "get": {
        "summary": "Get the requested experiment.",
        "operationId": "GetExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      },
      "delete": {
        "summary": "Delete the requested experiment.",
        "operationId": "DeleteExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The ID of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}/hyperparameter-importance": {
      "get": {
        "summary": "Retrieve the latest computation of hyperparameter importance. Currently\nthis is triggered for training loss (if emitted) and the searcher metric\nafter 10% increments in an experiment's progress, but no more than every 10\nminutes.",
        "operationId": "GetHPImportance",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1GetHPImportanceResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1GetHPImportanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodSeconds",
            "description": "Seconds to wait when polling for updates.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      },
      "post": {
        "summary": "Trigger the computation of hyperparameter importance on-demand for a\nspecific metric on a specific experiment. The status and results can be\nretrieved with GetHPImportance.",
        "operationId": "ComputeHPImportance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ComputeHPImportanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}/metrics-stream/batches": {
      "get": {
        "summary": "Get the milestones (in batches processed) at which a metric is recorded by\nan experiment.",
        "operationId": "MetricBatches",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1MetricBatchesResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1MetricBatchesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "metricName",
            "description": "A metric name.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricType",
            "description": "The type of metric.\n\n - METRIC_TYPE_UNSPECIFIED: Zero-value (not allowed).\n - METRIC_TYPE_TRAINING: For metrics emitted during training.\n - METRIC_TYPE_VALIDATION: For metrics emitted during validation.",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "METRIC_TYPE_UNSPECIFIED",
              "METRIC_TYPE_TRAINING",
              "METRIC_TYPE_VALIDATION"
            ],
            "default": "METRIC_TYPE_UNSPECIFIED"
          },
          {
            "name": "periodSeconds",
            "description": "Seconds to wait when polling for updates.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}/metrics-stream/metric-names": {
      "get": {
        "summary": "Get the set of metric names recorded for an experiment.",
        "operationId": "MetricNames",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1MetricNamesResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1MetricNamesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodSeconds",
            "description": "Seconds to wait when polling for updates.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}/metrics-stream/trials-sample": {
      "get": {
        "summary": "Get a sample of the metrics over time for a sample of the trials.",
        "operationId": "TrialsSample",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1TrialsSampleResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1TrialsSampleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "metricName",
            "description": "A metric name.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricType",
            "description": "The type of metric.\n\n - METRIC_TYPE_UNSPECIFIED: Zero-value (not allowed).\n - METRIC_TYPE_TRAINING: For metrics emitted during training.\n - METRIC_TYPE_VALIDATION: For metrics emitted during validation.",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "METRIC_TYPE_UNSPECIFIED",
              "METRIC_TYPE_TRAINING",
              "METRIC_TYPE_VALIDATION"
            ],
            "default": "METRIC_TYPE_UNSPECIFIED"
          },
          {
            "name": "maxTrials",
            "description": "Maximum number of trials to fetch data for.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "maxDatapoints",
            "description": "Maximum number of initial / historical data points.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "startBatches",
            "description": "Beginning of window (inclusive) to fetch data for.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "endBatches",
            "description": "Ending of window (inclusive) to fetch data for.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodSeconds",
            "description": "Seconds to wait when polling for updates.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}/metrics-stream/trials-snapshot": {
      "get": {
        "summary": "Get a snapshot of a metric across all trials at a certain point of\nprogress.",
        "operationId": "TrialsSnapshot",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1TrialsSnapshotResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1TrialsSnapshotResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "metricName",
            "description": "A metric name.",
            "in": "query",
            "required": true,
            "type": "string"
          },
          {
            "name": "metricType",
            "description": "The type of metric.\n\n - METRIC_TYPE_UNSPECIFIED: Zero-value (not allowed).\n - METRIC_TYPE_TRAINING: For metrics emitted during training.\n - METRIC_TYPE_VALIDATION: For metrics emitted during validation.",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [
              "METRIC_TYPE_UNSPECIFIED",
              "METRIC_TYPE_TRAINING",
              "METRIC_TYPE_VALIDATION"
            ],
            "default": "METRIC_TYPE_UNSPECIFIED"
          },
          {
            "name": "batchesProcessed",
            "description": "The point of progress at which to query metrics.",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "batchesMargin",
            "description": "A range either side of batches_processed to include near-misses.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "periodSeconds",
            "description": "Seconds to wait when polling for updates.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}/model_def": {
      "get": {
        "summary": "Get the model definition of an experiment.",
        "operationId": "GetModelDef",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetModelDefResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}/searcher/best_searcher_validation_metric": {
      "get": {
        "summary": "Get the best searcher validation for an experiment by the given metric.",
        "operationId": "GetBestSearcherValidationMetric",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetBestSearcherValidationMetricResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The ID of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}/trials": {
      "get": {
        "summary": "Get the list of trials for an experiment.",
        "operationId": "GetExperimentTrials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetExperimentTrialsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "Limit trials to those that are owned by the specified experiments.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "Sort trials by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns trials in an unsorted list.\n - SORT_BY_ID: Returns trials sorted by id.\n - SORT_BY_START_TIME: Return trials sorted by start time.\n - SORT_BY_END_TIME: Return trials sorted by end time. Trials without end times are\nreturned after trials that are.\n - SORT_BY_STATE: Return trials sorted by state.\n - SORT_BY_BEST_VALIDATION_METRIC: Return the trials sorted by the best metric so far, where the metric is\nspecified by `searcher.metric` in the experiment configuration.\n - SORT_BY_LATEST_VALIDATION_METRIC: Return the trials sorted by the latest metric so far, where the metric is\nspecified by `searcher.metric` in the experiment configuration.\n - SORT_BY_BATCHES_PROCESSED: Return the trials sorted by the number of batches completed.\n - SORT_BY_DURATION: Return the trials sorted by the total duration.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_ID",
              "SORT_BY_START_TIME",
              "SORT_BY_END_TIME",
              "SORT_BY_STATE",
              "SORT_BY_BEST_VALIDATION_METRIC",
              "SORT_BY_LATEST_VALIDATION_METRIC",
              "SORT_BY_BATCHES_PROCESSED",
              "SORT_BY_DURATION"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order trials in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of trials before returning results. Negative values\ndenote number of trials to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of trials. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "states",
            "description": "Limit trials to those that match the provided state.\n\n - STATE_UNSPECIFIED: The state of the experiment is unknown.\n - STATE_ACTIVE: The experiment is in an active state.\n - STATE_PAUSED: The experiment is in a paused state\n - STATE_STOPPING_COMPLETED: The experiment is completed and is shutting down.\n - STATE_STOPPING_CANCELED: The experiment is canceled and is shutting down.\n - STATE_STOPPING_ERROR: The experiment is errored and is shutting down.\n - STATE_COMPLETED: The experiment is completed and is shut down.\n - STATE_CANCELED: The experiment is canceled and is shut down.\n - STATE_ERROR: The experiment is errored and is shut down.\n - STATE_DELETED: The experiment has been deleted.\n - STATE_DELETING: The experiment is deleting.\n - STATE_DELETE_FAILED: The experiment failed to delete.\n - STATE_STOPPING_KILLED: The experiment is killed and is shutting down.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATE_UNSPECIFIED",
                "STATE_ACTIVE",
                "STATE_PAUSED",
                "STATE_STOPPING_COMPLETED",
                "STATE_STOPPING_CANCELED",
                "STATE_STOPPING_ERROR",
                "STATE_COMPLETED",
                "STATE_CANCELED",
                "STATE_ERROR",
                "STATE_DELETED",
                "STATE_DELETING",
                "STATE_DELETE_FAILED",
                "STATE_STOPPING_KILLED"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Trials",
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{experimentId}/validation-history": {
      "get": {
        "summary": "Get the validation history for an experiment.",
        "operationId": "GetExperimentValidationHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetExperimentValidationHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experimentId",
            "description": "The id of the experiment.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{id}/activate": {
      "post": {
        "summary": "Activate an experiment.",
        "operationId": "ActivateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ActivateExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The experiment id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{id}/archive": {
      "post": {
        "summary": "Archive an experiment.",
        "operationId": "ArchiveExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ArchiveExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The experiment id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{id}/cancel": {
      "post": {
        "summary": "Cancel an experiment.",
        "operationId": "CancelExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The experiment id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{id}/checkpoints": {
      "get": {
        "summary": "Get a list of checkpoints for an experiment.",
        "operationId": "GetExperimentCheckpoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetExperimentCheckpointsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The experiment id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "Sort checkpoints by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns checkpoints in an unsorted list.\n - SORT_BY_UUID: Returns checkpoints sorted by UUID.\n - SORT_BY_TRIAL_ID: Returns checkpoints sorted by trial id.\n - SORT_BY_BATCH_NUMBER: Returns checkpoints sorted by batch number.\n - SORT_BY_START_TIME: Returns checkpoints sorted by start time.\n - SORT_BY_END_TIME: Returns checkpoints sorted by end time.\n - SORT_BY_VALIDATION_STATE: Returns checkpoints sorted by validation state.\n - SORT_BY_STATE: Returns checkpoints sorted by state.\n - SORT_BY_SEARCHER_METRIC: Returns checkpoints sorted by the experiment's `searcher.metric`\nconfiguration setting.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_UUID",
              "SORT_BY_TRIAL_ID",
              "SORT_BY_BATCH_NUMBER",
              "SORT_BY_START_TIME",
              "SORT_BY_END_TIME",
              "SORT_BY_VALIDATION_STATE",
              "SORT_BY_STATE",
              "SORT_BY_SEARCHER_METRIC"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order checkpoints in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of checkpoints before returning results. Negative values\ndenote number of checkpoints to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of checkpoints. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "validationStates",
            "description": "Limit the checkpoints to those that match the validation states.\n\n - STATE_UNSPECIFIED: The state of the checkpoint is unknown.\n - STATE_ACTIVE: The checkpoint is in an active state.\n - STATE_COMPLETED: The checkpoint is persisted to checkpoint storage.\n - STATE_ERROR: The checkpoint errored.\n - STATE_DELETED: The checkpoint has been deleted.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATE_UNSPECIFIED",
                "STATE_ACTIVE",
                "STATE_COMPLETED",
                "STATE_ERROR",
                "STATE_DELETED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "states",
            "description": "Limit the checkpoints to those that match the states.\n\n - STATE_UNSPECIFIED: The state of the checkpoint is unknown.\n - STATE_ACTIVE: The checkpoint is in an active state.\n - STATE_COMPLETED: The checkpoint is persisted to checkpoint storage.\n - STATE_ERROR: The checkpoint errored.\n - STATE_DELETED: The checkpoint has been deleted.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATE_UNSPECIFIED",
                "STATE_ACTIVE",
                "STATE_COMPLETED",
                "STATE_ERROR",
                "STATE_DELETED"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{id}/kill": {
      "post": {
        "summary": "Kill an experiment.",
        "operationId": "KillExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1KillExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The experiment id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{id}/pause": {
      "post": {
        "summary": "Pause an experiment.",
        "operationId": "PauseExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PauseExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The experiment id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/experiments/{id}/unarchive": {
      "post": {
        "summary": "Unarchive an experiment.",
        "operationId": "UnarchiveExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UnarchiveExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The experiment id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/master": {
      "get": {
        "summary": "Get master information.",
        "operationId": "GetMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMasterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Cluster"
        ],
        "security": []
      }
    },
    "/api/v1/master/config": {
      "get": {
        "summary": "Get master config.",
        "operationId": "GetMasterConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMasterConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/master/logs": {
      "get": {
        "summary": "Stream master logs.",
        "operationId": "MasterLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1MasterLogsResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1MasterLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "description": "Skip the number of master logs before returning results. Negative values\ndenote number of master logs to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of master logs. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "follow",
            "description": "Continue following logs until the master stops or the limit is reached.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/master/telemetry": {
      "get": {
        "summary": "Get telemetry information.",
        "operationId": "GetTelemetry",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTelemetryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Internal"
        ],
        "security": []
      }
    },
    "/api/v1/model/labels": {
      "get": {
        "summary": "Get a list of unique model labels (sorted by popularity).",
        "operationId": "GetModelLabels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetModelLabelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/models": {
      "get": {
        "summary": "Get a list of models.",
        "operationId": "GetModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "sortBy",
            "description": "Sort the models by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns models in an unsorted list.\n - SORT_BY_NAME: Returns models sorted by name.\n - SORT_BY_DESCRIPTION: Returns models sorted by description.\n - SORT_BY_CREATION_TIME: Returns models sorted by creation time.\n - SORT_BY_LAST_UPDATED_TIME: Returns models sorted by last updated time.\n - SORT_BY_NUM_VERSIONS: Returns models sorted by number of version.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_NAME",
              "SORT_BY_DESCRIPTION",
              "SORT_BY_CREATION_TIME",
              "SORT_BY_LAST_UPDATED_TIME",
              "SORT_BY_NUM_VERSIONS"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order models in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of models before returning results. Negative values\ndenote number of models to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of models. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Limit the models to those matching the name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "description": "Limit the models to those matching the description.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labels",
            "description": "Limit the models to those with the following labels.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "archived",
            "description": "Limit to unarchived models only.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "users",
            "description": "Limit the models to those made by the following users.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Models"
        ]
      },
      "post": {
        "summary": "Create a model in the registry.",
        "operationId": "PostModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PostModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PostModelRequest"
            }
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/models/{modelId}": {
      "get": {
        "summary": "Get the requested model.",
        "operationId": "GetModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The name of the template.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Models"
        ]
      },
      "delete": {
        "summary": "Delete a model",
        "operationId": "DeleteModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The id of the model to delete.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Models"
        ]
      },
      "patch": {
        "summary": "Patch a model's fields.",
        "operationId": "PatchModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PatchModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The id of the model being updated.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PatchModelRequest"
            }
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/models/{modelId}/archive": {
      "post": {
        "summary": "Archive a model",
        "operationId": "ArchiveModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ArchiveModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The id of the model to archive.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/models/{modelId}/unarchive": {
      "post": {
        "summary": "Unarchive a model",
        "operationId": "UnarchiveModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UnarchiveModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The id of the model to un-archive.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/models/{modelId}/versions": {
      "get": {
        "summary": "Get a list of versions for the requested model.",
        "operationId": "GetModelVersions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetModelVersionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The id of the model.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "Sort the model versions by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns model versions in an unsorted list.\n - SORT_BY_VERSION: Returns model versions sorted by version number.\n - SORT_BY_CREATION_TIME: Returns model versions sorted by creation_time.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_VERSION",
              "SORT_BY_CREATION_TIME"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order model versions in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of model versions before returning results. Negative values\ndenote number of models to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of model versions. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Models"
        ]
      },
      "post": {
        "summary": "Create a model version.",
        "operationId": "PostModelVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PostModelVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The id of the model to add this version to.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PostModelVersionRequest"
            }
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/models/{modelId}/versions/{modelVersionId}": {
      "delete": {
        "summary": "Delete a model version",
        "operationId": "DeleteModelVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteModelVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The id of the model associated with the model version.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "modelVersionId",
            "description": "THe id of the model version to delete.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Models"
        ]
      },
      "patch": {
        "summary": "Patch a model version's fields.",
        "operationId": "PatchModelVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PatchModelVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The id of the model being updated.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "modelVersionId",
            "description": "The id of the model version being updated.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PatchModelVersionRequest"
            }
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/models/{modelId}/versions/{modelVersion}": {
      "get": {
        "summary": "Get the requested model version.",
        "operationId": "GetModelVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetModelVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "modelId",
            "description": "The id of the model.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "modelVersion",
            "description": "The version number.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Models"
        ]
      }
    },
    "/api/v1/notebooks": {
      "get": {
        "summary": "Get a list of notebooks.",
        "operationId": "GetNotebooks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNotebooksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "sortBy",
            "description": "Sort notebooks by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns notebooks in an unsorted list.\n - SORT_BY_ID: Returns notebooks sorted by id.\n - SORT_BY_DESCRIPTION: Returns notebooks sorted by description.\n - SORT_BY_START_TIME: Return notebooks sorted by start time.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_ID",
              "SORT_BY_DESCRIPTION",
              "SORT_BY_START_TIME"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order notebooks in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of notebooks before returning results. Negative values\ndenote number of notebooks to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of notebooks. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "users",
            "description": "Limit notebooks to those that are owned by the specified users.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Notebooks"
        ]
      },
      "post": {
        "summary": "Launch a notebook.",
        "operationId": "LaunchNotebook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LaunchNotebookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LaunchNotebookRequest"
            }
          }
        ],
        "tags": [
          "Notebooks"
        ]
      }
    },
    "/api/v1/notebooks/{notebookId}": {
      "get": {
        "summary": "Get the requested notebook.",
        "operationId": "GetNotebook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNotebookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "notebookId",
            "description": "The id of the notebook.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Notebooks"
        ]
      }
    },
    "/api/v1/notebooks/{notebookId}/kill": {
      "post": {
        "summary": "Kill the requested notebook.",
        "operationId": "KillNotebook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1KillNotebookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "notebookId",
            "description": "The id of the notebook.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Notebooks"
        ]
      }
    },
    "/api/v1/notebooks/{notebookId}/logs": {
      "get": {
        "summary": "Stream notebook logs.",
        "operationId": "NotebookLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1NotebookLogsResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1NotebookLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "notebookId",
            "description": "Requested Notebook id.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Skip the number of notebook logs before returning results. Negative values\ndenote number of notebook logs to skip from the end before returning\nresults.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of notebook logs. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "follow",
            "description": "Continue following logs until the notebook stops or the limit is reached.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Notebooks"
        ]
      }
    },
    "/api/v1/notebooks/{notebookId}/report_idle": {
      "put": {
        "summary": "Send notebook idle data to master",
        "operationId": "IdleNotebook",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IdleNotebookResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "notebookId",
            "description": "The id of the notebook.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1IdleNotebookRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/notebooks/{notebookId}/set_priority": {
      "post": {
        "summary": "Set the priority of the requested notebook.",
        "operationId": "SetNotebookPriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetNotebookPriorityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "notebookId",
            "description": "The id of the notebook.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetNotebookPriorityRequest"
            }
          }
        ],
        "tags": [
          "Notebooks"
        ]
      }
    },
    "/api/v1/preview-hp-search": {
      "post": {
        "summary": "Preview hyperparameter search.",
        "operationId": "PreviewHPSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PreviewHPSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PreviewHPSearchRequest"
            }
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/resource-pools": {
      "get": {
        "summary": "Get a list of all resource pools from the cluster.",
        "operationId": "GetResourcePools",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetResourcePoolsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "description": "Skip the number of resource pools before returning results. Negative values\ndenote number of resource pools to skip from the end before returning\nresults.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of resource pools. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/resource-pools/queues": {
      "get": {
        "summary": "Get a list of jobs in queue.",
        "operationId": "GetJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "pagination.offset",
            "description": "The number of records to skip before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pagination.limit",
            "description": "The amount of records limited in the results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "resourcePool",
            "description": "The target resource-pool.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "description": "Sort results by the given field.\nenum SortBy {\n  // Returns checkpoints in an unsorted list.\n  SORT_BY_UNSPECIFIED = 0;\n  // Returns checkpoints sorted by UUID.\n  SORT_BY_QUEUE_POSITION = 1;\n}\nSort results by the given field.\nSortBy sort_by = 3;\nOrder results in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          }
        ],
        "tags": [
          "Jobs"
        ]
      },
      "post": {
        "summary": "Control the job queues.",
        "operationId": "UpdateJobQueue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateJobQueueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateJobQueueRequest"
            }
          }
        ],
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/v1/resource-pools/queues/stats": {
      "get": {
        "summary": "Get job queue stats for a resource pool.",
        "operationId": "GetJobQueueStats",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetJobQueueStatsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "resourcePools",
            "description": "Filter the results based on a set of resource pools.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Jobs"
        ]
      }
    },
    "/api/v1/resources/allocation/aggregated": {
      "get": {
        "summary": "Get an aggregated view of resource allocation during the given time period.",
        "operationId": "ResourceAllocationAggregated",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceAllocationAggregatedResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "startDate",
            "description": "The first day to consider (the exact time is midnight UTC at the beginning\nof the day).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "endDate",
            "description": "The last day to consider (the exact time is midnight UTC at the end of the\nday).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "period",
            "description": "The period over which to perform aggregation.\n\n - RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED: Unspecified. This value will never actually be returned by the API, it is\njust an artifact of using protobuf.\n - RESOURCE_ALLOCATION_AGGREGATION_PERIOD_DAILY: Aggregation by day.\n - RESOURCE_ALLOCATION_AGGREGATION_PERIOD_MONTHLY: Aggregation by month.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED",
              "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_DAILY",
              "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_MONTHLY"
            ],
            "default": "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/resources/allocation/raw": {
      "get": {
        "summary": "Get a detailed view of resource allocation during the given time period.",
        "operationId": "ResourceAllocationRaw",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceAllocationRawResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "timestampAfter",
            "description": "The start of the period to consider.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timestampBefore",
            "description": "The end of the period to consider.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "Cluster"
        ]
      }
    },
    "/api/v1/shells": {
      "get": {
        "summary": "Get a list of shells.",
        "operationId": "GetShells",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetShellsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "sortBy",
            "description": "Sort shells by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns shells in an unsorted list.\n - SORT_BY_ID: Returns shells sorted by id.\n - SORT_BY_DESCRIPTION: Returns shells sorted by description.\n - SORT_BY_START_TIME: Return shells sorted by start time.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_ID",
              "SORT_BY_DESCRIPTION",
              "SORT_BY_START_TIME"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order shells in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of shells before returning results. Negative values\ndenote number of shells to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of shells. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "users",
            "description": "Limit shells to those that are owned by the specified users.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Shells"
        ]
      },
      "post": {
        "summary": "Launch a shell.",
        "operationId": "LaunchShell",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LaunchShellResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LaunchShellRequest"
            }
          }
        ],
        "tags": [
          "Shells"
        ]
      }
    },
    "/api/v1/shells/{shellId}": {
      "get": {
        "summary": "Get the requested shell.",
        "operationId": "GetShell",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetShellResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "shellId",
            "description": "The id of the shell.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Shells"
        ]
      }
    },
    "/api/v1/shells/{shellId}/kill": {
      "post": {
        "summary": "Kill the requested shell.",
        "operationId": "KillShell",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1KillShellResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "shellId",
            "description": "The id of the shell.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Shells"
        ]
      }
    },
    "/api/v1/shells/{shellId}/set_priority": {
      "post": {
        "summary": "Set the priority of the requested shell.",
        "operationId": "SetShellPriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetShellPriorityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "shellId",
            "description": "The id of the shell.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetShellPriorityRequest"
            }
          }
        ],
        "tags": [
          "Shells"
        ]
      }
    },
    "/api/v1/templates": {
      "get": {
        "summary": "Get a list of templates.",
        "operationId": "GetTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "sortBy",
            "description": "Sort templates by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns templates in an unsorted list.\n - SORT_BY_NAME: Returns templates sorted by name.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_NAME"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order templates in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of templates before returning results. Negative values\ndenote number of templates to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of templates. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "name",
            "description": "Limit templates to those that match the name.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/v1/templates/{template.name}": {
      "put": {
        "summary": "Update or create (upsert) the requested template.",
        "operationId": "PutTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PutTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "template.name",
            "description": "The name of the template.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The template to put.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Template"
            }
          }
        ],
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/v1/templates/{templateName}": {
      "get": {
        "summary": "Get the requested template.",
        "operationId": "GetTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "description": "The id of the template.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Templates"
        ]
      },
      "delete": {
        "summary": "Delete a template.",
        "operationId": "DeleteTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "templateName",
            "description": "The id of the template.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Templates"
        ]
      }
    },
    "/api/v1/tensorboards": {
      "get": {
        "summary": "Get a list of tensorboards.",
        "operationId": "GetTensorboards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTensorboardsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "sortBy",
            "description": "Sort tensorboards by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns tensorboards in an unsorted list.\n - SORT_BY_ID: Returns tensorboards sorted by id.\n - SORT_BY_DESCRIPTION: Returns tensorboards sorted by description.\n - SORT_BY_START_TIME: Return tensorboards sorted by start time.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_ID",
              "SORT_BY_DESCRIPTION",
              "SORT_BY_START_TIME"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order tensorboards in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of tensorboards before returning results. Negative values\ndenote number of tensorboards to skip from the end before returning\nresults.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of tensorboards. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "users",
            "description": "Limit tensorboards to those that are owned by the specified users.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Tensorboards"
        ]
      },
      "post": {
        "summary": "Launch a tensorboard.",
        "operationId": "LaunchTensorboard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LaunchTensorboardResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LaunchTensorboardRequest"
            }
          }
        ],
        "tags": [
          "Tensorboards"
        ]
      }
    },
    "/api/v1/tensorboards/{tensorboardId}": {
      "get": {
        "summary": "Get the requested tensorboard.",
        "operationId": "GetTensorboard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTensorboardResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tensorboardId",
            "description": "The id of the tensorboard.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Tensorboards"
        ]
      }
    },
    "/api/v1/tensorboards/{tensorboardId}/kill": {
      "post": {
        "summary": "Kill the requested tensorboard.",
        "operationId": "KillTensorboard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1KillTensorboardResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tensorboardId",
            "description": "The id of the tensorboard.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Tensorboards"
        ]
      }
    },
    "/api/v1/tensorboards/{tensorboardId}/set_priority": {
      "post": {
        "summary": "Set the priority of the requested TensorBoard.",
        "operationId": "SetTensorboardPriority",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetTensorboardPriorityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "tensorboardId",
            "description": "The id of the TensorBoard.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SetTensorboardPriorityRequest"
            }
          }
        ],
        "tags": [
          "Tensorboards"
        ]
      }
    },
    "/api/v1/trials/profiler/metrics": {
      "post": {
        "summary": "Persist the given TrialProfilerMetricsBatch. The trial ID is in the labels.",
        "operationId": "PostTrialProfilerMetricsBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PostTrialProfilerMetricsBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PostTrialProfilerMetricsBatchRequest"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/trials/{checkpointMetadata.trialId}/checkpoint_metadata": {
      "post": {
        "summary": "Record a checkpoint.",
        "operationId": "ReportTrialCheckpointMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReportTrialCheckpointMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "checkpointMetadata.trialId",
            "description": "The ID of the trial associated with the checkpoint.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "description": "The training metrics to persist.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckpointMetadata"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/trials/{id}/checkpoints": {
      "get": {
        "summary": "Get a list of checkpoints for a trial.",
        "operationId": "GetTrialCheckpoints",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTrialCheckpointsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The trial id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sortBy",
            "description": "Sort checkpoints by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns checkpoints in an unsorted list.\n - SORT_BY_UUID: Returns checkpoints sorted by UUID.\n - SORT_BY_BATCH_NUMBER: Returns checkpoints sorted by batch number.\n - SORT_BY_START_TIME: Returns checkpoints sorted by start time.\n - SORT_BY_END_TIME: Returns checkpoints sorted by end time.\n - SORT_BY_VALIDATION_STATE: Returns checkpoints sorted by validation state.\n - SORT_BY_STATE: Returns checkpoints sorted by state.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SORT_BY_UNSPECIFIED",
              "SORT_BY_UUID",
              "SORT_BY_BATCH_NUMBER",
              "SORT_BY_START_TIME",
              "SORT_BY_END_TIME",
              "SORT_BY_VALIDATION_STATE",
              "SORT_BY_STATE"
            ],
            "default": "SORT_BY_UNSPECIFIED"
          },
          {
            "name": "orderBy",
            "description": "Order checkpoints in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          },
          {
            "name": "offset",
            "description": "Skip the number of checkpoints before returning results. Negative values\ndenote number of checkpoints to skip from the end before returning results.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of checkpoints. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "validationStates",
            "description": "Limit the checkpoints to those that match the validation states.\n\n - STATE_UNSPECIFIED: The state of the checkpoint is unknown.\n - STATE_ACTIVE: The checkpoint is in an active state.\n - STATE_COMPLETED: The checkpoint is persisted to checkpoint storage.\n - STATE_ERROR: The checkpoint errored.\n - STATE_DELETED: The checkpoint has been deleted.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATE_UNSPECIFIED",
                "STATE_ACTIVE",
                "STATE_COMPLETED",
                "STATE_ERROR",
                "STATE_DELETED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "states",
            "description": "Limit the checkpoints to those that match the states.\n\n - STATE_UNSPECIFIED: The state of the checkpoint is unknown.\n - STATE_ACTIVE: The checkpoint is in an active state.\n - STATE_COMPLETED: The checkpoint is persisted to checkpoint storage.\n - STATE_ERROR: The checkpoint errored.\n - STATE_DELETED: The checkpoint has been deleted.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "STATE_UNSPECIFIED",
                "STATE_ACTIVE",
                "STATE_COMPLETED",
                "STATE_ERROR",
                "STATE_DELETED"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Experiments"
        ]
      }
    },
    "/api/v1/trials/{id}/kill": {
      "post": {
        "summary": "Kill a trial.",
        "operationId": "KillTrial",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1KillTrialResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "The trial id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Experiments",
          "Trials"
        ]
      }
    },
    "/api/v1/trials/{labels.trialId}/profiler/metrics": {
      "get": {
        "summary": "Stream trial profiler metrics.",
        "operationId": "GetTrialProfilerMetrics",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1GetTrialProfilerMetricsResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1GetTrialProfilerMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "labels.trialId",
            "description": "The ID of the trial.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "labels.name",
            "description": "The name of the metric.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labels.agentId",
            "description": "The agent ID associated with the metric.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labels.gpuUuid",
            "description": "The GPU UUID associated with the metric.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "labels.metricType",
            "description": "The type of the metric.\n\n - PROFILER_METRIC_TYPE_UNSPECIFIED: Zero-value (not allowed).\n - PROFILER_METRIC_TYPE_SYSTEM: For systems metrics, like GPU utilization or memory.\n - PROFILER_METRIC_TYPE_TIMING: For timing metrics, like how long a backwards pass or getting a batch\nfrom the dataloader took.\n - PROFILER_METRIC_TYPE_MISC: For other miscellaneous metrics.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PROFILER_METRIC_TYPE_UNSPECIFIED",
              "PROFILER_METRIC_TYPE_SYSTEM",
              "PROFILER_METRIC_TYPE_TIMING",
              "PROFILER_METRIC_TYPE_MISC"
            ],
            "default": "PROFILER_METRIC_TYPE_UNSPECIFIED"
          },
          {
            "name": "follow",
            "description": "Continue streaming metrics until the trial stops. Defaults to False.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Profiler"
        ]
      }
    },
    "/api/v1/trials/{trainingMetrics.trialId}/training_metrics": {
      "post": {
        "summary": "Record training metrics for specified training.",
        "operationId": "ReportTrialTrainingMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReportTrialTrainingMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trainingMetrics.trialId",
            "description": "The trial associated with these metrics.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "description": "The training metrics to persist.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TrialMetrics"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/trials/{trialId}": {
      "get": {
        "summary": "Get a single trial.",
        "operationId": "GetTrial",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetTrialResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "description": "The requested trial's id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Trials",
          "Experiments"
        ]
      }
    },
    "/api/v1/trials/{trialId}/early_exit": {
      "post": {
        "summary": "Reports to the searcher that the trial has completed the current\nrequested amount of training with the given searcher validation\nmetric.",
        "operationId": "ReportTrialSearcherEarlyExit",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReportTrialSearcherEarlyExitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "description": "The id of the trial.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "description": "The exit reason.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TrialEarlyExit"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/trials/{trialId}/logs": {
      "get": {
        "summary": "Stream trial logs.",
        "operationId": "TrialLogs",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1TrialLogsResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1TrialLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "description": "The id of the trial.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "limit",
            "description": "Limit the number of trial logs. A value of 0 denotes no limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "follow",
            "description": "Continue following logs until the trial stops.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "agentIds",
            "description": "Limit the trial logs to a subset of agents.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "containerIds",
            "description": "Limit the trial logs to a subset of containers.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "rankIds",
            "description": "Limit the trial logs to a subset of ranks.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "levels",
            "description": "Limit the trial logs to a subset of agents.\n\n - LOG_LEVEL_UNSPECIFIED: Unspecified log level.\n - LOG_LEVEL_TRACE: A log level of TRACE.\n - LOG_LEVEL_DEBUG: A log level of DEBUG.\n - LOG_LEVEL_INFO: A log level of INFO.\n - LOG_LEVEL_WARNING: A log level of WARNING.\n - LOG_LEVEL_ERROR: A log level of ERROR.\n - LOG_LEVEL_CRITICAL: A log level of CRITICAL.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "LOG_LEVEL_UNSPECIFIED",
                "LOG_LEVEL_TRACE",
                "LOG_LEVEL_DEBUG",
                "LOG_LEVEL_INFO",
                "LOG_LEVEL_WARNING",
                "LOG_LEVEL_ERROR",
                "LOG_LEVEL_CRITICAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "stdtypes",
            "description": "Limit the trial logs to a subset of output streams.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sources",
            "description": "Limit the trial logs to a subset of sources.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "timestampBefore",
            "description": "Limit the trial logs to ones with a timestamp before a given time.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timestampAfter",
            "description": "Limit the trial logs to ones with a timestamp after a given time.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "orderBy",
            "description": "Order logs in either ascending or descending order by timestamp.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ORDER_BY_UNSPECIFIED",
              "ORDER_BY_ASC",
              "ORDER_BY_DESC"
            ],
            "default": "ORDER_BY_UNSPECIFIED"
          }
        ],
        "tags": [
          "Experiments",
          "Trials"
        ]
      }
    },
    "/api/v1/trials/{trialId}/logs/fields": {
      "get": {
        "summary": "Stream trial log fields.",
        "operationId": "TrialLogsFields",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1TrialLogsFieldsResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1TrialLogsFieldsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "description": "The ID of the trial.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "follow",
            "description": "Continue following fields until the trial stops.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Experiments",
          "Trials"
        ]
      }
    },
    "/api/v1/trials/{trialId}/profiler/available_series": {
      "get": {
        "summary": "Stream the available series in a trial's profiler metrics.",
        "operationId": "GetTrialProfilerAvailableSeries",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/v1GetTrialProfilerAvailableSeriesResponse"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of v1GetTrialProfilerAvailableSeriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "description": "The requested trial's id.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "follow",
            "description": "Continue streaming labels until the trial stops. Defaults to False.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Profiler"
        ]
      }
    },
    "/api/v1/trials/{trialId}/progress": {
      "post": {
        "summary": "For bookkeeping, updates the progress towards to current requested searcher\ntraining length.",
        "operationId": "ReportTrialProgress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReportTrialProgressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "description": "The id of the trial.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "description": "Total units completed by the trial, in terms of the unit used to configure\nthe searcher.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/trials/{trialId}/runner/metadata": {
      "post": {
        "summary": "For bookkeeping, update trial runner metadata (currently just state).",
        "operationId": "PostTrialRunnerMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PostTrialRunnerMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "description": "The id of the trial.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "description": "The state for the trial runner.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TrialRunnerMetadata"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/trials/{trialId}/searcher/completed_operation": {
      "post": {
        "summary": "Reports to the searcher that the trial has completed the given searcher\noperation.",
        "operationId": "CompleteTrialSearcherValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompleteTrialSearcherValidationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "description": "The id of the trial.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "description": "The completed operation.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CompleteValidateAfterOperation"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/trials/{trialId}/searcher/operation": {
      "get": {
        "summary": "Get the current searcher operation.",
        "operationId": "GetCurrentTrialSearcherOperation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCurrentTrialSearcherOperationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "description": "The id of the trial.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/trials/{validationMetrics.trialId}/validation_metrics": {
      "post": {
        "summary": "Record validation metrics.",
        "operationId": "ReportTrialValidationMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReportTrialValidationMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "validationMetrics.trialId",
            "description": "The trial associated with these metrics.",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "description": "The training metrics to persist.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1TrialMetrics"
            }
          }
        ],
        "tags": [
          "Internal"
        ]
      }
    },
    "/api/v1/users": {
      "get": {
        "summary": "Get a list of users.",
        "operationId": "GetUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Users"
        ]
      },
      "post": {
        "summary": "Create a new user.",
        "operationId": "PostUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PostUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PostUserRequest"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/users/{username}": {
      "get": {
        "summary": "Get the requested user.",
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "description": "The username of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/v1/users/{username}/password": {
      "post": {
        "summary": "Set the requested user's password.",
        "operationId": "SetUserPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SetUserPasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "description": "The username of the user.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The password of the user.",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/allocation/aggregated": {
      "get": {
        "produces": [
          "text/csv"
        ],
        "tags": [
          "Cluster"
        ],
        "summary": "Get an aggregated view of resource allocation during the given time period (CSV).",
        "operationId": "get-aggregated-resource-allocation-csv",
        "parameters": [
          {
            "type": "string",
            "description": "Start time to get allocations for (YYYY-MM-DD format for daily, YYYY-MM format for monthly)",
            "name": "start_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "End time to get allocations for (YYYY-MM-DD format for daily, YYYY-MM format for monthly)",
            "name": "end_date",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Period to aggregate over (RESOURCE_ALLOCATION_AGGREGATION_PERIOD_DAILY or RESOURCE_ALLOCATION_AGGREGATION_PERIOD_MONTHLY)",
            "name": "period",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "aggregation_type,aggregation_key,date,seconds",
            "schema": {
              "type": ""
            }
          }
        }
      }
    },
    "/allocation/raw": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/csv"
        ],
        "tags": [
          "Cluster"
        ],
        "summary": "Get a detailed view of resource allocation during the given time period (CSV).",
        "operationId": "get-raw-resource-allocation-csv",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Start time to get allocations for (YYYY-MM-DDTHH:MM:SSZ format)",
            "name": "timestamp_after",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "End time to get allocations for (YYYY-MM-DDTHH:MM:SSZ format)",
            "name": "timestamp_before",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A CSV file containing the fields experiment_id,kind,username,labels,slots,start_time,end_time,seconds",
            "schema": {
              "type": ""
            }
          }
        }
      }
    }
  },
  "definitions": {
    "GetHPImportanceResponseMetricHPImportance": {
      "type": "object",
      "properties": {
        "hpImportance": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "A map between hyperparameter names and their relative importance."
        },
        "experimentProgress": {
          "type": "number",
          "format": "double",
          "description": "The approximate portion of the experiment that was complete when the data\nwas read."
        },
        "error": {
          "type": "string",
          "description": "A description of why computation failed. Empty unless the state is (or\nwas) 'failed'."
        },
        "pending": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether or not a request to compute results for this metric is queued."
        },
        "inProgress": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether or not results for this metric are currently being computed."
        }
      },
      "description": "Hyperparameter importance as computed with respect for one specific metric.",
      "title": "GetHPImportanceResponseMetricHPImportance"
    },
    "GetTrialResponseWorkloadContainer": {
      "type": "object",
      "properties": {
        "training": {
          "$ref": "#/definitions/v1MetricsWorkload",
          "description": "Training workload."
        },
        "validation": {
          "$ref": "#/definitions/v1MetricsWorkload",
          "description": "Validation workload."
        },
        "checkpoint": {
          "$ref": "#/definitions/v1CheckpointWorkload",
          "description": "Checkpoint workload."
        }
      },
      "description": "WorkloadContainer is a wrapper for Determined workloads to allow repeated\noneof types.",
      "title": "GetTrialResponseWorkloadContainer"
    },
    "TrainingLengthUnit": {
      "type": "string",
      "enum": [
        "UNIT_UNSPECIFIED",
        "UNIT_RECORDS",
        "UNIT_BATCHES",
        "UNIT_EPOCHS"
      ],
      "default": "UNIT_UNSPECIFIED",
      "description": "The units for the training length.\n\n - UNIT_UNSPECIFIED: Zero-value (not allowed).\n - UNIT_RECORDS: Indicates a training length is specified in records, samples or another\nsynonymous unit.\n - UNIT_BATCHES: Indicates a training length is specified in batches.\n - UNIT_EPOCHS: Indicates a training length is specified in epochs.",
      "title": "TrainingLengthUnit"
    },
    "TrialEarlyExitExitedReason": {
      "type": "string",
      "enum": [
        "EXITED_REASON_UNSPECIFIED",
        "EXITED_REASON_INVALID_HP",
        "EXITED_REASON_USER_REQUESTED_STOP",
        "EXITED_REASON_INIT_INVALID_HP"
      ],
      "default": "EXITED_REASON_UNSPECIFIED",
      "description": "The reason for an early exit.\n\n - EXITED_REASON_UNSPECIFIED: Zero-value (not allowed).\n - EXITED_REASON_INVALID_HP: Indicates the trial exited due to an invalid hyperparameter.\n - EXITED_REASON_USER_REQUESTED_STOP: Indicates the trial exited due to a user requested stop.\n - EXITED_REASON_INIT_INVALID_HP: Indicates the trial exited due to an invalid hyperparameter\nin the trial init.",
      "title": "TrialEarlyExitExitedReason"
    },
    "TrialProfilerMetricLabelsProfilerMetricType": {
      "type": "string",
      "enum": [
        "PROFILER_METRIC_TYPE_UNSPECIFIED",
        "PROFILER_METRIC_TYPE_SYSTEM",
        "PROFILER_METRIC_TYPE_TIMING",
        "PROFILER_METRIC_TYPE_MISC"
      ],
      "default": "PROFILER_METRIC_TYPE_UNSPECIFIED",
      "description": "To distinguish the 2 different categories of metrics.\n\n - PROFILER_METRIC_TYPE_UNSPECIFIED: Zero-value (not allowed).\n - PROFILER_METRIC_TYPE_SYSTEM: For systems metrics, like GPU utilization or memory.\n - PROFILER_METRIC_TYPE_TIMING: For timing metrics, like how long a backwards pass or getting a batch\nfrom the dataloader took.\n - PROFILER_METRIC_TYPE_MISC: For other miscellaneous metrics.",
      "title": "TrialProfilerMetricLabelsProfilerMetricType"
    },
    "TrialsSampleResponseDataPoint": {
      "type": "object",
      "properties": {
        "batches": {
          "type": "integer",
          "format": "int32",
          "description": "Total batches processed by the time this measurement is taken."
        },
        "value": {
          "type": "number",
          "format": "double",
          "description": "Value of the requested metric at this point in the trial."
        }
      },
      "description": "One datapoint in a series of metrics from a trial.",
      "required": [
        "batches",
        "value"
      ],
      "title": "TrialsSampleResponseDataPoint"
    },
    "determinedcheckpointv1State": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_ACTIVE",
        "STATE_COMPLETED",
        "STATE_ERROR",
        "STATE_DELETED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "The current state of the checkpoint.\n\n - STATE_UNSPECIFIED: The state of the checkpoint is unknown.\n - STATE_ACTIVE: The checkpoint is in an active state.\n - STATE_COMPLETED: The checkpoint is persisted to checkpoint storage.\n - STATE_ERROR: The checkpoint errored.\n - STATE_DELETED: The checkpoint has been deleted.",
      "title": "DeterminedcheckpointState"
    },
    "determinedcontainerv1State": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_ASSIGNED",
        "STATE_PULLING",
        "STATE_STARTING",
        "STATE_RUNNING",
        "STATE_TERMINATED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "The current state of the container.\n\n - STATE_UNSPECIFIED: The container state is unknown.\n - STATE_ASSIGNED: The container has been assigned to an agent but has not started yet.\n - STATE_PULLING: The container's base image is being pulled from the Docker registry.\n - STATE_STARTING: The image has been built and the container is being started, but the\nservice in the container is not ready yet.\n - STATE_RUNNING: The service in the container is able to accept requests.\n - STATE_TERMINATED: The container has completely exited or the container has been aborted prior\nto getting assigned.",
      "title": "DeterminedcontainerState"
    },
    "determineddevicev1Type": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_CPU",
        "TYPE_GPU"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "The type of the Device.\n\n - TYPE_UNSPECIFIED: An unspecified device type.\n - TYPE_CPU: A CPU device.\n - TYPE_GPU: A GPU device.",
      "title": "DetermineddeviceType"
    },
    "determinedexperimentv1State": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_ACTIVE",
        "STATE_PAUSED",
        "STATE_STOPPING_COMPLETED",
        "STATE_STOPPING_CANCELED",
        "STATE_STOPPING_ERROR",
        "STATE_COMPLETED",
        "STATE_CANCELED",
        "STATE_ERROR",
        "STATE_DELETED",
        "STATE_DELETING",
        "STATE_DELETE_FAILED",
        "STATE_STOPPING_KILLED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "The current state of the experiment.\n\n - STATE_UNSPECIFIED: The state of the experiment is unknown.\n - STATE_ACTIVE: The experiment is in an active state.\n - STATE_PAUSED: The experiment is in a paused state\n - STATE_STOPPING_COMPLETED: The experiment is completed and is shutting down.\n - STATE_STOPPING_CANCELED: The experiment is canceled and is shutting down.\n - STATE_STOPPING_ERROR: The experiment is errored and is shutting down.\n - STATE_COMPLETED: The experiment is completed and is shut down.\n - STATE_CANCELED: The experiment is canceled and is shut down.\n - STATE_ERROR: The experiment is errored and is shut down.\n - STATE_DELETED: The experiment has been deleted.\n - STATE_DELETING: The experiment is deleting.\n - STATE_DELETE_FAILED: The experiment failed to delete.\n - STATE_STOPPING_KILLED: The experiment is killed and is shutting down.",
      "title": "DeterminedexperimentState"
    },
    "determinedjobv1State": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_QUEUED",
        "STATE_SCHEDULED",
        "STATE_SCHEDULED_BACKFILLED"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "Job state.\n\n - STATE_UNSPECIFIED: Unspecified state.\n - STATE_QUEUED: Job is queued and waiting to be schedlued.\n - STATE_SCHEDULED: Job is scheduled.\n - STATE_SCHEDULED_BACKFILLED: Job is scheduled as a backfill.",
      "title": "DeterminedjobState"
    },
    "determinedjobv1Type": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_EXPERIMENT",
        "TYPE_NOTEBOOK",
        "TYPE_TENSORBOARD",
        "TYPE_SHELL",
        "TYPE_COMMAND"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "Job type.\n\n - TYPE_UNSPECIFIED: Unspecified state.\n - TYPE_EXPERIMENT: Experiement Job.\n - TYPE_NOTEBOOK: Jupyter Notebook Job.\n - TYPE_TENSORBOARD: TensorBoard Job.\n - TYPE_SHELL: Shell Job.\n - TYPE_COMMAND: Command Job.",
      "title": "DeterminedjobType"
    },
    "determinedtaskv1State": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_PENDING",
        "STATE_ASSIGNED",
        "STATE_PULLING",
        "STATE_STARTING",
        "STATE_RUNNING",
        "STATE_TERMINATED",
        "STATE_TERMINATING"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "The current state of the task.\n\n - STATE_UNSPECIFIED: The task state is unknown.\n - STATE_PENDING: The task is pending assignment.\n - STATE_ASSIGNED: The task has been assigned to an agent but has not started yet.\n - STATE_PULLING: The task's base image is being pulled from the Docker registry.\n - STATE_STARTING: The image has been pulled and the task is being started, but the task is\nnot ready yet.\n - STATE_RUNNING: The service in the task is running.\n - STATE_TERMINATED: The task has exited or has been aborted.\n - STATE_TERMINATING: The task has begun to exit.",
      "title": "DeterminedtaskState"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "title": "Object"
    },
    "protobufFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, new values will\nbe appended to the existing repeated field in the target resource. Note that\na repeated field is only allowed in the last position of a `paths` string.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then new value will be merged into the existing sub-message\nin the target resource.\n\nFor example, given the target message:\n\n    f {\n      b {\n        d: 1\n        x: 2\n      }\n      c: [1]\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d: 10\n      }\n      c: [2]\n    }\n\nthen if the field mask is:\n\n paths: [\"f.b\", \"f.c\"]\n\nthen the result will be:\n\n    f {\n      b {\n        d: 10\n        x: 2\n      }\n      c: [1, 2]\n    }\n\nAn implementation may provide options to override this default behavior for\nrepeated and message fields.\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n## Field Mask Verification\n\nThe implementation of any API method which has a FieldMask type field in the\nrequest should verify the included field paths, and return an\n`INVALID_ARGUMENT` error if any path is unmappable.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value.",
      "title": "NullValue"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      },
      "title": "RuntimeError"
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpcCode": {
          "type": "integer",
          "format": "int32"
        },
        "httpCode": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "httpStatus": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      },
      "title": "RuntimeStreamError"
    },
    "trialv1Trial": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the trial."
        },
        "experimentId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the parent experiment."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the trial was started."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the trial ended if the trial is stopped."
        },
        "state": {
          "$ref": "#/definitions/determinedexperimentv1State",
          "description": "The current state of the trial."
        },
        "hparams": {
          "type": "object",
          "description": "Trial hyperparameters."
        },
        "totalBatchesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "The current processed batches."
        },
        "bestValidation": {
          "$ref": "#/definitions/v1MetricsWorkload",
          "description": "Best validation."
        },
        "latestValidation": {
          "$ref": "#/definitions/v1MetricsWorkload",
          "description": "Latest validation."
        },
        "bestCheckpoint": {
          "$ref": "#/definitions/v1CheckpointWorkload",
          "description": "Best checkpoint."
        },
        "runnerState": {
          "type": "string",
          "description": "The last reported state of the trial runner (harness code)."
        }
      },
      "description": "Trial is a set of workloads and are exploring a determined set of\nhyperparameters.",
      "required": [
        "id",
        "experimentId",
        "startTime",
        "state",
        "hparams",
        "totalBatchesProcessed"
      ],
      "title": "TrialTrial"
    },
    "v1AckAllocationPreemptionSignalRequest": {
      "type": "object",
      "properties": {
        "allocationId": {
          "type": "string",
          "description": "The allocation that is acknowledging the request."
        }
      },
      "description": "Acknowledge the receipt of some stop signal.",
      "required": [
        "allocationId"
      ],
      "title": "AckAllocationPreemptionSignalRequest"
    },
    "v1AckAllocationPreemptionSignalResponse": {
      "type": "object",
      "description": "Response to AckAllocationPreemptionSignalRequest.",
      "title": "AckAllocationPreemptionSignalResponse"
    },
    "v1ActivateExperimentResponse": {
      "type": "object",
      "description": "Response to ActivateExperimentRequest.",
      "title": "ActivateExperimentResponse"
    },
    "v1Agent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unique id of the agent."
        },
        "registeredTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the agent registered with the master."
        },
        "slots": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Slot"
          },
          "description": "A map of slot id to each slot of this agent."
        },
        "containers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Container"
          },
          "description": "A map of container id to all containers assigned to this agent."
        },
        "label": {
          "type": "string",
          "description": "An optional label applied to the agent for scheduling restrictions."
        },
        "resourcePool": {
          "type": "string",
          "title": "The name of the resource pool the agent is in"
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The addresses of the agent."
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Flag notifying if containers can be scheduled on this agent."
        },
        "draining": {
          "type": "boolean",
          "format": "boolean",
          "description": "Flag notifying if this agent is in the draining mode: current containers\nwill be allowed to finish but no new ones will be scheduled."
        }
      },
      "description": "Agent is a pool of resources where containers are run.",
      "title": "Agent"
    },
    "v1AgentUserGroup": {
      "type": "object",
      "properties": {
        "agentUid": {
          "type": "integer",
          "format": "int32",
          "description": "The user id on the agent."
        },
        "agentGid": {
          "type": "integer",
          "format": "int32",
          "description": "The group id on the agent."
        }
      },
      "description": "AgentUserGroup represents a username and primary group for a user on an\nagent host machine.",
      "title": "AgentUserGroup"
    },
    "v1AllocationPreemptionSignalResponse": {
      "type": "object",
      "properties": {
        "preempt": {
          "type": "boolean",
          "format": "boolean",
          "description": "True if signaling preempt, otherwise just a synchronization marker."
        }
      },
      "description": "Response to AllocationPreemptionSignalRequest.",
      "title": "AllocationPreemptionSignalResponse"
    },
    "v1AllocationRendezvousInfoResponse": {
      "type": "object",
      "properties": {
        "rendezvousInfo": {
          "$ref": "#/definitions/v1RendezvousInfo",
          "description": "The rendezvous information."
        }
      },
      "title": "Response to AllocationRendezvousInfoRequest",
      "required": [
        "rendezvousInfo"
      ]
    },
    "v1ArchiveExperimentResponse": {
      "type": "object",
      "description": "Response to ArchiveExperimentRequest.",
      "title": "ArchiveExperimentResponse"
    },
    "v1ArchiveModelResponse": {
      "type": "object",
      "title": "Response to ArchiveModelRequest"
    },
    "v1AwsCustomTag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "The key of the custom tag"
        },
        "value": {
          "type": "string",
          "title": "The value of the custom tag"
        }
      },
      "title": "List of arbitrary user-defined tags that are added to the Determined agent\ninstances",
      "required": [
        "key",
        "value"
      ]
    },
    "v1CancelExperimentResponse": {
      "type": "object",
      "description": "Response to CancelExperimentRequest.",
      "title": "CancelExperimentResponse"
    },
    "v1Checkpoint": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "UUID of the checkpoint."
        },
        "experimentConfig": {
          "type": "object",
          "description": "The configuration of the experiment that created this checkpoint."
        },
        "experimentId": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the experiment that created this checkpoint."
        },
        "trialId": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the trial that created this checkpoint."
        },
        "hparams": {
          "type": "object",
          "description": "Hyperparameter values for the trial that created this checkpoint."
        },
        "batchNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Batch number of this checkpoint."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp when the checkpoint was reported as being saved to persistent\nstorage."
        },
        "resources": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Dictionary of file paths to file sizes in bytes of all files in the\ncheckpoint."
        },
        "metadata": {
          "type": "object",
          "description": "User defined metadata associated with the checkpoint."
        },
        "framework": {
          "type": "string",
          "description": "The framework of the trial i.e., tensorflow, torch."
        },
        "format": {
          "type": "string",
          "description": "The format of the checkpoint i.e., h5, saved_model, pickle."
        },
        "determinedVersion": {
          "type": "string",
          "description": "The version of Determined the checkpoint was taken with."
        },
        "metrics": {
          "$ref": "#/definitions/v1Metrics",
          "description": "Dictionary of validation metric names to their values."
        },
        "validationState": {
          "$ref": "#/definitions/determinedcheckpointv1State",
          "description": "The state of the validation associated with this checkpoint."
        },
        "state": {
          "$ref": "#/definitions/determinedcheckpointv1State",
          "description": "The state of the checkpoint."
        },
        "searcherMetric": {
          "type": "number",
          "format": "float",
          "description": "The value of the metric specified by `searcher.metric` for this metric."
        }
      },
      "description": "Checkpoint is an artifact created by a trial during training.",
      "required": [
        "experimentId",
        "trialId",
        "batchNumber",
        "state"
      ],
      "title": "Checkpoint"
    },
    "v1CheckpointMetadata": {
      "type": "object",
      "properties": {
        "trialId": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the trial associated with the checkpoint."
        },
        "trialRunId": {
          "type": "integer",
          "format": "int32",
          "description": "The run of the trial associated with the checkpoint."
        },
        "uuid": {
          "type": "string",
          "description": "UUID of the checkpoint."
        },
        "resources": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Dictionary of file paths to file sizes in bytes of all files."
        },
        "framework": {
          "type": "string",
          "description": "The framework associated with the checkpoint."
        },
        "format": {
          "type": "string",
          "description": "The format of the checkpoint."
        },
        "determinedVersion": {
          "type": "string",
          "description": "The Determined version associated with the checkpoint."
        },
        "latestBatch": {
          "type": "integer",
          "format": "int32",
          "description": "The number of batches trained on when these metrics were reported."
        }
      },
      "description": "The checkpoint metadata for some trial checkpoint.",
      "required": [
        "trialId",
        "trialRunId",
        "uuid",
        "resources",
        "framework",
        "format",
        "determinedVersion"
      ],
      "title": "CheckpointMetadata"
    },
    "v1CheckpointWorkload": {
      "type": "object",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "UUID of the checkpoint."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the workload finished or was stopped."
        },
        "state": {
          "$ref": "#/definitions/determinedcheckpointv1State",
          "description": "The state of the checkpoint."
        },
        "resources": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "description": "Dictionary of file paths to file sizes in bytes of all files in the\ncheckpoint."
        },
        "totalBatches": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of batches as of this workload's completion."
        }
      },
      "description": "CheckpointWorkload is an artifact created by a trial during training.",
      "required": [
        "state",
        "totalBatches"
      ],
      "title": "CheckpointWorkload"
    },
    "v1Command": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the command."
        },
        "description": {
          "type": "string",
          "description": "The description of the command."
        },
        "state": {
          "$ref": "#/definitions/determinedtaskv1State",
          "description": "The state of the command."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the command was started."
        },
        "container": {
          "$ref": "#/definitions/v1Container",
          "description": "The container running the command."
        },
        "username": {
          "type": "string",
          "description": "The username of the user that created the command."
        },
        "resourcePool": {
          "type": "string",
          "title": "The name of the resource pool the command was created in"
        },
        "exitStatus": {
          "type": "string",
          "title": "The exit status;"
        },
        "jobId": {
          "type": "string",
          "description": "The associated job id."
        }
      },
      "description": "Command is a single container running the configured command.",
      "required": [
        "id",
        "description",
        "startTime",
        "state",
        "username",
        "jobId",
        "resourcePool"
      ],
      "title": "Command"
    },
    "v1CompleteTrialSearcherValidationResponse": {
      "type": "object",
      "title": "Response to CompleteTrialSearcherValidationRequest"
    },
    "v1CompleteValidateAfterOperation": {
      "type": "object",
      "properties": {
        "op": {
          "$ref": "#/definitions/v1ValidateAfterOperation",
          "description": "The ValidateAfterOperation being completed."
        },
        "searcherMetric": {
          "type": "number",
          "format": "double",
          "description": "The value of searcher metric associated with this completed metric.\nThe metric provided should be the metric used to guide HP search."
        }
      },
      "description": "Used to complete a ValidateAfterOperation.",
      "title": "CompleteValidateAfterOperation"
    },
    "v1ComputeHPImportanceResponse": {
      "type": "object",
      "title": "Response to ComputeHPImportanceRequest"
    },
    "v1Container": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "The id of the task that is currently managing this container."
        },
        "id": {
          "type": "string",
          "description": "The unique id of this instance of a container."
        },
        "state": {
          "$ref": "#/definitions/determinedcontainerv1State",
          "description": "The current state that the container is currently in."
        },
        "devices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Device"
          },
          "description": "A list of devices that is being used by this container."
        }
      },
      "description": "Container is a Docker container that is either scheduled to run or is\ncurrently running on a set of slots.",
      "required": [
        "id",
        "state"
      ],
      "title": "Container"
    },
    "v1CreateExperimentRequest": {
      "type": "object",
      "properties": {
        "modelDefinition": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1File"
          },
          "description": "Experiment context."
        },
        "config": {
          "type": "string",
          "description": "Experiment config (YAML)."
        },
        "validateOnly": {
          "type": "boolean",
          "format": "boolean",
          "description": "Only validate instead of creating the experiment. A dry run."
        },
        "parentId": {
          "type": "integer",
          "format": "int32",
          "description": "Parent experiment id."
        }
      },
      "description": "Request to create a new experiment.",
      "title": "CreateExperimentRequest"
    },
    "v1CreateExperimentResponse": {
      "type": "object",
      "properties": {
        "experiment": {
          "$ref": "#/definitions/v1Experiment",
          "description": "The created experiment."
        },
        "config": {
          "type": "object",
          "description": "The created experiment config."
        }
      },
      "description": "Response to CreateExperimentRequest.",
      "required": [
        "experiment",
        "config"
      ],
      "title": "CreateExperimentResponse"
    },
    "v1CurrentUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "The currently logged in user."
        }
      },
      "description": "Response to CurrentUserRequest.",
      "required": [
        "user"
      ],
      "title": "CurrentUserResponse"
    },
    "v1DeleteExperimentResponse": {
      "type": "object",
      "description": "Response to DeleteExperimentRequest.",
      "title": "DeleteExperimentResponse"
    },
    "v1DeleteModelResponse": {
      "type": "object",
      "title": "Response to DeleteModelRequest"
    },
    "v1DeleteModelVersionResponse": {
      "type": "object",
      "title": "Response to DeleteModelVersionRequest"
    },
    "v1DeleteTemplateResponse": {
      "type": "object",
      "description": "Response to DeleteTemplateRequest.",
      "title": "DeleteTemplateResponse"
    },
    "v1Device": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the device."
        },
        "brand": {
          "type": "string",
          "description": "The brand name of the device."
        },
        "uuid": {
          "type": "string",
          "description": "The unique UUID of the device."
        },
        "type": {
          "$ref": "#/definitions/determineddevicev1Type",
          "description": "The type of the Device."
        }
      },
      "description": "Device represents a single computational device on an agent.",
      "title": "Device"
    },
    "v1DisableAgentRequest": {
      "type": "object",
      "properties": {
        "agentId": {
          "type": "string",
          "description": "The id of the agent."
        },
        "drain": {
          "type": "boolean",
          "format": "boolean",
          "description": "If true, wait for running tasks to finish."
        }
      },
      "description": "Disable the agent.",
      "title": "DisableAgentRequest"
    },
    "v1DisableAgentResponse": {
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/v1Agent",
          "description": "The disabled agent."
        }
      },
      "description": "Response to DisableAgentRequest.",
      "title": "DisableAgentResponse"
    },
    "v1DisableSlotResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/v1Slot",
          "description": "The disabled slot."
        }
      },
      "description": "Response to DisableSlotRequest.",
      "title": "DisableSlotResponse"
    },
    "v1EnableAgentResponse": {
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/v1Agent",
          "description": "The enabled agent."
        }
      },
      "description": "Response to EnableAgentRequest.",
      "title": "EnableAgentResponse"
    },
    "v1EnableSlotResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/v1Slot",
          "description": "The enabled slot."
        }
      },
      "description": "Response to EnableSlotRequest.",
      "title": "EnableSlotResponse"
    },
    "v1Experiment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the experiment."
        },
        "description": {
          "type": "string",
          "description": "The description of the experiment."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Labels attached to the experiment."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the experiment was started."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the experiment ended if the experiment is stopped."
        },
        "state": {
          "$ref": "#/definitions/determinedexperimentv1State",
          "description": "The current state of the experiment."
        },
        "archived": {
          "type": "boolean",
          "format": "boolean",
          "description": "Boolean denoting whether the experiment was archived."
        },
        "numTrials": {
          "type": "integer",
          "format": "int32",
          "description": "The number of trials linked to the experiment."
        },
        "progress": {
          "type": "number",
          "format": "double",
          "description": "The current progress of the experiment."
        },
        "username": {
          "type": "string",
          "description": "The username of the user that created the experiment."
        },
        "resourcePool": {
          "type": "string",
          "title": "The resource pool the experiment was created in"
        },
        "searcherType": {
          "type": "string",
          "title": "The type of searcher for the experiment"
        },
        "name": {
          "type": "string",
          "description": "The experiment name."
        },
        "notes": {
          "type": "string",
          "description": "The experiment notes."
        },
        "jobId": {
          "type": "string",
          "description": "Associated job's id."
        }
      },
      "description": "Experiment is a collection of one or more trials that are exploring a\nuser-defined hyperparameter space.",
      "required": [
        "id",
        "name",
        "startTime",
        "state",
        "archived",
        "numTrials",
        "jobId",
        "username",
        "searcherType"
      ],
      "title": "Experiment"
    },
    "v1ExperimentSimulation": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "description": "The simulated experiment config."
        },
        "seed": {
          "type": "integer",
          "format": "int64",
          "description": "The searcher simulation seed."
        },
        "trials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TrialSimulation"
          },
          "description": "The list of trials in the simulation."
        }
      },
      "description": "ExperimentSimulation holds the configuration and results of simulated run of\na searcher.",
      "title": "ExperimentSimulation"
    },
    "v1File": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "Path to the file."
        },
        "type": {
          "type": "integer",
          "format": "int32",
          "description": "File type."
        },
        "content": {
          "type": "string",
          "format": "byte",
          "description": "base64 encoded contents of the file."
        },
        "mtime": {
          "type": "string",
          "format": "int64",
          "description": "Modified time (Unix timestamp)."
        },
        "mode": {
          "type": "integer",
          "format": "int32",
          "description": "File mode."
        },
        "uid": {
          "type": "integer",
          "format": "int32",
          "description": "User ID."
        },
        "gid": {
          "type": "integer",
          "format": "int32",
          "description": "Group ID."
        }
      },
      "description": "File is a Unix file.",
      "required": [
        "path",
        "type",
        "content",
        "mtime",
        "mode",
        "uid",
        "gid"
      ],
      "title": "File"
    },
    "v1FittingPolicy": {
      "type": "string",
      "enum": [
        "FITTING_POLICY_UNSPECIFIED",
        "FITTING_POLICY_BEST",
        "FITTING_POLICY_WORST",
        "FITTING_POLICY_KUBERNETES"
      ],
      "default": "FITTING_POLICY_UNSPECIFIED",
      "description": "The fitting policy of the scheduler.\n\n - FITTING_POLICY_UNSPECIFIED: Unspecified. This value will never actually be returned by the API, it is\njust an artifact of using protobuf.\n - FITTING_POLICY_BEST: Best fit. Tasks are preferentially “packed” together on the smallest number\nof agents\n - FITTING_POLICY_WORST: Worst fit. Tasks are placed on under-utilized agents, spreading out the\ntasks.\n - FITTING_POLICY_KUBERNETES: A kubernetes placeholder. In k8s, the task placement is delegated to the\nk8s scheduler so the fitting policy is not relevant.",
      "title": "FittingPolicy"
    },
    "v1GetAgentResponse": {
      "type": "object",
      "properties": {
        "agent": {
          "$ref": "#/definitions/v1Agent",
          "description": "The requested agent."
        }
      },
      "description": "Response to GetAgentRequest.",
      "title": "GetAgentResponse"
    },
    "v1GetAgentsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_ID",
        "SORT_BY_TIME"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts agents by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns agents in an unsorted list.\n - SORT_BY_ID: Returns agents sorted by id.\n - SORT_BY_TIME: Returns agents sorted by time.",
      "title": "GetAgentsRequestSortBy"
    },
    "v1GetAgentsResponse": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Agent"
          },
          "description": "The list of returned agents."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetAgentsRequest.",
      "title": "GetAgentsResponse"
    },
    "v1GetBestSearcherValidationMetricResponse": {
      "type": "object",
      "properties": {
        "metric": {
          "type": "number",
          "format": "float",
          "description": "The value of the metric."
        }
      },
      "description": "Response to GetBestSearcherValidationMetricRequest.",
      "title": "GetBestSearcherValidationMetricResponse"
    },
    "v1GetCheckpointResponse": {
      "type": "object",
      "properties": {
        "checkpoint": {
          "$ref": "#/definitions/v1Checkpoint",
          "description": "The requested checkpoint."
        }
      },
      "description": "Response to GetCheckpointRequest.",
      "title": "GetCheckpointResponse"
    },
    "v1GetCommandResponse": {
      "type": "object",
      "properties": {
        "command": {
          "$ref": "#/definitions/v1Command",
          "description": "The requested command."
        },
        "config": {
          "type": "object",
          "description": "The command config."
        }
      },
      "description": "Response to GetCommandRequest.",
      "title": "GetCommandResponse"
    },
    "v1GetCommandsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_ID",
        "SORT_BY_DESCRIPTION",
        "SORT_BY_START_TIME"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts commands by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns commands in an unsorted list.\n - SORT_BY_ID: Returns commands sorted by id.\n - SORT_BY_DESCRIPTION: Returns commands sorted by description.\n - SORT_BY_START_TIME: Return commands sorted by start time.",
      "title": "GetCommandsRequestSortBy"
    },
    "v1GetCommandsResponse": {
      "type": "object",
      "properties": {
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Command"
          },
          "description": "The list of returned commands."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetCommandsRequest.",
      "title": "GetCommandsResponse"
    },
    "v1GetCurrentTrialSearcherOperationResponse": {
      "type": "object",
      "properties": {
        "op": {
          "$ref": "#/definitions/v1SearcherOperation",
          "description": "The current searcher operation."
        },
        "completed": {
          "type": "boolean",
          "format": "boolean",
          "description": "The status of the searcher operation."
        }
      },
      "title": "Response to GetCurrentTrialSearcherOperationRequest"
    },
    "v1GetExperimentCheckpointsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_UUID",
        "SORT_BY_TRIAL_ID",
        "SORT_BY_BATCH_NUMBER",
        "SORT_BY_START_TIME",
        "SORT_BY_END_TIME",
        "SORT_BY_VALIDATION_STATE",
        "SORT_BY_STATE",
        "SORT_BY_SEARCHER_METRIC"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts checkpoints by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns checkpoints in an unsorted list.\n - SORT_BY_UUID: Returns checkpoints sorted by UUID.\n - SORT_BY_TRIAL_ID: Returns checkpoints sorted by trial id.\n - SORT_BY_BATCH_NUMBER: Returns checkpoints sorted by batch number.\n - SORT_BY_START_TIME: Returns checkpoints sorted by start time.\n - SORT_BY_END_TIME: Returns checkpoints sorted by end time.\n - SORT_BY_VALIDATION_STATE: Returns checkpoints sorted by validation state.\n - SORT_BY_STATE: Returns checkpoints sorted by state.\n - SORT_BY_SEARCHER_METRIC: Returns checkpoints sorted by the experiment's `searcher.metric`\nconfiguration setting.",
      "title": "GetExperimentCheckpointsRequestSortBy"
    },
    "v1GetExperimentCheckpointsResponse": {
      "type": "object",
      "properties": {
        "checkpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Checkpoint"
          },
          "description": "The list of returned checkpoints."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetExperimentCheckpointsRequest.",
      "title": "GetExperimentCheckpointsResponse"
    },
    "v1GetExperimentLabelsResponse": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of labels used across all experiments."
        }
      },
      "description": "Response to GetExperimentsLabelsRequest.",
      "title": "GetExperimentLabelsResponse"
    },
    "v1GetExperimentResponse": {
      "type": "object",
      "properties": {
        "experiment": {
          "$ref": "#/definitions/v1Experiment",
          "description": "The requested experiment."
        },
        "config": {
          "type": "object",
          "description": "The experiment config."
        },
        "jobSummary": {
          "$ref": "#/definitions/v1JobSummary",
          "description": "Associated job summary."
        }
      },
      "description": "Response to GetExperimentRequest.",
      "required": [
        "experiment",
        "config"
      ],
      "title": "GetExperimentResponse"
    },
    "v1GetExperimentTrialsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_ID",
        "SORT_BY_START_TIME",
        "SORT_BY_END_TIME",
        "SORT_BY_STATE",
        "SORT_BY_BEST_VALIDATION_METRIC",
        "SORT_BY_LATEST_VALIDATION_METRIC",
        "SORT_BY_BATCHES_PROCESSED",
        "SORT_BY_DURATION"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts trials by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns trials in an unsorted list.\n - SORT_BY_ID: Returns trials sorted by id.\n - SORT_BY_START_TIME: Return trials sorted by start time.\n - SORT_BY_END_TIME: Return trials sorted by end time. Trials without end times are\nreturned after trials that are.\n - SORT_BY_STATE: Return trials sorted by state.\n - SORT_BY_BEST_VALIDATION_METRIC: Return the trials sorted by the best metric so far, where the metric is\nspecified by `searcher.metric` in the experiment configuration.\n - SORT_BY_LATEST_VALIDATION_METRIC: Return the trials sorted by the latest metric so far, where the metric is\nspecified by `searcher.metric` in the experiment configuration.\n - SORT_BY_BATCHES_PROCESSED: Return the trials sorted by the number of batches completed.\n - SORT_BY_DURATION: Return the trials sorted by the total duration.",
      "title": "GetExperimentTrialsRequestSortBy"
    },
    "v1GetExperimentTrialsResponse": {
      "type": "object",
      "properties": {
        "trials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/trialv1Trial"
          },
          "description": "The list of returned trials."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetExperimentTrialsRequest.",
      "required": [
        "trials",
        "pagination"
      ],
      "title": "GetExperimentTrialsResponse"
    },
    "v1GetExperimentValidationHistoryResponse": {
      "type": "object",
      "properties": {
        "validationHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ValidationHistoryEntry"
          },
          "description": "validation_history is a collection of zero or more validation metrics for\nan experiment, describing the best metrics as they were reported through\nthe lifetime of an experiment. The historical list of best validations."
        }
      },
      "description": "Response to GetExperimentValidationHistoryRequest.",
      "title": "GetExperimentValidationHistoryResponse"
    },
    "v1GetExperimentsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_ID",
        "SORT_BY_DESCRIPTION",
        "SORT_BY_START_TIME",
        "SORT_BY_END_TIME",
        "SORT_BY_STATE",
        "SORT_BY_NUM_TRIALS",
        "SORT_BY_PROGRESS",
        "SORT_BY_USER",
        "SORT_BY_NAME"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts experiments by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns experiments in an unsorted list.\n - SORT_BY_ID: Returns experiments sorted by id.\n - SORT_BY_DESCRIPTION: Returns experiments sorted by description.\n - SORT_BY_START_TIME: Return experiments sorted by start time.\n - SORT_BY_END_TIME: Return experiments sorted by end time. Experiments without end_time are\nreturned after the ones with end_time.\n - SORT_BY_STATE: Return experiments sorted by state.\n - SORT_BY_NUM_TRIALS: Return experiments sorted by number of trials.\n - SORT_BY_PROGRESS: Return experiments sorted by progress.\n - SORT_BY_USER: Return experiments sorted by user.\n - SORT_BY_NAME: Returns experiments sorted by name.",
      "title": "GetExperimentsRequestSortBy"
    },
    "v1GetExperimentsResponse": {
      "type": "object",
      "properties": {
        "experiments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Experiment"
          },
          "description": "The list of returned experiments."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetExperimentsRequest.",
      "required": [
        "experiments",
        "pagination"
      ],
      "title": "GetExperimentsResponse"
    },
    "v1GetHPImportanceResponse": {
      "type": "object",
      "properties": {
        "trainingMetrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/GetHPImportanceResponseMetricHPImportance"
          },
          "description": "A map of training metric names to their respective entries."
        },
        "validationMetrics": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/GetHPImportanceResponseMetricHPImportance"
          },
          "description": "A map of validation metric names to their respective entries."
        }
      },
      "title": "Response to GetHPImportanceRequest",
      "required": [
        "trainingMetrics",
        "validationMetrics"
      ]
    },
    "v1GetJobQueueStatsResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RPQueueStat"
          },
          "description": "List of queue stats per resource pool."
        }
      },
      "description": "Response to GetJobQueueStatsRequest.",
      "required": [
        "results"
      ],
      "title": "GetJobQueueStatsResponse"
    },
    "v1GetJobsResponse": {
      "type": "object",
      "properties": {
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        },
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Job"
          },
          "description": "List of the request jobs."
        }
      },
      "description": "Response to GetJobsRequest.",
      "required": [
        "jobs",
        "pagination"
      ],
      "title": "GetJobsResponse"
    },
    "v1GetMasterConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "description": "The config file loaded by the master."
        }
      },
      "description": "Response to GetMasterRequest.",
      "required": [
        "config"
      ],
      "title": "GetMasterConfigResponse"
    },
    "v1GetMasterResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "The current version of the master."
        },
        "masterId": {
          "type": "string",
          "description": "The current instance id of the master."
        },
        "clusterId": {
          "type": "string",
          "description": "The global cluster id of the master."
        },
        "clusterName": {
          "type": "string",
          "description": "The cluster name."
        },
        "telemetryEnabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Telemetry status."
        },
        "ssoProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SSOProvider"
          },
          "description": "SSO providers."
        },
        "externalLoginUri": {
          "type": "string",
          "description": "Redirect for starting internal sessions.."
        },
        "externalLogoutUri": {
          "type": "string",
          "description": "Redirect for ending external sessions."
        },
        "branding": {
          "type": "string",
          "description": "Branding style to use on front-end."
        }
      },
      "description": "Response to GetMasterRequest.",
      "required": [
        "version",
        "masterId",
        "clusterId",
        "clusterName"
      ],
      "title": "GetMasterResponse"
    },
    "v1GetModelDefResponse": {
      "type": "object",
      "properties": {
        "b64Tgz": {
          "type": "string",
          "description": "The base64-encoded, gzipped, tarball."
        }
      },
      "description": "Response to GetModelDefRequest.",
      "required": [
        "b64Tgz"
      ],
      "title": "GetModelDefResponse"
    },
    "v1GetModelLabelsResponse": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of labels used across all models."
        }
      },
      "description": "Response to GetModelLabelsRequest.",
      "title": "GetModelLabelsResponse"
    },
    "v1GetModelResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1Model",
          "description": "The model requested."
        }
      },
      "description": "Response to GetModelRequest.",
      "title": "GetModelResponse"
    },
    "v1GetModelVersionResponse": {
      "type": "object",
      "properties": {
        "modelVersion": {
          "$ref": "#/definitions/v1ModelVersion",
          "description": "The model version requested."
        }
      },
      "description": "Response for GetModelVersionRequest.",
      "title": "GetModelVersionResponse"
    },
    "v1GetModelVersionsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_VERSION",
        "SORT_BY_CREATION_TIME"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sort models by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns model versions in an unsorted list.\n - SORT_BY_VERSION: Returns model versions sorted by version number.\n - SORT_BY_CREATION_TIME: Returns model versions sorted by creation_time.",
      "title": "GetModelVersionsRequestSortBy"
    },
    "v1GetModelVersionsResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1Model",
          "description": "The model requested."
        },
        "modelVersions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ModelVersion"
          },
          "description": "The list of returned model versions."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response for GetModelVersionRequest.",
      "title": "GetModelVersionsResponse"
    },
    "v1GetModelsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_NAME",
        "SORT_BY_DESCRIPTION",
        "SORT_BY_CREATION_TIME",
        "SORT_BY_LAST_UPDATED_TIME",
        "SORT_BY_NUM_VERSIONS"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sort models by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns models in an unsorted list.\n - SORT_BY_NAME: Returns models sorted by name.\n - SORT_BY_DESCRIPTION: Returns models sorted by description.\n - SORT_BY_CREATION_TIME: Returns models sorted by creation time.\n - SORT_BY_LAST_UPDATED_TIME: Returns models sorted by last updated time.\n - SORT_BY_NUM_VERSIONS: Returns models sorted by number of version.",
      "title": "GetModelsRequestSortBy"
    },
    "v1GetModelsResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Model"
          },
          "description": "The list of returned models."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetModelsRequest.",
      "required": [
        "models",
        "pagination"
      ],
      "title": "GetModelsResponse"
    },
    "v1GetNotebookResponse": {
      "type": "object",
      "properties": {
        "notebook": {
          "$ref": "#/definitions/v1Notebook",
          "description": "The requested notebook."
        },
        "config": {
          "type": "object",
          "description": "The notebook config."
        }
      },
      "description": "Response to GetNotebookRequest.",
      "title": "GetNotebookResponse"
    },
    "v1GetNotebooksRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_ID",
        "SORT_BY_DESCRIPTION",
        "SORT_BY_START_TIME"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts notebooks by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns notebooks in an unsorted list.\n - SORT_BY_ID: Returns notebooks sorted by id.\n - SORT_BY_DESCRIPTION: Returns notebooks sorted by description.\n - SORT_BY_START_TIME: Return notebooks sorted by start time.",
      "title": "GetNotebooksRequestSortBy"
    },
    "v1GetNotebooksResponse": {
      "type": "object",
      "properties": {
        "notebooks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Notebook"
          },
          "description": "The list of returned notebooks."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetNotebooksRequest.",
      "title": "GetNotebooksResponse"
    },
    "v1GetResourcePoolsResponse": {
      "type": "object",
      "properties": {
        "resourcePools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourcePool"
          },
          "description": "The list of returned resource pools."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetResourcePoolsRequest.",
      "title": "GetResourcePoolsResponse"
    },
    "v1GetShellResponse": {
      "type": "object",
      "properties": {
        "shell": {
          "$ref": "#/definitions/v1Shell",
          "description": "The requested shell."
        },
        "config": {
          "type": "object",
          "description": "The shell config."
        }
      },
      "description": "Response to GetShellRequest.",
      "title": "GetShellResponse"
    },
    "v1GetShellsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_ID",
        "SORT_BY_DESCRIPTION",
        "SORT_BY_START_TIME"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts shells by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns shells in an unsorted list.\n - SORT_BY_ID: Returns shells sorted by id.\n - SORT_BY_DESCRIPTION: Returns shells sorted by description.\n - SORT_BY_START_TIME: Return shells sorted by start time.",
      "title": "GetShellsRequestSortBy"
    },
    "v1GetShellsResponse": {
      "type": "object",
      "properties": {
        "shells": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Shell"
          },
          "description": "The list of returned shells."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetShellsRequest.",
      "title": "GetShellsResponse"
    },
    "v1GetSlotResponse": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/v1Slot",
          "description": "The requested slot."
        }
      },
      "description": "Response to GetSlotRequest.",
      "title": "GetSlotResponse"
    },
    "v1GetSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Slot"
          },
          "description": "The requested slots."
        }
      },
      "description": "Response to GetSlotsRequest.",
      "title": "GetSlotsResponse"
    },
    "v1GetTelemetryResponse": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether telemetry is enabled or not."
        },
        "segmentKey": {
          "type": "string",
          "description": "The key used for analytics in the UI."
        }
      },
      "description": "Response to GetTelemetryRequest.",
      "required": [
        "enabled"
      ],
      "title": "GetTelemetryResponse"
    },
    "v1GetTemplateResponse": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1Template",
          "description": "The requested template."
        }
      },
      "description": "Response to GetTemplateRequest.",
      "title": "GetTemplateResponse"
    },
    "v1GetTemplatesRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_NAME"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts templates by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns templates in an unsorted list.\n - SORT_BY_NAME: Returns templates sorted by name.",
      "title": "GetTemplatesRequestSortBy"
    },
    "v1GetTemplatesResponse": {
      "type": "object",
      "properties": {
        "templates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Template"
          },
          "description": "the list of requested templates."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetTemplatesRequest.",
      "title": "GetTemplatesResponse"
    },
    "v1GetTensorboardResponse": {
      "type": "object",
      "properties": {
        "tensorboard": {
          "$ref": "#/definitions/v1Tensorboard",
          "description": "The requested tensorboard."
        },
        "config": {
          "type": "object",
          "title": "The config;"
        }
      },
      "description": "Response to GetTensorboardRequest.",
      "title": "GetTensorboardResponse"
    },
    "v1GetTensorboardsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_ID",
        "SORT_BY_DESCRIPTION",
        "SORT_BY_START_TIME"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts tensorboards by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns tensorboards in an unsorted list.\n - SORT_BY_ID: Returns tensorboards sorted by id.\n - SORT_BY_DESCRIPTION: Returns tensorboards sorted by description.\n - SORT_BY_START_TIME: Return tensorboards sorted by start time.",
      "title": "GetTensorboardsRequestSortBy"
    },
    "v1GetTensorboardsResponse": {
      "type": "object",
      "properties": {
        "tensorboards": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Tensorboard"
          },
          "description": "The list of returned tensorboards."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetTensorboardsRequest.",
      "title": "GetTensorboardsResponse"
    },
    "v1GetTrialCheckpointsRequestSortBy": {
      "type": "string",
      "enum": [
        "SORT_BY_UNSPECIFIED",
        "SORT_BY_UUID",
        "SORT_BY_BATCH_NUMBER",
        "SORT_BY_START_TIME",
        "SORT_BY_END_TIME",
        "SORT_BY_VALIDATION_STATE",
        "SORT_BY_STATE"
      ],
      "default": "SORT_BY_UNSPECIFIED",
      "description": "Sorts checkpoints by the given field.\n\n - SORT_BY_UNSPECIFIED: Returns checkpoints in an unsorted list.\n - SORT_BY_UUID: Returns checkpoints sorted by UUID.\n - SORT_BY_BATCH_NUMBER: Returns checkpoints sorted by batch number.\n - SORT_BY_START_TIME: Returns checkpoints sorted by start time.\n - SORT_BY_END_TIME: Returns checkpoints sorted by end time.\n - SORT_BY_VALIDATION_STATE: Returns checkpoints sorted by validation state.\n - SORT_BY_STATE: Returns checkpoints sorted by state.",
      "title": "GetTrialCheckpointsRequestSortBy"
    },
    "v1GetTrialCheckpointsResponse": {
      "type": "object",
      "properties": {
        "checkpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Checkpoint"
          },
          "description": "The list of returned checkpoints."
        },
        "pagination": {
          "$ref": "#/definitions/v1Pagination",
          "description": "Pagination information of the full dataset."
        }
      },
      "description": "Response to GetTrialCheckpointsRequest.",
      "title": "GetTrialCheckpointsResponse"
    },
    "v1GetTrialProfilerAvailableSeriesResponse": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TrialProfilerMetricLabels"
          },
          "description": "The labels for the series."
        }
      },
      "description": "Response to TrialProfilerAvailableSeriesRequest.",
      "required": [
        "labels"
      ],
      "title": "GetTrialProfilerAvailableSeriesResponse"
    },
    "v1GetTrialProfilerMetricsResponse": {
      "type": "object",
      "properties": {
        "batch": {
          "$ref": "#/definitions/v1TrialProfilerMetricsBatch",
          "description": "A batch matching the series requested."
        }
      },
      "title": "Response to TrialProfilerMetricsResponse",
      "required": [
        "batch"
      ]
    },
    "v1GetTrialResponse": {
      "type": "object",
      "properties": {
        "trial": {
          "$ref": "#/definitions/trialv1Trial",
          "description": "The requested trial."
        },
        "workloads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetTrialResponseWorkloadContainer"
          },
          "description": "Trial workloads."
        }
      },
      "description": "Response to GetTrialRequest.",
      "required": [
        "trial"
      ],
      "title": "GetTrialResponse"
    },
    "v1GetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "The requested user."
        }
      },
      "description": "Response to GetUserRequest.",
      "title": "GetUserResponse"
    },
    "v1GetUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1User"
          },
          "description": "The list of requested users."
        }
      },
      "description": "Response to GetUsersRequest.",
      "title": "GetUsersResponse"
    },
    "v1IdleNotebookRequest": {
      "type": "object",
      "properties": {
        "notebookId": {
          "type": "string",
          "description": "The id of the notebook."
        },
        "idle": {
          "type": "boolean",
          "format": "boolean",
          "title": "The value of idle timeout"
        }
      },
      "description": "Kill the requested notebook if idle.",
      "title": "IdleNotebookRequest"
    },
    "v1IdleNotebookResponse": {
      "type": "object",
      "description": "Response to IdleNotebookRequest.",
      "title": "IdleNotebookResponse"
    },
    "v1Job": {
      "type": "object",
      "properties": {
        "summary": {
          "$ref": "#/definitions/v1JobSummary",
          "description": "Job summary."
        },
        "type": {
          "$ref": "#/definitions/determinedjobv1Type",
          "description": "Job type."
        },
        "submissionTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time when the job was submitted by the user."
        },
        "username": {
          "type": "string",
          "description": "The username of the user who submitted the job."
        },
        "resourcePool": {
          "type": "string",
          "description": "Associated resource pool."
        },
        "isPreemptible": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the job is preemptible."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The job priority in priority scheduler."
        },
        "weight": {
          "type": "number",
          "format": "double",
          "description": "The job weight in fairshare scheduler."
        },
        "entityId": {
          "type": "string",
          "description": "Entity ID."
        },
        "jobId": {
          "type": "string",
          "description": "Job type."
        },
        "requestedSlots": {
          "type": "integer",
          "format": "int32",
          "description": "Number of requested slots."
        },
        "allocatedSlots": {
          "type": "integer",
          "format": "int32",
          "description": "Number of allocated slots."
        },
        "name": {
          "type": "string",
          "description": "Job name."
        }
      },
      "description": "Job represents a user submitted work that is not in a terminal\nstate.",
      "required": [
        "type",
        "submissionTime",
        "username",
        "resourcePool",
        "isPreemptible",
        "entityId",
        "name",
        "requestedSlots",
        "allocatedSlots",
        "jobName",
        "jobId"
      ],
      "title": "Job"
    },
    "v1JobSummary": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/determinedjobv1State",
          "description": "The scheduling state of the job."
        },
        "jobsAhead": {
          "type": "integer",
          "format": "int32",
          "description": "The number of jobs ahead of this one in the queue."
        }
      },
      "description": "Job summary.",
      "required": [
        "state",
        "jobsAhead"
      ],
      "title": "JobSummary"
    },
    "v1K8PriorityClass": {
      "type": "object",
      "properties": {
        "priorityClass": {
          "type": "string",
          "description": "Priority class name."
        },
        "priorityValue": {
          "type": "integer",
          "format": "int32",
          "description": "Priority class value."
        }
      },
      "title": "A kubernetes priority class"
    },
    "v1KillCommandResponse": {
      "type": "object",
      "properties": {
        "command": {
          "$ref": "#/definitions/v1Command",
          "description": "The requested command."
        }
      },
      "description": "Response to KillCommandRequest.",
      "title": "KillCommandResponse"
    },
    "v1KillExperimentResponse": {
      "type": "object",
      "description": "Response to KillExperimentRequest.",
      "title": "KillExperimentResponse"
    },
    "v1KillNotebookResponse": {
      "type": "object",
      "properties": {
        "notebook": {
          "$ref": "#/definitions/v1Notebook",
          "description": "The requested notebook."
        }
      },
      "description": "Response to KillNotebookRequest.",
      "title": "KillNotebookResponse"
    },
    "v1KillShellResponse": {
      "type": "object",
      "properties": {
        "shell": {
          "$ref": "#/definitions/v1Shell",
          "description": "The requested shell."
        }
      },
      "description": "Response to KillShellRequest.",
      "title": "KillShellResponse"
    },
    "v1KillTensorboardResponse": {
      "type": "object",
      "properties": {
        "tensorboard": {
          "$ref": "#/definitions/v1Tensorboard",
          "description": "The requested tensorboard."
        }
      },
      "description": "Response to KillTensorboardRequest.",
      "title": "KillTensorboardResponse"
    },
    "v1KillTrialResponse": {
      "type": "object",
      "description": "Response to KillTrialRequest.",
      "title": "KillTrialResponse"
    },
    "v1LaunchCommandRequest": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "description": "Command config (JSON)."
        },
        "templateName": {
          "type": "string",
          "description": "Template name."
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1File"
          },
          "description": "The files to run with the command."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Additional data."
        }
      },
      "description": "Request to launch a command.",
      "title": "LaunchCommandRequest"
    },
    "v1LaunchCommandResponse": {
      "type": "object",
      "properties": {
        "command": {
          "$ref": "#/definitions/v1Command",
          "description": "The requested command."
        },
        "config": {
          "type": "object",
          "title": "The config;"
        }
      },
      "description": "Response to LaunchCommandRequest.",
      "required": [
        "notebook",
        "config"
      ],
      "title": "LaunchCommandResponse"
    },
    "v1LaunchNotebookRequest": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "description": "Notebook config (JSON)."
        },
        "templateName": {
          "type": "string",
          "description": "Template name."
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1File"
          },
          "description": "The files to run with the command."
        },
        "preview": {
          "type": "boolean",
          "format": "boolean",
          "description": "Preview a launching request without actually creating a Notebook."
        }
      },
      "description": "Request to launch a notebook.",
      "title": "LaunchNotebookRequest"
    },
    "v1LaunchNotebookResponse": {
      "type": "object",
      "properties": {
        "notebook": {
          "$ref": "#/definitions/v1Notebook",
          "description": "The requested notebook."
        },
        "config": {
          "type": "object",
          "title": "The config;"
        }
      },
      "description": "Response to LaunchNotebookRequest.",
      "required": [
        "notebook",
        "config"
      ],
      "title": "LaunchNotebookResponse"
    },
    "v1LaunchShellRequest": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "description": "Shell config (JSON)."
        },
        "templateName": {
          "type": "string",
          "description": "Template name."
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1File"
          },
          "description": "The files to run with the command."
        },
        "data": {
          "type": "string",
          "format": "byte",
          "description": "Additional data."
        }
      },
      "description": "Request to launch a shell.",
      "title": "LaunchShellRequest"
    },
    "v1LaunchShellResponse": {
      "type": "object",
      "properties": {
        "shell": {
          "$ref": "#/definitions/v1Shell",
          "description": "The requested shell."
        },
        "config": {
          "type": "object",
          "title": "The config;"
        }
      },
      "description": "Response to LaunchShellRequest.",
      "required": [
        "notebook",
        "config"
      ],
      "title": "LaunchShellResponse"
    },
    "v1LaunchTensorboardRequest": {
      "type": "object",
      "properties": {
        "experimentIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "List of source experiment ids."
        },
        "trialIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "List of source trial ids."
        },
        "config": {
          "type": "object",
          "description": "Tensorboard config (JSON)."
        },
        "templateName": {
          "type": "string",
          "description": "Tensorboard template name."
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1File"
          },
          "description": "The files to run with the command."
        }
      },
      "description": "Request to launch a tensorboard.",
      "title": "LaunchTensorboardRequest"
    },
    "v1LaunchTensorboardResponse": {
      "type": "object",
      "properties": {
        "tensorboard": {
          "$ref": "#/definitions/v1Tensorboard",
          "description": "The requested tensorboard."
        },
        "config": {
          "type": "object",
          "title": "The config;"
        }
      },
      "description": "Response to LaunchTensorboardRequest.",
      "required": [
        "tensorboard",
        "config"
      ],
      "title": "LaunchTensorboardResponse"
    },
    "v1LogEntry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id."
        },
        "message": {
          "type": "string",
          "description": "The message."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp."
        },
        "level": {
          "$ref": "#/definitions/v1LogLevel",
          "description": "The log level."
        }
      },
      "description": "LogEntry is a log event.",
      "required": [
        "id"
      ],
      "title": "LogEntry"
    },
    "v1LogLevel": {
      "type": "string",
      "enum": [
        "LOG_LEVEL_UNSPECIFIED",
        "LOG_LEVEL_TRACE",
        "LOG_LEVEL_DEBUG",
        "LOG_LEVEL_INFO",
        "LOG_LEVEL_WARNING",
        "LOG_LEVEL_ERROR",
        "LOG_LEVEL_CRITICAL"
      ],
      "default": "LOG_LEVEL_UNSPECIFIED",
      "description": "LogLevel specifies the level for a log.\n\n - LOG_LEVEL_UNSPECIFIED: Unspecified log level.\n - LOG_LEVEL_TRACE: A log level of TRACE.\n - LOG_LEVEL_DEBUG: A log level of DEBUG.\n - LOG_LEVEL_INFO: A log level of INFO.\n - LOG_LEVEL_WARNING: A log level of WARNING.\n - LOG_LEVEL_ERROR: A log level of ERROR.\n - LOG_LEVEL_CRITICAL: A log level of CRITICAL.",
      "title": "LogLevel"
    },
    "v1LoginRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username of the user."
        },
        "password": {
          "type": "string",
          "description": "The password of the user."
        },
        "isHashed": {
          "type": "boolean",
          "format": "boolean",
          "description": "Indicate whether the provided password is pre-salted & hashed or not."
        }
      },
      "description": "Login the user.",
      "required": [
        "username",
        "password"
      ],
      "title": "LoginRequest"
    },
    "v1LoginResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "The token to be used when sending results."
        },
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "The logged in user."
        }
      },
      "description": "Response to LoginRequest.",
      "required": [
        "user",
        "token"
      ],
      "title": "LoginResponse"
    },
    "v1LogoutResponse": {
      "type": "object",
      "description": "Response to LogoutRequest.",
      "title": "LogoutResponse"
    },
    "v1MarkAllocationReservationDaemonRequest": {
      "type": "object",
      "properties": {
        "allocationId": {
          "type": "string",
          "description": "The allocation ID for the reservation."
        },
        "containerId": {
          "type": "string",
          "description": "The container ID for the reservation."
        }
      },
      "description": "Mark some reservation as a daemon.",
      "required": [
        "allocationId",
        "containerId"
      ],
      "title": "MarkAllocationReservationDaemonRequest"
    },
    "v1MarkAllocationReservationDaemonResponse": {
      "type": "object",
      "description": "Response to MarkAllocationReservationDaemonRequest.",
      "title": "MarkAllocationReservationDaemonResponse"
    },
    "v1MasterLogsResponse": {
      "type": "object",
      "properties": {
        "logEntry": {
          "$ref": "#/definitions/v1LogEntry",
          "description": "The log entry."
        }
      },
      "description": "Response to MasterLogsRequest.",
      "title": "MasterLogsResponse"
    },
    "v1MetricBatchesResponse": {
      "type": "object",
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "Milestones (in batches processed) at which the specified metric is\nrecorded."
        }
      },
      "description": "Response to MetricBatchesRequest.",
      "title": "MetricBatchesResponse"
    },
    "v1MetricNamesResponse": {
      "type": "object",
      "properties": {
        "searcherMetric": {
          "type": "string",
          "description": "The name of the searcher metric."
        },
        "trainingMetrics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of training metric names."
        },
        "validationMetrics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of validation metric names."
        }
      },
      "description": "Response to MetricNamesRequest.",
      "title": "MetricNamesResponse"
    },
    "v1MetricType": {
      "type": "string",
      "enum": [
        "METRIC_TYPE_UNSPECIFIED",
        "METRIC_TYPE_TRAINING",
        "METRIC_TYPE_VALIDATION"
      ],
      "default": "METRIC_TYPE_UNSPECIFIED",
      "description": "To distinguish the 2 different categories of metrics.\n\n - METRIC_TYPE_UNSPECIFIED: Zero-value (not allowed).\n - METRIC_TYPE_TRAINING: For metrics emitted during training.\n - METRIC_TYPE_VALIDATION: For metrics emitted during validation.",
      "title": "MetricType"
    },
    "v1Metrics": {
      "type": "object",
      "properties": {
        "numInputs": {
          "type": "integer",
          "format": "int32",
          "description": "Number of inputs to the model."
        },
        "validationMetrics": {
          "type": "object",
          "description": "Metrics calculated on the validation set."
        }
      },
      "description": "Metrics calculated during validation.",
      "title": "Metrics"
    },
    "v1MetricsWorkload": {
      "type": "object",
      "properties": {
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the workload finished or was stopped."
        },
        "state": {
          "$ref": "#/definitions/determinedexperimentv1State",
          "description": "The current validation state."
        },
        "metrics": {
          "type": "object",
          "description": "Metrics."
        },
        "numInputs": {
          "type": "integer",
          "format": "int32",
          "description": "Number of inputs processed."
        },
        "totalBatches": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of batches as of this workload's completion."
        }
      },
      "description": "MetricsWorkload is a workload generating metrics.",
      "required": [
        "state",
        "numInputs",
        "totalBatches"
      ],
      "title": "MetricsWorkload"
    },
    "v1Model": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the model.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "The description of the model."
        },
        "metadata": {
          "type": "object",
          "description": "The user-defined metadata of the model."
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the model was created."
        },
        "lastUpdatedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the model was last updated."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The id of this model."
        },
        "numVersions": {
          "type": "integer",
          "format": "int32",
          "description": "The number of versions associated with this model."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Labels associated with this model."
        },
        "username": {
          "type": "string",
          "description": "User who created this model."
        },
        "archived": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether this model is archived or not."
        }
      },
      "description": "Model is a named collection of model versions.",
      "required": [
        "id",
        "name",
        "metadata",
        "creationTime",
        "lastUpdatedTime",
        "numVersions",
        "username"
      ],
      "title": "Model"
    },
    "v1ModelVersion": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1Model",
          "description": "The model the version is related to."
        },
        "checkpoint": {
          "$ref": "#/definitions/v1Checkpoint",
          "description": "The checkpoint of the model version."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version number."
        },
        "creationTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the model version was created."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique id for each model version."
        },
        "name": {
          "type": "string",
          "description": "Name for this model version."
        },
        "metadata": {
          "type": "object",
          "description": "Metadata associated with this model version."
        },
        "lastUpdatedTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time this model version was last updated."
        },
        "comment": {
          "type": "string",
          "description": "Comment associated with this model version."
        },
        "username": {
          "type": "string",
          "description": "User who created this model version."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Labels associated with this model version."
        },
        "notes": {
          "type": "string",
          "description": "Notes associated with this model version."
        }
      },
      "description": "A version of a model containing a checkpoint. Users can label checkpoints as\na version of a model and use the model name and version to locate a\ncheckpoint.",
      "required": [
        "id",
        "model",
        "checkpoint",
        "version",
        "creationTime",
        "username"
      ],
      "title": "ModelVersion"
    },
    "v1Notebook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the notebook."
        },
        "description": {
          "type": "string",
          "description": "The description of the notebook."
        },
        "state": {
          "$ref": "#/definitions/determinedtaskv1State",
          "description": "The state of the notebook."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the notebook was started."
        },
        "container": {
          "$ref": "#/definitions/v1Container",
          "description": "The container running the notebook."
        },
        "username": {
          "type": "string",
          "description": "The username of the user that created the notebook."
        },
        "serviceAddress": {
          "type": "string",
          "description": "The service address."
        },
        "resourcePool": {
          "type": "string",
          "description": "The name of the resource pool the Notebook was created in."
        },
        "exitStatus": {
          "type": "string",
          "description": "The exit status."
        },
        "jobId": {
          "type": "string",
          "description": "The associated job id."
        }
      },
      "description": "Notebook is a Jupyter notebook in a containerized environment.",
      "required": [
        "id",
        "description",
        "startTime",
        "state",
        "username",
        "resourcePool",
        "jobId"
      ],
      "title": "Notebook"
    },
    "v1NotebookLogsResponse": {
      "type": "object",
      "properties": {
        "logEntry": {
          "$ref": "#/definitions/v1LogEntry",
          "description": "The Notebook's log entry."
        }
      },
      "description": "Response to NotebookLogsRequest.",
      "title": "NotebookLogsResponse"
    },
    "v1OrderBy": {
      "type": "string",
      "enum": [
        "ORDER_BY_UNSPECIFIED",
        "ORDER_BY_ASC",
        "ORDER_BY_DESC"
      ],
      "default": "ORDER_BY_UNSPECIFIED",
      "description": "Order records in either ascending or descending order.\n\n - ORDER_BY_UNSPECIFIED: Returns records in no specific order.\n - ORDER_BY_ASC: Returns records in ascending order.\n - ORDER_BY_DESC: Returns records in descending order.",
      "title": "OrderBy"
    },
    "v1Pagination": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The number of records skipped before returning results."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of records limited in the results."
        },
        "startIndex": {
          "type": "integer",
          "format": "int32",
          "description": "The index of the first record in the dataset."
        },
        "endIndex": {
          "type": "integer",
          "format": "int32",
          "description": "The index+1 of the last record in the dataset."
        },
        "total": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of values that match the filter."
        }
      },
      "description": "Pagination provides information about the offset, limit, and total number of\nrecords returned in the results.",
      "title": "Pagination"
    },
    "v1PaginationRequest": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int32",
          "description": "The number of records to skip before returning results."
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "description": "The amount of records limited in the results."
        }
      },
      "description": "Request to paginate the resposne.",
      "title": "PaginationRequest"
    },
    "v1PatchExperimentResponse": {
      "type": "object",
      "properties": {
        "experiment": {
          "$ref": "#/definitions/v1Experiment",
          "description": "Patched experiment."
        }
      },
      "description": "Response to PatchExperimentRequest.",
      "title": "PatchExperimentResponse"
    },
    "v1PatchModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "An updated name for the model.",
          "minLength": 1
        },
        "description": {
          "type": "string",
          "description": "An updated description for the model."
        },
        "metadata": {
          "type": "object",
          "description": "An updated metadata object for the model."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An updated label list for the model."
        }
      },
      "title": "PatchModel is a partial update to a model with only id required"
    },
    "v1PatchModelRequest": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1PatchModel",
          "description": "The model desired model fields and values."
        },
        "modelId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the model being updated."
        }
      },
      "description": "Request for updating a model in the registry.",
      "title": "PatchModelRequest"
    },
    "v1PatchModelResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1Model",
          "description": "The model created."
        }
      },
      "description": "Response to PatchModelRequest.",
      "title": "PatchModelResponse"
    },
    "v1PatchModelVersion": {
      "type": "object",
      "properties": {
        "checkpoint": {
          "$ref": "#/definitions/v1Checkpoint",
          "description": "An updated checkpoint to associate with the model version."
        },
        "name": {
          "type": "string",
          "description": "An updated name for the model version."
        },
        "metadata": {
          "type": "object",
          "description": "An updated metadata object for the model version."
        },
        "comment": {
          "type": "string",
          "description": "An updated comment for the model version."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "An updated label list for the model version."
        },
        "notes": {
          "type": "string",
          "description": "Updated text notes for the model version."
        }
      },
      "title": "PatchModel is a partial update to a ModelVersion with only id required"
    },
    "v1PatchModelVersionRequest": {
      "type": "object",
      "properties": {
        "modelId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the model being updated."
        },
        "modelVersion": {
          "$ref": "#/definitions/v1PatchModelVersion",
          "description": "The model version being updated."
        },
        "modelVersionId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the model version being updated."
        }
      },
      "description": "Request for updating a model version in the registry.",
      "title": "PatchModelVersionRequest"
    },
    "v1PatchModelVersionResponse": {
      "type": "object",
      "properties": {
        "modelVersion": {
          "$ref": "#/definitions/v1ModelVersion",
          "description": "The model version created."
        }
      },
      "description": "Response to PatchModelVersionRequest.",
      "title": "PatchModelVersionResponse"
    },
    "v1PauseExperimentResponse": {
      "type": "object",
      "description": "Response to PauseExperimentRequest.",
      "title": "PauseExperimentResponse"
    },
    "v1PostCheckpointMetadataRequest": {
      "type": "object",
      "properties": {
        "checkpoint": {
          "$ref": "#/definitions/v1Checkpoint",
          "description": "The desired checkpoint fields and values."
        }
      },
      "description": "Request for updating a checkpoints metadata.",
      "title": "PostCheckpointMetadataRequest"
    },
    "v1PostCheckpointMetadataResponse": {
      "type": "object",
      "properties": {
        "checkpoint": {
          "$ref": "#/definitions/v1Checkpoint",
          "description": "The updated checkpoint."
        }
      },
      "description": "Response to PostCheckpointRequest.",
      "title": "PostCheckpointMetadataResponse"
    },
    "v1PostModelRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the model."
        },
        "description": {
          "type": "string",
          "description": "The description of the model."
        },
        "metadata": {
          "type": "object",
          "description": "The user-defined metadata of the model."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Labels associated with this model."
        },
        "username": {
          "type": "string",
          "description": "User who is creating this model."
        }
      },
      "description": "Request for creating a model in the registry.",
      "required": [
        "name"
      ],
      "title": "PostModelRequest"
    },
    "v1PostModelResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1Model",
          "description": "The model created."
        }
      },
      "description": "Response to PostModelRequest.",
      "title": "PostModelResponse"
    },
    "v1PostModelVersionRequest": {
      "type": "object",
      "properties": {
        "modelId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the model to add this version to."
        },
        "checkpointUuid": {
          "type": "string",
          "description": "UUID of the checkpoint."
        },
        "name": {
          "type": "string",
          "description": "User-friendly name for the model version."
        },
        "comment": {
          "type": "string",
          "description": "User-written comment for the model version."
        },
        "metadata": {
          "type": "object",
          "description": "The user-defined metadata of the model version."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Labels associated with this model version."
        },
        "notes": {
          "type": "string",
          "description": "Notes associated with this model version."
        }
      },
      "description": "Request for creating a model version.",
      "required": [
        "modelId",
        "checkpointUuid"
      ],
      "title": "PostModelVersionRequest"
    },
    "v1PostModelVersionResponse": {
      "type": "object",
      "properties": {
        "modelVersion": {
          "$ref": "#/definitions/v1ModelVersion",
          "description": "The model version requested."
        }
      },
      "description": "Response for PostModelVersionRequest.",
      "title": "PostModelVersionResponse"
    },
    "v1PostTrialProfilerMetricsBatchRequest": {
      "type": "object",
      "properties": {
        "batches": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TrialProfilerMetricsBatch"
          },
          "description": "The batches to create."
        }
      },
      "description": "Create a batch of trial profiler metrics.",
      "required": [
        "batch"
      ],
      "title": "PostTrialProfilerMetricsBatchRequest"
    },
    "v1PostTrialProfilerMetricsBatchResponse": {
      "type": "object",
      "title": "Response to PostTrialProfilerMetricsBatchRequest"
    },
    "v1PostTrialRunnerMetadataResponse": {
      "type": "object",
      "title": "Response to PatchTrialMetadataRequest"
    },
    "v1PostUserRequest": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "The user to create."
        },
        "password": {
          "type": "string",
          "description": "The password of the user."
        }
      },
      "description": "Create a new user.",
      "title": "PostUserRequest"
    },
    "v1PostUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "The created user."
        }
      },
      "description": "Response to PostUserRequest.",
      "title": "PostUserResponse"
    },
    "v1PreviewHPSearchRequest": {
      "type": "object",
      "properties": {
        "config": {
          "type": "object",
          "description": "The experiment config to simulate."
        },
        "seed": {
          "type": "integer",
          "format": "int64",
          "description": "The searcher simulation seed."
        }
      },
      "description": "Preview hyperparameter search.",
      "title": "PreviewHPSearchRequest"
    },
    "v1PreviewHPSearchResponse": {
      "type": "object",
      "properties": {
        "simulation": {
          "$ref": "#/definitions/v1ExperimentSimulation",
          "description": "The resulting simulation."
        }
      },
      "description": "Response to PreviewSearchRequest.",
      "title": "PreviewHPSearchResponse"
    },
    "v1PutTemplateResponse": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1Template",
          "description": "The updated or created template."
        }
      },
      "description": "Response to PutTemplateRequest.",
      "title": "PutTemplateResponse"
    },
    "v1QueueControl": {
      "type": "object",
      "properties": {
        "jobId": {
          "type": "string",
          "description": "Job id."
        },
        "sourceResourcePool": {
          "type": "string",
          "description": "The resource pool to perform an action on."
        },
        "resourcePool": {
          "type": "string",
          "description": "Name of the target resource_pool to move the job to."
        },
        "queuePosition": {
          "type": "number",
          "format": "float",
          "description": "The desired job position in the queue."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The desired job priority in priority scheduler."
        },
        "weight": {
          "type": "number",
          "format": "float",
          "description": "The desired job weight in fairshare scheduler."
        }
      },
      "description": "Describes a message to control jobs in a queue.",
      "required": [
        "jobId",
        "action"
      ],
      "title": "QueueControl"
    },
    "v1QueueStats": {
      "type": "object",
      "properties": {
        "queuedCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of queued jobs in the queue."
        },
        "scheduledCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of scheduled jobs in the queue."
        },
        "preemptibleCount": {
          "type": "integer",
          "format": "int32",
          "description": "Number of preemptible jobs in the queue."
        }
      },
      "description": "Statistics for (part of) a queue.",
      "required": [
        "queuedCount",
        "scheduledCount",
        "preemptibleCount"
      ],
      "title": "QueueStats"
    },
    "v1RPQueueStat": {
      "type": "object",
      "properties": {
        "stats": {
          "$ref": "#/definitions/v1QueueStats",
          "description": "Job queue stats."
        },
        "resourcePool": {
          "type": "string",
          "description": "Resource pool."
        }
      },
      "description": "Job stats for a resource pool.",
      "required": [
        "stats",
        "resourcePool"
      ],
      "title": "RPQueueStat"
    },
    "v1RendezvousInfo": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The rendezvous addresses of the other containers."
        },
        "rank": {
          "type": "integer",
          "format": "int32",
          "description": "The container rank."
        }
      },
      "description": "The rendezvous info for the trial to rendezvous with sibling containers.",
      "required": [
        "addresses",
        "rank"
      ],
      "title": "RendezvousInfo"
    },
    "v1ReportTrialCheckpointMetadataResponse": {
      "type": "object",
      "title": "Response to ReportTrialCheckpointMetadataRequest"
    },
    "v1ReportTrialProgressResponse": {
      "type": "object",
      "title": "Response to ReportTrialProgressRequest"
    },
    "v1ReportTrialSearcherEarlyExitResponse": {
      "type": "object",
      "title": "Response to ReportTrialSearcherEarlyExitRequest"
    },
    "v1ReportTrialTrainingMetricsResponse": {
      "type": "object",
      "title": "Response to ReportTrialTrainingMetricsRequest"
    },
    "v1ReportTrialValidationMetricsResponse": {
      "type": "object",
      "title": "Response to ReportTrialValidationMetricsRequest"
    },
    "v1ResourceAllocationAggregatedEntry": {
      "type": "object",
      "properties": {
        "periodStart": {
          "type": "string",
          "description": "The date of this entry."
        },
        "period": {
          "$ref": "#/definitions/v1ResourceAllocationAggregationPeriod",
          "description": "The period over which aggregation occurred."
        },
        "seconds": {
          "type": "number",
          "format": "float",
          "description": "The total number of seconds included in this allocation entry."
        },
        "byUsername": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          },
          "description": "The seconds in the cluster used by experiments belonging to each user."
        },
        "byExperimentLabel": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          },
          "description": "The seconds in the cluster used by experiments labeled with each label."
        },
        "byResourcePool": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          },
          "description": "The seconds in the cluster used by experiments assigned to each resource\npool."
        },
        "byAgentLabel": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "float"
          },
          "description": "The seconds in the cluster used by experiments assigned to each agent\nlabel."
        }
      },
      "description": "One instance of slots in the cluster being allocated to a task during a\nperiod (aggregated).",
      "required": [
        "periodStart",
        "period",
        "seconds",
        "byUsername",
        "byExperimentLabel",
        "byResourcePool",
        "byAgentLabel"
      ],
      "title": "ResourceAllocationAggregatedEntry"
    },
    "v1ResourceAllocationAggregatedResponse": {
      "type": "object",
      "properties": {
        "resourceEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceAllocationAggregatedEntry"
          },
          "description": "An entry summarizing one workload."
        }
      },
      "description": "Response to ResourceAllocationAggregatedRequest.",
      "required": [
        "resourceEntries"
      ],
      "title": "ResourceAllocationAggregatedResponse"
    },
    "v1ResourceAllocationAggregationPeriod": {
      "type": "string",
      "enum": [
        "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED",
        "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_DAILY",
        "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_MONTHLY"
      ],
      "default": "RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED",
      "description": "The period over which to perform aggregation.\n\n - RESOURCE_ALLOCATION_AGGREGATION_PERIOD_UNSPECIFIED: Unspecified. This value will never actually be returned by the API, it is\njust an artifact of using protobuf.\n - RESOURCE_ALLOCATION_AGGREGATION_PERIOD_DAILY: Aggregation by day.\n - RESOURCE_ALLOCATION_AGGREGATION_PERIOD_MONTHLY: Aggregation by month.",
      "title": "ResourceAllocationAggregationPeriod"
    },
    "v1ResourceAllocationRawEntry": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "description": "The kind of workload being run during this allocation (training,\ncheckpoint, or validation)."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the allocation began."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the allocation ended."
        },
        "experimentId": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the experiment the allocation is a part of."
        },
        "username": {
          "type": "string",
          "description": "The username of the user who ran the experiment."
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The labels assigned to the experiment."
        },
        "seconds": {
          "type": "number",
          "format": "float",
          "description": "The number of seconds for which the allocation was active during the\nrequested period."
        },
        "slots": {
          "type": "integer",
          "format": "int32",
          "description": "The number of slots used by the allocation."
        }
      },
      "description": "One instance of slots in the cluster being allocated to a task.",
      "title": "ResourceAllocationRawEntry"
    },
    "v1ResourceAllocationRawResponse": {
      "type": "object",
      "properties": {
        "resourceEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceAllocationRawEntry"
          },
          "description": "An entry summarizing one workload."
        }
      },
      "description": "Response to ResourceAllocationRawRequest.",
      "title": "ResourceAllocationRawResponse"
    },
    "v1ResourcePool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The unique name of the resource pool."
        },
        "description": {
          "type": "string",
          "title": "The description of the resource pool"
        },
        "type": {
          "$ref": "#/definitions/v1ResourcePoolType",
          "title": "The type of the resource pool (AWS/GCP/STATIC)"
        },
        "numAgents": {
          "type": "integer",
          "format": "int32",
          "title": "The number of agents running in the resource pool"
        },
        "slotsAvailable": {
          "type": "integer",
          "format": "int32",
          "title": "The total number of slots that exist in the resource pool"
        },
        "slotsUsed": {
          "type": "integer",
          "format": "int32",
          "title": "The number of slots that are actively running workloads"
        },
        "slotType": {
          "$ref": "#/definitions/determineddevicev1Type",
          "description": "Slot device type: cpu, gpu, ..."
        },
        "auxContainerCapacity": {
          "type": "integer",
          "format": "int32",
          "title": "The max number of aux containers that can run in this resource pool"
        },
        "auxContainersRunning": {
          "type": "integer",
          "format": "int32",
          "title": "The current number of aux containers running in this resource pool"
        },
        "defaultComputePool": {
          "type": "boolean",
          "format": "boolean",
          "title": "Is this resource pool the default compute pool?"
        },
        "defaultAuxPool": {
          "type": "boolean",
          "format": "boolean",
          "title": "Is this resource pool the default auxiliary pool?"
        },
        "preemptible": {
          "type": "boolean",
          "format": "boolean",
          "description": "Is this resource pool using preemptible/spot instances? Only meaningful in\nan AWS or GCP resource pool."
        },
        "minAgents": {
          "type": "integer",
          "format": "int32",
          "description": "When using dynamic agents, the minimum number of agents that can exist in\nthe resource pool."
        },
        "maxAgents": {
          "type": "integer",
          "format": "int32",
          "description": "When using dynamic agents, the maximum number of agents that can exist in\nthe resource pool."
        },
        "slotsPerAgent": {
          "type": "integer",
          "format": "int32",
          "description": "The number of slots that exists on an dynamic agent."
        },
        "auxContainerCapacityPerAgent": {
          "type": "integer",
          "format": "int32",
          "title": "The maximum number of auxiliary containers that can run on an individual\nagent"
        },
        "schedulerType": {
          "$ref": "#/definitions/v1SchedulerType",
          "title": "The type of the scheduler. Either 'FAIR_SHARE', 'PRIORITY', or\n'ROUND_ROBIN'"
        },
        "schedulerFittingPolicy": {
          "$ref": "#/definitions/v1FittingPolicy",
          "description": "The fitting policy of the scheduler."
        },
        "location": {
          "type": "string",
          "description": "The location of the resource pool. For AWS this returns the region and for\nGCP this return the zone."
        },
        "imageId": {
          "type": "string",
          "description": "The VM image used for the agents when using dynamic agents."
        },
        "instanceType": {
          "type": "string",
          "description": "The instance type of the agents when using dynamic agents. For AWS this is\nthe Instance Type. For GCP this is the machine type combined with the\nnumber and types of GPUs. To work with this data programattically, we\nrecommend working with the ResourcePool.details.aws.instanceType and\nResourcePool.details.gcp.machineType/gpuType/gpuNum."
        },
        "masterUrl": {
          "type": "string",
          "title": "The url of the Determined master"
        },
        "masterCertName": {
          "type": "string",
          "title": "A hostname for which the master’s TLS certificate is valid, if the host\nspecified by the master_url option is an IP address or is not contained in\nthe certificate"
        },
        "startupScript": {
          "type": "string",
          "description": "The startup script for the agent. This runs on the node the agent runs on."
        },
        "containerStartupScript": {
          "type": "string",
          "description": "The startup script for the agent's container. This runs in the container\ndetermined-agent runs in."
        },
        "agentDockerNetwork": {
          "type": "string",
          "description": "The Docker network to use for the agent when using dynamic agents."
        },
        "agentDockerRuntime": {
          "type": "string",
          "title": "The docker runtime to use for the agent when using dynamic agents"
        },
        "agentDockerImage": {
          "type": "string",
          "title": "The docker image to use for the agent when using dynamic agents"
        },
        "agentFluentImage": {
          "type": "string",
          "title": "The Fluent docker image to use"
        },
        "maxIdleAgentPeriod": {
          "type": "number",
          "format": "float",
          "description": "The maximum idle period of agents in seconds. The master waits for this\nperiod of time before shutting down idle agents."
        },
        "maxAgentStartingPeriod": {
          "type": "number",
          "format": "float",
          "description": "The maximum starting period of agents in seconds. The master waits for this\nperiod of time for starting agents before retrying."
        },
        "details": {
          "$ref": "#/definitions/v1ResourcePoolDetail",
          "title": "GCP, AWS and Priority Scheduler details"
        }
      },
      "description": "A Resource Pool is a pool of resources where containers are run.",
      "required": [
        "name",
        "description",
        "type",
        "numAgents",
        "slotsAvailable",
        "slotsUsed",
        "slotType",
        "auxContainerCapacity",
        "auxContainersRunning",
        "defaultComputePool",
        "defaultAuxPool",
        "preemptible",
        "minAgents",
        "maxAgents",
        "auxContainerCapacityPerAgent",
        "schedulerType",
        "schedulerFittingPolicy",
        "location",
        "imageId",
        "instanceType",
        "masterUrl",
        "masterCertName",
        "startupScript",
        "containerStartupScript",
        "agentDockerNetwork",
        "agentDockerRuntime",
        "agentDockerImage",
        "agentFluentImage",
        "maxIdleAgentPeriod",
        "maxAgentStartingPeriod",
        "details"
      ],
      "title": "ResourcePool"
    },
    "v1ResourcePoolAwsDetail": {
      "type": "object",
      "properties": {
        "region": {
          "type": "string",
          "title": "The region the resource pool exists in"
        },
        "rootVolumeSize": {
          "type": "integer",
          "format": "int32",
          "title": "Size of the root volume of the Determined agent in GB"
        },
        "imageId": {
          "type": "string",
          "title": "The AMI ID of the Determined agent"
        },
        "tagKey": {
          "type": "string",
          "title": "Key for tagging the Determined agent instances"
        },
        "tagValue": {
          "type": "string",
          "title": "Value for tagging the Determined agent instances"
        },
        "instanceName": {
          "type": "string",
          "title": "Name to set for the Determined agent instances"
        },
        "sshKeyName": {
          "type": "string",
          "title": "The name of the SSH key registered with AWS for SSH key access to the agent\ninstances"
        },
        "publicIp": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether to use public IP addresses for the Determined agent"
        },
        "subnetId": {
          "type": "string",
          "title": "The ID of the subnet to run the Determined agents in"
        },
        "securityGroupId": {
          "type": "string",
          "title": "The ID of the security group to run the Determined agents as"
        },
        "iamInstanceProfileArn": {
          "type": "string",
          "description": "The Amazon Resource Name (ARN) of the IAM instance profile to attach to the\nagent instances."
        },
        "instanceType": {
          "type": "string",
          "title": "AWS instance type to use for dynamic agents"
        },
        "logGroup": {
          "type": "string",
          "title": "The log group"
        },
        "logStream": {
          "type": "string",
          "title": "The log stream"
        },
        "spotEnabled": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether to use spot instances"
        },
        "spotMaxPrice": {
          "type": "string",
          "title": "The maximum price per hour to pay for a spot instance"
        },
        "customTags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AwsCustomTag"
          },
          "title": "List of arbitrary user-defined tags that are added to the Determined agent\ninstances"
        }
      },
      "title": "AWS-specific details about the resource pool",
      "required": [
        "region",
        "rootVolumeSize",
        "imageId",
        "tagKey",
        "tagValue",
        "instanceName",
        "sshKeyName",
        "publicIp",
        "securityGroupId",
        "iamInstanceProfileArn",
        "spotEnabled"
      ]
    },
    "v1ResourcePoolDetail": {
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/v1ResourcePoolAwsDetail",
          "title": "AWS-specific details"
        },
        "gcp": {
          "$ref": "#/definitions/v1ResourcePoolGcpDetail",
          "title": "GCP-specific details"
        },
        "priorityScheduler": {
          "$ref": "#/definitions/v1ResourcePoolPrioritySchedulerDetail",
          "title": "Priority scheduler-specific details"
        }
      },
      "title": "Detailed information about the resource pool"
    },
    "v1ResourcePoolGcpDetail": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string",
          "title": "The project ID of the GCP resources used by Determined"
        },
        "zone": {
          "type": "string",
          "title": "The zone of the GCP resources used by Determined"
        },
        "bootDiskSize": {
          "type": "integer",
          "format": "int32",
          "title": "Size of the root volume of the Determined agent in GB"
        },
        "bootDiskSourceImage": {
          "type": "string",
          "title": "The boot disk source image of the Determined agent"
        },
        "labelKey": {
          "type": "string",
          "description": "Key for labeling the Determined agent instances."
        },
        "labelValue": {
          "type": "string",
          "title": "Value for labeling the Determined agent instances"
        },
        "namePrefix": {
          "type": "string",
          "title": "Name prefix to set for the Determined agent instances"
        },
        "network": {
          "type": "string",
          "title": "Network resource for the Determined agent instances"
        },
        "subnetwork": {
          "type": "string",
          "title": "Subnetwork resource for the Determined agent instances"
        },
        "externalIp": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether to use external IP addresses for the Determined agent instances"
        },
        "networkTags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "The network tags to set firewalls for the Determined agent instances"
        },
        "serviceAccountEmail": {
          "type": "string",
          "description": "Email of the service account for the Determined agent instances."
        },
        "serviceAccountScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of scopes authorized for the Determined agent instances"
        },
        "machineType": {
          "type": "string",
          "title": "Type of machine for the Determined agents"
        },
        "gpuType": {
          "type": "string",
          "title": "Type of GPU for the Determined agents"
        },
        "gpuNum": {
          "type": "integer",
          "format": "int32",
          "title": "Number of GPUs for the Determined agents"
        },
        "preemptible": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether to use preemptible instances"
        },
        "operationTimeoutPeriod": {
          "type": "number",
          "format": "float",
          "title": "The timeout period for tracking a GCP operation in seconds"
        }
      },
      "title": "GCP-specific details about the resource pool",
      "required": [
        "project",
        "zone",
        "bootDiskSize",
        "bootDiskSourceImage",
        "labelKey",
        "labelValue",
        "namePrefix",
        "network",
        "externalIp",
        "serviceAccountEmail",
        "serviceAccountScopes",
        "machineType",
        "gpuType",
        "gpuNum",
        "preemptible",
        "operationTimeoutPeriod"
      ]
    },
    "v1ResourcePoolPrioritySchedulerDetail": {
      "type": "object",
      "properties": {
        "preemption": {
          "type": "boolean",
          "format": "boolean",
          "title": "Whether lower priority tasks should be preempted to schedule higher\npriority tasks"
        },
        "defaultPriority": {
          "type": "integer",
          "format": "int32",
          "description": "The priority that is assigned to tasks that do not explicitly specify a\npriority."
        },
        "k8Priorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1K8PriorityClass"
          },
          "description": "List of available priorities for K8 (if applicable)."
        }
      },
      "title": "Details related to the priority scheduler. This will only be present if the\nschedulerType=priority",
      "required": [
        "preemption",
        "defaultPriority"
      ]
    },
    "v1ResourcePoolType": {
      "type": "string",
      "enum": [
        "RESOURCE_POOL_TYPE_UNSPECIFIED",
        "RESOURCE_POOL_TYPE_AWS",
        "RESOURCE_POOL_TYPE_GCP",
        "RESOURCE_POOL_TYPE_STATIC",
        "RESOURCE_POOL_TYPE_K8S"
      ],
      "default": "RESOURCE_POOL_TYPE_UNSPECIFIED",
      "description": "The type of the ResourcePool.\n\n - RESOURCE_POOL_TYPE_UNSPECIFIED: Unspecified. This value will never actually be returned by the API, it is\njust an artifact of using protobuf.\n - RESOURCE_POOL_TYPE_AWS: An AWS resource pool.\n - RESOURCE_POOL_TYPE_GCP: A GCP resource pool.\n - RESOURCE_POOL_TYPE_STATIC: A static resource pool.\n - RESOURCE_POOL_TYPE_K8S: The kubernetes resource pool.",
      "title": "ResourcePoolType"
    },
    "v1RunnableOperation": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/v1RunnableType",
          "description": "This is the type of the operation."
        },
        "length": {
          "$ref": "#/definitions/v1TrainingLength",
          "title": "If the type == WORKLOAD_KIND_TRAIN, this is the number of units"
        }
      },
      "description": "RunnableOperation represents a single runnable operation emitted by a\nsearcher.",
      "title": "RunnableOperation"
    },
    "v1RunnableType": {
      "type": "string",
      "enum": [
        "RUNNABLE_TYPE_UNSPECIFIED",
        "RUNNABLE_TYPE_TRAIN",
        "RUNNABLE_TYPE_VALIDATE"
      ],
      "default": "RUNNABLE_TYPE_UNSPECIFIED",
      "description": "RunnableType defines the type of operation that should be executed by trial\nrunners.\n\n - RUNNABLE_TYPE_UNSPECIFIED: Denotes an unknown runnable type.\n - RUNNABLE_TYPE_TRAIN: Signals to a trial runner that it should run a train.\n - RUNNABLE_TYPE_VALIDATE: Signals to a trial runner it should compute validation metrics.",
      "title": "RunnableType"
    },
    "v1SSOProvider": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A descriptive name for this provider."
        },
        "ssoUrl": {
          "type": "string",
          "description": "The URL to use for SSO with this provider."
        }
      },
      "description": "Describe one SSO provider.",
      "required": [
        "name",
        "ssoUrl"
      ],
      "title": "SSOProvider"
    },
    "v1SchedulerType": {
      "type": "string",
      "enum": [
        "SCHEDULER_TYPE_UNSPECIFIED",
        "SCHEDULER_TYPE_PRIORITY",
        "SCHEDULER_TYPE_FAIR_SHARE",
        "SCHEDULER_TYPE_ROUND_ROBIN",
        "SCHEDULER_TYPE_KUBERNETES"
      ],
      "default": "SCHEDULER_TYPE_UNSPECIFIED",
      "description": "The type of the Scheduler.\n\n - SCHEDULER_TYPE_UNSPECIFIED: Unspecified. This value will never actually be returned by the API, it is\njust an artifact of using protobuf.\n - SCHEDULER_TYPE_PRIORITY: The priority scheduler.\n - SCHEDULER_TYPE_FAIR_SHARE: The fair share scheduler.\n - SCHEDULER_TYPE_ROUND_ROBIN: The round robin scheduler\n - SCHEDULER_TYPE_KUBERNETES: The kubernetes scheduler.",
      "title": "SchedulerType"
    },
    "v1SearcherOperation": {
      "type": "object",
      "properties": {
        "validateAfter": {
          "$ref": "#/definitions/v1ValidateAfterOperation",
          "description": "ValidateAfter is issued to tell a trial to train some then validate."
        }
      },
      "description": "SearcherOperation is an operation issued by the searcher.",
      "title": "SearcherOperation"
    },
    "v1SetCommandPriorityRequest": {
      "type": "object",
      "properties": {
        "commandId": {
          "type": "string",
          "description": "The id of the command."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The new priority."
        }
      },
      "description": "Set the priority of the requested command.",
      "title": "SetCommandPriorityRequest"
    },
    "v1SetCommandPriorityResponse": {
      "type": "object",
      "properties": {
        "command": {
          "$ref": "#/definitions/v1Command",
          "description": "The requested command."
        }
      },
      "description": "Response to SetCommandPriorityRequest.",
      "title": "SetCommandPriorityResponse"
    },
    "v1SetNotebookPriorityRequest": {
      "type": "object",
      "properties": {
        "notebookId": {
          "type": "string",
          "description": "The id of the notebook."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The new priority."
        }
      },
      "description": "Set the priority of the requested notebook.",
      "title": "SetNotebookPriorityRequest"
    },
    "v1SetNotebookPriorityResponse": {
      "type": "object",
      "properties": {
        "notebook": {
          "$ref": "#/definitions/v1Notebook",
          "description": "The requested notebook."
        }
      },
      "description": "Response to SetNotebookPriorityRequest.",
      "title": "SetNotebookPriorityResponse"
    },
    "v1SetShellPriorityRequest": {
      "type": "object",
      "properties": {
        "shellId": {
          "type": "string",
          "description": "The id of the shell."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The new priority."
        }
      },
      "description": "Set the priority of the requested shell.",
      "title": "SetShellPriorityRequest"
    },
    "v1SetShellPriorityResponse": {
      "type": "object",
      "properties": {
        "shell": {
          "$ref": "#/definitions/v1Shell",
          "description": "The requested shell."
        }
      },
      "description": "Response to SetShellPriorityRequest.",
      "title": "SetShellPriorityResponse"
    },
    "v1SetTensorboardPriorityRequest": {
      "type": "object",
      "properties": {
        "tensorboardId": {
          "type": "string",
          "description": "The id of the TensorBoard."
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "description": "The new priority."
        }
      },
      "description": "Set the priority of the requested TensorBoard.",
      "title": "SetTensorboardPriorityRequest"
    },
    "v1SetTensorboardPriorityResponse": {
      "type": "object",
      "properties": {
        "tensorboard": {
          "$ref": "#/definitions/v1Tensorboard",
          "description": "The requested Tensorboard."
        }
      },
      "description": "Response to SetTensorboardPriorityRequest.",
      "title": "SetTensorboardPriorityResponse"
    },
    "v1SetUserPasswordResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1User",
          "description": "The updated user."
        }
      },
      "description": "Response to SetUserPasswordRequest.",
      "title": "SetUserPasswordResponse"
    },
    "v1Shell": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the shell."
        },
        "description": {
          "type": "string",
          "description": "The description of the shell."
        },
        "state": {
          "$ref": "#/definitions/determinedtaskv1State",
          "description": "The state of the shell."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the shell was started."
        },
        "container": {
          "$ref": "#/definitions/v1Container",
          "description": "The container running the shell."
        },
        "privateKey": {
          "type": "string",
          "description": "The private key for this shell."
        },
        "publicKey": {
          "type": "string",
          "description": "The public key for this shell."
        },
        "username": {
          "type": "string",
          "description": "The username of the user that created the shell."
        },
        "resourcePool": {
          "type": "string",
          "title": "The name of the resource pool the Shell was created in"
        },
        "exitStatus": {
          "type": "string",
          "title": "The exit status;"
        },
        "addresses": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "title": "The addresses;"
        },
        "agentUserGroup": {
          "type": "object",
          "title": "The agent user group;"
        },
        "jobId": {
          "type": "string",
          "description": "The associated job id."
        }
      },
      "description": "Shell is an ssh server in a containerized environment.",
      "required": [
        "id",
        "description",
        "startTime",
        "state",
        "username",
        "jobId",
        "resourcePool"
      ],
      "title": "Shell"
    },
    "v1Slot": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The unqiue id of the slot for a given agent."
        },
        "device": {
          "$ref": "#/definitions/v1Device",
          "description": "The individual resource this slot wraps."
        },
        "enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Flag notifying if containers can be scheduled on this slot."
        },
        "container": {
          "$ref": "#/definitions/v1Container",
          "description": "Container that is currently running on this agent. It is unset if there is\nno container currently running on this slot."
        },
        "draining": {
          "type": "boolean",
          "format": "boolean",
          "description": "Flag notifying if this slot is in the draining mode: current containers\nwill be allowed to finish but no new ones will be scheduled."
        }
      },
      "description": "Slot wraps a single device on the agent.",
      "title": "Slot"
    },
    "v1Template": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the template."
        },
        "config": {
          "type": "object",
          "description": "The template value."
        }
      },
      "description": "Templates move settings that are shared by many experiments into a single\nYAML file.",
      "required": [
        "name",
        "config"
      ],
      "title": "Template"
    },
    "v1Tensorboard": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The id of the tensorboard."
        },
        "description": {
          "type": "string",
          "description": "The description of the tensorboard."
        },
        "state": {
          "$ref": "#/definitions/determinedtaskv1State",
          "description": "The state of the tensorboard."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time the tensorboard was started."
        },
        "container": {
          "$ref": "#/definitions/v1Container",
          "description": "The container running the tensorboard."
        },
        "experimentIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "The experiment ids loaded into this tensorboard instance."
        },
        "trialIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "The trial ids loaded into this tensorboard instance."
        },
        "username": {
          "type": "string",
          "description": "The username of the user that created the tensorboard."
        },
        "serviceAddress": {
          "type": "string",
          "description": "The service address."
        },
        "resourcePool": {
          "type": "string",
          "title": "The name of the resource pool the command was created in"
        },
        "exitStatus": {
          "type": "string",
          "title": "The exit status;"
        },
        "jobId": {
          "type": "string",
          "description": "The associated job id."
        }
      },
      "description": "Tensorboard is a tensorboard instance in a containerized environment.",
      "required": [
        "id",
        "description",
        "startTime",
        "state",
        "username",
        "jobId",
        "resourcePool"
      ],
      "title": "Tensorboard"
    },
    "v1TrainingLength": {
      "type": "object",
      "properties": {
        "unit": {
          "$ref": "#/definitions/TrainingLengthUnit",
          "description": "The units the training length is in terms of."
        },
        "length": {
          "type": "integer",
          "format": "int32",
          "description": "The value for the training length."
        }
      },
      "description": "The representation for an amount of training.",
      "required": [
        "unit",
        "length"
      ],
      "title": "TrainingLength"
    },
    "v1TrialEarlyExit": {
      "type": "object",
      "properties": {
        "reason": {
          "$ref": "#/definitions/TrialEarlyExitExitedReason",
          "description": "The reason for the exit."
        }
      },
      "description": "Signals to the experiment the trial early exited.",
      "required": [
        "reason"
      ],
      "title": "TrialEarlyExit"
    },
    "v1TrialLogsFieldsResponse": {
      "type": "object",
      "properties": {
        "agentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The distinct agent IDs present in the logs."
        },
        "containerIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The distinct container IDs present in the logs."
        },
        "rankIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "The distinct rank IDs present in the logs."
        },
        "stdtypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The distinct stdtypes present in the logs."
        },
        "sources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The distinct sources present in the logs."
        }
      },
      "description": "Response to TrialLogFieldsRequest.",
      "required": [
        "id",
        "message"
      ],
      "title": "TrialLogsFieldsResponse"
    },
    "v1TrialLogsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the trial log."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the log."
        },
        "message": {
          "type": "string",
          "description": "The log message."
        },
        "level": {
          "$ref": "#/definitions/v1LogLevel",
          "description": "The level of the log."
        }
      },
      "description": "Response to TrialLogsRequest.",
      "required": [
        "id",
        "level",
        "message",
        "timestamp"
      ],
      "title": "TrialLogsResponse"
    },
    "v1TrialMetrics": {
      "type": "object",
      "properties": {
        "trialId": {
          "type": "integer",
          "format": "int32",
          "description": "The trial associated with these metrics."
        },
        "trialRunId": {
          "type": "integer",
          "format": "int32",
          "description": "The trial run associated with these metrics."
        },
        "latestBatch": {
          "type": "integer",
          "format": "int32",
          "description": "The number of batches trained on when these metrics were reported."
        },
        "metrics": {
          "type": "object",
          "description": "The metrics for this bit of training (reduced over the reporting period)."
        },
        "batchMetrics": {
          "type": "array",
          "items": {
            "type": "object"
          },
          "description": "The batch metrics for this bit of training."
        }
      },
      "description": "Metrics from the trial some duration of training.",
      "required": [
        "trialId",
        "trialRunId",
        "latestBatch",
        "metrics"
      ],
      "title": "TrialMetrics"
    },
    "v1TrialProfilerMetricLabels": {
      "type": "object",
      "properties": {
        "trialId": {
          "type": "integer",
          "format": "int32",
          "description": "The ID of the trial."
        },
        "name": {
          "type": "string",
          "description": "The name of the metric."
        },
        "agentId": {
          "type": "string",
          "description": "The agent ID associated with the metric."
        },
        "gpuUuid": {
          "type": "string",
          "description": "The GPU UUID associated with the metric."
        },
        "metricType": {
          "$ref": "#/definitions/TrialProfilerMetricLabelsProfilerMetricType",
          "description": "The type of the metric."
        }
      },
      "title": "TrialProfilerMetricLabels are the labels for a single series, where a series\nis a defined as all metrics sharing a distinct set of labels",
      "required": [
        "trialId",
        "name"
      ]
    },
    "v1TrialProfilerMetricsBatch": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "float"
          },
          "description": "The measurement for a reading, repeated for the batch of metrics."
        },
        "batches": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "The batch at which a reading occurred, repeated for the batch of metrics."
        },
        "timestamps": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "date-time"
          },
          "description": "The timestamp at which a reading occurred, repeated for the batch of\nmetrics."
        },
        "labels": {
          "$ref": "#/definitions/v1TrialProfilerMetricLabels",
          "description": "The labels for this series."
        }
      },
      "description": "TrialProfilerMetricsBatch is a batch of trial profiler metrics. A batch will\ncontain metrics pertaining to a single series. The fields values, batches and\ntimestamps will be equal length arrays with each index corresponding to a\nreading.",
      "required": [
        "values",
        "batches",
        "timestamps",
        "labels"
      ],
      "title": "TrialProfilerMetricsBatch"
    },
    "v1TrialRunnerMetadata": {
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the trial runner."
        }
      },
      "description": "The metadata pertaining to the current running task for a trial.",
      "required": [
        "state"
      ],
      "title": "TrialRunnerMetadata"
    },
    "v1TrialSimulation": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1RunnableOperation"
          },
          "description": "The list of operations that were run before the trial was completed."
        },
        "occurrences": {
          "type": "integer",
          "format": "int32",
          "description": "The number of times that this trial configuration has occurred during the\nsimulation."
        }
      },
      "description": "TrialSimulation is a specific sequence of workloads that were run before the\ntrial was completed.",
      "title": "TrialSimulation"
    },
    "v1TrialsSampleResponse": {
      "type": "object",
      "properties": {
        "trials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TrialsSampleResponseTrial"
          },
          "description": "A historical or incremental series of data points for the trials."
        },
        "promotedTrials": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "IDs of trials that are newly included in the data."
        },
        "demotedTrials": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "IDs of trials that are no loger included in the top N trials."
        }
      },
      "title": "Response to TrialsSampleRequest",
      "required": [
        "trials",
        "promotedTrials",
        "demotedTrials"
      ]
    },
    "v1TrialsSampleResponseTrial": {
      "type": "object",
      "properties": {
        "trialId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the trial."
        },
        "hparams": {
          "type": "object",
          "description": "Hyperparamters values for this specific trial."
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrialsSampleResponseDataPoint"
          },
          "description": "A possibly down-sampled series of metric readings through the progress of\nthe trial."
        }
      },
      "description": "Metadata and metrics stream from a trial.",
      "required": [
        "trialId",
        "hparams",
        "data"
      ],
      "title": "TrialsSampleResponseTrial"
    },
    "v1TrialsSnapshotResponse": {
      "type": "object",
      "properties": {
        "trials": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TrialsSnapshotResponseTrial"
          },
          "description": "A list of trials."
        }
      },
      "title": "Response to TrialsSnapshotRequest",
      "required": [
        "trials"
      ]
    },
    "v1TrialsSnapshotResponseTrial": {
      "type": "object",
      "properties": {
        "trialId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the trial."
        },
        "hparams": {
          "type": "object",
          "description": "A dictionary of hyperparameter values for this trial."
        },
        "metric": {
          "type": "number",
          "format": "double",
          "description": "The value of the metric in this trial at this point."
        },
        "batchesProcessed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of batches processed for this particular datapoint."
        }
      },
      "description": "Metric value and metadata for a trial that has progress this far.",
      "required": [
        "trialId",
        "hparams",
        "metric",
        "batchesProcessed"
      ],
      "title": "TrialsSnapshotResponseTrial"
    },
    "v1UnarchiveExperimentResponse": {
      "type": "object",
      "description": "Response to UnarchiveExperimentRequest.",
      "title": "UnarchiveExperimentResponse"
    },
    "v1UnarchiveModelResponse": {
      "type": "object",
      "title": "Response to UnarchiveModelRequest"
    },
    "v1UpdateJobQueueRequest": {
      "type": "object",
      "properties": {
        "updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1QueueControl"
          },
          "description": "List of job queue control requests."
        }
      },
      "description": "Request to update the job queue.",
      "required": [
        "updates"
      ],
      "title": "UpdateJobQueueRequest"
    },
    "v1UpdateJobQueueResponse": {
      "type": "object",
      "description": "Response to UpdateJobQueueRequest.",
      "title": "UpdateJobQueueResponse"
    },
    "v1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "The user ID."
        },
        "username": {
          "type": "string",
          "description": "The user login name of the user."
        },
        "admin": {
          "type": "boolean",
          "format": "boolean",
          "description": "Bool denoting whether the account is an admin account."
        },
        "active": {
          "type": "boolean",
          "format": "boolean",
          "description": "Bool denoting whether the account is active."
        },
        "agentUserGroup": {
          "$ref": "#/definitions/v1AgentUserGroup",
          "description": "The user and group on the agent host machine."
        }
      },
      "description": "User is an account in the determined cluster.",
      "required": [
        "username",
        "admin",
        "active",
        "id"
      ],
      "title": "User"
    },
    "v1ValidateAfterOperation": {
      "type": "object",
      "properties": {
        "length": {
          "$ref": "#/definitions/v1TrainingLength",
          "description": "The length to train before reporting a validation."
        }
      },
      "description": "ValidateAfterOperation means the trial should train and validate after\ntraining the given length.",
      "title": "ValidateAfterOperation"
    },
    "v1ValidationHistoryEntry": {
      "type": "object",
      "properties": {
        "trialId": {
          "type": "integer",
          "format": "int32",
          "description": "The id for the trial associated with this validation entry."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The time at which the completed validation was reported."
        },
        "searcherMetric": {
          "type": "number",
          "format": "float",
          "description": "The value of the `searcher.metric`, indicated by the experiment config, for\nthe validation."
        }
      },
      "description": "ValidationHistoryEntry is a single entry for a validation history for an\nexperiment.",
      "required": [
        "trialId",
        "endTime",
        "searcherMetric"
      ],
      "title": "ValidationHistoryEntry"
    }
  },
  "securityDefinitions": {
    "BearerToken": {
      "type": "apiKey",
      "description": "Bearer token authentication strategy",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerToken": []
    }
  ],
  "externalDocs": {
    "description": "Determined AI Documentation",
    "url": "/docs"
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Log in to and out of the cluster"
    },
    {
      "name": "Users",
      "description": "Manage users"
    },
    {
      "name": "Cluster",
      "description": "Manage cluster components"
    },
    {
      "name": "Experiments",
      "description": "Manage experiments"
    },
    {
      "name": "Templates",
      "description": "Manage templates"
    },
    {
      "name": "Models",
      "description": "Manage models"
    }
  ]
}
