---
AWSTemplateFormatVersion: 2010-09-09
Description: Determined Template
Parameters:
  Keypair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Keypair to SSH

  MasterAmiId:
    Type: String
    Description: AMI Id for Master
    Default: ami-79873901

  MasterInstanceType:
    Type: String
    Description: Instance Type of Master
    Default: m5.large

  AgentAmiId:
    Type: String
    Description: AMI Id for Agent
    Default: ami-0929af537382e95c0

  AgentInstanceType:
    Type: String
    Description: Instance Type of Agent
    Default: p2.8xlarge

  InboundCIDRRange:
    Type: String
    Description: Ip range for Inbound
    Default: 0.0.0.0/0

  Version:
    Type: String
    Description: Determined version or commit for master docker image
    Default: 0.12.1

  DBPassword:
    Type: String
    Description: Password for database (eg. "postgres")
    NoEcho: true

  HasuraSecret:
    Type: String
    Description: Password for hasura (eg. "hasura")
    NoEcho: true

  MaxIdleAgentPeriod:
    Type: String
    Description: How long before idle agents are shutdown
    Default: 10m

  MaxInstances:
    Type: Number
    Description: Maximum number of agents to launch simultaneously
    Default: 5

Resources:
  CheckpointBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub det-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}

  MasterSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      DestinationSecurityGroupId: !GetAtt AgentSecurityGroup.GroupId
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  MasterSecurityGroupInternet:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  MasterSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt AgentSecurityGroup.GroupId

  MasterSecurityGroupIngressUI:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080
      IpProtocol: tcp
      CidrIp: !Ref InboundCIDRRange

  MasterSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt MasterSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref InboundCIDRRange

  AgentSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt AgentSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp

  AgentSecurityGroupIngressMaster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt AgentSecurityGroup.GroupId
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId

  AgentSecurityGroupIngressAgent:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt AgentSecurityGroup.GroupId
      FromPort: 0
      ToPort: 65535
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt AgentSecurityGroup.GroupId

  AgentSSHIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt AgentSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref InboundCIDRRange

  DatabaseEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt DatabaseSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      FromPort: 0
      ToPort: 65535
      IpProtocol: -1

  DatabaseIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt DatabaseSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !GetAtt MasterSecurityGroup.GroupId

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group For Master
      Tags:
        - Key: user
          Value: !Ref AWS::StackName

  AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group For Agent
      Tags:
        - Key: user
          Value: !Ref AWS::StackName

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group For Database
      Tags:
        - Key: user
          Value: !Ref AWS::StackName

  Database:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete
    Properties:
      Engine: aurora-postgresql
      EngineMode: serverless
      DatabaseName: determined
      DBClusterParameterGroupName: 'default.aurora-postgresql10'
      MasterUsername: postgres
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: user
          Value: !Ref AWS::StackName
      VpcSecurityGroupIds:
        - !GetAtt DatabaseSecurityGroup.GroupId

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /determined/${AWS::StackName}

  LogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref AgentRole
        - !Ref MasterRole
      PolicyName: agent-log-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource:
              - !Sub arn:aws:logs:*:*:log-group:${LogGroup},
              - !Sub arn:aws:logs:*:*:log-group:${LogGroup}:log-stream:*

  MetricPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref AgentRole
        - !Ref MasterRole
      PolicyName: agent-metric-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"

  AgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: agent-s3-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource: "*"
        - PolicyName: determined-ec2
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: "*"

  AgentInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref AgentRole

  MasterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: determined-agent-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:TerminateInstances
                  - ec2:CreateTags
                  - ec2:RunInstances
                Resource: "*"
        - PolicyName: pass-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt AgentRole.Arn
      Tags:
        - Key: user
          Value: !Ref AWS::StackName

  MasterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MasterRole

  MasterInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref MasterInstanceType
      ImageId: !Ref MasterAmiId
      KeyName: !Ref Keypair
      IamInstanceProfile: !Ref MasterInstanceProfile
      SecurityGroupIds:
        - !Ref MasterSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          mkdir -p /usr/local/determined/etc
          cat << EOF > /usr/local/determined/etc/master.yaml
          checkpoint_storage:
            type: s3
            bucket: ${CheckpointBucket}
            save_experiment_best: 0
            save_trial_best: 1
            save_trial_latest: 1

          db:
            user: postgres
            password: "${DBPassword}"
            host: "${Database.Endpoint.Address}"
            port: 5432
            name: determined

          hasura:
            secret: "${HasuraSecret}"
            address: determined-graphql:8080

          provisioner:
            iam_instance_profile_arn: ${AgentInstanceProfile.Arn}
            image_id: ${AgentAmiId}
            agent_docker_image: determinedai/determined-agent:${Version}
            instance_name: determined-agent-${AWS::StackName}
            instance_type: ${AgentInstanceType}
            log_group: ${LogGroup}
            log_stream: determined-agent
            master_url: http://local-ipv4:8080
            max_idle_agent_period: ${MaxIdleAgentPeriod}
            max_instances: ${MaxInstances}
            network_interface:
              public_ip: true
              security_group_id: ${AgentSecurityGroup.GroupId}
            provider: aws
            root_volume_size: 200
            ssh_key_name: ${Keypair}
            tag_key: det-${AWS::StackName}
            tag_value: det-agent-${AWS::StackName}
          EOF

          apt-get remove docker docker-engine docker.io containerd runc
          apt-get update
          apt-get install -y \
              apt-transport-https \
              ca-certificates \
              curl \
              gnupg-agent \
              software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository \
             "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
             $(lsb_release -cs) \
             stable"
          apt-get update
          apt-get install -y docker-ce docker-ce-cli containerd.io

          docker network create determined

          docker stop $(docker ps -a -q)
          docker rm $(docker ps -a -q)

          docker run \
              -d \
              --name determined-graphql \
              --restart unless-stopped \
              --network determined \
              --log-driver=awslogs \
              --log-opt awslogs-group=${LogGroup} \
              --log-opt awslogs-stream=determined-hasura \
              -e HASURA_GRAPHQL_ADMIN_SECRET=${HasuraSecret} \
              -e HASURA_GRAPHQL_CONSOLE_ASSETS_DIR=/srv/console-assets \
              -e HASURA_GRAPHQL_DATABASE_URL=postgres://postgres:${DBPassword}@${Database.Endpoint.Address}:5432/determined \
              -e HASURA_GRAPHQL_ENABLED_APIS=graphql,metadata \
              -e HASURA_GRAPHQL_ENABLED_LOG_TYPES=startup \
              -e HASURA_GRAPHQL_ENABLE_CONSOLE=false \
              -e HASURA_GRAPHQL_ENABLE_TELEMETRY=false \
              hasura/graphql-engine:v1.1.0

          docker run \
              --name determined-master \
              --network determined \
              --restart unless-stopped \
              --log-driver=awslogs \
              --log-opt awslogs-group=${LogGroup} \
              --log-opt awslogs-stream=determined-master \
              -p 8080:8080 \
              -v /usr/local/determined/etc/master.yaml:/etc/determined/master.yaml \
              determinedai/determined-master:${Version}
          --//
      Tags:
        - Key: user
          Value: !Ref AWS::StackName
        - Key: Name
          Value: !Sub det-master-${AWS::StackName}

  DeterminedAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MasterInstance
      Tags:
          - Key: user
            Value: !Ref AWS::StackName

Outputs:
  MasterId:
    Description: Id of Master Agent
    Value: !Ref MasterInstance

  MasterSecurityGroupId:
    Description: Id of Master Security Group
    Value: !GetAtt MasterSecurityGroup.GroupId

  AgentSecurityGroupId:
    Description: Id of Agent Security Group
    Value: !GetAtt AgentSecurityGroup.GroupId

  AgentInstanceProfile:
    Description: Instance Profile for Agent
    Value: !GetAtt AgentInstanceProfile.Arn

  CheckpointBucket:
    Description: S3 Bucket for checkpoints
    Value: !Ref CheckpointBucket

  Version:
    Description: Determined version or commit
    Value: !Ref Version

  DeterminedAddress:
    Description: Ip address of Determined Master
    Value: !Sub ${DeterminedAddress}:8080

  AgentTagName:
    Description: Tag Name for the agents
    Value: !Sub determined-agent-${AWS::StackName}

  LogGroup:
    Description: The Log Group for Determined Logs
    Value: !Ref LogGroup

  Region:
    Description: The AWS Region the stack is deployed in
    Value: !Ref AWS::Region
