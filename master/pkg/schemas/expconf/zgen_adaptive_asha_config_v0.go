// Code generated by gen.py. DO NOT EDIT.

package expconf

import (
	"github.com/santhosh-tekuri/jsonschema/v2"

	"github.com/determined-ai/determined/master/pkg/schemas"
)

func (a AdaptiveASHAConfigV0) Metric() string {
	return a.RawMetric
}

func (a *AdaptiveASHAConfigV0) SetMetric(val string) {
	a.RawMetric = val
}

func (a AdaptiveASHAConfigV0) SmallerIsBetter() bool {
	if a.RawSmallerIsBetter == nil {
		panic("You must call WithDefaults on AdaptiveASHAConfigV0 before .RawSmallerIsBetter")
	}
	return *a.RawSmallerIsBetter
}

func (a *AdaptiveASHAConfigV0) SetSmallerIsBetter(val bool) {
	a.RawSmallerIsBetter = &val
}

func (a AdaptiveASHAConfigV0) SourceTrialID() *int {
	return a.RawSourceTrialID
}

func (a *AdaptiveASHAConfigV0) SetSourceTrialID(val *int) {
	a.RawSourceTrialID = val
}

func (a AdaptiveASHAConfigV0) SourceCheckpointUUID() *string {
	return a.RawSourceCheckpointUUID
}

func (a *AdaptiveASHAConfigV0) SetSourceCheckpointUUID(val *string) {
	a.RawSourceCheckpointUUID = val
}

func (a AdaptiveASHAConfigV0) MaxLength() LengthV0 {
	return a.RawMaxLength
}

func (a *AdaptiveASHAConfigV0) SetMaxLength(val LengthV0) {
	a.RawMaxLength = val
}

func (a AdaptiveASHAConfigV0) MaxTrials() int {
	return a.RawMaxTrials
}

func (a *AdaptiveASHAConfigV0) SetMaxTrials(val int) {
	a.RawMaxTrials = val
}

func (a AdaptiveASHAConfigV0) BracketRungs() []int {
	return a.RawBracketRungs
}

func (a *AdaptiveASHAConfigV0) SetBracketRungs(val []int) {
	a.RawBracketRungs = val
}

func (a AdaptiveASHAConfigV0) Divisor() float64 {
	if a.RawDivisor == nil {
		panic("You must call WithDefaults on AdaptiveASHAConfigV0 before .RawDivisor")
	}
	return *a.RawDivisor
}

func (a *AdaptiveASHAConfigV0) SetDivisor(val float64) {
	a.RawDivisor = &val
}

func (a AdaptiveASHAConfigV0) Mode() AdaptiveMode {
	if a.RawMode == nil {
		panic("You must call WithDefaults on AdaptiveASHAConfigV0 before .RawMode")
	}
	return *a.RawMode
}

func (a *AdaptiveASHAConfigV0) SetMode(val AdaptiveMode) {
	a.RawMode = &val
}

func (a AdaptiveASHAConfigV0) MaxRungs() int {
	if a.RawMaxRungs == nil {
		panic("You must call WithDefaults on AdaptiveASHAConfigV0 before .RawMaxRungs")
	}
	return *a.RawMaxRungs
}

func (a *AdaptiveASHAConfigV0) SetMaxRungs(val int) {
	a.RawMaxRungs = &val
}

func (a AdaptiveASHAConfigV0) MaxConcurrentTrials() int {
	if a.RawMaxConcurrentTrials == nil {
		panic("You must call WithDefaults on AdaptiveASHAConfigV0 before .RawMaxConcurrentTrials")
	}
	return *a.RawMaxConcurrentTrials
}

func (a *AdaptiveASHAConfigV0) SetMaxConcurrentTrials(val int) {
	a.RawMaxConcurrentTrials = &val
}

func (a AdaptiveASHAConfigV0) StopOnce() bool {
	if a.RawStopOnce == nil {
		panic("You must call WithDefaults on AdaptiveASHAConfigV0 before .RawStopOnce")
	}
	return *a.RawStopOnce
}

func (a *AdaptiveASHAConfigV0) SetStopOnce(val bool) {
	a.RawStopOnce = &val
}

func (a AdaptiveASHAConfigV0) WithDefaults() AdaptiveASHAConfigV0 {
	return schemas.WithDefaults(a).(AdaptiveASHAConfigV0)
}

func (a AdaptiveASHAConfigV0) Merge(other AdaptiveASHAConfigV0) AdaptiveASHAConfigV0 {
	return schemas.Merge(a, other).(AdaptiveASHAConfigV0)
}

func (a AdaptiveASHAConfigV0) ParsedSchema() interface{} {
	return schemas.ParsedAdaptiveASHAConfigV0()
}

func (a AdaptiveASHAConfigV0) SanityValidator() *jsonschema.Schema {
	return schemas.GetSanityValidator("http://determined.ai/schemas/expconf/v0/searcher-adaptive-asha.json")
}

func (a AdaptiveASHAConfigV0) CompletenessValidator() *jsonschema.Schema {
	return schemas.GetCompletenessValidator("http://determined.ai/schemas/expconf/v0/searcher-adaptive-asha.json")
}
