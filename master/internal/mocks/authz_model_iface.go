// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bun "github.com/uptrace/bun"

	mock "github.com/stretchr/testify/mock"

	model "github.com/determined-ai/determined/master/pkg/model"

	modelv1 "github.com/determined-ai/determined/proto/pkg/modelv1"
)

// ModelAuthZ is an autogenerated mock type for the ModelAuthZ type
type ModelAuthZ struct {
	mock.Mock
}

// CanCreateModel provides a mock function with given fields: ctx, curUser, workspaceID
func (_m *ModelAuthZ) CanCreateModel(ctx context.Context, curUser model.User, workspaceID int32) error {
	ret := _m.Called(ctx, curUser, workspaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, int32) error); ok {
		r0 = rf(ctx, curUser, workspaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanDeleteModel provides a mock function with given fields: ctx, curUser, m, workspaceID
func (_m *ModelAuthZ) CanDeleteModel(ctx context.Context, curUser model.User, m *modelv1.Model, workspaceID int32) error {
	ret := _m.Called(ctx, curUser, m, workspaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, *modelv1.Model, int32) error); ok {
		r0 = rf(ctx, curUser, m, workspaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanDeleteModelVersion provides a mock function with given fields: ctx, curUser, modelVersion, workspaceID
func (_m *ModelAuthZ) CanDeleteModelVersion(ctx context.Context, curUser model.User, modelVersion *modelv1.ModelVersion, workspaceID int32) error {
	ret := _m.Called(ctx, curUser, modelVersion, workspaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, *modelv1.ModelVersion, int32) error); ok {
		r0 = rf(ctx, curUser, modelVersion, workspaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanEditModel provides a mock function with given fields: ctx, curUser, m, workspaceID
func (_m *ModelAuthZ) CanEditModel(ctx context.Context, curUser model.User, m *modelv1.Model, workspaceID int32) error {
	ret := _m.Called(ctx, curUser, m, workspaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, *modelv1.Model, int32) error); ok {
		r0 = rf(ctx, curUser, m, workspaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetModel provides a mock function with given fields: ctx, curUser, m, workspaceID
func (_m *ModelAuthZ) CanGetModel(ctx context.Context, curUser model.User, m *modelv1.Model, workspaceID int32) error {
	ret := _m.Called(ctx, curUser, m, workspaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, *modelv1.Model, int32) error); ok {
		r0 = rf(ctx, curUser, m, workspaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetModels provides a mock function with given fields: ctx, curUser, workspaceIDs
func (_m *ModelAuthZ) CanGetModels(ctx context.Context, curUser model.User, workspaceIDs []int32) ([]int32, error) {
	ret := _m.Called(ctx, curUser, workspaceIDs)

	var r0 []int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, []int32) ([]int32, error)); ok {
		return rf(ctx, curUser, workspaceIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User, []int32) []int32); ok {
		r0 = rf(ctx, curUser, workspaceIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User, []int32) error); ok {
		r1 = rf(ctx, curUser, workspaceIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanMoveModel provides a mock function with given fields: ctx, curUser, _a2, fromWorkspaceID, toWorkspaceID
func (_m *ModelAuthZ) CanMoveModel(ctx context.Context, curUser model.User, _a2 *modelv1.Model, fromWorkspaceID int32, toWorkspaceID int32) error {
	ret := _m.Called(ctx, curUser, _a2, fromWorkspaceID, toWorkspaceID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, *modelv1.Model, int32, int32) error); ok {
		r0 = rf(ctx, curUser, _a2, fromWorkspaceID, toWorkspaceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterReadableModelsQuery provides a mock function with given fields: ctx, curUser, query
func (_m *ModelAuthZ) FilterReadableModelsQuery(ctx context.Context, curUser model.User, query *bun.SelectQuery) (*bun.SelectQuery, error) {
	ret := _m.Called(ctx, curUser, query)

	var r0 *bun.SelectQuery
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, *bun.SelectQuery) (*bun.SelectQuery, error)); ok {
		return rf(ctx, curUser, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User, *bun.SelectQuery) *bun.SelectQuery); ok {
		r0 = rf(ctx, curUser, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bun.SelectQuery)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User, *bun.SelectQuery) error); ok {
		r1 = rf(ctx, curUser, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewModelAuthZ interface {
	mock.TestingT
	Cleanup(func())
}

// NewModelAuthZ creates a new instance of ModelAuthZ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewModelAuthZ(t mockConstructorTestingTNewModelAuthZ) *ModelAuthZ {
	mock := &ModelAuthZ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
