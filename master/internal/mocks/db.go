// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	api "github.com/determined-ai/determined/master/internal/api"
	apiv1 "github.com/determined-ai/determined/proto/pkg/apiv1"

	bun "github.com/uptrace/bun"

	context "context"

	expconf "github.com/determined-ai/determined/master/pkg/schemas/expconf"

	mock "github.com/stretchr/testify/mock"

	model "github.com/determined-ai/determined/master/pkg/model"

	time "time"

	trialv1 "github.com/determined-ai/determined/proto/pkg/trialv1"

	uuid "github.com/google/uuid"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// ActiveExperimentConfig provides a mock function with given fields: id
func (_m *DB) ActiveExperimentConfig(id int) (expconf.ExperimentConfigV0, error) {
	ret := _m.Called(id)

	var r0 expconf.ExperimentConfigV0
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (expconf.ExperimentConfigV0, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) expconf.ExperimentConfigV0); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(expconf.ExperimentConfigV0)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddAllocation provides a mock function with given fields: a
func (_m *DB) AddAllocation(a *model.Allocation) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Allocation) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddAuthTokenKeypair provides a mock function with given fields: tokenKeypair
func (_m *DB) AddAuthTokenKeypair(tokenKeypair *model.AuthTokenKeypair) error {
	ret := _m.Called(tokenKeypair)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.AuthTokenKeypair) error); ok {
		r0 = rf(tokenKeypair)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddExperiment provides a mock function with given fields: experiment, activeConfig
func (_m *DB) AddExperiment(experiment *model.Experiment, activeConfig expconf.ExperimentConfigV0) error {
	ret := _m.Called(experiment, activeConfig)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Experiment, expconf.ExperimentConfigV0) error); ok {
		r0 = rf(experiment, activeConfig)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTask provides a mock function with given fields: t
func (_m *DB) AddTask(t *model.Task) error {
	ret := _m.Called(t)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Task) error); ok {
		r0 = rf(t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTrainingMetrics provides a mock function with given fields: ctx, m
func (_m *DB) AddTrainingMetrics(ctx context.Context, m *trialv1.TrialMetrics) error {
	ret := _m.Called(ctx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *trialv1.TrialMetrics) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUser provides a mock function with given fields: user, ug
func (_m *DB) AddUser(user *model.User, ug *model.AgentUserGroup) (model.UserID, error) {
	ret := _m.Called(user, ug)

	var r0 model.UserID
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.User, *model.AgentUserGroup) (model.UserID, error)); ok {
		return rf(user, ug)
	}
	if rf, ok := ret.Get(0).(func(*model.User, *model.AgentUserGroup) model.UserID); ok {
		r0 = rf(user, ug)
	} else {
		r0 = ret.Get(0).(model.UserID)
	}

	if rf, ok := ret.Get(1).(func(*model.User, *model.AgentUserGroup) error); ok {
		r1 = rf(user, ug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddValidationMetrics provides a mock function with given fields: ctx, m
func (_m *DB) AddValidationMetrics(ctx context.Context, m *trialv1.TrialMetrics) error {
	ret := _m.Called(ctx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *trialv1.TrialMetrics) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AgentUserGroup provides a mock function with given fields: userID
func (_m *DB) AgentUserGroup(userID model.UserID) (*model.AgentUserGroup, error) {
	ret := _m.Called(userID)

	var r0 *model.AgentUserGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(model.UserID) (*model.AgentUserGroup, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(model.UserID) *model.AgentUserGroup); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AgentUserGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(model.UserID) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthTokenKeypair provides a mock function with given fields:
func (_m *DB) AuthTokenKeypair() (*model.AuthTokenKeypair, error) {
	ret := _m.Called()

	var r0 *model.AuthTokenKeypair
	var r1 error
	if rf, ok := ret.Get(0).(func() (*model.AuthTokenKeypair, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *model.AuthTokenKeypair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AuthTokenKeypair)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckExperimentExists provides a mock function with given fields: id
func (_m *DB) CheckExperimentExists(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckTrialExists provides a mock function with given fields: id
func (_m *DB) CheckTrialExists(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckpointByTotalBatches provides a mock function with given fields: trialID, totalBatches
func (_m *DB) CheckpointByTotalBatches(trialID int, totalBatches int) (*model.Checkpoint, error) {
	ret := _m.Called(trialID, totalBatches)

	var r0 *model.Checkpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*model.Checkpoint, error)); ok {
		return rf(trialID, totalBatches)
	}
	if rf, ok := ret.Get(0).(func(int, int) *model.Checkpoint); ok {
		r0 = rf(trialID, totalBatches)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Checkpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(trialID, totalBatches)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckpointByUUID provides a mock function with given fields: id
func (_m *DB) CheckpointByUUID(id uuid.UUID) (*model.Checkpoint, error) {
	ret := _m.Called(id)

	var r0 *model.Checkpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.Checkpoint, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.Checkpoint); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Checkpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *DB) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteAllocation provides a mock function with given fields: a
func (_m *DB) CompleteAllocation(a *model.Allocation) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Allocation) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteAllocationTelemetry provides a mock function with given fields: aID
func (_m *DB) CompleteAllocationTelemetry(aID model.AllocationID) ([]byte, error) {
	ret := _m.Called(aID)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AllocationID) ([]byte, error)); ok {
		return rf(aID)
	}
	if rf, ok := ret.Get(0).(func(model.AllocationID) []byte); ok {
		r0 = rf(aID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(model.AllocationID) error); ok {
		r1 = rf(aID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllocationSession provides a mock function with given fields: allocationID
func (_m *DB) DeleteAllocationSession(allocationID model.AllocationID) error {
	ret := _m.Called(allocationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.AllocationID) error); ok {
		r0 = rf(allocationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExperiments provides a mock function with given fields: ctx, ids
func (_m *DB) DeleteExperiments(ctx context.Context, ids []int) error {
	ret := _m.Called(ctx, ids)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSnapshotsForExperiment provides a mock function with given fields: experimentID
func (_m *DB) DeleteSnapshotsForExperiment(experimentID int) error {
	ret := _m.Called(experimentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(experimentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSnapshotsForExperiments provides a mock function with given fields: experimentIDs
func (_m *DB) DeleteSnapshotsForExperiments(experimentIDs []int) func(context.Context, *bun.Tx) error {
	ret := _m.Called(experimentIDs)

	var r0 func(context.Context, *bun.Tx) error
	if rf, ok := ret.Get(0).(func([]int) func(context.Context, *bun.Tx) error); ok {
		r0 = rf(experimentIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(context.Context, *bun.Tx) error)
		}
	}

	return r0
}

// DeleteSnapshotsForTerminalExperiments provides a mock function with given fields:
func (_m *DB) DeleteSnapshotsForTerminalExperiments() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTemplate provides a mock function with given fields: name
func (_m *DB) DeleteTemplate(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTrialLogs provides a mock function with given fields: ids
func (_m *DB) DeleteTrialLogs(ids []int) error {
	ret := _m.Called(ids)

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserSessionByID provides a mock function with given fields: sessionID
func (_m *DB) DeleteUserSessionByID(sessionID model.SessionID) error {
	ret := _m.Called(sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.SessionID) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserSessionByToken provides a mock function with given fields: userSessionToken
func (_m *DB) DeleteUserSessionByToken(userSessionToken string) error {
	ret := _m.Called(userSessionToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userSessionToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndAllAgentStats provides a mock function with given fields:
func (_m *DB) EndAllAgentStats() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndAllInstanceStats provides a mock function with given fields:
func (_m *DB) EndAllInstanceStats() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndAllTaskStats provides a mock function with given fields:
func (_m *DB) EndAllTaskStats() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndInstanceStats provides a mock function with given fields: a
func (_m *DB) EndInstanceStats(a *model.InstanceStats) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.InstanceStats) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExperimentCheckpointsToGCRaw provides a mock function with given fields: id, experimentBest, trialBest, trialLatest
func (_m *DB) ExperimentCheckpointsToGCRaw(id int, experimentBest int, trialBest int, trialLatest int) ([]uuid.UUID, error) {
	ret := _m.Called(id, experimentBest, trialBest, trialLatest)

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int, int) ([]uuid.UUID, error)); ok {
		return rf(id, experimentBest, trialBest, trialLatest)
	}
	if rf, ok := ret.Get(0).(func(int, int, int, int) []uuid.UUID); ok {
		r0 = rf(id, experimentBest, trialBest, trialLatest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int, int) error); ok {
		r1 = rf(id, experimentBest, trialBest, trialLatest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExperimentHasCheckpointsInRegistry provides a mock function with given fields: id
func (_m *DB) ExperimentHasCheckpointsInRegistry(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExperimentIDByTrialID provides a mock function with given fields: trialID
func (_m *DB) ExperimentIDByTrialID(trialID int) (int, error) {
	ret := _m.Called(trialID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int, error)); ok {
		return rf(trialID)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(trialID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(trialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExperimentLabelUsage provides a mock function with given fields: projectID
func (_m *DB) ExperimentLabelUsage(projectID int32) (map[string]int, error) {
	ret := _m.Called(projectID)

	var r0 map[string]int
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (map[string]int, error)); ok {
		return rf(projectID)
	}
	if rf, ok := ret.Get(0).(func(int32) map[string]int); ok {
		r0 = rf(projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExperimentModelDefinitionRaw provides a mock function with given fields: id
func (_m *DB) ExperimentModelDefinitionRaw(id int) ([]byte, error) {
	ret := _m.Called(id)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExperimentNumSteps provides a mock function with given fields: id
func (_m *DB) ExperimentNumSteps(id int) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExperimentNumTrials provides a mock function with given fields: id
func (_m *DB) ExperimentNumTrials(id int) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (int64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExperimentSnapshot provides a mock function with given fields: experimentID
func (_m *DB) ExperimentSnapshot(experimentID int) ([]byte, int, error) {
	ret := _m.Called(experimentID)

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int) ([]byte, int, error)); ok {
		return rf(experimentID)
	}
	if rf, ok := ret.Get(0).(func(int) []byte); ok {
		r0 = rf(experimentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(experimentID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(experimentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExperimentTotalStepTime provides a mock function with given fields: id
func (_m *DB) ExperimentTotalStepTime(id int) (float64, error) {
	ret := _m.Called(id)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (float64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) float64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExperimentTrialIDs provides a mock function with given fields: expID
func (_m *DB) ExperimentTrialIDs(expID int) ([]int, error) {
	ret := _m.Called(expID)

	var r0 []int
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]int, error)); ok {
		return rf(expID)
	}
	if rf, ok := ret.Get(0).(func(int) []int); ok {
		r0 = rf(expID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(expID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExperimentStatus provides a mock function with given fields: experimentID
func (_m *DB) GetExperimentStatus(experimentID int) (model.State, float64, error) {
	ret := _m.Called(experimentID)

	var r0 model.State
	var r1 float64
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (model.State, float64, error)); ok {
		return rf(experimentID)
	}
	if rf, ok := ret.Get(0).(func(int) model.State); ok {
		r0 = rf(experimentID)
	} else {
		r0 = ret.Get(0).(model.State)
	}

	if rf, ok := ret.Get(1).(func(int) float64); ok {
		r1 = rf(experimentID)
	} else {
		r1 = ret.Get(1).(float64)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(experimentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetOrCreateClusterID provides a mock function with given fields:
func (_m *DB) GetOrCreateClusterID() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrialProfilerMetricsBatches provides a mock function with given fields: labelsJSON, offset, limit
func (_m *DB) GetTrialProfilerMetricsBatches(labelsJSON []byte, offset int, limit int) (model.TrialProfilerMetricsBatchBatch, error) {
	ret := _m.Called(labelsJSON, offset, limit)

	var r0 model.TrialProfilerMetricsBatchBatch
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, int, int) (model.TrialProfilerMetricsBatchBatch, error)); ok {
		return rf(labelsJSON, offset, limit)
	}
	if rf, ok := ret.Get(0).(func([]byte, int, int) model.TrialProfilerMetricsBatchBatch); ok {
		r0 = rf(labelsJSON, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.TrialProfilerMetricsBatchBatch)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte, int, int) error); ok {
		r1 = rf(labelsJSON, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertTrialProfilerMetricsBatch provides a mock function with given fields: values, batches, timestamps, labels
func (_m *DB) InsertTrialProfilerMetricsBatch(values []float32, batches []int32, timestamps []time.Time, labels []byte) error {
	ret := _m.Called(values, batches, timestamps, labels)

	var r0 error
	if rf, ok := ret.Get(0).(func([]float32, []int32, []time.Time, []byte) error); ok {
		r0 = rf(values, batches, timestamps, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LatestCheckpointForTrial provides a mock function with given fields: trialID
func (_m *DB) LatestCheckpointForTrial(trialID int) (*model.Checkpoint, error) {
	ret := _m.Called(trialID)

	var r0 *model.Checkpoint
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*model.Checkpoint, error)); ok {
		return rf(trialID)
	}
	if rf, ok := ret.Get(0).(func(int) *model.Checkpoint); ok {
		r0 = rf(trialID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Checkpoint)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(trialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields: migrationURL, actions
func (_m *DB) Migrate(migrationURL string, actions []string) error {
	ret := _m.Called(migrationURL, actions)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(migrationURL, actions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NonTerminalExperiments provides a mock function with given fields:
func (_m *DB) NonTerminalExperiments() ([]*model.Experiment, error) {
	ret := _m.Called()

	var r0 []*model.Experiment
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.Experiment, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.Experiment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Experiment)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeriodicTelemetryInfo provides a mock function with given fields:
func (_m *DB) PeriodicTelemetryInfo() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectByName provides a mock function with given fields: workspaceName, projectName
func (_m *DB) ProjectByName(workspaceName string, projectName string) (int, error) {
	ret := _m.Called(workspaceName, projectName)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int, error)); ok {
		return rf(workspaceName, projectName)
	}
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(workspaceName, projectName)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(workspaceName, projectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectExperiments provides a mock function with given fields: id
func (_m *DB) ProjectExperiments(id int) ([]*model.Experiment, error) {
	ret := _m.Called(id)

	var r0 []*model.Experiment
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*model.Experiment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []*model.Experiment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Experiment)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields: queryName, v, params
func (_m *DB) Query(queryName string, v interface{}, params ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, queryName, v)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...interface{}) error); ok {
		r0 = rf(queryName, v, params...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryF provides a mock function with given fields: queryName, args, v, params
func (_m *DB) QueryF(queryName string, args []interface{}, v interface{}, params ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, queryName, args, v)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []interface{}, interface{}, ...interface{}) error); ok {
		r0 = rf(queryName, args, v, params...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryProto provides a mock function with given fields: queryName, v, args
func (_m *DB) QueryProto(queryName string, v interface{}, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, queryName, v)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...interface{}) error); ok {
		r0 = rf(queryName, v, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryProtof provides a mock function with given fields: queryName, args, v, params
func (_m *DB) QueryProtof(queryName string, args []interface{}, v interface{}, params ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, queryName, args, v)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []interface{}, interface{}, ...interface{}) error); ok {
		r0 = rf(queryName, args, v, params...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RawQuery provides a mock function with given fields: queryName, params
func (_m *DB) RawQuery(queryName string, params ...interface{}) ([]byte, error) {
	var _ca []interface{}
	_ca = append(_ca, queryName)
	_ca = append(_ca, params...)
	ret := _m.Called(_ca...)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) ([]byte, error)); ok {
		return rf(queryName, params...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) []byte); ok {
		r0 = rf(queryName, params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(queryName, params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RecordAgentStats provides a mock function with given fields: a
func (_m *DB) RecordAgentStats(a *model.AgentStats) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.AgentStats) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordInstanceStats provides a mock function with given fields: a
func (_m *DB) RecordInstanceStats(a *model.InstanceStats) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.InstanceStats) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordTaskEndStats provides a mock function with given fields: stats
func (_m *DB) RecordTaskEndStats(stats *model.TaskStats) error {
	ret := _m.Called(stats)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TaskStats) error); ok {
		r0 = rf(stats)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RecordTaskStats provides a mock function with given fields: stats
func (_m *DB) RecordTaskStats(stats *model.TaskStats) error {
	ret := _m.Called(stats)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.TaskStats) error); ok {
		r0 = rf(stats)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveExperimentArchiveStatus provides a mock function with given fields: experiment
func (_m *DB) SaveExperimentArchiveStatus(experiment *model.Experiment) error {
	ret := _m.Called(experiment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Experiment) error); ok {
		r0 = rf(experiment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveExperimentConfig provides a mock function with given fields: id, config
func (_m *DB) SaveExperimentConfig(id int, config expconf.ExperimentConfigV0) error {
	ret := _m.Called(id, config)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, expconf.ExperimentConfigV0) error); ok {
		r0 = rf(id, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveExperimentProgress provides a mock function with given fields: id, progress
func (_m *DB) SaveExperimentProgress(id int, progress *float64) error {
	ret := _m.Called(id, progress)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *float64) error); ok {
		r0 = rf(id, progress)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveExperimentState provides a mock function with given fields: experiment
func (_m *DB) SaveExperimentState(experiment *model.Experiment) error {
	ret := _m.Called(experiment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Experiment) error); ok {
		r0 = rf(experiment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveSnapshot provides a mock function with given fields: experimentID, version, experimentSnapshot
func (_m *DB) SaveSnapshot(experimentID int, version int, experimentSnapshot []byte) error {
	ret := _m.Called(experimentID, version, experimentSnapshot)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, []byte) error); ok {
		r0 = rf(experimentID, version, experimentSnapshot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartAllocationSession provides a mock function with given fields: allocationID, owner
func (_m *DB) StartAllocationSession(allocationID model.AllocationID, owner *model.User) (string, error) {
	ret := _m.Called(allocationID, owner)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(model.AllocationID, *model.User) (string, error)); ok {
		return rf(allocationID, owner)
	}
	if rf, ok := ret.Get(0).(func(model.AllocationID, *model.User) string); ok {
		r0 = rf(allocationID, owner)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(model.AllocationID, *model.User) error); ok {
		r1 = rf(allocationID, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartUserSession provides a mock function with given fields: user
func (_m *DB) StartUserSession(user *model.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.User) (string, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*model.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateByName provides a mock function with given fields: name
func (_m *DB) TemplateByName(name string) (model.Template, error) {
	ret := _m.Called(name)

	var r0 model.Template
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Template, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) model.Template); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(model.Template)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateExperimentInRestart provides a mock function with given fields: id, state
func (_m *DB) TerminateExperimentInRestart(id int, state model.State) error {
	ret := _m.Called(id, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, model.State) error); ok {
		r0 = rf(id, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TopTrialsByTrainingLength provides a mock function with given fields: experimentID, maxTrials, metric, smallerIsBetter
func (_m *DB) TopTrialsByTrainingLength(experimentID int, maxTrials int, metric string, smallerIsBetter bool) ([]int32, error) {
	ret := _m.Called(experimentID, maxTrials, metric, smallerIsBetter)

	var r0 []int32
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string, bool) ([]int32, error)); ok {
		return rf(experimentID, maxTrials, metric, smallerIsBetter)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, bool) []int32); ok {
		r0 = rf(experimentID, maxTrials, metric, smallerIsBetter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, bool) error); ok {
		r1 = rf(experimentID, maxTrials, metric, smallerIsBetter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrainingMetricBatches provides a mock function with given fields: experimentID, metricName, startTime
func (_m *DB) TrainingMetricBatches(experimentID int, metricName string, startTime time.Time) ([]int32, time.Time, error) {
	ret := _m.Called(experimentID, metricName, startTime)

	var r0 []int32
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string, time.Time) ([]int32, time.Time, error)); ok {
		return rf(experimentID, metricName, startTime)
	}
	if rf, ok := ret.Get(0).(func(int, string, time.Time) []int32); ok {
		r0 = rf(experimentID, metricName, startTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, time.Time) time.Time); ok {
		r1 = rf(experimentID, metricName, startTime)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(int, string, time.Time) error); ok {
		r2 = rf(experimentID, metricName, startTime)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TrainingTrialsSnapshot provides a mock function with given fields: experimentID, minBatches, maxBatches, metricName, startTime
func (_m *DB) TrainingTrialsSnapshot(experimentID int, minBatches int, maxBatches int, metricName string, startTime time.Time) ([]*apiv1.TrialsSnapshotResponse_Trial, time.Time, error) {
	ret := _m.Called(experimentID, minBatches, maxBatches, metricName, startTime)

	var r0 []*apiv1.TrialsSnapshotResponse_Trial
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, int, string, time.Time) ([]*apiv1.TrialsSnapshotResponse_Trial, time.Time, error)); ok {
		return rf(experimentID, minBatches, maxBatches, metricName, startTime)
	}
	if rf, ok := ret.Get(0).(func(int, int, int, string, time.Time) []*apiv1.TrialsSnapshotResponse_Trial); ok {
		r0 = rf(experimentID, minBatches, maxBatches, metricName, startTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apiv1.TrialsSnapshotResponse_Trial)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int, string, time.Time) time.Time); ok {
		r1 = rf(experimentID, minBatches, maxBatches, metricName, startTime)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(int, int, int, string, time.Time) error); ok {
		r2 = rf(experimentID, minBatches, maxBatches, metricName, startTime)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TrialExperimentAndRequestID provides a mock function with given fields: id
func (_m *DB) TrialExperimentAndRequestID(id int) (int, model.RequestID, error) {
	ret := _m.Called(id)

	var r0 int
	var r1 model.RequestID
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (int, model.RequestID, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) model.RequestID); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.RequestID)
		}
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TrialLogs provides a mock function with given fields: trialID, limit, fs, order, followState
func (_m *DB) TrialLogs(trialID int, limit int, fs []api.Filter, order apiv1.OrderBy, followState interface{}) ([]*model.TrialLog, interface{}, error) {
	ret := _m.Called(trialID, limit, fs, order, followState)

	var r0 []*model.TrialLog
	var r1 interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, []api.Filter, apiv1.OrderBy, interface{}) ([]*model.TrialLog, interface{}, error)); ok {
		return rf(trialID, limit, fs, order, followState)
	}
	if rf, ok := ret.Get(0).(func(int, int, []api.Filter, apiv1.OrderBy, interface{}) []*model.TrialLog); ok {
		r0 = rf(trialID, limit, fs, order, followState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TrialLog)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, []api.Filter, apiv1.OrderBy, interface{}) interface{}); ok {
		r1 = rf(trialID, limit, fs, order, followState)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(int, int, []api.Filter, apiv1.OrderBy, interface{}) error); ok {
		r2 = rf(trialID, limit, fs, order, followState)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TrialLogsCount provides a mock function with given fields: trialID, fs
func (_m *DB) TrialLogsCount(trialID int, fs []api.Filter) (int, error) {
	ret := _m.Called(trialID, fs)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, []api.Filter) (int, error)); ok {
		return rf(trialID, fs)
	}
	if rf, ok := ret.Get(0).(func(int, []api.Filter) int); ok {
		r0 = rf(trialID, fs)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, []api.Filter) error); ok {
		r1 = rf(trialID, fs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrialLogsFields provides a mock function with given fields: trialID
func (_m *DB) TrialLogsFields(trialID int) (*apiv1.TrialLogsFieldsResponse, error) {
	ret := _m.Called(trialID)

	var r0 *apiv1.TrialLogsFieldsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*apiv1.TrialLogsFieldsResponse, error)); ok {
		return rf(trialID)
	}
	if rf, ok := ret.Get(0).(func(int) *apiv1.TrialLogsFieldsResponse); ok {
		r0 = rf(trialID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv1.TrialLogsFieldsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(trialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrialRunIDAndRestarts provides a mock function with given fields: trialID
func (_m *DB) TrialRunIDAndRestarts(trialID int) (int, int, error) {
	ret := _m.Called(trialID)

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (int, int, error)); ok {
		return rf(trialID)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(trialID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(trialID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(trialID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TrialState provides a mock function with given fields: trialID
func (_m *DB) TrialState(trialID int) (model.State, error) {
	ret := _m.Called(trialID)

	var r0 model.State
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (model.State, error)); ok {
		return rf(trialID)
	}
	if rf, ok := ret.Get(0).(func(int) model.State); ok {
		r0 = rf(trialID)
	} else {
		r0 = ret.Get(0).(model.State)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(trialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TrialStatus provides a mock function with given fields: trialID
func (_m *DB) TrialStatus(trialID int) (model.State, *time.Time, error) {
	ret := _m.Called(trialID)

	var r0 model.State
	var r1 *time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (model.State, *time.Time, error)); ok {
		return rf(trialID)
	}
	if rf, ok := ret.Get(0).(func(int) model.State); ok {
		r0 = rf(trialID)
	} else {
		r0 = ret.Get(0).(model.State)
	}

	if rf, ok := ret.Get(1).(func(int) *time.Time); ok {
		r1 = rf(trialID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*time.Time)
		}
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(trialID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateAllocationProxyAddress provides a mock function with given fields: allocation
func (_m *DB) UpdateAllocationProxyAddress(allocation model.Allocation) error {
	ret := _m.Called(allocation)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Allocation) error); ok {
		r0 = rf(allocation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAllocationStartTime provides a mock function with given fields: allocation
func (_m *DB) UpdateAllocationStartTime(allocation model.Allocation) error {
	ret := _m.Called(allocation)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Allocation) error); ok {
		r0 = rf(allocation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAllocationState provides a mock function with given fields: allocation
func (_m *DB) UpdateAllocationState(allocation model.Allocation) error {
	ret := _m.Called(allocation)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Allocation) error); ok {
		r0 = rf(allocation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateResourceAllocationAggregation provides a mock function with given fields:
func (_m *DB) UpdateResourceAllocationAggregation() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTrial provides a mock function with given fields: id, newState
func (_m *DB) UpdateTrial(id int, newState model.State) error {
	ret := _m.Called(id, newState)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, model.State) error); ok {
		r0 = rf(id, newState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTrialRestarts provides a mock function with given fields: id, restarts
func (_m *DB) UpdateTrialRestarts(id int, restarts int) error {
	ret := _m.Called(id, restarts)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, restarts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTrialRunID provides a mock function with given fields: id, runID
func (_m *DB) UpdateTrialRunID(id int, runID int) error {
	ret := _m.Called(id, runID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, runID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTrialRunnerMetadata provides a mock function with given fields: id, md
func (_m *DB) UpdateTrialRunnerMetadata(id int, md *trialv1.TrialRunnerMetadata) error {
	ret := _m.Called(id, md)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *trialv1.TrialRunnerMetadata) error); ok {
		r0 = rf(id, md)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTrialRunnerState provides a mock function with given fields: id, state
func (_m *DB) UpdateTrialRunnerState(id int, state string) error {
	ret := _m.Called(id, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(id, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: updated, toUpdate, ug
func (_m *DB) UpdateUser(updated *model.User, toUpdate []string, ug *model.AgentUserGroup) error {
	ret := _m.Called(updated, toUpdate, ug)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.User, []string, *model.AgentUserGroup) error); ok {
		r0 = rf(updated, toUpdate, ug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUsername provides a mock function with given fields: userID, newUsername
func (_m *DB) UpdateUsername(userID *model.UserID, newUsername string) error {
	ret := _m.Called(userID, newUsername)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.UserID, string) error); ok {
		r0 = rf(userID, newUsername)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserList provides a mock function with given fields:
func (_m *DB) UserList() ([]model.FullUser, error) {
	ret := _m.Called()

	var r0 []model.FullUser
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.FullUser, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.FullUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FullUser)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidationByTotalBatches provides a mock function with given fields: trialID, totalBatches
func (_m *DB) ValidationByTotalBatches(trialID int, totalBatches int) (*model.TrialMetrics, error) {
	ret := _m.Called(trialID, totalBatches)

	var r0 *model.TrialMetrics
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*model.TrialMetrics, error)); ok {
		return rf(trialID, totalBatches)
	}
	if rf, ok := ret.Get(0).(func(int, int) *model.TrialMetrics); ok {
		r0 = rf(trialID, totalBatches)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TrialMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(trialID, totalBatches)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidationMetricBatches provides a mock function with given fields: experimentID, metricName, startTime
func (_m *DB) ValidationMetricBatches(experimentID int, metricName string, startTime time.Time) ([]int32, time.Time, error) {
	ret := _m.Called(experimentID, metricName, startTime)

	var r0 []int32
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string, time.Time) ([]int32, time.Time, error)); ok {
		return rf(experimentID, metricName, startTime)
	}
	if rf, ok := ret.Get(0).(func(int, string, time.Time) []int32); ok {
		r0 = rf(experimentID, metricName, startTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int32)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string, time.Time) time.Time); ok {
		r1 = rf(experimentID, metricName, startTime)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(int, string, time.Time) error); ok {
		r2 = rf(experimentID, metricName, startTime)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ValidationTrialsSnapshot provides a mock function with given fields: experimentID, minBatches, maxBatches, metricName, startTime
func (_m *DB) ValidationTrialsSnapshot(experimentID int, minBatches int, maxBatches int, metricName string, startTime time.Time) ([]*apiv1.TrialsSnapshotResponse_Trial, time.Time, error) {
	ret := _m.Called(experimentID, minBatches, maxBatches, metricName, startTime)

	var r0 []*apiv1.TrialsSnapshotResponse_Trial
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, int, string, time.Time) ([]*apiv1.TrialsSnapshotResponse_Trial, time.Time, error)); ok {
		return rf(experimentID, minBatches, maxBatches, metricName, startTime)
	}
	if rf, ok := ret.Get(0).(func(int, int, int, string, time.Time) []*apiv1.TrialsSnapshotResponse_Trial); ok {
		r0 = rf(experimentID, minBatches, maxBatches, metricName, startTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apiv1.TrialsSnapshotResponse_Trial)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int, string, time.Time) time.Time); ok {
		r1 = rf(experimentID, minBatches, maxBatches, metricName, startTime)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(int, int, int, string, time.Time) error); ok {
		r2 = rf(experimentID, minBatches, maxBatches, metricName, startTime)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDB(t mockConstructorTestingTNewDB) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
