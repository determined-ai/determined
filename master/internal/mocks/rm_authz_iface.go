// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/determined-ai/determined/master/pkg/model"

	resourcepoolv1 "github.com/determined-ai/determined/proto/pkg/resourcepoolv1"
)

// ResourceManagerAuthZ is an autogenerated mock type for the ResourceManagerAuthZ type
type ResourceManagerAuthZ struct {
	mock.Mock
}

// FilterResourcePools provides a mock function with given fields: ctx, curUser, resourcePools, accessibleWorkspaces
func (_m *ResourceManagerAuthZ) FilterResourcePools(ctx context.Context, curUser model.User, resourcePools []*resourcepoolv1.ResourcePool, accessibleWorkspaces []int32) ([]*resourcepoolv1.ResourcePool, error) {
	ret := _m.Called(ctx, curUser, resourcePools, accessibleWorkspaces)

	var r0 []*resourcepoolv1.ResourcePool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, []*resourcepoolv1.ResourcePool, []int32) ([]*resourcepoolv1.ResourcePool, error)); ok {
		return rf(ctx, curUser, resourcePools, accessibleWorkspaces)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User, []*resourcepoolv1.ResourcePool, []int32) []*resourcepoolv1.ResourcePool); ok {
		r0 = rf(ctx, curUser, resourcePools, accessibleWorkspaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*resourcepoolv1.ResourcePool)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User, []*resourcepoolv1.ResourcePool, []int32) error); ok {
		r1 = rf(ctx, curUser, resourcePools, accessibleWorkspaces)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewResourceManagerAuthZ interface {
	mock.TestingT
	Cleanup(func())
}

// NewResourceManagerAuthZ creates a new instance of ResourceManagerAuthZ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewResourceManagerAuthZ(t mockConstructorTestingTNewResourceManagerAuthZ) *ResourceManagerAuthZ {
	mock := &ResourceManagerAuthZ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
