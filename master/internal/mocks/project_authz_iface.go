// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	model "github.com/determined-ai/determined/master/pkg/model"

	projectv1 "github.com/determined-ai/determined/proto/pkg/projectv1"

	workspacev1 "github.com/determined-ai/determined/proto/pkg/workspacev1"
)

// ProjectAuthZ is an autogenerated mock type for the ProjectAuthZ type
type ProjectAuthZ struct {
	mock.Mock
}

// CanArchiveProject provides a mock function with given fields: curUser, _a1
func (_m *ProjectAuthZ) CanArchiveProject(curUser model.User, _a1 *projectv1.Project) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *projectv1.Project) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanCreateProject provides a mock function with given fields: curUser, targetWorkspace
func (_m *ProjectAuthZ) CanCreateProject(curUser model.User, targetWorkspace *workspacev1.Workspace) error {
	ret := _m.Called(curUser, targetWorkspace)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *workspacev1.Workspace) error); ok {
		r0 = rf(curUser, targetWorkspace)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanDeleteProject provides a mock function with given fields: curUser, targetProject
func (_m *ProjectAuthZ) CanDeleteProject(curUser model.User, targetProject *projectv1.Project) error {
	ret := _m.Called(curUser, targetProject)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *projectv1.Project) error); ok {
		r0 = rf(curUser, targetProject)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanGetProject provides a mock function with given fields: curUser, _a1
func (_m *ProjectAuthZ) CanGetProject(curUser model.User, _a1 *projectv1.Project) (bool, error) {
	ret := _m.Called(curUser, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(model.User, *projectv1.Project) bool); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.User, *projectv1.Project) error); ok {
		r1 = rf(curUser, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CanMoveProject provides a mock function with given fields: curUser, _a1, from, to
func (_m *ProjectAuthZ) CanMoveProject(curUser model.User, _a1 *projectv1.Project, from *workspacev1.Workspace, to *workspacev1.Workspace) error {
	ret := _m.Called(curUser, _a1, from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *projectv1.Project, *workspacev1.Workspace, *workspacev1.Workspace) error); ok {
		r0 = rf(curUser, _a1, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanMoveProjectExperiments provides a mock function with given fields: curUser, exp, from, to
func (_m *ProjectAuthZ) CanMoveProjectExperiments(curUser model.User, exp *model.Experiment, from *projectv1.Project, to *projectv1.Project) error {
	ret := _m.Called(curUser, exp, from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *model.Experiment, *projectv1.Project, *projectv1.Project) error); ok {
		r0 = rf(curUser, exp, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanSetProjectDescription provides a mock function with given fields: curUser, _a1
func (_m *ProjectAuthZ) CanSetProjectDescription(curUser model.User, _a1 *projectv1.Project) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *projectv1.Project) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanSetProjectName provides a mock function with given fields: curUser, _a1
func (_m *ProjectAuthZ) CanSetProjectName(curUser model.User, _a1 *projectv1.Project) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *projectv1.Project) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanSetProjectNotes provides a mock function with given fields: curUser, _a1
func (_m *ProjectAuthZ) CanSetProjectNotes(curUser model.User, _a1 *projectv1.Project) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *projectv1.Project) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CanUnarchiveProject provides a mock function with given fields: curUser, _a1
func (_m *ProjectAuthZ) CanUnarchiveProject(curUser model.User, _a1 *projectv1.Project) error {
	ret := _m.Called(curUser, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User, *projectv1.Project) error); ok {
		r0 = rf(curUser, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProjectAuthZ interface {
	mock.TestingT
	Cleanup(func())
}

// NewProjectAuthZ creates a new instance of ProjectAuthZ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProjectAuthZ(t mockConstructorTestingTNewProjectAuthZ) *ProjectAuthZ {
	mock := &ProjectAuthZ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
