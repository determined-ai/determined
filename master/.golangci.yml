run:
  go: 1.20

  # Deadline for individual linters to complete by.
  deadline: 1m

  # Include tests files in linting process.
  tests: true

  # The exit code when at least one issue was found.
  issues-exit-code: 1

  skip-files:
    - pkg/schemas/expconf/latest.go

output:
  # Linter output format.
  format: colored-line-number

  # Print lines of code with issue.
  print-issued-lines: true

  # Print linter name in the end of issue text.
  print-linter-name: true

issues:
  # Custom linter exclusions that we currently do not adhere to.
  exclude:
    - should have a package comment
    - "G201: sql string formatting"
    - Consider preallocating
    # Exclude "gosec: Errors unhandled" because it duplicates errcheck.
    - G104
    - and that stutters
    - declaration of "(err|ctx)" shadows declaration at

  # Independently from option `exclude` golangci-lint uses default exclude patterns.
  exclude-use-default: false

  # Disable the maximum issue count per linter.
  max-per-linter: 0

linters-settings:
  depguard:
    list-type: blacklist
    include-go-root: true
    packages:
      - errors
      - gopkg.in/yaml.v2
      - github.com/dgrijalva/jwt-go
  dupl:
    threshold: 210
  goconst:
    min-len: 2
    min-occurrences: 2
  gocritic:
    disabled-checks:
      - singleCaseSwitch
  golint:
    min-confidence: 0
  goimports:
    local-prefixes: github.com/determined-ai/determined
  govet:
    check-shadowing: true
  errcheck:
    exclude: .errcheck-exclude.txt
  lll:
    line-length: 100
  misspell:
    locale: US
  exhaustruct:
    include:
      - 'github.com/determined-ai/determined/master/pkg/schemas/expconf.*Config*'
  forbidigo:
    forbid:
      - 'fmt\.Print.*'
      - 'metaV1.NamespaceAll' # Will error if someone has namespace restricted permissions.
  staticcheck:
    go: "1.20"

linters:
  enable-all: true
  disable:
    - deadcode
    - exhaustive
    - exhaustivestruct
    - funlen
    - gochecknoglobals
    - gochecknoinits
    - gocognit
    - gocyclo
    - godox
    - goerr113
    - gofumpt
    - golint
    - gomnd
    - maligned
    - nestif
    - noctx
    - scopelint
    - testpackage
    - unparam
    - wsl
    - varcheck

    # Below here are new linters from upgrading to 1.43.0. Since we enable all and disable
    # selectively, when we upgrade we get a ton of new linters. For convenience next upgrade,
    # golangci-lint can tell you which linters are enabled:
    #   golangci-lint linters | sed -n '/Enabled/,/Disabled/p'
    # To maintain the same set us linters, disable those in the new set that are not in the old:
    #   comm -13 <(cut -d : -f 1 <oldlinters.txt) <(cut -d : -f 1 <newlinters.txt)
    - bidichk
    - contextcheck
    - cyclop
    - durationcheck
    - errname
    - errorlint
    - forcetypeassert
    - gci
    - gomoddirectives
    - ifshort
    - importas
    - ireturn
    - makezero
    - nilerr
    - nilnil
    - nlreturn
    - paralleltest
    - predeclared
    - promlinter
    - tagliatelle
    - tenv
    - thelper
    - tparallel
    - varnamelen
    - wastedassign
    - wrapcheck

    # Below here are new linters from upgrading to 1.45.0. Since we enable all and disable
    # selectively, when we upgrade we get a ton of new linters.
    - maintidx
    - containedctx
    - decorder
    - errchkjson
    - grouper

    # Below here are new linters from upgrading to 1.51.1.
    - nonamedreturns
    - nosnakecase
    - musttag
    - interfacebloat
    - gosimple 
    - prealloc
    - interfacer
    - structcheck
    - nolintlint
    - usestdlibvars
    - exhaustruct

