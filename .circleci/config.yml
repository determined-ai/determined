# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@2.3.0
  slack: circleci/slack@3.4.2

executors:
  python-35:
    docker:
      - image: cimg/python:3.5
  python-36:
    docker:
      - image: cimg/python:3.6
  python-37:
    docker:
      - image: cimg/python:3.7
  python-38:
    docker:
      - image: cimg/python:3.8

parameters:
  det-version:
    type: string
    default: 0.12.4.dev0

# yaml anchor filters
release-and-rc-filters: &release-and-rc-filters
  branches:
    ignore:
      - /.*/
  tags:
    only:
      - /v(\d)+(\.(\d)+)+/
      - /(v(\d)+(\.(\d)+)+)(rc)(\d)+/

release-filters: &release-filters
  branches:
    ignore:
      - /.*/
  tags:
    only:
      - /v(\d)+(\.(\d)+)+/

commands:
  fix-circle-working-directory:
    description: "Fix CIRCLE_WORKING_DIRECTORY"
    steps:
      - run: echo 'CIRCLE_WORKING_DIRECTORY="${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}"' >> $BASH_ENV


  set-slack-user-id:
    steps:
      - run:
          name: Set Slack variables
          command: |
            if ! [ -x "$(command -v jq)" ]; then
              apt update && apt install -y jq
            fi

            AUTHOR_EMAIL="$(git show -s --format='%ae' $CIRCLE_SHA1)"
            LOOKUP_RESPONSE=$(curl -s "https://slack.com/api/users.lookupByEmail?token=${SLACK_API_TOKEN}&email=${AUTHOR_EMAIL}")
            SUCCESS=$(echo "$LOOKUP_RESPONSE" | jq ".ok")
            if [[ "$SUCCESS" == "true" ]]; then
              SLACK_USER_ID=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.id")
              SLACK_NAME=$(echo "$LOOKUP_RESPONSE" | jq -r ".user.name")
              echo "export SLACK_NAME=\"${SLACK_NAME}\"" >> $BASH_ENV
              echo "export SLACK_USER_ID=\"${SLACK_USER_ID}\"" >> $BASH_ENV
            else
              echo "Unable to find Slack user ID for  \"${AUTHOR_EMAIL}\"."
            fi


  pull-task-images:
    parameters:
      tf2:
        type: boolean
        default: false
    steps:
      - run: docker pull determinedai/environments:py-3.6.9-pytorch-1.4-tf-1.14-cpu-e6662e6
      - when:
          condition: <<parameters.tf2>>
          steps:
            - run: docker pull determinedai/environments:py-3.6.9-pytorch-1.4-tf-2.1-cpu-e6662e6

  login-docker:
    steps:
      - run: echo "${DOCKER_PASS}" | docker login --username ${DOCKER_USER} --password-stdin

  build-docker-images:
    description: Build Master and Agent Docker images.
    steps:
      - attach_workspace:
          at: build
      - run: make -C master build-docker
      - run: make -C agent package


  go-get-deps:
    steps:
      - restore_cache:
          keys:
            - det-go-deps-v1dev3-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}
      - run: make go-get-deps
      - save_cache:
          key: det-go-deps-v1dev3-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}
          paths:
            - "/go/pkg/mod/"
  elm-get-deps:
    steps:
      - restore_cache:
          keys:
            - det-elm-deps-v1dev3-{{ checksum  "webui/elm/package-lock.json" }}
      - run: make -C webui/elm get-deps
      - save_cache:
          key: det-elm-deps-v1dev3-{{ checksum  "webui/elm/package-lock.json" }}
          paths:
            - "webui/elm/node_modules"
  react-get-deps:
    steps:
      - restore_cache:
          keys:
            - det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
      - run: make -C webui/react get-deps
      - save_cache:
          key: det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
          paths:
            - "webui/react/node_modules"
  setup-python-venv:
    description: Set up and create Python venv.
    parameters:
      determined:
        type: boolean
        default: false
      determined-common:
        type: boolean
        default: false
      determined-cli:
        type: boolean
        default: false
      determined-deploy:
        type: boolean
        default: false
      extras-requires:
        type: string
        default: ""
      extra-requirements-file:
        type: string
        default: ""
      executor:
        type: string
    steps:
      - run:
          name: Setup venv
          command: |
            python3.6 -m venv /tmp/venv
            echo "export PATH=/tmp/venv/bin:\"${PATH}\"" >> $BASH_ENV
            /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools


      # Write dependencies to cachefile to help create the cachekey
      - run: echo <<parameters.executor>> > /tmp/cachefile
      - when:
          condition: <<parameters.determined-common>>
          steps:
            - run: cat common/setup.py >> /tmp/cachefile
      - when:
          condition: <<parameters.determined>>
          steps:
            - run: cat harness/setup.py >> /tmp/cachefile
      - when:
          condition: <<parameters.determined-cli>>
          steps:
            - run: cat cli/setup.py >> /tmp/cachefile
      - when:
          condition: <<parameters.determined-deploy>>
          steps:
            - run: cat deploy/setup.py >> /tmp/cachefile
      - run: echo <<parameters.extras-requires>> >> /tmp/cachefile


      # Install dependencies
      - run: |
          if [ -n <<parameters.extra-requirements-file>> ]; then cat <<parameters.extra-requirements-file>> >> /tmp/cachefile; fi
      - restore_cache:
          keys:
            - det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
      - when:
          condition: <<parameters.determined-common>>
          steps:
            - run: cd common; /tmp/venv/bin/python setup.py bdist_wheel -d ../build
            - run: /tmp/venv/bin/python -m pip install --find-links build determined-common==<< pipeline.parameters.det-version >>
            - run: /tmp/venv/bin/python -m pip install --no-deps --force-reinstall --find-links build determined-common==<< pipeline.parameters.det-version >>
      - when:
          condition: <<parameters.determined>>
          steps:
            - run: cd harness; /tmp/venv/bin/python setup.py bdist_wheel -d ../build
            - run: /tmp/venv/bin/python -m pip install --find-links build determined==<< pipeline.parameters.det-version >>
            - run: /tmp/venv/bin/python -m pip install --no-deps --force-reinstall --find-links build determined==<< pipeline.parameters.det-version >>
      - when:
          condition: <<parameters.determined-cli>>
          steps:
            - run: cd cli; /tmp/venv/bin/python setup.py bdist_wheel -d ../build
            - run: /tmp/venv/bin/python -m pip install --find-links build determined-cli==<< pipeline.parameters.det-version >>
            - run: /tmp/venv/bin/python -m pip install --no-deps --force-reinstall --find-links build determined-cli==<< pipeline.parameters.det-version >>
      - when:
          condition: <<parameters.determined-deploy>>
          steps:
            - run: cd deploy; /tmp/venv/bin/python setup.py bdist_wheel -d ../build
            - run: /tmp/venv/bin/python -m pip install --find-links build determined-deploy==<< pipeline.parameters.det-version >>
            - run: /tmp/venv/bin/python -m pip install --no-deps --force-reinstall --find-links build determined-deploy==<< pipeline.parameters.det-version >>
      - run: |
          if [ -n "<<parameters.extras-requires>>" ]; then /tmp/venv/bin/python -m pip install <<parameters.extras-requires>>; fi
      - run: |
          if [ -n "<<parameters.extra-requirements-file>>" ]; then /tmp/venv/bin/python -m pip install -r <<parameters.extra-requirements-file>>; fi
      - save_cache:
          key: det-python-deps-v1dev2-{{ checksum "/tmp/cachefile" }}
          paths:
            - "/tmp/venv"

  run-e2e-tests:
    parameters:
      mark:
        type: string
        default: ""
      junit-path:
        type: string
        default: "/tmp/test-results/e2e/tests.xml"
      master-host:
        type: string
        default: "localhost"
      master-port:
        type: string
        default: "8080"
    steps:
      - run:
          name: Split tests
          working_directory: ~/project/e2e_tests
          command: circleci tests glob "tests/**/test*.py" | circleci tests split --split-by=timings > /tmp/tests-to-run

      - run:
          name: Run e2e tests
          working_directory: ~/project/e2e_tests
          command: |
            if [[ "<<parameters.master-host>>" == "localhost" ]]; then
              FOLLOW_LOCAL_LOGS="--follow-local-logs"
              COMPOSE_FILE="--compose-file=.circleci/compose/e2e/docker-compose.yaml"
            fi

            pytest -vv -s \
            -m <<parameters.mark>> \
            --durations=0 \
            --master-host="<<parameters.master-host>>" \
            --master-port="<<parameters.master-port>>" \
            ${FOLLOW_LOCAL_LOGS} \
            ${COMPOSE_FILE} \
            --junit-xml="<<parameters.junit-path>>" \
            $(cat /tmp/tests-to-run)

  deploy-aws-cluster:
    parameters:
      cluster-id:
        type: string
      det-version:
        type: string
      keypair:
        type: string
        default: "integrations-test"
      agent-instance-type:
        type: string
        default: "p2.xlarge"
      max-dynamic-agents:
        type: integer
        default: 1
    steps:
      - run:
          name: Deploy AWS cluster
          command: |
            det-deploy aws up \
              --cluster-id <<parameters.cluster-id>> \
              --det-version <<parameters.det-version>> \
              --agent-instance-type <<parameters.agent-instance-type>> \
              --max-dynamic-agents <<parameters.max-dynamic-agents>> \
              --keypair <<parameters.keypair>>

  terminate-aws-cluster:
    parameters:
      cluster-id:
        type: string
    steps:
      - run:
          name: Terminate AWS Cluster
          when: always
          command: |
            det-deploy aws down \
              --cluster-id <<parameters.cluster-id>>


  setup-aws-cluster:
    parameters:
      cluster-id:
        type: string
      det-version:
        type: string
      agent-instance-type:
        type: string
        default: "p2.xlarge"
    steps:
      - set-cluster-id:
          cluster-id: <<parameters.cluster-id>>
      - deploy-aws-cluster:
          cluster-id: ${CLUSTER_ID}
          det-version: <<parameters.det-version>>
          agent-instance-type: <<parameters.agent-instance-type>>
      - set-master-address:
          cluster-id: ${CLUSTER_ID}
      - wait-for-master:
          host: ${MASTER_HOST}

  download-aws-logs:
    parameters:
      cluster-id:
        type: string
      download-dir:
        type: string
        default: "/tmp/logs"
    steps:
      - run:
          name: "Download AWS Logs"
          when: on_fail
          command: |
            mkdir -p <<parameters.download-dir>>
            LOG_GROUP=$(python .circleci/scripts/get_output_from_stack.py <<parameters.cluster-id>> LogGroup)
            python .circleci/scripts/download_logs.py ${LOG_GROUP} <<parameters.download-dir>>
            python .circleci/scripts/download_logs.py "/aws/rds/cluster/<<parameters.cluster-id>>" <<parameters.download-dir>>
      - store_artifacts:
          path: <<parameters.download-dir>>

  install-webui-test-deps:
    steps:
      - run: |
          . /opt/circleci/.nvm/nvm.sh
          nvm install v12
          nvm alias default v12
          make -C webui/tests get-deps
      - run: docker pull cypress/included:4.3.0


  setup-local-cluster:
    parameters:
      det-version:
        type: string
    steps:
      - run: |
          export DET_VERSION=<<parameters.det-version>>
          export MASTER_HOST=$(ip route | grep docker0 | sed "s/^.*src \(.*\) linkdown.*$/\1/g")
          docker-compose -f .circleci/compose/e2e/docker-compose.yaml up -d
      - wait-for-master:
          host: localhost

  run-e2e-webui-tests:
    steps:
      - run: python webui/tests/bin/createUserAndExperiments.py
      - run: |
          mkdir -p webui/tests/results
          docker run \
            --name e2e_cypress \
            --network=e2e_default \
            --mount type=bind,source=$(pwd)/webui,target=/webui \
            -w /webui/tests \
            --env DET_MASTER=determined-master:8080 \
            cypress/included:4.3.0 \
            --config-file cypress-docker.json \
            --config "defaultCommandTimeout=30000,baseUrl=http://determined-master:8080" \
            --browser chrome \
            --headless

  set-master-address:
    parameters:
      cluster-id:
        type: string
    steps:
      - run: |
          MASTER_HOST=$(python .circleci/scripts/get_output_from_stack.py <<parameters.cluster-id>> DeterminedAddress)
          echo "export MASTER_HOST=\"${MASTER_HOST}\"" >> $BASH_ENV

  set-cluster-id:
    parameters:
      cluster-id:
        type: string
    steps:
      - run: echo "export CLUSTER_ID=\"<<parameters.cluster-id>>\"" >> $BASH_ENV

  wait-for-master:
    parameters:
      host:
        type: string
      port:
        type: string
        default: "8080"
    steps:
      - run: python .circleci/scripts/wait_for_master.py http://<<parameters.host>>:<<parameters.port>>


jobs:
  build-docs:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          extras-requires: "tensorflow==1.14 torch==1.4"
          extra-requirements-file: "docs/requirements.txt"
          executor: determinedai/cimg-base:stable
      - run: make -C master build-python-packages
      - run: make -C docs build
      - persist_to_workspace:
          root: build
          paths:
            - "share/determined/master/webui/docs"
            - "share/determined/master/wheels"
      - store_artifacts:
          path: "build/share/determined/master/webui/docs"

  publish-docs:
    docker:
      - image: hashicorp/terraform:light
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: make -C docs/deploy publish

  package-and-push-system:
    parameters:
      local:
        type: boolean
        default: false
      development:
        type: boolean
        default: false
      production:
        type: boolean
        default: false
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - attach_workspace:
          at: build

      - go-get-deps

      - run: make -C master build-files
      - run: make debs

      - setup_remote_docker
      - build-docker-images
      - when:
          condition: <<parameters.local>>
          steps:
            - run: docker save -o build/master.image determinedai/determined-master:${CIRCLE_SHA1}
            - run: docker save -o build/agent.image determinedai/determined-agent:${CIRCLE_SHA1}
            - persist_to_workspace:
                root: build
                paths:
                  - "dist/*linux_amd64.deb"
                  - "*.image"
      - when:
          condition: <<parameters.development>>
          steps:
            - login-docker
            - run: make -C master publish-dev
            - run: make -C agent publish-dev
      - when:
          condition: <<parameters.production>>
          steps:
            - login-docker
            - run: make -C master publish
            - run: make -C agent publish

  publish-debs:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - attach_workspace:
          at: build

      - go-get-deps
      - run:
          name: publish-debs
          command: |
            cp -r packaging build/
            git fetch -t
            # Set the previous tag to the last final release, ignoring release candidates.
            export GORELEASER_PREVIOUS_TAG=$(git tag --sort=-creatordate | grep -v "rc" | grep $(cat VERSION) -A1 | sed -n '2 p')
            cd build && goreleaser -f ${CIRCLE_WORKING_DIRECTORY}/.goreleaser.yml --rm-dist

  publish-python-package:
    parameters:
      path:
        type: string
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          extras-requires: "twine"
          executor: determinedai/cimg-base:stable
      - run: make -C <<parameters.path>> build
      - run: make -C <<parameters.path>> publish


  test-e2e-webui:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: docker load --input build/master.image
      - run: docker load --input build/agent.image

      - install-webui-test-deps
      - run: pyenv global 3.6.10
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          executor: ubuntu-1604:202004-01
      - setup-local-cluster:
          det-version: ${CIRCLE_SHA1}
      - run-e2e-webui-tests
      - store_test_results:
          path: webui/tests/results/
      - store_artifacts:
          path: webui/tests/results/recordings



  lint-elm:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - elm-get-deps
      - run: make -C webui/elm check

  build-elm:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - elm-get-deps
      - run: make -C webui/elm build
      - persist_to_workspace:
          root: build
          paths:
            - "share/determined/master/webui/elm"

  test-unit-elm:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - elm-get-deps
      - run: make -C webui/elm test



  lint-react:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react check

  build-react:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react build
      - persist_to_workspace:
          root: build
          paths:
            - "share/determined/master/webui/react"

  test-unit-react:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react test



  lint-commit-message:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - run: go get github.com/talos-systems/conform@fa7df19996ece307285da44c73f210c6cbec9207
      - run: conform enforce



  lint-go:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - go-get-deps
      - run: make -C master check
      - run: make -C agent check

  test-unit-go:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - go-get-deps
      - run: make -C master test
      - run: make -C agent test




  lint-python:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extras-requires: "torch==1.4.0"
          extra-requirements-file: "requirements.txt"
          executor: determinedai/cimg-base:stable
      - run: make -C cli check
      - run: make -C common check
      - run: make -C harness check
      - run: make -C deploy check
      - run: make -C e2e_tests check

  test-unit-harness:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined: true
          extras-requires: "tensorflow==1.14.0 torch==1.4.0 torchvision==0.5.0"
          extra-requirements-file: "harness/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - run: make -C harness test

  test-unit-harness-tf2:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined: true
          extras-requires: "tensorflow==2.1.0"
          extra-requirements-file: "harness/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - run: make -C harness test-tf2

  test-cli:
    parameters:
      executor-name:
        type: string
    executor: << parameters.executor-name >>
    steps:
      - checkout
      - run: pip install wheel
      - run: cd common; python setup.py bdist_wheel -d ../build
      - run: cd cli; python setup.py bdist_wheel -d ../build
      - run: pip install --find-links build determined-cli==<< pipeline.parameters.det-version >>
      # Ensure Determined cli can run without installing cli test requirements
      - run: det --help
      - run: pip install -r cli/tests/requirements.txt
      - run: pytest cli/tests

  test-e2e-tf:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: docker load --input build/master.image
      - run: docker load --input build/agent.image

      - run: pyenv global 3.6.10
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extra-requirements-file: "e2e_tests/tests/requirements.txt"
          executor: ubuntu-1604:202004-01

      - pull-task-images:
          tf2: true

      - setup-local-cluster:
          det-version: ${CIRCLE_SHA1}
      - run-e2e-tests:
          mark: "tensorflow_cpu"
          master-host: localhost
      - store_test_results:
          path: /tmp/test-results/

  test-e2e:
    machine:
      image: ubuntu-1604:202004-01
    resource_class: large
    parallelism: 3
    steps:
      - checkout
      - attach_workspace:
          at: build
      - run: docker load --input build/master.image
      - run: docker load --input build/agent.image

      - run: pyenv global 3.6.10
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extra-requirements-file: "e2e_tests/tests/requirements.txt"
          executor: ubuntu-1604:202004-01

      - pull-task-images

      - setup-local-cluster:
          det-version: ${CIRCLE_SHA1}
      - run-e2e-tests:
          mark: "e2e_cpu"
          master-host: localhost

      - store_test_results:
          path: /tmp/test-results/

  deploy:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - set-slack-user-id
      - setup-python-venv:
          determined-common: true
          determined-deploy: true
          executor: determinedai/cimg-base:stable
      - deploy-aws-cluster:
          cluster-id: determined-${CIRCLE_BRANCH}
          det-version: ${CIRCLE_SHA1}
      - slack/status:
          fail_only: true
          failure_message: ':thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed!'
          mentions: "${SLACK_USER_ID}"


  nightly-tests:
    docker:
      - image: determinedai/cimg-base:stable
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extra-requirements-file: "e2e_tests/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - setup-aws-cluster:
          cluster-id: nightly-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}
          det-version: ${CIRCLE_SHA1}
      - run-e2e-tests:
          mark: "nightly"
          master-host: ${MASTER_HOST}
      - download-aws-logs:
          cluster-id: ${CLUSTER_ID}
      - terminate-aws-cluster:
          cluster-id: ${CLUSTER_ID}
      - store_test_results:
          path: /tmp/test-results/
      - slack/status:
          fail_only: True
          failure_message: ':thisisfine: \`${CIRCLE_JOB}\` have failed!'
          mentions: "channel"
          channel: "ml-ag"

  e2e-gpu-tests:
    docker:
      - image: determinedai/cimg-base:stable
    parallelism: 2
    steps:
      - checkout
      - set-slack-user-id
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extra-requirements-file: "e2e_tests/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - setup-aws-cluster:
          cluster-id: e2e-gpu-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}
          det-version: ${CIRCLE_SHA1}
      - run-e2e-tests:
          mark: "e2e_gpu"
          master-host: ${MASTER_HOST}
      - download-aws-logs:
          cluster-id: ${CLUSTER_ID}
      - terminate-aws-cluster:
          cluster-id: ${CLUSTER_ID}
      - store_test_results:
          path: /tmp/test-results/
      - slack/status:
          fail_only: True
          failure_message: ':thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed!'
          mentions: "${SLACK_USER_ID}"



  parallel-tests:
    docker:
      - image: determinedai/cimg-base:stable
    parallelism: 2
    steps:
      - checkout
      - set-slack-user-id
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extra-requirements-file: "e2e_tests/tests/requirements.txt"
          executor: determinedai/cimg-base:stable
      - setup-aws-cluster:
          cluster-id: parallel-$(git rev-parse --short HEAD)-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}
          det-version: ${CIRCLE_SHA1}
          agent-instance-type: "p2.8xlarge"
      - run-e2e-tests:
          mark: "parallel"
          master-host: ${MASTER_HOST}
      - download-aws-logs:
          cluster-id: ${CLUSTER_ID}
      - terminate-aws-cluster:
          cluster-id: ${CLUSTER_ID}
      - store_test_results:
          path: /tmp/test-results/
      - slack/status:
          fail_only: True
          failure_message: ':thisisfine: A \`${CIRCLE_JOB}\` job on branch \`${CIRCLE_BRANCH}\` has failed!'
          mentions: "${SLACK_USER_ID}"




workflows:
  lint:
    jobs:
      - lint-commit-message
      - lint-python
      - lint-go
      - lint-elm
      - lint-react

  test-cli:
    jobs:
      - test-cli:
          matrix:
            parameters:
              executor-name: ["python-35", "python-36", "python-37", "python-38", "win/default"]

  test-unit:
    jobs:
      - test-unit-go
      - test-unit-elm
      - test-unit-react
      - test-unit-harness
      - test-unit-harness-tf2

  test-e2e:
    jobs:
      - build-elm
      - build-react
      - build-docs
      - package-and-push-system:
          name: local-package-and-push-system
          requires:
            - build-elm
            - build-react
            - build-docs
          matrix:
            parameters:
              local: [true]

      - package-and-push-system:
          name: dev-package-and-push-system
          requires:
            - build-elm
            - build-react
            - build-docs
          matrix:
            parameters:
              development: [true]
          filters:
            branches:
              ignore:
                - /pull\/.*/

      - test-e2e:
          requires:
            - local-package-and-push-system
      - test-e2e-tf:
          requires:
            - local-package-and-push-system
      - test-e2e-webui:
          requires:
            - local-package-and-push-system

      - request-gpu-tests:
          type: approval
          filters:
            branches:
              ignore:
                - /pull\/.*/
                - master

      - request-dev-deploy:
          type: approval
          filters:
            branches:
              ignore:
                - /pull\/.*/
                - master

      - deploy:
          context: aws
          filters:
            branches:
              only: master
          requires:
            - dev-package-and-push-system

      - deploy:
          context: aws
          filters:
            branches:
              ignore:
                - master
                - /pull\/.*/
          requires:
            - request-dev-deploy
            - dev-package-and-push-system

      - parallel-tests:
          context: aws
          filters:
            branches:
              only: master
              ignore:
                - /pull\/.*/
          requires:
            - dev-package-and-push-system

      - e2e-gpu-tests:
          context: aws
          filters:
            branches:
              only: master
          requires:
            - dev-package-and-push-system

      - parallel-tests:
          context: aws
          filters:
            branches:
              ignore:
                - /pull\/.*/
                - master
          requires:
            - request-gpu-tests
            - dev-package-and-push-system


      - e2e-gpu-tests:
          context: aws
          filters:
            branches:
              ignore:
                - /pull\/.*/
                - master
          requires:
            - request-gpu-tests
            - dev-package-and-push-system


  nightly:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - nightly-tests:
          context: aws

  release:
    jobs:
      - build-elm:
          context: determined-production
          filters: *release-and-rc-filters
      - build-react:
          context: determined-production
          filters: *release-and-rc-filters
      - build-docs:
          context: determined-production
          filters: *release-and-rc-filters

      - package-and-push-system:
          matrix:
            parameters:
              production: [true]
          requires:
            - build-elm
            - build-react
            - build-docs
          context: determined-production
          filters: *release-and-rc-filters

      - publish-python-package:
          matrix:
            parameters:
              path: ["common", "harness", "cli", "deploy"]
          context: determined-production
          filters: *release-and-rc-filters

      - publish-docs:
          requires:
            - build-docs
          context: determined-production
          filters: *release-filters

      - publish-debs:
          requires:
            - package-and-push-system
          context: determined-production
          filters: *release-filters
