# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  win: circleci/windows@2.3.0

executors:
  python-35:
    docker:
      - image: python:3.5.9
  python-36:
    docker:
      - image: python:3.6.9
  python-37:
    docker:
      - image: python:3.7.7

parameters:
  det-version:
    type: string
    default: 0.12.3.dev0


commands:
  fix-circle-working-directory:
    description: "Fix CIRCLE_WORKING_DIRECTORY"
    steps:
      - run: echo 'CIRCLE_WORKING_DIRECTORY="${CIRCLE_WORKING_DIRECTORY/#\~/$HOME}"' >> $BASH_ENV


  install-docker:
    steps:
      - run: sudo apt-get update && sudo apt-get install -y docker-ce docker-ce-cli containerd.io
      - run: sudo systemctl restart docker


  build-docker-images:
    description: Build Master and Agent Docker images.
    steps:
      - attach_workspace:
          at: build
      - run: make -C master build-docker
      - run: make -C agent build-docker


  go-get-deps:
    steps:
      - restore_cache:
          keys:
            - det-go-deps-v1dev3-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}
      - run: make go-get-deps
      - save_cache:
          key: det-go-deps-v1dev3-{{ checksum  "master/go.sum" }}-{{ checksum  "agent/go.sum" }}
          paths:
            - "/go/pkg/mod/"
  elm-get-deps:
    steps:
      - restore_cache:
          keys:
            - det-elm-deps-v1dev3-{{ checksum  "webui/elm/package-lock.json" }}
      - run: make -C webui/elm get-deps
      - save_cache:
          key: det-elm-deps-v1dev3-{{ checksum  "webui/elm/package-lock.json" }}
          paths:
            - "webui/elm/node_modules"
  react-get-deps:
    steps:
      - restore_cache:
          keys:
            - det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
      - run: make -C webui/react get-deps
      - save_cache:
          key: det-react-deps-v1dev3-{{ checksum  "webui/react/package-lock.json" }}
          paths:
            - "webui/react/node_modules"
  setup-python-venv:
    description: Set up and create Python venv.
    parameters:
      determined:
        type: boolean
        default: false
      determined-common:
        type: boolean
        default: false
      determined-cli:
        type: boolean
        default: false
      determined-deploy:
        type: boolean
        default: false
      extras-requires:
        type: string
        default: ""
      extra-requirements-file:
        type: string
        default: ""
      executor:
        type: string
    steps:
      - run: python3.6 -m venv /tmp/venv
      - run: /tmp/venv/bin/python -m pip install --upgrade pip\<20 wheel setuptools


      # Write dependencies to cachefile to help create the cachekey
      - run: echo <<parameters.executor>> > /tmp/cachefile
      - when:
          condition: <<parameters.determined-common>>
          steps:
            - run: cat common/setup.py >> /tmp/cachefile
      - when:
          condition: <<parameters.determined>>
          steps:
            - run: cat harness/setup.py >> /tmp/cachefile
      - when:
          condition: <<parameters.determined-cli>>
          steps:
            - run: cat cli/setup.py >> /tmp/cachefile
      - when:
          condition: <<parameters.determined-deploy>>
          steps:
            - run: cat deploy/setup.py >> /tmp/cachefile
      - run: echo <<parameters.extras-requires>> >> /tmp/cachefile


      # Install dependencies
      - run: |
          if [ -n <<parameters.extra-requirements-file>> ]; then cat <<parameters.extra-requirements-file>> >> /tmp/cachefile; fi
      - restore_cache:
          keys:
            - det-python-deps-v1dev0-{{ checksum "/tmp/cachefile" }}
      - when:
          condition: <<parameters.determined-common>>
          steps:
            - run: cd common; /tmp/venv/bin/python setup.py bdist_wheel -d ../build
            - run: /tmp/venv/bin/python -m pip install --find-links build determined-common==<< pipeline.parameters.det-version >>
            - run: /tmp/venv/bin/python -m pip install --no-deps --force-reinstall --find-links build determined-common==<< pipeline.parameters.det-version >>
      - when:
          condition: <<parameters.determined>>
          steps:
            - run: cd harness; /tmp/venv/bin/python setup.py bdist_wheel -d ../build
            - run: /tmp/venv/bin/python -m pip install --find-links build determined==<< pipeline.parameters.det-version >>
            - run: /tmp/venv/bin/python -m pip install --no-deps --force-reinstall --find-links build determined==<< pipeline.parameters.det-version >>
      - when:
          condition: <<parameters.determined-cli>>
          steps:
            - run: cd cli; /tmp/venv/bin/python setup.py bdist_wheel -d ../build
            - run: /tmp/venv/bin/python -m pip install --find-links build determined-cli==<< pipeline.parameters.det-version >>
            - run: /tmp/venv/bin/python -m pip install --no-deps --force-reinstall --find-links build determined-cli==<< pipeline.parameters.det-version >>
      - when:
          condition: <<parameters.determined-deploy>>
          steps:
            - run: cd deploy; /tmp/venv/bin/python setup.py bdist_wheel -d ../build
            - run: /tmp/venv/bin/python -m pip install --find-links build determined-deploy==<< pipeline.parameters.det-version >>
            - run: /tmp/venv/bin/python -m pip install --no-deps --force-reinstall --find-links build determined-deploy==<< pipeline.parameters.det-version >>
      - run: |
          if [ -n "<<parameters.extras-requires>>" ]; then /tmp/venv/bin/python -m pip install <<parameters.extras-requires>>; fi
      - run: |
          if [ -n "<<parameters.extra-requirements-file>>" ]; then /tmp/venv/bin/python -m pip install -r <<parameters.extra-requirements-file>>; fi
      - save_cache:
          key: det-python-deps-v1dev0-{{ checksum "/tmp/cachefile" }}
          paths:
            - "/tmp/venv"


jobs:
  build-docs:
    docker:
      - image: python:3.6.9
    environment:
      PATH: /tmp/venv/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          extras-requires: "tensorflow==1.14 torch==1.4"
          extra-requirements-file: "docs-requirements.txt"
          executor: python:3.6.9
      - run: make -C master build-python-packages
      - run: make -C docs build
      - persist_to_workspace:
          root: build
          paths:
            - "share/determined/master/webui/docs"
            - "share/determined/master/wheels"

  build-debs:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - attach_workspace:
          at: build

      - go-get-deps

      - run: make -C master build-files
      - run: make debs

      - persist_to_workspace:
          root: build
          paths:
            - "dist/*linux_amd64.deb"





  lint-elm:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - elm-get-deps
      - run: make -C webui/elm check

  build-elm:
    docker:
      - image: cimg/node:12.16
    steps:
      - run: env
      - checkout
      - elm-get-deps
      - run: make -C webui/elm build
      - persist_to_workspace:
          root: build
          paths:
            - "share/determined/master/webui/elm"

  test-unit-elm:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - elm-get-deps
      - run: make -C webui/elm test



  lint-react:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react check

  build-react:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react build
      - persist_to_workspace:
          root: build
          paths:
            - "share/determined/master/webui/react"

  test-unit-react:
    docker:
      - image: cimg/node:12.16
    steps:
      - checkout
      - react-get-deps
      - run: make -C webui/react test



  lint-go:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - go-get-deps
      - run: make -C master check
      - run: make -C agent check
      - run: make check-commit-messages

  test-unit-go:
    docker:
      - image: cimg/go:1.13
        environment:
          GO111MODULE: "on"
    steps:
      - checkout
      - go-get-deps
      - run: make -C master test
      - run: make -C agent test




  lint-python:
    docker:
      - image: python:3.6.9
    environment:
      PATH: /tmp/venv/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - checkout
      - setup-python-venv:
          extra-requirements-file: "combined-reqs.txt"
          executor: python:3.6.9
      - run: make check-python

  test-unit-harness:
    docker:
      - image: python:3.6.9
    environment:
      PATH: /tmp/venv/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined: true
          extras-requires: "tensorflow==1.14.0 torch==1.4.0 torchvision==0.5.0"
          extra-requirements-file: "tests/unit/requirements.txt"
          executor: python:3.6.9
      - run: make test-harness

  test-unit-harness-tf2:
    docker:
      - image: python:3.6.9
    environment:
      PATH: /tmp/venv/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - checkout
      - setup-python-venv:
          determined-common: true
          determined: true
          extras-requires: "tensorflow==2.1.0"
          extra-requirements-file: "tests/unit/requirements.txt"
          executor: python:3.6.9
      - run: make test-tf2

  test-cli:
    parameters:
      executor-name:
        type: string
    executor: << parameters.executor-name >>
    steps:
      - checkout
      - run: cd common; python setup.py bdist_wheel -d ../build
      - run: cd cli; python setup.py bdist_wheel -d ../build
      - run: pip install --find-links build determined-cli==<< pipeline.parameters.det-version >>
      # Ensure Determined cli can run without installing cli test requirements
      - run: det --help
      - run: pip install -r tests/cli/requirements.txt
      - run: pytest tests/cli

  test-e2e:
    parameters:
      test-split:
        type: string
    machine:
      image: ubuntu-1604:201903-01
    resource_class: large
    steps:
      - checkout
      - install-docker
      - build-docker-images

      - run: pyenv global 3.6.5
      - setup-python-venv:
          determined-common: true
          determined-cli: true
          determined: true
          determined-deploy: true
          extra-requirements-file: "tests/integrations/requirements.txt"
          executor: ubuntu-1604:201903-01

      - run: docker pull determinedai/environments:py-3.6.9-pytorch-1.4-tf-1.14-cpu-4bd937a

      - run: . /tmp/venv/bin/activate && PYTEST_MARKS=<< parameters.test-split >> make test-python-integrations



workflows:
  test-cli:
    jobs:
      - test-cli:
          matrix:
            parameters:
              executor-name: ["python-35", "python-36", "python-37", "win/default"]
  test-e2e:
    jobs:
      - build-elm:
          filters:
            branches:
              ignore:
                - /pull\/.*/
      - build-react
      - build-docs
      - build-debs:
          requires:
            - build-elm
            - build-react
            - build-docs

      - test-e2e:
          requires:
            - build-debs
          matrix:
            parameters:
              test-split: ["system", "workflows", "frameworks_cpu", "frameworks_native_cpu"]
  test-unit:
    jobs:
      - test-unit-go
      - test-unit-elm
      - test-unit-react
      - test-unit-harness
      - test-unit-harness-tf2
  lint:
    jobs:
      - lint-python
      - lint-go
      - lint-elm
      - lint-react
