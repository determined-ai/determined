.. _rest-api-getting-started:

Getting Started with REST APIs
==============================

REST APIs give users and external tools a way to interact with Determined programmatically.
We provide a detailed documentation on all the available functionalities (aka endpoints) and
alongside a playground to interact with them through Swagger UI.

Swagger UI
----------

As Swagger puts it:

Swagger UI allows anyone — be it your development team or your end consumers —
to visualize and interact with the API’s resources without having any of the
implementation logic in place. It’s automatically generated from your OpenAPI
(formerly known as Swagger) Specification, with the visual documentation making
it easy for back end implementation and client side consumption.



Reach the Swagger UI for your Determined installation by click API icon from the
Determined WebUI or by visiting the path `/swagger-ui` on your Determined cluster.

.. image:: /assets/images/swagger-ui-location.png

The Swagger UI gives you an up-to-date view of what APIs your Determined cluster is
providing in a readable and interactive fashion.
In this page you'll see a list of all the available endpoints grouped by their workflows.
If you click on each endpoint you'll be presented with expected inputs and outputs for it
as well as an interactive tool that let's you try out the endpoint. Note that for the
interactive portion to work, you'd need to have the appropriate cookie set and have a
running cluster. To set up the authentication take a look at the authentication section
below or simply log in through the WebUI.

Authentication
--------------

Most of the API calls to Determined cluster needs to be authenticated.
On each API call the server expects a Bearer token to be present.

To receive a token POST a valid username and password combination to the login
endpoint, currently at `/api/v1/auth/login` with the following format:

.. code:: json

  {
    "username": "string",
    "password": "string"
  }

Example:

.. code:: bash

  curl -s "${host}/api/v1/auth/login" \
    -H 'Content-Type: application/json' \
    --data-binary '{"username":"john","password":"2k34h5@$"}' \

Sample Response: 

.. code:: json

  {
    "token": "string",
    "user": {
      "username": "string",
      "admin": true,
      "active": true,
      "agent_user_group": {
        "agent_uid": 0,
        "agent_gid": 0
      }
    }
  }

Now store and attach the provided token to your future API calls under
`Authorization` header and with the following format: `Bearer $TOKEN`.


For example let's find an archived example to un-archive:

By looking at the archive endpoint entry from our API docs (Swagger UI) we see that all we need is an
experiment id.
In order to find our an experiment that as archived we lookup the experiments endpoint on our to figure out what
filtering options we have.  We see that we have `archived` and `limit` to work with.
Using a bearer token we authenticate our request. We then use `archived` and `limit` query parameters to
limit the result set to only show 1 archived experiment.

.. code:: bash

  curl -H "Authorization: Bearer ${token}" 'http://localhost:8080/api/v1/experiments?archived=true&limit=1'


Here's what our example response looks like. We see it matches the defined and expected response shape.

.. code:: json

  {
    "experiments": [
      {
        "id": 16,
        "description": "mnist_pytorch_const",
        "labels": [],
        "startTime": "2020-08-26T20:12:35.337160Z",
        "endTime": "2020-08-26T20:12:51.951720Z",
        "state": "STATE_COMPLETED",
        "archived": true,
        "numTrials": 1,
        "progress": 0,
        "username": "determined"
      }
    ],
    "pagination": {
      "offset": 0,
      "limit": 1,
      "startIndex": 0,
      "endIndex": 1,
      "total": 1
    }
  }


Now that we have our desired experiment's ID we use it to target the experiment through the archive endpoint
using a POST request as specified by the endpoint:

.. code:: bash

  curl -H "Authorization: Bearer ${token}" -X POST 'http://localhost:8080/api/v1/experiments/16/unarchive'


Find experimental dev-scripts for working with Determined APIs at
https://github.com/determined-ai/dev-scripts/tree/master/apis


How Our REST APIs work
----------------------

We use `protobuf <https://developers.google.com/protocol-buffers>`_ to define
language agnostic message structures. We use these type defintions with
`gRPC-gateway <https://grpc-ecosystem.github.io/grpc-gateway/>`_ to provide
consistent REST endpoints to serve various needs.

Using these two tools we also auto generate OpenAPI v2 spec (aka Swagger RESTful
API Documentation Specification) which let's us inline documentation for each endpoint
and response in our codebase.

Having this specification prepared we can serve it to different tools to generate
code for different languages (eg swagger codegen) as well as provide web based explorers into our APIs (eg Swagger UI).
