determined.pytorch
==================

.. _pytorch-trial:

``determined.pytorch.PyTorchTrial``
-----------------------------------

.. autoclass:: determined.pytorch.PyTorchTrial
    :members:
    :exclude-members: trial_controller_class
    :inherited-members:
    :member-order: bysource

.. autoclass:: determined.pytorch.LRScheduler
    :members:
    :special-members: __init__

.. autoclass:: determined.pytorch.Reducer
    :members:

.. _pytorch-data-loading:

Data Loading
~~~~~~~~~~~~

Loading data into ``PyTorchTrial`` models is done by defining a
``build_training_data_loader()`` and ``build_validation_data_loader()``
function. These function must each return an instance of
``determined.pytorch.DataLoader``.  ``determined.pytorch.DataLoader`` behaves
the same as ``torch.utils.data.DataLoader`` and is a drop-in replacement.

Each ``DataLoader`` is allowed to return batches with arbitrary
structures of the following types, which will be fed directly to the
``train_batch`` and ``evaluate_batch`` functions:

-  ``np.ndarray``

.. code:: python

   np.array([[0, 0], [0, 0]])

-  ``torch.Tensor``

.. code:: python

   torch.Tensor([[0, 0], [0, 0]])

-  tuple of ``np.ndarray``\ s or ``torch.Tensor``\ s

.. code:: python

   (torch.Tensor([0, 0]), torch.Tensor([[0, 0], [0, 0]]))

-  list of ``np.ndarray``\ s or ``torch.Tensor``\ s

.. code:: python

   [torch.Tensor([0, 0]), torch.Tensor([[0, 0], [0, 0]])]

-  dictionary mapping strings to ``np.ndarray``\ s or
   ``torch.Tensor``\ s

.. code:: python

   {"data": torch.Tensor([[0, 0], [0, 0]]), "label": torch.Tensor([[1, 1], [1, 1]])}

-  combination of the above

.. code:: python

   {
       "data": [
           {"sub_data1": torch.Tensor([[0, 0], [0, 0]])},
           {"sub_data2": torch.Tensor([0, 0])},
       ],
       "label": (torch.Tensor([0, 0]), torch.Tensor([[0, 0], [0, 0]])),
   }

Examples
--------

-  :download:`cifar10_cnn_pytorch </examples/cifar10_cnn_pytorch.tgz>`
   (PyTorch ``Sequential`` model)
-  :download:`mnist_pytorch </examples/mnist_pytorch.tgz>`
   (two examples: PyTorch ``Sequential`` model and true multi-input
   multi-output model)
