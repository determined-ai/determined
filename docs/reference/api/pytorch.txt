determined.pytorch
==================

.. _pytorch-trial:

``determined.pytorch.PyTorchTrial``
-----------------------------------

.. autoclass:: determined.pytorch.PyTorchTrial
    :members:
    :exclude-members: trial_controller_class
    :inherited-members:
    :member-order: bysource
    :special-members: __init__

.. autoclass:: determined.pytorch.LRScheduler
    :members:
    :special-members: __init__

.. autoclass:: determined.pytorch.Reducer
    :members:

.. autoclass:: determined.pytorch.PyTorchCallback
    :members:

.. _pytorch-data-loading:

Data Loading
~~~~~~~~~~~~

Loading data into ``PyTorchTrial`` models is done by defining two functions,
``build_training_data_loader()`` and ``build_validation_data_loader()``.
These functions should each return an instance of
``determined.pytorch.DataLoader``.  ``determined.pytorch.DataLoader`` behaves
the same as ``torch.utils.data.DataLoader`` and is a drop-in replacement.

Each ``DataLoader`` is allowed to return batches with arbitrary
structures of the following types, which will be fed directly to the
``train_batch`` and ``evaluate_batch`` functions:

-  ``np.ndarray``

   .. code:: python

      np.array([[0, 0], [0, 0]])

-  ``torch.Tensor``

   .. code:: python

      torch.Tensor([[0, 0], [0, 0]])

-  tuple of ``np.ndarray``\ s or ``torch.Tensor``\ s

   .. code:: python

      (torch.Tensor([0, 0]), torch.Tensor([[0, 0], [0, 0]]))

-  list of ``np.ndarray``\ s or ``torch.Tensor``\ s

   .. code:: python

      [torch.Tensor([0, 0]), torch.Tensor([[0, 0], [0, 0]])]

-  dictionary mapping strings to ``np.ndarray``\ s or
   ``torch.Tensor``\ s

   .. code:: python

      {"data": torch.Tensor([[0, 0], [0, 0]]), "label": torch.Tensor([[1, 1], [1, 1]])}

-  combination of the above

   .. code:: python

      {
          "data": [
              {"sub_data1": torch.Tensor([[0, 0], [0, 0]])},
              {"sub_data2": torch.Tensor([0, 0])},
          ],
          "label": (torch.Tensor([0, 0]), torch.Tensor([[0, 0], [0, 0]])),
      }

Trial Context
~~~~~~~~~~~~~

``determined.pytorch.PyTorchTrialContext`` subclasses :ref:`trial-context`.
It provides useful methods for writing ``Trial`` subclasses.

.. autoclass:: determined.pytorch.PyTorchTrialContext
    :members:

.. _pytorch-callbacks:

Callbacks
~~~~~~~~~

To execute arbitrary Python functionality during the lifecycle of a
``PyTorchTrial``, implement the callback interface:

.. autoclass:: determined.pytorch.PyTorchCallback
    :members:

``ReduceLROnPlateau``
^^^^^^^^^^^^^^^^^^^^^

To use the `torch.optim.lr_scheduler.ReduceLROnPlateau
<https://pytorch.org/docs/stable/optim.html#torch.optim.lr_scheduler.ReduceLROnPlateau>`_
class with ``PyTorchTrial``, implement the following callback:

.. code::

    class ReduceLROnPlateauEveryValidationStep(PyTorchCallback):
        def __init__(self, context):
            self.reduce_lr = torch.optim.lr_scheduler.ReduceLROnPlateau(
                context.get_optimizer(), "min", verbose=True
            )  # customize arguments as desired here

        def on_validation_end(self, metrics):
            self.reduce_lr.step(metrics["validation_error"])

        def state_dict(self):
            return self.reduce_lr.state_dict()

        def load_state_dict(self, state_dict):
            self.reduce_lr.load_state_dict(state_dict)

Then, implement the ``build_callbacks`` function in ``PyTorchTrial``:

.. code::

    def build_callbacks(self):
        return {"reduce_lr": ReduceLROnPlateauEveryValidationStep(self.context)}


``Gradient Clipping``
^^^^^^^^^^^^^^^^^^^^^

Determined provides two pre-made callback classes to perform gradient clipping:

.. autoclass:: determined.pytorch.ClipGradsL2Norm
    :members:

.. autoclass:: determined.pytorch.ClipGradsL2Value
    :members:

Examples
--------

-  :download:`cifar10_cnn_pytorch.tgz </examples/cifar10_cnn_pytorch.tgz>`
-  :download:`mnist_pytorch.tgz </examples/mnist_pytorch.tgz>`
