determined.estimator
====================

.. _estimator-trial:

``determined.estimator.EstimatorTrial``
---------------------------------------

.. autoclass:: determined.estimator.EstimatorTrial
    :members:
    :exclude-members: trial_controller_class
    :inherited-members:
    :member-order: bysource
    :special-members: __init__

.. _estimator-init:

``determined.experimental.estimator.init()``
--------------------------------------------

.. autofunction:: determined.experimental.estimator.init

.. _estimator-context:

``determined.estimator.EstimatorContext``
-----------------------------------------

To use ``tf.estimator`` models with Determined, users need to wrap their
optimizer and datasets using the following functions inherited from
:class:`determined.estimator.EstimatorContext`. Note that the concrete context
object where these functions will be found will be either
:class:`determined.estimator.EstimatorTrialContext` or
:class:`determined.estimator.EstimatorNativeContext`, depending on use of Trial
API or Native API.

.. autoclass:: determined.estimator.EstimatorContext
    :members:
    :member-order: bysource

    EstimatorTrialContext always has a :class:`~determined._train_context.DistributedContext`
    accessible via ``context.distributed`` for information related to distributed training.

    EstimatorTrialContext always has a :class:`~determined.estimator.EstimatorExperimentalContext`
    accessible via ``context.experimental`` for information related to experimental features.

.. autoclass:: determined.estimator.EstimatorExperimentalContext
    :members: cache_train_dataset, cache_validation_dataset, make_metric
    :member-order: bysource


Reducing Metrics
~~~~~~~~~~~~~~~~

Determined supports proper reduction of arbitrary validation metrics during
distributed training by allowing users to define custom reducers for their
metrics. Custom reducers can be either a function or an implementation of the
:class:`determined.estimator.MetricReducer` interface.

See :func:`determined.estimator.EstimatorExperimentalContext.make_metric()` for
more details.

.. autoclass:: determined.estimator.MetricReducer
    :members: accumulate, cross_slot_reduce
    :member-order: bysource


Callbacks
~~~~~~~~~

To execute arbitrary Python code during the lifecycle of a
``EstimatorTrial``, ``determined.estimator.RunHook`` extends
`tf.estimator.SessionRunHook <https://www.tensorflow.org/api_docs/python/tf/estimator/SessionRunHook/>`_.
When utilizing ``determined.estimator.RunHook``, users can use native estimator hooks
such as ``before_run()`` and Determined hooks such as ``on_checkpoint_end()``.

.. autoclass:: determined.estimator.RunHook
    :members: on_checkpoint_load, on_checkpoint_end, on_trial_close


Example usage of ``determined.estimator.RunHook`` which adds custom metadata checkpoints:

.. code:: python

    class MyHook(determined.estimator.RunHook):
        def __init__(self, context, metadata) -> None:
            self._context = context
            self._metadata = metadata

        def on_checkpoint_end(self, checkpoint_dir) -> None:
            with open(os.path.join(checkpoint_dir, "metadata.txt"), "w") as fp:
                fp.write(self._metadata)

    class MyEstimatorTrial(determined.estimator.EstimatorTrial):
        ...

        def build_train_spec(self) -> tf.estimator.TrainSpec:
            return tf.estimator.TrainSpec(
                make_input_fn(),
                hooks=[MyHook(self.context, "my_metadata")],
            )


Examples
--------

-  :download:`MNIST example </examples/mnist_estimator.tgz>`
