determined.keras
================

.. _tf-keras-trial:

``determined.keras.TFKerasTrial``
----------------------------------

.. autoclass:: determined.keras.TFKerasTrial
    :members:
    :exclude-members: trial_controller_class
    :inherited-members:
    :member-order: bysource

.. _keras-data-loading:

Data Loading
~~~~~~~~~~~~

There are five supported data types for loading data into ``tf.keras`` models:

#. A tuple ``(x, y)`` of Numpy arrays. x must be a Numpy array (or array-like),
   a list of arrays (in case the model has multiple inputs), or
   a dict mapping input names to the corresponding array, if the model has named inputs.
   y should be a numpy array.

#. A tuple ``(x, y, sample_weights)``
   of Numpy arrays.

#. A ``tf.data.dataset`` returning a tuple of either (inputs, targets) or
   (inputs, targets, sample_weights).

#. A ``keras.utils.Sequence`` returning a tuple of either (inputs, targets) or
   (inputs, targets, sample weights).

#. A ``det.keras.SequenceAdapter`` returning a tuple of either (inputs, targets) or
   (inputs, targets, sample weights).

Loading data is done by defining ``build_training_data_loader`` and
``build_validation_data_loader`` functions. Each should return one of the
supported data types mentioned above.


Optimizing Keras Sequences
~~~~~~~~~~~~~~~~~~~~~~~~~~

To optimize performance of ``tf.keras.Sequence`` which are created from generators,
Determined provides ``determined.keras.SequenceAdapter``.

.. autoclass:: determined.keras.SequenceAdapter
   :members: __init__

**Usage Examples**

-  Use main Python process with no multithreading and no multiprocessing

::

   SequenceAdapter(sequence, workers=0, use_multiprocessing=False)

-  Use one background process

::

   SequenceAdapter(sequence, workers=1, use_multiprocessing=True)

-  Use two background threads

::

   SequenceAdapter(sequence, workers=2, use_multiprocessing=False)


Required Wrappers
~~~~~~~~~~~~~~~~~

Users are required wrap their model prior to compiling it using the
:func:`self.context.wrap_model <determined.keras.TFKerasTrialContext.wrap_model>`.
This is typically done inside ``determined.keras.TFKerasTrial.build_model()``.

.. autofunction:: determined.keras.TFKerasTrialContext.wrap_model
    :noindex:

If using ``tf.data.Dataset``, users are required to wrap both their training and
validation dataset in a Determined-provided wrapper. This wrapper is used to shard
the dataset for :ref:`multi-gpu-training`. For optimal performance, users should
wrap dataset immediately after creating it.

.. autofunction:: determined.keras.TFKerasContext.wrap_dataset


Trial Context
~~~~~~~~~~~~~

``determined.keras.TFKerasTrialContext`` subclasses :ref:`trial-context`.
It provides useful methods for writing ``Trial`` subclasses. It also provides
the model and dataset wrappers.

.. autoclass:: determined.keras.TFKerasTrialContext
    :noindex:
    :members: wrap_model, wrap_dataset
    :member-order: bysource

    TFKerasTrialContext always has a :class:`DistributedContext<determined._train_context.DistributedContext>`
    accessible via ``context.distributed`` for information related to distributed training.

    TFKerasTrialContext always has a :class:`ExperimentalContext<determined.keras.TFKerasExperimentalContext>`
    accessible via ``context.experimental`` for information related to experimental features.

.. autoclass:: determined.keras.TFKerasExperimentalContext
    :members: cache_train_dataset, cache_validation_dataset
    :member-order: bysource

Native
~~~~~~

Disregard if using the trial API (subclassing ``determined.keras.TFKerasTrial``).

.. _keras-init:

``determined.keras.init()``
-------------------------------

.. autofunction:: determined.keras.init

.. _keras-context:

Examples
--------

-  `MNIST <https://github.com/determined-ai/determined/tree/master/examples/official/fashion_mnist_tf_keras>`_
-  `Cifar10 <https://github.com/determined-ai/determined/tree/master/examples/official/cifar10_cnn_tf_keras/>`_
