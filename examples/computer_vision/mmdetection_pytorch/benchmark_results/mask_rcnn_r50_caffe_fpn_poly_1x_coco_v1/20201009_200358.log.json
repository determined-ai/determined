{"env_info": "sys.platform: linux\nPython: 3.6.10 |Anaconda, Inc.| (default, Mar 23 2020, 23:13:11) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: Tesla V100-SXM2-16GB\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 10.0, V10.0.130\nGCC: gcc (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0\nPyTorch: 1.4.0+cu100\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v0.21.1 (Git Hash 7d2fd500bc78936d1d648ca713b901012f470dbc)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CUDA Runtime 10.0\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 7.6.3\n  - Magma 2.5.1\n  - Build settings: BLAS=MKL, BUILD_NAMEDTENSOR=OFF, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Wno-stringop-overflow, DISABLE_NUMA=1, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, \n\nTorchVision: 0.5.0+cu100\nOpenCV: 4.4.0\nMMCV: 1.1.3\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 10.0\nMMDetection: 2.4.0+9c95543", "config": "model = dict(\n    type='MaskRCNN',\n    pretrained='open-mmlab://detectron2/resnet50_caffe',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe'),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', loss_weight=1.0, beta=0.1111111111111111)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(\n                type='RoIAlign',\n                output_size=7,\n                sampling_ratio=2,\n                aligned=False),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=80,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='SmoothL1Loss', loss_weight=1.0, beta=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(\n                type='RoIAlign',\n                output_size=14,\n                sampling_ratio=2,\n                aligned=False),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=80,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))))\ntrain_cfg = dict(\n    rpn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.7,\n            neg_iou_thr=0.3,\n            min_pos_iou=0.3,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=256,\n            pos_fraction=0.5,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=False),\n        allowed_border=-1,\n        pos_weight=-1,\n        debug=False),\n    rpn_proposal=dict(\n        nms_across_levels=False,\n        nms_pre=2000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        assigner=dict(\n            type='MaxIoUAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0.5,\n            match_low_quality=True,\n            ignore_iof_thr=-1),\n        sampler=dict(\n            type='RandomSampler',\n            num=512,\n            pos_fraction=0.25,\n            neg_pos_ub=-1,\n            add_gt_as_proposals=True),\n        mask_size=28,\n        pos_weight=-1,\n        debug=False))\ntest_cfg = dict(\n    rpn=dict(\n        nms_across_levels=False,\n        nms_pre=1000,\n        nms_post=1000,\n        max_num=1000,\n        nms_thr=0.7,\n        min_bbox_size=0),\n    rcnn=dict(\n        score_thr=0.05,\n        nms=dict(type='nms', iou_threshold=0.5),\n        max_per_img=100,\n        mask_thr_binary=0.5))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_train2017.json',\n        img_prefix='data/coco/train2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                poly2mask=False),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/coco/annotations/instances_val2017.json',\n        img_prefix='data/coco/val2017/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\ntotal_epochs = 12\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = './work_dirs/mask_rcnn_r50_caffe_fpn_poly_1x_coco_v1'\ngpu_ids = range(0, 1)\n", "seed": null, "exp_name": "mask_rcnn_r50_caffe_fpn_poly_1x_coco_v1.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 3822, "data_time": 1.03251, "loss_rpn_cls": 0.4377, "loss_rpn_bbox": 0.08483, "loss_cls": 0.84356, "acc": 89.09009, "loss_bbox": 0.04536, "loss_mask": 0.9528, "loss": 2.36424, "time": 1.33213}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 3822, "data_time": 0.01051, "loss_rpn_cls": 0.21137, "loss_rpn_bbox": 0.07531, "loss_cls": 0.38014, "acc": 94.79004, "loss_bbox": 0.10836, "loss_mask": 0.69122, "loss": 1.46639, "time": 0.25374}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 3822, "data_time": 0.01026, "loss_rpn_cls": 0.1706, "loss_rpn_bbox": 0.07205, "loss_cls": 0.39554, "acc": 94.07935, "loss_bbox": 0.12474, "loss_mask": 0.67447, "loss": 1.4374, "time": 0.25542}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 3822, "data_time": 0.00988, "loss_rpn_cls": 0.13766, "loss_rpn_bbox": 0.07264, "loss_cls": 0.48535, "acc": 92.00342, "loss_bbox": 0.1756, "loss_mask": 0.64534, "loss": 1.51659, "time": 0.26457}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 3822, "data_time": 0.01062, "loss_rpn_cls": 0.1262, "loss_rpn_bbox": 0.07176, "loss_cls": 0.52161, "acc": 91.0481, "loss_bbox": 0.19617, "loss_mask": 0.61078, "loss": 1.52652, "time": 0.26853}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 3827, "data_time": 0.00935, "loss_rpn_cls": 0.10611, "loss_rpn_bbox": 0.06559, "loss_cls": 0.54097, "acc": 90.3645, "loss_bbox": 0.21148, "loss_mask": 0.57614, "loss": 1.50029, "time": 0.2718}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 3827, "data_time": 0.00929, "loss_rpn_cls": 0.09952, "loss_rpn_bbox": 0.06357, "loss_cls": 0.51619, "acc": 90.68921, "loss_bbox": 0.19798, "loss_mask": 0.5379, "loss": 1.41516, "time": 0.27077}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 3877, "data_time": 0.00937, "loss_rpn_cls": 0.10023, "loss_rpn_bbox": 0.06485, "loss_cls": 0.55149, "acc": 89.81421, "loss_bbox": 0.21583, "loss_mask": 0.51486, "loss": 1.44725, "time": 0.27405}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 3890, "data_time": 0.00885, "loss_rpn_cls": 0.09606, "loss_rpn_bbox": 0.06189, "loss_cls": 0.53246, "acc": 89.84644, "loss_bbox": 0.2103, "loss_mask": 0.48874, "loss": 1.38945, "time": 0.27528}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 3890, "data_time": 0.00919, "loss_rpn_cls": 0.09163, "loss_rpn_bbox": 0.06131, "loss_cls": 0.51657, "acc": 89.88745, "loss_bbox": 0.20816, "loss_mask": 0.48296, "loss": 1.36063, "time": 0.27404}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 3919, "data_time": 0.00935, "loss_rpn_cls": 0.09094, "loss_rpn_bbox": 0.06146, "loss_cls": 0.49633, "acc": 90.27759, "loss_bbox": 0.19566, "loss_mask": 0.46387, "loss": 1.30827, "time": 0.27321}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 3919, "data_time": 0.00932, "loss_rpn_cls": 0.09009, "loss_rpn_bbox": 0.06203, "loss_cls": 0.50177, "acc": 89.67798, "loss_bbox": 0.19698, "loss_mask": 0.4504, "loss": 1.30128, "time": 0.27514}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.02, "memory": 3924, "data_time": 0.00931, "loss_rpn_cls": 0.08677, "loss_rpn_bbox": 0.06259, "loss_cls": 0.49625, "acc": 89.47217, "loss_bbox": 0.19959, "loss_mask": 0.44306, "loss": 1.28826, "time": 0.27633}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.02, "memory": 3924, "data_time": 0.0101, "loss_rpn_cls": 0.08719, "loss_rpn_bbox": 0.06021, "loss_cls": 0.48196, "acc": 89.36426, "loss_bbox": 0.19702, "loss_mask": 0.43262, "loss": 1.259, "time": 0.27798}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.02, "memory": 3924, "data_time": 0.00913, "loss_rpn_cls": 0.08548, "loss_rpn_bbox": 0.06068, "loss_cls": 0.4619, "acc": 89.65063, "loss_bbox": 0.1905, "loss_mask": 0.42886, "loss": 1.2274, "time": 0.27601}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.02, "memory": 3924, "data_time": 0.00924, "loss_rpn_cls": 0.08321, "loss_rpn_bbox": 0.06098, "loss_cls": 0.46618, "acc": 89.53247, "loss_bbox": 0.1899, "loss_mask": 0.42296, "loss": 1.22323, "time": 0.27593}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.02, "memory": 3930, "data_time": 0.00959, "loss_rpn_cls": 0.07824, "loss_rpn_bbox": 0.05737, "loss_cls": 0.4374, "acc": 89.77393, "loss_bbox": 0.18015, "loss_mask": 0.41083, "loss": 1.164, "time": 0.27658}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.02, "memory": 3930, "data_time": 0.00904, "loss_rpn_cls": 0.08349, "loss_rpn_bbox": 0.05813, "loss_cls": 0.44024, "acc": 89.72925, "loss_bbox": 0.18071, "loss_mask": 0.41567, "loss": 1.17824, "time": 0.27615}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.02, "memory": 3930, "data_time": 0.00898, "loss_rpn_cls": 0.07767, "loss_rpn_bbox": 0.05767, "loss_cls": 0.44803, "acc": 89.51001, "loss_bbox": 0.17878, "loss_mask": 0.40501, "loss": 1.16716, "time": 0.27572}
