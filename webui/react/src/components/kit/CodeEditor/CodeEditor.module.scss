.codeEditorBase {
  display: grid;
  grid-template:
    'tree title' min-content
    'tree editor' auto / minmax(15%, auto) minmax(52%, auto);
  max-width: 100vw;
  min-height: 250px;

  .fileTree {
    background-color: transparent;
    color: var(--theme-background-on-strong);
    grid-area: tree;
    height: 100%;
    padding: 0.5em;

    :global(.ant-tree-title),
    :global(.ant-tree-node-content-wrapper) {
      // text ellipsis for antd tree
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      width: 100%;
    }
  }
  h5 {
    color: var(--theme-background-on-strong);
    margin-top: 5em;
    text-align: center;
  }
  .fileDir {
    grid-area: title;

    .fileInfo {
      align-items: center;
      background-color: var(--theme-stage);
      border: solid var(--theme-stroke-width) var(--theme-stage-border);
      border-bottom: none;
      border-radius: 0;
      display: flex;
      justify-content: space-between;
      padding: 0.5em 1em;

      .buttonContainer {
        align-items: center;
        display: flex;
        justify-content: space-between;
      }
      .filePath {
        margin-left: 10px;
      }
      .fileDesc,
      .readOnly {
        color: var(--theme-stage-on-weak);
        margin-left: 20px;
      }
      .readOnly {
        font-variant: small-caps;
      }
      .buttonsContainer {
        display: flex;

        .noBorderButton {
          border: 0;
          cursor: pointer;
          margin-right: -4px;
          width: 20px;
        }
      }
    }
  }
  .editor {
    border: solid var(--theme-stroke-width) var(--theme-stage-border);
    grid-area: editor;
    height: auto;
    min-height: 200px;
  }
  &.editorMode {
    grid-template:
      '.' min-content
      'title' min-content
      'editor' auto / 100%;
  }

  @media screen and (max-width: 1024px) {
    grid-template:
      'tree' auto
      'title' min-content
      'editor' auto / 100%;
  }
}
.pageError {
  grid-area: editor;
}
.hideElement {
  display: none;
}
