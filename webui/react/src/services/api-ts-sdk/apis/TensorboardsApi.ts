/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1GetTensorboardResponse,
  V1GetTensorboardsResponse,
  V1KillTensorboardResponse,
  V1LaunchTensorboardRequest,
  V1LaunchTensorboardResponse,
  V1SetTensorboardPriorityRequest,
  V1SetTensorboardPriorityResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1GetTensorboardResponseFromJSON,
    V1GetTensorboardResponseToJSON,
    V1GetTensorboardsResponseFromJSON,
    V1GetTensorboardsResponseToJSON,
    V1KillTensorboardResponseFromJSON,
    V1KillTensorboardResponseToJSON,
    V1LaunchTensorboardRequestFromJSON,
    V1LaunchTensorboardRequestToJSON,
    V1LaunchTensorboardResponseFromJSON,
    V1LaunchTensorboardResponseToJSON,
    V1SetTensorboardPriorityRequestFromJSON,
    V1SetTensorboardPriorityRequestToJSON,
    V1SetTensorboardPriorityResponseFromJSON,
    V1SetTensorboardPriorityResponseToJSON,
} from '../models';

export interface GetTensorboardRequest {
    tensorboardId: string;
}

export interface GetTensorboardsRequest {
    sortBy?: GetTensorboardsSortByEnum;
    orderBy?: GetTensorboardsOrderByEnum;
    offset?: number;
    limit?: number;
    users?: Array<string>;
    userIds?: Array<number>;
}

export interface KillTensorboardRequest {
    tensorboardId: string;
}

export interface LaunchTensorboardRequest {
    body: V1LaunchTensorboardRequest;
}

export interface SetTensorboardPriorityRequest {
    tensorboardId: string;
    body: V1SetTensorboardPriorityRequest;
}

/**
 * 
 */
export class TensorboardsApi extends runtime.BaseAPI {

    /**
     * Get the requested tensorboard.
     */
    async getTensorboardRaw(requestParameters: GetTensorboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetTensorboardResponse>> {
        if (requestParameters.tensorboardId === null || requestParameters.tensorboardId === undefined) {
            throw new runtime.RequiredError('tensorboardId','Required parameter requestParameters.tensorboardId was null or undefined when calling getTensorboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/tensorboards/{tensorboardId}`.replace(`{${"tensorboardId"}}`, encodeURIComponent(String(requestParameters.tensorboardId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetTensorboardResponseFromJSON(jsonValue));
    }

    /**
     * Get the requested tensorboard.
     */
    async getTensorboard(tensorboardId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetTensorboardResponse> {
        const response = await this.getTensorboardRaw({ tensorboardId: tensorboardId }, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of tensorboards.
     */
    async getTensorboardsRaw(requestParameters: GetTensorboardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetTensorboardsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.users) {
            queryParameters['users'] = requestParameters.users;
        }

        if (requestParameters.userIds) {
            queryParameters['userIds'] = requestParameters.userIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/tensorboards`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetTensorboardsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of tensorboards.
     */
    async getTensorboards(sortBy?: GetTensorboardsSortByEnum, orderBy?: GetTensorboardsOrderByEnum, offset?: number, limit?: number, users?: Array<string>, userIds?: Array<number>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetTensorboardsResponse> {
        const response = await this.getTensorboardsRaw({ sortBy: sortBy, orderBy: orderBy, offset: offset, limit: limit, users: users, userIds: userIds }, initOverrides);
        return await response.value();
    }

    /**
     * Kill the requested tensorboard.
     */
    async killTensorboardRaw(requestParameters: KillTensorboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1KillTensorboardResponse>> {
        if (requestParameters.tensorboardId === null || requestParameters.tensorboardId === undefined) {
            throw new runtime.RequiredError('tensorboardId','Required parameter requestParameters.tensorboardId was null or undefined when calling killTensorboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/tensorboards/{tensorboardId}/kill`.replace(`{${"tensorboardId"}}`, encodeURIComponent(String(requestParameters.tensorboardId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1KillTensorboardResponseFromJSON(jsonValue));
    }

    /**
     * Kill the requested tensorboard.
     */
    async killTensorboard(tensorboardId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1KillTensorboardResponse> {
        const response = await this.killTensorboardRaw({ tensorboardId: tensorboardId }, initOverrides);
        return await response.value();
    }

    /**
     * Launch a tensorboard.
     */
    async launchTensorboardRaw(requestParameters: LaunchTensorboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1LaunchTensorboardResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling launchTensorboard.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/tensorboards`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1LaunchTensorboardRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1LaunchTensorboardResponseFromJSON(jsonValue));
    }

    /**
     * Launch a tensorboard.
     */
    async launchTensorboard(body: V1LaunchTensorboardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1LaunchTensorboardResponse> {
        const response = await this.launchTensorboardRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Set the priority of the requested TensorBoard.
     */
    async setTensorboardPriorityRaw(requestParameters: SetTensorboardPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SetTensorboardPriorityResponse>> {
        if (requestParameters.tensorboardId === null || requestParameters.tensorboardId === undefined) {
            throw new runtime.RequiredError('tensorboardId','Required parameter requestParameters.tensorboardId was null or undefined when calling setTensorboardPriority.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setTensorboardPriority.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/tensorboards/{tensorboardId}/set_priority`.replace(`{${"tensorboardId"}}`, encodeURIComponent(String(requestParameters.tensorboardId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1SetTensorboardPriorityRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SetTensorboardPriorityResponseFromJSON(jsonValue));
    }

    /**
     * Set the priority of the requested TensorBoard.
     */
    async setTensorboardPriority(tensorboardId: string, body: V1SetTensorboardPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SetTensorboardPriorityResponse> {
        const response = await this.setTensorboardPriorityRaw({ tensorboardId: tensorboardId, body: body }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetTensorboardsSortByEnum = {
    UNSPECIFIED: 'SORT_BY_UNSPECIFIED',
    ID: 'SORT_BY_ID',
    DESCRIPTION: 'SORT_BY_DESCRIPTION',
    START_TIME: 'SORT_BY_START_TIME'
} as const;
export type GetTensorboardsSortByEnum = typeof GetTensorboardsSortByEnum[keyof typeof GetTensorboardsSortByEnum];
/**
 * @export
 */
export const GetTensorboardsOrderByEnum = {
    UNSPECIFIED: 'ORDER_BY_UNSPECIFIED',
    ASC: 'ORDER_BY_ASC',
    DESC: 'ORDER_BY_DESC'
} as const;
export type GetTensorboardsOrderByEnum = typeof GetTensorboardsOrderByEnum[keyof typeof GetTensorboardsOrderByEnum];
