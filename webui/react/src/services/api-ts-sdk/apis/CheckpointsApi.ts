/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1DeleteCheckpointsRequest,
  V1GetCheckpointResponse,
  V1PostCheckpointMetadataRequest,
  V1PostCheckpointMetadataResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1DeleteCheckpointsRequestFromJSON,
    V1DeleteCheckpointsRequestToJSON,
    V1GetCheckpointResponseFromJSON,
    V1GetCheckpointResponseToJSON,
    V1PostCheckpointMetadataRequestFromJSON,
    V1PostCheckpointMetadataRequestToJSON,
    V1PostCheckpointMetadataResponseFromJSON,
    V1PostCheckpointMetadataResponseToJSON,
} from '../models';

export interface DeleteCheckpointsRequest {
    body: V1DeleteCheckpointsRequest;
}

export interface GetCheckpointRequest {
    checkpointUuid: string;
}

export interface GetCheckpoint0Request {
    checkpointUuid: string;
}

export interface PostCheckpointMetadataRequest {
    checkpointUuid: string;
    body: V1PostCheckpointMetadataRequest;
}

/**
 * 
 */
export class CheckpointsApi extends runtime.BaseAPI {

    /**
     * Delete Checkpoints.
     */
    async deleteCheckpointsRaw(requestParameters: DeleteCheckpointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling deleteCheckpoints.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/checkpoints`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteCheckpointsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete Checkpoints.
     */
    async deleteCheckpoints(body: V1DeleteCheckpointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteCheckpointsRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Get the requested checkpoint.
     */
    async getCheckpointRaw(requestParameters: GetCheckpointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetCheckpointResponse>> {
        if (requestParameters.checkpointUuid === null || requestParameters.checkpointUuid === undefined) {
            throw new runtime.RequiredError('checkpointUuid','Required parameter requestParameters.checkpointUuid was null or undefined when calling getCheckpoint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/checkpoints/{checkpointUuid}`.replace(`{${"checkpointUuid"}}`, encodeURIComponent(String(requestParameters.checkpointUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetCheckpointResponseFromJSON(jsonValue));
    }

    /**
     * Get the requested checkpoint.
     */
    async getCheckpoint(checkpointUuid: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetCheckpointResponse> {
        const response = await this.getCheckpointRaw({ checkpointUuid: checkpointUuid }, initOverrides);
        return await response.value();
    }

    /**
     * Get a checkpoint\'s contents in a tgz or zip file.
     */
    async getCheckpoint_1Raw(requestParameters: GetCheckpoint0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.checkpointUuid === null || requestParameters.checkpointUuid === undefined) {
            throw new runtime.RequiredError('checkpointUuid','Required parameter requestParameters.checkpointUuid was null or undefined when calling getCheckpoint_1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/checkpoints/{checkpoint_uuid}`.replace(`{${"checkpoint_uuid"}}`, encodeURIComponent(String(requestParameters.checkpointUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a checkpoint\'s contents in a tgz or zip file.
     */
    async getCheckpoint_1(checkpointUuid: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getCheckpoint_1Raw({ checkpointUuid: checkpointUuid }, initOverrides);
    }

    /**
     * Update checkpoint metadata.
     */
    async postCheckpointMetadataRaw(requestParameters: PostCheckpointMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PostCheckpointMetadataResponse>> {
        if (requestParameters.checkpointUuid === null || requestParameters.checkpointUuid === undefined) {
            throw new runtime.RequiredError('checkpointUuid','Required parameter requestParameters.checkpointUuid was null or undefined when calling postCheckpointMetadata.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postCheckpointMetadata.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/checkpoints/{checkpoint.uuid}/metadata`.replace(`{${"checkpoint.uuid"}}`, encodeURIComponent(String(requestParameters.checkpointUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1PostCheckpointMetadataRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PostCheckpointMetadataResponseFromJSON(jsonValue));
    }

    /**
     * Update checkpoint metadata.
     */
    async postCheckpointMetadata(checkpointUuid: string, body: V1PostCheckpointMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PostCheckpointMetadataResponse> {
        const response = await this.postCheckpointMetadataRaw({ checkpointUuid: checkpointUuid, body: body }, initOverrides);
        return await response.value();
    }

}
