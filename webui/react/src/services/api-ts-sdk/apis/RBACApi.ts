/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1AssignRolesRequest,
  V1GetGroupsAndUsersAssignedToWorkspaceResponse,
  V1GetPermissionsSummaryResponse,
  V1GetRolesAssignedToGroupResponse,
  V1GetRolesAssignedToUserResponse,
  V1GetRolesByIDRequest,
  V1GetRolesByIDResponse,
  V1ListRolesRequest,
  V1ListRolesResponse,
  V1RemoveAssignmentsRequest,
  V1SearchRolesAssignableToScopeRequest,
  V1SearchRolesAssignableToScopeResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1AssignRolesRequestFromJSON,
    V1AssignRolesRequestToJSON,
    V1GetGroupsAndUsersAssignedToWorkspaceResponseFromJSON,
    V1GetGroupsAndUsersAssignedToWorkspaceResponseToJSON,
    V1GetPermissionsSummaryResponseFromJSON,
    V1GetPermissionsSummaryResponseToJSON,
    V1GetRolesAssignedToGroupResponseFromJSON,
    V1GetRolesAssignedToGroupResponseToJSON,
    V1GetRolesAssignedToUserResponseFromJSON,
    V1GetRolesAssignedToUserResponseToJSON,
    V1GetRolesByIDRequestFromJSON,
    V1GetRolesByIDRequestToJSON,
    V1GetRolesByIDResponseFromJSON,
    V1GetRolesByIDResponseToJSON,
    V1ListRolesRequestFromJSON,
    V1ListRolesRequestToJSON,
    V1ListRolesResponseFromJSON,
    V1ListRolesResponseToJSON,
    V1RemoveAssignmentsRequestFromJSON,
    V1RemoveAssignmentsRequestToJSON,
    V1SearchRolesAssignableToScopeRequestFromJSON,
    V1SearchRolesAssignableToScopeRequestToJSON,
    V1SearchRolesAssignableToScopeResponseFromJSON,
    V1SearchRolesAssignableToScopeResponseToJSON,
} from '../models';

export interface AssignRolesRequest {
    body: V1AssignRolesRequest;
}

export interface GetGroupsAndUsersAssignedToWorkspaceRequest {
    workspaceId: number;
    name?: string;
}

export interface GetRolesAssignedToGroupRequest {
    groupId: number;
}

export interface GetRolesAssignedToUserRequest {
    userId: number;
}

export interface GetRolesByIDRequest {
    body: V1GetRolesByIDRequest;
}

export interface ListRolesRequest {
    body: V1ListRolesRequest;
}

export interface RemoveAssignmentsRequest {
    body: V1RemoveAssignmentsRequest;
}

export interface SearchRolesAssignableToScopeRequest {
    body: V1SearchRolesAssignableToScopeRequest;
}

/**
 * 
 */
export class RBACApi extends runtime.BaseAPI {

    /**
     * AssignRoles adds a set of role assignments to the system.
     */
    async assignRolesRaw(requestParameters: AssignRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling assignRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/roles/add-assignments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1AssignRolesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * AssignRoles adds a set of role assignments to the system.
     */
    async assignRoles(requestParameters: AssignRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.assignRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get groups and users assigned to a given workspace with what roles are assigned.
     */
    async getGroupsAndUsersAssignedToWorkspaceRaw(requestParameters: GetGroupsAndUsersAssignedToWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetGroupsAndUsersAssignedToWorkspaceResponse>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling getGroupsAndUsersAssignedToWorkspace.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/roles/workspace/{workspaceId}`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetGroupsAndUsersAssignedToWorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * Get groups and users assigned to a given workspace with what roles are assigned.
     */
    async getGroupsAndUsersAssignedToWorkspace(requestParameters: GetGroupsAndUsersAssignedToWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetGroupsAndUsersAssignedToWorkspaceResponse> {
        const response = await this.getGroupsAndUsersAssignedToWorkspaceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all permissions for the logged in user in all scopes.
     */
    async getPermissionsSummaryRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetPermissionsSummaryResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/permissions/summary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetPermissionsSummaryResponseFromJSON(jsonValue));
    }

    /**
     * List all permissions for the logged in user in all scopes.
     */
    async getPermissionsSummary(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetPermissionsSummaryResponse> {
        const response = await this.getPermissionsSummaryRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the roles which are assigned to a group.
     */
    async getRolesAssignedToGroupRaw(requestParameters: GetRolesAssignedToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetRolesAssignedToGroupResponse>> {
        if (requestParameters.groupId === null || requestParameters.groupId === undefined) {
            throw new runtime.RequiredError('groupId','Required parameter requestParameters.groupId was null or undefined when calling getRolesAssignedToGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/roles/search/by-group/{groupId}`.replace(`{${"groupId"}}`, encodeURIComponent(String(requestParameters.groupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetRolesAssignedToGroupResponseFromJSON(jsonValue));
    }

    /**
     * Get the roles which are assigned to a group.
     */
    async getRolesAssignedToGroup(requestParameters: GetRolesAssignedToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetRolesAssignedToGroupResponse> {
        const response = await this.getRolesAssignedToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the roles which are assigned to a user.
     */
    async getRolesAssignedToUserRaw(requestParameters: GetRolesAssignedToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetRolesAssignedToUserResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getRolesAssignedToUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/roles/search/by-user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetRolesAssignedToUserResponseFromJSON(jsonValue));
    }

    /**
     * Get the roles which are assigned to a user.
     */
    async getRolesAssignedToUser(requestParameters: GetRolesAssignedToUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetRolesAssignedToUserResponse> {
        const response = await this.getRolesAssignedToUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a set of roles with the corresponding IDs.
     */
    async getRolesByIDRaw(requestParameters: GetRolesByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetRolesByIDResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling getRolesByID.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/roles/search/by-ids`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1GetRolesByIDRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetRolesByIDResponseFromJSON(jsonValue));
    }

    /**
     * Get a set of roles with the corresponding IDs.
     */
    async getRolesByID(requestParameters: GetRolesByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetRolesByIDResponse> {
        const response = await this.getRolesByIDRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ListRoles returns roles and groups/users granted that role.
     */
    async listRolesRaw(requestParameters: ListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1ListRolesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling listRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/roles/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1ListRolesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1ListRolesResponseFromJSON(jsonValue));
    }

    /**
     * ListRoles returns roles and groups/users granted that role.
     */
    async listRoles(requestParameters: ListRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1ListRolesResponse> {
        const response = await this.listRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RemoveAssignments removes a set of role assignments from the system.
     */
    async removeAssignmentsRaw(requestParameters: RemoveAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling removeAssignments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/roles/remove-assignments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1RemoveAssignmentsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * RemoveAssignments removes a set of role assignments from the system.
     */
    async removeAssignments(requestParameters: RemoveAssignmentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.removeAssignmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for roles assignable to a given scope.
     */
    async searchRolesAssignableToScopeRaw(requestParameters: SearchRolesAssignableToScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SearchRolesAssignableToScopeResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling searchRolesAssignableToScope.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/roles/search/by-assignability`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1SearchRolesAssignableToScopeRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SearchRolesAssignableToScopeResponseFromJSON(jsonValue));
    }

    /**
     * Search for roles assignable to a given scope.
     */
    async searchRolesAssignableToScope(requestParameters: SearchRolesAssignableToScopeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SearchRolesAssignableToScopeResponse> {
        const response = await this.searchRolesAssignableToScopeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
