/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  StreamResultOfV1GetTrialProfilerAvailableSeriesResponse,
  StreamResultOfV1GetTrialProfilerMetricsResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    StreamResultOfV1GetTrialProfilerAvailableSeriesResponseFromJSON,
    StreamResultOfV1GetTrialProfilerAvailableSeriesResponseToJSON,
    StreamResultOfV1GetTrialProfilerMetricsResponseFromJSON,
    StreamResultOfV1GetTrialProfilerMetricsResponseToJSON,
} from '../models';

export interface GetTrialProfilerAvailableSeriesRequest {
    trialId: number;
    follow?: boolean;
}

export interface GetTrialProfilerMetricsRequest {
    labelsTrialId: number;
    labelsName?: string;
    labelsAgentId?: string;
    labelsGpuUuid?: string;
    labelsMetricType?: GetTrialProfilerMetricsLabelsMetricTypeEnum;
    follow?: boolean;
}

/**
 * 
 */
export class ProfilerApi extends runtime.BaseAPI {

    /**
     * Stream the available series in a trial\'s profiler metrics.
     */
    async getTrialProfilerAvailableSeriesRaw(requestParameters: GetTrialProfilerAvailableSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamResultOfV1GetTrialProfilerAvailableSeriesResponse>> {
        if (requestParameters.trialId === null || requestParameters.trialId === undefined) {
            throw new runtime.RequiredError('trialId','Required parameter requestParameters.trialId was null or undefined when calling getTrialProfilerAvailableSeries.');
        }

        const queryParameters: any = {};

        if (requestParameters.follow !== undefined) {
            queryParameters['follow'] = requestParameters.follow;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/trials/{trialId}/profiler/available_series`.replace(`{${"trialId"}}`, encodeURIComponent(String(requestParameters.trialId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamResultOfV1GetTrialProfilerAvailableSeriesResponseFromJSON(jsonValue));
    }

    /**
     * Stream the available series in a trial\'s profiler metrics.
     */
    async getTrialProfilerAvailableSeries(requestParameters: GetTrialProfilerAvailableSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamResultOfV1GetTrialProfilerAvailableSeriesResponse> {
        const response = await this.getTrialProfilerAvailableSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stream trial profiler metrics.
     */
    async getTrialProfilerMetricsRaw(requestParameters: GetTrialProfilerMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamResultOfV1GetTrialProfilerMetricsResponse>> {
        if (requestParameters.labelsTrialId === null || requestParameters.labelsTrialId === undefined) {
            throw new runtime.RequiredError('labelsTrialId','Required parameter requestParameters.labelsTrialId was null or undefined when calling getTrialProfilerMetrics.');
        }

        const queryParameters: any = {};

        if (requestParameters.labelsName !== undefined) {
            queryParameters['labels.name'] = requestParameters.labelsName;
        }

        if (requestParameters.labelsAgentId !== undefined) {
            queryParameters['labels.agentId'] = requestParameters.labelsAgentId;
        }

        if (requestParameters.labelsGpuUuid !== undefined) {
            queryParameters['labels.gpuUuid'] = requestParameters.labelsGpuUuid;
        }

        if (requestParameters.labelsMetricType !== undefined) {
            queryParameters['labels.metricType'] = requestParameters.labelsMetricType;
        }

        if (requestParameters.follow !== undefined) {
            queryParameters['follow'] = requestParameters.follow;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/trials/{labels.trialId}/profiler/metrics`.replace(`{${"labels.trialId"}}`, encodeURIComponent(String(requestParameters.labelsTrialId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamResultOfV1GetTrialProfilerMetricsResponseFromJSON(jsonValue));
    }

    /**
     * Stream trial profiler metrics.
     */
    async getTrialProfilerMetrics(requestParameters: GetTrialProfilerMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamResultOfV1GetTrialProfilerMetricsResponse> {
        const response = await this.getTrialProfilerMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetTrialProfilerMetricsLabelsMetricTypeEnum {
    Unspecified = 'PROFILER_METRIC_TYPE_UNSPECIFIED',
    System = 'PROFILER_METRIC_TYPE_SYSTEM',
    Timing = 'PROFILER_METRIC_TYPE_TIMING',
    Misc = 'PROFILER_METRIC_TYPE_MISC'
}
