/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1DeleteWorkspaceResponse,
  V1GetWorkspaceProjectsResponse,
  V1GetWorkspaceResponse,
  V1GetWorkspacesResponse,
  V1PatchWorkspace,
  V1PatchWorkspaceResponse,
  V1PostWorkspaceRequest,
  V1PostWorkspaceResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1DeleteWorkspaceResponseFromJSON,
    V1DeleteWorkspaceResponseToJSON,
    V1GetWorkspaceProjectsResponseFromJSON,
    V1GetWorkspaceProjectsResponseToJSON,
    V1GetWorkspaceResponseFromJSON,
    V1GetWorkspaceResponseToJSON,
    V1GetWorkspacesResponseFromJSON,
    V1GetWorkspacesResponseToJSON,
    V1PatchWorkspaceFromJSON,
    V1PatchWorkspaceToJSON,
    V1PatchWorkspaceResponseFromJSON,
    V1PatchWorkspaceResponseToJSON,
    V1PostWorkspaceRequestFromJSON,
    V1PostWorkspaceRequestToJSON,
    V1PostWorkspaceResponseFromJSON,
    V1PostWorkspaceResponseToJSON,
} from '../models';

export interface ArchiveWorkspaceRequest {
    id: number;
}

export interface DeleteWorkspaceRequest {
    id: number;
}

export interface GetWorkspaceRequest {
    id: number;
}

export interface GetWorkspaceProjectsRequest {
    id: number;
    sortBy?: GetWorkspaceProjectsSortByEnum;
    orderBy?: GetWorkspaceProjectsOrderByEnum;
    offset?: number;
    limit?: number;
    name?: string;
    archived?: boolean;
    users?: Array<string>;
}

export interface GetWorkspacesRequest {
    sortBy?: GetWorkspacesSortByEnum;
    orderBy?: GetWorkspacesOrderByEnum;
    offset?: number;
    limit?: number;
    name?: string;
    archived?: boolean;
    users?: Array<string>;
    pinned?: boolean;
}

export interface PatchWorkspaceRequest {
    id: number;
    body: V1PatchWorkspace;
}

export interface PinWorkspaceRequest {
    id: number;
}

export interface PostWorkspaceRequest {
    body: V1PostWorkspaceRequest;
}

export interface UnarchiveWorkspaceRequest {
    id: number;
}

export interface UnpinWorkspaceRequest {
    id: number;
}

/**
 * 
 */
export class WorkspacesApi extends runtime.BaseAPI {

    /**
     * Archive a workspace.
     */
    async archiveWorkspaceRaw(requestParameters: ArchiveWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling archiveWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces/{id}/archive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Archive a workspace.
     */
    async archiveWorkspace(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.archiveWorkspaceRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a workspace.
     */
    async deleteWorkspaceRaw(requestParameters: DeleteWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteWorkspaceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteWorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * Delete a workspace.
     */
    async deleteWorkspace(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteWorkspaceResponse> {
        const response = await this.deleteWorkspaceRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get the requested workspace.
     */
    async getWorkspaceRaw(requestParameters: GetWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetWorkspaceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetWorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * Get the requested workspace.
     */
    async getWorkspace(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetWorkspaceResponse> {
        const response = await this.getWorkspaceRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get projects associated with a workspace.
     */
    async getWorkspaceProjectsRaw(requestParameters: GetWorkspaceProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetWorkspaceProjectsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWorkspaceProjects.');
        }

        const queryParameters: any = {};

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }

        if (requestParameters.users) {
            queryParameters['users'] = requestParameters.users;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces/{id}/projects`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetWorkspaceProjectsResponseFromJSON(jsonValue));
    }

    /**
     * Get projects associated with a workspace.
     */
    async getWorkspaceProjects(id: number, sortBy?: GetWorkspaceProjectsSortByEnum, orderBy?: GetWorkspaceProjectsOrderByEnum, offset?: number, limit?: number, name?: string, archived?: boolean, users?: Array<string>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetWorkspaceProjectsResponse> {
        const response = await this.getWorkspaceProjectsRaw({ id: id, sortBy: sortBy, orderBy: orderBy, offset: offset, limit: limit, name: name, archived: archived, users: users }, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of workspaces.
     */
    async getWorkspacesRaw(requestParameters: GetWorkspacesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetWorkspacesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }

        if (requestParameters.users) {
            queryParameters['users'] = requestParameters.users;
        }

        if (requestParameters.pinned !== undefined) {
            queryParameters['pinned'] = requestParameters.pinned;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetWorkspacesResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of workspaces.
     */
    async getWorkspaces(sortBy?: GetWorkspacesSortByEnum, orderBy?: GetWorkspacesOrderByEnum, offset?: number, limit?: number, name?: string, archived?: boolean, users?: Array<string>, pinned?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetWorkspacesResponse> {
        const response = await this.getWorkspacesRaw({ sortBy: sortBy, orderBy: orderBy, offset: offset, limit: limit, name: name, archived: archived, users: users, pinned: pinned }, initOverrides);
        return await response.value();
    }

    /**
     * Update a workspace.
     */
    async patchWorkspaceRaw(requestParameters: PatchWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PatchWorkspaceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchWorkspace.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V1PatchWorkspaceToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PatchWorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * Update a workspace.
     */
    async patchWorkspace(id: number, body: V1PatchWorkspace, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PatchWorkspaceResponse> {
        const response = await this.patchWorkspaceRaw({ id: id, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Pin a workspace.
     */
    async pinWorkspaceRaw(requestParameters: PinWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pinWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces/{id}/pin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Pin a workspace.
     */
    async pinWorkspace(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.pinWorkspaceRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Create a workspace.
     */
    async postWorkspaceRaw(requestParameters: PostWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PostWorkspaceResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1PostWorkspaceRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PostWorkspaceResponseFromJSON(jsonValue));
    }

    /**
     * Create a workspace.
     */
    async postWorkspace(body: V1PostWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PostWorkspaceResponse> {
        const response = await this.postWorkspaceRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Unarchive a workspace.
     */
    async unarchiveWorkspaceRaw(requestParameters: UnarchiveWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling unarchiveWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces/{id}/unarchive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unarchive a workspace.
     */
    async unarchiveWorkspace(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unarchiveWorkspaceRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Unpin a workspace.
     */
    async unpinWorkspaceRaw(requestParameters: UnpinWorkspaceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling unpinWorkspace.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces/{id}/unpin`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unpin a workspace.
     */
    async unpinWorkspace(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unpinWorkspaceRaw({ id: id }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetWorkspaceProjectsSortByEnum = {
    UNSPECIFIED: 'SORT_BY_UNSPECIFIED',
    CREATION_TIME: 'SORT_BY_CREATION_TIME',
    LAST_EXPERIMENT_START_TIME: 'SORT_BY_LAST_EXPERIMENT_START_TIME',
    NAME: 'SORT_BY_NAME',
    DESCRIPTION: 'SORT_BY_DESCRIPTION',
    ID: 'SORT_BY_ID'
} as const;
export type GetWorkspaceProjectsSortByEnum = typeof GetWorkspaceProjectsSortByEnum[keyof typeof GetWorkspaceProjectsSortByEnum];
/**
 * @export
 */
export const GetWorkspaceProjectsOrderByEnum = {
    UNSPECIFIED: 'ORDER_BY_UNSPECIFIED',
    ASC: 'ORDER_BY_ASC',
    DESC: 'ORDER_BY_DESC'
} as const;
export type GetWorkspaceProjectsOrderByEnum = typeof GetWorkspaceProjectsOrderByEnum[keyof typeof GetWorkspaceProjectsOrderByEnum];
/**
 * @export
 */
export const GetWorkspacesSortByEnum = {
    UNSPECIFIED: 'SORT_BY_UNSPECIFIED',
    ID: 'SORT_BY_ID',
    NAME: 'SORT_BY_NAME'
} as const;
export type GetWorkspacesSortByEnum = typeof GetWorkspacesSortByEnum[keyof typeof GetWorkspacesSortByEnum];
/**
 * @export
 */
export const GetWorkspacesOrderByEnum = {
    UNSPECIFIED: 'ORDER_BY_UNSPECIFIED',
    ASC: 'ORDER_BY_ASC',
    DESC: 'ORDER_BY_DESC'
} as const;
export type GetWorkspacesOrderByEnum = typeof GetWorkspacesOrderByEnum[keyof typeof GetWorkspacesOrderByEnum];
