/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1GetCommandResponse,
  V1GetCommandsResponse,
  V1KillCommandResponse,
  V1LaunchCommandRequest,
  V1LaunchCommandResponse,
  V1SetCommandPriorityRequest,
  V1SetCommandPriorityResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1GetCommandResponseFromJSON,
    V1GetCommandResponseToJSON,
    V1GetCommandsResponseFromJSON,
    V1GetCommandsResponseToJSON,
    V1KillCommandResponseFromJSON,
    V1KillCommandResponseToJSON,
    V1LaunchCommandRequestFromJSON,
    V1LaunchCommandRequestToJSON,
    V1LaunchCommandResponseFromJSON,
    V1LaunchCommandResponseToJSON,
    V1SetCommandPriorityRequestFromJSON,
    V1SetCommandPriorityRequestToJSON,
    V1SetCommandPriorityResponseFromJSON,
    V1SetCommandPriorityResponseToJSON,
} from '../models';

export interface GetCommandRequest {
    commandId: string;
}

export interface GetCommandsRequest {
    sortBy?: GetCommandsSortByEnum;
    orderBy?: GetCommandsOrderByEnum;
    offset?: number;
    limit?: number;
    users?: Array<string>;
    userIds?: Array<number>;
}

export interface KillCommandRequest {
    commandId: string;
}

export interface LaunchCommandRequest {
    body: V1LaunchCommandRequest;
}

export interface SetCommandPriorityRequest {
    commandId: string;
    body: V1SetCommandPriorityRequest;
}

/**
 * 
 */
export class CommandsApi extends runtime.BaseAPI {

    /**
     * Get the requested command.
     */
    async getCommandRaw(requestParameters: GetCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetCommandResponse>> {
        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling getCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/commands/{commandId}`.replace(`{${"commandId"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetCommandResponseFromJSON(jsonValue));
    }

    /**
     * Get the requested command.
     */
    async getCommand(commandId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetCommandResponse> {
        const response = await this.getCommandRaw({ commandId: commandId }, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of commands.
     */
    async getCommandsRaw(requestParameters: GetCommandsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetCommandsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.users) {
            queryParameters['users'] = requestParameters.users;
        }

        if (requestParameters.userIds) {
            queryParameters['userIds'] = requestParameters.userIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/commands`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetCommandsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of commands.
     */
    async getCommands(sortBy?: GetCommandsSortByEnum, orderBy?: GetCommandsOrderByEnum, offset?: number, limit?: number, users?: Array<string>, userIds?: Array<number>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetCommandsResponse> {
        const response = await this.getCommandsRaw({ sortBy: sortBy, orderBy: orderBy, offset: offset, limit: limit, users: users, userIds: userIds }, initOverrides);
        return await response.value();
    }

    /**
     * Kill the requested command.
     */
    async killCommandRaw(requestParameters: KillCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1KillCommandResponse>> {
        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling killCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/commands/{commandId}/kill`.replace(`{${"commandId"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1KillCommandResponseFromJSON(jsonValue));
    }

    /**
     * Kill the requested command.
     */
    async killCommand(commandId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1KillCommandResponse> {
        const response = await this.killCommandRaw({ commandId: commandId }, initOverrides);
        return await response.value();
    }

    /**
     * Launch a command.
     */
    async launchCommandRaw(requestParameters: LaunchCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1LaunchCommandResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling launchCommand.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/commands`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1LaunchCommandRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1LaunchCommandResponseFromJSON(jsonValue));
    }

    /**
     * Launch a command.
     */
    async launchCommand(body: V1LaunchCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1LaunchCommandResponse> {
        const response = await this.launchCommandRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Set the priority of the requested command.
     */
    async setCommandPriorityRaw(requestParameters: SetCommandPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SetCommandPriorityResponse>> {
        if (requestParameters.commandId === null || requestParameters.commandId === undefined) {
            throw new runtime.RequiredError('commandId','Required parameter requestParameters.commandId was null or undefined when calling setCommandPriority.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setCommandPriority.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/commands/{commandId}/set_priority`.replace(`{${"commandId"}}`, encodeURIComponent(String(requestParameters.commandId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1SetCommandPriorityRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SetCommandPriorityResponseFromJSON(jsonValue));
    }

    /**
     * Set the priority of the requested command.
     */
    async setCommandPriority(commandId: string, body: V1SetCommandPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SetCommandPriorityResponse> {
        const response = await this.setCommandPriorityRaw({ commandId: commandId, body: body }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCommandsSortByEnum = {
    UNSPECIFIED: 'SORT_BY_UNSPECIFIED',
    ID: 'SORT_BY_ID',
    DESCRIPTION: 'SORT_BY_DESCRIPTION',
    START_TIME: 'SORT_BY_START_TIME'
} as const;
export type GetCommandsSortByEnum = typeof GetCommandsSortByEnum[keyof typeof GetCommandsSortByEnum];
/**
 * @export
 */
export const GetCommandsOrderByEnum = {
    UNSPECIFIED: 'ORDER_BY_UNSPECIFIED',
    ASC: 'ORDER_BY_ASC',
    DESC: 'ORDER_BY_DESC'
} as const;
export type GetCommandsOrderByEnum = typeof GetCommandsOrderByEnum[keyof typeof GetCommandsOrderByEnum];
