/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1AddProjectNoteResponse,
  V1DeleteProjectResponse,
  V1GetProjectResponse,
  V1MoveProjectRequest,
  V1Note,
  V1PatchProject,
  V1PatchProjectResponse,
  V1PostProjectRequest,
  V1PostProjectResponse,
  V1PutProjectNotesRequest,
  V1PutProjectNotesResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1AddProjectNoteResponseFromJSON,
    V1AddProjectNoteResponseToJSON,
    V1DeleteProjectResponseFromJSON,
    V1DeleteProjectResponseToJSON,
    V1GetProjectResponseFromJSON,
    V1GetProjectResponseToJSON,
    V1MoveProjectRequestFromJSON,
    V1MoveProjectRequestToJSON,
    V1NoteFromJSON,
    V1NoteToJSON,
    V1PatchProjectFromJSON,
    V1PatchProjectToJSON,
    V1PatchProjectResponseFromJSON,
    V1PatchProjectResponseToJSON,
    V1PostProjectRequestFromJSON,
    V1PostProjectRequestToJSON,
    V1PostProjectResponseFromJSON,
    V1PostProjectResponseToJSON,
    V1PutProjectNotesRequestFromJSON,
    V1PutProjectNotesRequestToJSON,
    V1PutProjectNotesResponseFromJSON,
    V1PutProjectNotesResponseToJSON,
} from '../models';

export interface AddProjectNoteRequest {
    projectId: number;
    body: V1Note;
}

export interface ArchiveProjectRequest {
    id: number;
}

export interface DeleteProjectRequest {
    id: number;
}

export interface GetProjectRequest {
    id: number;
}

export interface MoveProjectRequest {
    projectId: number;
    body: V1MoveProjectRequest;
}

export interface PatchProjectRequest {
    id: number;
    body: V1PatchProject;
}

export interface PostProjectRequest {
    workspaceId: number;
    body: V1PostProjectRequest;
}

export interface PutProjectNotesRequest {
    projectId: number;
    body: V1PutProjectNotesRequest;
}

export interface UnarchiveProjectRequest {
    id: number;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     * Add a note to a project.
     */
    async addProjectNoteRaw(requestParameters: AddProjectNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1AddProjectNoteResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling addProjectNote.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling addProjectNote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/notes`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1NoteToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1AddProjectNoteResponseFromJSON(jsonValue));
    }

    /**
     * Add a note to a project.
     */
    async addProjectNote(projectId: number, body: V1Note, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1AddProjectNoteResponse> {
        const response = await this.addProjectNoteRaw({ projectId: projectId, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Archive a project.
     */
    async archiveProjectRaw(requestParameters: ArchiveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling archiveProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{id}/archive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Archive a project.
     */
    async archiveProject(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.archiveProjectRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a project.
     */
    async deleteProjectRaw(requestParameters: DeleteProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteProjectResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteProjectResponseFromJSON(jsonValue));
    }

    /**
     * Delete a project.
     */
    async deleteProject(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteProjectResponse> {
        const response = await this.deleteProjectRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get the requested project.
     */
    async getProjectRaw(requestParameters: GetProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetProjectResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetProjectResponseFromJSON(jsonValue));
    }

    /**
     * Get the requested project.
     */
    async getProject(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetProjectResponse> {
        const response = await this.getProjectRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Move a project into a workspace.
     */
    async moveProjectRaw(requestParameters: MoveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling moveProject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling moveProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/move`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1MoveProjectRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Move a project into a workspace.
     */
    async moveProject(projectId: number, body: V1MoveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.moveProjectRaw({ projectId: projectId, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Update a project.
     */
    async patchProjectRaw(requestParameters: PatchProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PatchProjectResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchProject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V1PatchProjectToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PatchProjectResponseFromJSON(jsonValue));
    }

    /**
     * Update a project.
     */
    async patchProject(id: number, body: V1PatchProject, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PatchProjectResponse> {
        const response = await this.patchProjectRaw({ id: id, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create a project.
     */
    async postProjectRaw(requestParameters: PostProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PostProjectResponse>> {
        if (requestParameters.workspaceId === null || requestParameters.workspaceId === undefined) {
            throw new runtime.RequiredError('workspaceId','Required parameter requestParameters.workspaceId was null or undefined when calling postProject.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/workspaces/{workspaceId}/projects`.replace(`{${"workspaceId"}}`, encodeURIComponent(String(requestParameters.workspaceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1PostProjectRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PostProjectResponseFromJSON(jsonValue));
    }

    /**
     * Create a project.
     */
    async postProject(workspaceId: number, body: V1PostProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PostProjectResponse> {
        const response = await this.postProjectRaw({ workspaceId: workspaceId, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Set project notes.
     */
    async putProjectNotesRaw(requestParameters: PutProjectNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PutProjectNotesResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling putProjectNotes.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling putProjectNotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{projectId}/notes`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1PutProjectNotesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PutProjectNotesResponseFromJSON(jsonValue));
    }

    /**
     * Set project notes.
     */
    async putProjectNotes(projectId: number, body: V1PutProjectNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PutProjectNotesResponse> {
        const response = await this.putProjectNotesRaw({ projectId: projectId, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Unarchive a project.
     */
    async unarchiveProjectRaw(requestParameters: UnarchiveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling unarchiveProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/projects/{id}/unarchive`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unarchive a project.
     */
    async unarchiveProject(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.unarchiveProjectRaw({ id: id }, initOverrides);
        return await response.value();
    }

}
