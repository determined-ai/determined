/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1GetNotebookResponse,
  V1GetNotebooksResponse,
  V1KillNotebookResponse,
  V1LaunchNotebookRequest,
  V1LaunchNotebookResponse,
  V1SetNotebookPriorityRequest,
  V1SetNotebookPriorityResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1GetNotebookResponseFromJSON,
    V1GetNotebookResponseToJSON,
    V1GetNotebooksResponseFromJSON,
    V1GetNotebooksResponseToJSON,
    V1KillNotebookResponseFromJSON,
    V1KillNotebookResponseToJSON,
    V1LaunchNotebookRequestFromJSON,
    V1LaunchNotebookRequestToJSON,
    V1LaunchNotebookResponseFromJSON,
    V1LaunchNotebookResponseToJSON,
    V1SetNotebookPriorityRequestFromJSON,
    V1SetNotebookPriorityRequestToJSON,
    V1SetNotebookPriorityResponseFromJSON,
    V1SetNotebookPriorityResponseToJSON,
} from '../models';

export interface GetNotebookRequest {
    notebookId: string;
}

export interface GetNotebooksRequest {
    sortBy?: GetNotebooksSortByEnum;
    orderBy?: GetNotebooksOrderByEnum;
    offset?: number;
    limit?: number;
    users?: Array<string>;
    userIds?: Array<number>;
}

export interface KillNotebookRequest {
    notebookId: string;
}

export interface LaunchNotebookRequest {
    body: V1LaunchNotebookRequest;
}

export interface SetNotebookPriorityRequest {
    notebookId: string;
    body: V1SetNotebookPriorityRequest;
}

/**
 * 
 */
export class NotebooksApi extends runtime.BaseAPI {

    /**
     * Get the requested notebook.
     */
    async getNotebookRaw(requestParameters: GetNotebookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetNotebookResponse>> {
        if (requestParameters.notebookId === null || requestParameters.notebookId === undefined) {
            throw new runtime.RequiredError('notebookId','Required parameter requestParameters.notebookId was null or undefined when calling getNotebook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/notebooks/{notebookId}`.replace(`{${"notebookId"}}`, encodeURIComponent(String(requestParameters.notebookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetNotebookResponseFromJSON(jsonValue));
    }

    /**
     * Get the requested notebook.
     */
    async getNotebook(requestParameters: GetNotebookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetNotebookResponse> {
        const response = await this.getNotebookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of notebooks.
     */
    async getNotebooksRaw(requestParameters: GetNotebooksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetNotebooksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.users) {
            queryParameters['users'] = requestParameters.users;
        }

        if (requestParameters.userIds) {
            queryParameters['userIds'] = requestParameters.userIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/notebooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetNotebooksResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of notebooks.
     */
    async getNotebooks(requestParameters: GetNotebooksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetNotebooksResponse> {
        const response = await this.getNotebooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Kill the requested notebook.
     */
    async killNotebookRaw(requestParameters: KillNotebookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1KillNotebookResponse>> {
        if (requestParameters.notebookId === null || requestParameters.notebookId === undefined) {
            throw new runtime.RequiredError('notebookId','Required parameter requestParameters.notebookId was null or undefined when calling killNotebook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/notebooks/{notebookId}/kill`.replace(`{${"notebookId"}}`, encodeURIComponent(String(requestParameters.notebookId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1KillNotebookResponseFromJSON(jsonValue));
    }

    /**
     * Kill the requested notebook.
     */
    async killNotebook(requestParameters: KillNotebookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1KillNotebookResponse> {
        const response = await this.killNotebookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Launch a notebook.
     */
    async launchNotebookRaw(requestParameters: LaunchNotebookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1LaunchNotebookResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling launchNotebook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/notebooks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1LaunchNotebookRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1LaunchNotebookResponseFromJSON(jsonValue));
    }

    /**
     * Launch a notebook.
     */
    async launchNotebook(requestParameters: LaunchNotebookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1LaunchNotebookResponse> {
        const response = await this.launchNotebookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the priority of the requested notebook.
     */
    async setNotebookPriorityRaw(requestParameters: SetNotebookPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SetNotebookPriorityResponse>> {
        if (requestParameters.notebookId === null || requestParameters.notebookId === undefined) {
            throw new runtime.RequiredError('notebookId','Required parameter requestParameters.notebookId was null or undefined when calling setNotebookPriority.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setNotebookPriority.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/notebooks/{notebookId}/set_priority`.replace(`{${"notebookId"}}`, encodeURIComponent(String(requestParameters.notebookId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1SetNotebookPriorityRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SetNotebookPriorityResponseFromJSON(jsonValue));
    }

    /**
     * Set the priority of the requested notebook.
     */
    async setNotebookPriority(requestParameters: SetNotebookPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SetNotebookPriorityResponse> {
        const response = await this.setNotebookPriorityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
  * @export
  * @enum {string}
  */
export enum GetNotebooksSortByEnum {
    Unspecified = 'SORT_BY_UNSPECIFIED',
    Id = 'SORT_BY_ID',
    Description = 'SORT_BY_DESCRIPTION',
    StartTime = 'SORT_BY_START_TIME'
}
/**
  * @export
  * @enum {string}
  */
export enum GetNotebooksOrderByEnum {
    Unspecified = 'ORDER_BY_UNSPECIFIED',
    Asc = 'ORDER_BY_ASC',
    Desc = 'ORDER_BY_DESC'
}
