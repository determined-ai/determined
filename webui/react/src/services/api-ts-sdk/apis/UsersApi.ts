/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1GetMeResponse,
  V1GetUserByUsernameResponse,
  V1GetUserResponse,
  V1GetUserSettingResponse,
  V1GetUsersResponse,
  V1PatchUser,
  V1PatchUserResponse,
  V1PostUserRequest,
  V1PostUserResponse,
  V1PostUserSettingRequest,
  V1SetUserPasswordResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1GetMeResponseFromJSON,
    V1GetMeResponseToJSON,
    V1GetUserByUsernameResponseFromJSON,
    V1GetUserByUsernameResponseToJSON,
    V1GetUserResponseFromJSON,
    V1GetUserResponseToJSON,
    V1GetUserSettingResponseFromJSON,
    V1GetUserSettingResponseToJSON,
    V1GetUsersResponseFromJSON,
    V1GetUsersResponseToJSON,
    V1PatchUserFromJSON,
    V1PatchUserToJSON,
    V1PatchUserResponseFromJSON,
    V1PatchUserResponseToJSON,
    V1PostUserRequestFromJSON,
    V1PostUserRequestToJSON,
    V1PostUserResponseFromJSON,
    V1PostUserResponseToJSON,
    V1PostUserSettingRequestFromJSON,
    V1PostUserSettingRequestToJSON,
    V1SetUserPasswordResponseFromJSON,
    V1SetUserPasswordResponseToJSON,
} from '../models';

export interface GetUserRequest {
    userId: number;
}

export interface GetUserByUsernameRequest {
    username: string;
}

export interface GetUsersRequest {
    sortBy?: GetUsersSortByEnum;
    orderBy?: GetUsersOrderByEnum;
    offset?: number;
    limit?: number;
}

export interface PatchUserRequest {
    userId: number;
    body: V1PatchUser;
}

export interface PostUserRequest {
    body: V1PostUserRequest;
}

export interface PostUserSettingRequest {
    body: V1PostUserSettingRequest;
}

export interface SetUserPasswordRequest {
    userId: number;
    body: string;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Get the current user.
     */
    async getMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetMeResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetMeResponseFromJSON(jsonValue));
    }

    /**
     * Get the current user.
     */
    async getMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetMeResponse> {
        const response = await this.getMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the requested user.
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetUserResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetUserResponseFromJSON(jsonValue));
    }

    /**
     * Get the requested user.
     */
    async getUser(userId: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetUserResponse> {
        const response = await this.getUserRaw({ userId: userId }, initOverrides);
        return await response.value();
    }

    /**
     * Get the requested user with username.
     */
    async getUserByUsernameRaw(requestParameters: GetUserByUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetUserByUsernameResponse>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling getUserByUsername.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/users/{username}/by-username`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters.username))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetUserByUsernameResponseFromJSON(jsonValue));
    }

    /**
     * Get the requested user with username.
     */
    async getUserByUsername(username: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetUserByUsernameResponse> {
        const response = await this.getUserByUsernameRaw({ username: username }, initOverrides);
        return await response.value();
    }

    /**
     * Get a user\'s settings for website
     */
    async getUserSettingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetUserSettingResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/users/setting`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetUserSettingResponseFromJSON(jsonValue));
    }

    /**
     * Get a user\'s settings for website
     */
    async getUserSetting(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetUserSettingResponse> {
        const response = await this.getUserSettingRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of users.
     */
    async getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetUsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetUsersResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of users.
     */
    async getUsers(sortBy?: GetUsersSortByEnum, orderBy?: GetUsersOrderByEnum, offset?: number, limit?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetUsersResponse> {
        const response = await this.getUsersRaw({ sortBy: sortBy, orderBy: orderBy, offset: offset, limit: limit }, initOverrides);
        return await response.value();
    }

    /**
     * Patch a user\'s fields.
     */
    async patchUserRaw(requestParameters: PatchUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PatchUserResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling patchUser.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: V1PatchUserToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PatchUserResponseFromJSON(jsonValue));
    }

    /**
     * Patch a user\'s fields.
     */
    async patchUser(userId: number, body: V1PatchUser, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PatchUserResponse> {
        const response = await this.patchUserRaw({ userId: userId, body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Create a new user.
     */
    async postUserRaw(requestParameters: PostUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PostUserResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1PostUserRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PostUserResponseFromJSON(jsonValue));
    }

    /**
     * Create a new user.
     */
    async postUser(body: V1PostUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PostUserResponse> {
        const response = await this.postUserRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Patch a user\'s settings for website
     */
    async postUserSettingRaw(requestParameters: PostUserSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postUserSetting.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/users/setting`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1PostUserSettingRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Patch a user\'s settings for website
     */
    async postUserSetting(body: V1PostUserSettingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.postUserSettingRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Reset a user\'s settings for website
     */
    async resetUserSettingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/users/setting/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Reset a user\'s settings for website
     */
    async resetUserSetting(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.resetUserSettingRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set the requested user\'s password.
     */
    async setUserPasswordRaw(requestParameters: SetUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SetUserPasswordResponse>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling setUserPassword.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setUserPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/users/{userId}/password`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SetUserPasswordResponseFromJSON(jsonValue));
    }

    /**
     * Set the requested user\'s password.
     */
    async setUserPassword(userId: number, body: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SetUserPasswordResponse> {
        const response = await this.setUserPasswordRaw({ userId: userId, body: body }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetUsersSortByEnum = {
    UNSPECIFIED: 'SORT_BY_UNSPECIFIED',
    DISPLAY_NAME: 'SORT_BY_DISPLAY_NAME',
    USER_NAME: 'SORT_BY_USER_NAME',
    ADMIN: 'SORT_BY_ADMIN',
    ACTIVE: 'SORT_BY_ACTIVE',
    MODIFIED_TIME: 'SORT_BY_MODIFIED_TIME'
} as const;
export type GetUsersSortByEnum = typeof GetUsersSortByEnum[keyof typeof GetUsersSortByEnum];
/**
 * @export
 */
export const GetUsersOrderByEnum = {
    UNSPECIFIED: 'ORDER_BY_UNSPECIFIED',
    ASC: 'ORDER_BY_ASC',
    DESC: 'ORDER_BY_DESC'
} as const;
export type GetUsersOrderByEnum = typeof GetUsersOrderByEnum[keyof typeof GetUsersOrderByEnum];
