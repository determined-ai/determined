/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1GetShellResponse,
  V1GetShellsResponse,
  V1KillShellResponse,
  V1LaunchShellRequest,
  V1LaunchShellResponse,
  V1SetShellPriorityRequest,
  V1SetShellPriorityResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1GetShellResponseFromJSON,
    V1GetShellResponseToJSON,
    V1GetShellsResponseFromJSON,
    V1GetShellsResponseToJSON,
    V1KillShellResponseFromJSON,
    V1KillShellResponseToJSON,
    V1LaunchShellRequestFromJSON,
    V1LaunchShellRequestToJSON,
    V1LaunchShellResponseFromJSON,
    V1LaunchShellResponseToJSON,
    V1SetShellPriorityRequestFromJSON,
    V1SetShellPriorityRequestToJSON,
    V1SetShellPriorityResponseFromJSON,
    V1SetShellPriorityResponseToJSON,
} from '../models';

export interface GetShellRequest {
    shellId: string;
}

export interface GetShellsRequest {
    sortBy?: GetShellsSortByEnum;
    orderBy?: GetShellsOrderByEnum;
    offset?: number;
    limit?: number;
    users?: Array<string>;
    userIds?: Array<number>;
}

export interface KillShellRequest {
    shellId: string;
}

export interface LaunchShellRequest {
    body: V1LaunchShellRequest;
}

export interface SetShellPriorityRequest {
    shellId: string;
    body: V1SetShellPriorityRequest;
}

/**
 * 
 */
export class ShellsApi extends runtime.BaseAPI {

    /**
     * Get the requested shell.
     */
    async getShellRaw(requestParameters: GetShellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetShellResponse>> {
        if (requestParameters.shellId === null || requestParameters.shellId === undefined) {
            throw new runtime.RequiredError('shellId','Required parameter requestParameters.shellId was null or undefined when calling getShell.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/shells/{shellId}`.replace(`{${"shellId"}}`, encodeURIComponent(String(requestParameters.shellId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetShellResponseFromJSON(jsonValue));
    }

    /**
     * Get the requested shell.
     */
    async getShell(shellId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetShellResponse> {
        const response = await this.getShellRaw({ shellId: shellId }, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of shells.
     */
    async getShellsRaw(requestParameters: GetShellsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetShellsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.users) {
            queryParameters['users'] = requestParameters.users;
        }

        if (requestParameters.userIds) {
            queryParameters['userIds'] = requestParameters.userIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/shells`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetShellsResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of shells.
     */
    async getShells(sortBy?: GetShellsSortByEnum, orderBy?: GetShellsOrderByEnum, offset?: number, limit?: number, users?: Array<string>, userIds?: Array<number>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetShellsResponse> {
        const response = await this.getShellsRaw({ sortBy: sortBy, orderBy: orderBy, offset: offset, limit: limit, users: users, userIds: userIds }, initOverrides);
        return await response.value();
    }

    /**
     * Kill the requested shell.
     */
    async killShellRaw(requestParameters: KillShellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1KillShellResponse>> {
        if (requestParameters.shellId === null || requestParameters.shellId === undefined) {
            throw new runtime.RequiredError('shellId','Required parameter requestParameters.shellId was null or undefined when calling killShell.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/shells/{shellId}/kill`.replace(`{${"shellId"}}`, encodeURIComponent(String(requestParameters.shellId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1KillShellResponseFromJSON(jsonValue));
    }

    /**
     * Kill the requested shell.
     */
    async killShell(shellId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1KillShellResponse> {
        const response = await this.killShellRaw({ shellId: shellId }, initOverrides);
        return await response.value();
    }

    /**
     * Launch a shell.
     */
    async launchShellRaw(requestParameters: LaunchShellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1LaunchShellResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling launchShell.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/shells`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1LaunchShellRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1LaunchShellResponseFromJSON(jsonValue));
    }

    /**
     * Launch a shell.
     */
    async launchShell(body: V1LaunchShellRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1LaunchShellResponse> {
        const response = await this.launchShellRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Set the priority of the requested shell.
     */
    async setShellPriorityRaw(requestParameters: SetShellPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1SetShellPriorityResponse>> {
        if (requestParameters.shellId === null || requestParameters.shellId === undefined) {
            throw new runtime.RequiredError('shellId','Required parameter requestParameters.shellId was null or undefined when calling setShellPriority.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling setShellPriority.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/shells/{shellId}/set_priority`.replace(`{${"shellId"}}`, encodeURIComponent(String(requestParameters.shellId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1SetShellPriorityRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SetShellPriorityResponseFromJSON(jsonValue));
    }

    /**
     * Set the priority of the requested shell.
     */
    async setShellPriority(shellId: string, body: V1SetShellPriorityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1SetShellPriorityResponse> {
        const response = await this.setShellPriorityRaw({ shellId: shellId, body: body }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetShellsSortByEnum = {
    UNSPECIFIED: 'SORT_BY_UNSPECIFIED',
    ID: 'SORT_BY_ID',
    DESCRIPTION: 'SORT_BY_DESCRIPTION',
    START_TIME: 'SORT_BY_START_TIME'
} as const;
export type GetShellsSortByEnum = typeof GetShellsSortByEnum[keyof typeof GetShellsSortByEnum];
/**
 * @export
 */
export const GetShellsOrderByEnum = {
    UNSPECIFIED: 'ORDER_BY_UNSPECIFIED',
    ASC: 'ORDER_BY_ASC',
    DESC: 'ORDER_BY_DESC'
} as const;
export type GetShellsOrderByEnum = typeof GetShellsOrderByEnum[keyof typeof GetShellsOrderByEnum];
