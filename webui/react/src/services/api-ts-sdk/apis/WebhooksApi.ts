/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  V1GetWebhooksResponse,
  V1PostWebhookResponse,
  V1TestWebhookResponse,
  V1Webhook,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    V1GetWebhooksResponseFromJSON,
    V1GetWebhooksResponseToJSON,
    V1PostWebhookResponseFromJSON,
    V1PostWebhookResponseToJSON,
    V1TestWebhookResponseFromJSON,
    V1TestWebhookResponseToJSON,
    V1WebhookFromJSON,
    V1WebhookToJSON,
} from '../models';

export interface DeleteWebhookRequest {
    id: number;
}

export interface PostWebhookRequest {
    body: V1Webhook;
}

export interface TestWebhookRequest {
    id: number;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Delete a webhook.
     */
    async deleteWebhookRaw(requestParameters: DeleteWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/webhooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a webhook.
     */
    async deleteWebhook(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteWebhookRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of webhooks.
     */
    async getWebhooksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1GetWebhooksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/webhooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1GetWebhooksResponseFromJSON(jsonValue));
    }

    /**
     * Get a list of webhooks.
     */
    async getWebhooks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1GetWebhooksResponse> {
        const response = await this.getWebhooksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Create a webhook. TODO(???): Simplify req/response structs?
     */
    async postWebhookRaw(requestParameters: PostWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1PostWebhookResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/webhooks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1WebhookToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1PostWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Create a webhook. TODO(???): Simplify req/response structs?
     */
    async postWebhook(body: V1Webhook, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1PostWebhookResponse> {
        const response = await this.postWebhookRaw({ body: body }, initOverrides);
        return await response.value();
    }

    /**
     * Test a webhook.
     */
    async testWebhookRaw(requestParameters: TestWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1TestWebhookResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling testWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/webhooks/{id}/test`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TestWebhookResponseFromJSON(jsonValue));
    }

    /**
     * Test a webhook.
     */
    async testWebhook(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1TestWebhookResponse> {
        const response = await this.testWebhookRaw({ id: id }, initOverrides);
        return await response.value();
    }

}
