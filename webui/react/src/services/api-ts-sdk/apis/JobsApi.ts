/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RuntimeError,
  StreamResultOfV1TaskLogsFieldsResponse,
  StreamResultOfV1TaskLogsResponse,
} from '../models';
import {
    RuntimeErrorFromJSON,
    RuntimeErrorToJSON,
    StreamResultOfV1TaskLogsFieldsResponseFromJSON,
    StreamResultOfV1TaskLogsFieldsResponseToJSON,
    StreamResultOfV1TaskLogsResponseFromJSON,
    StreamResultOfV1TaskLogsResponseToJSON,
} from '../models';

export interface TaskLogsRequest {
    taskId: string;
    limit?: number;
    follow?: boolean;
    allocationIds?: Array<string>;
    agentIds?: Array<string>;
    containerIds?: Array<string>;
    rankIds?: Array<number>;
    levels?: Array<TaskLogsLevelsEnum>;
    stdtypes?: Array<string>;
    sources?: Array<string>;
    timestampBefore?: Date;
    timestampAfter?: Date;
    orderBy?: TaskLogsOrderByEnum;
    searchText?: string;
}

export interface TaskLogsFieldsRequest {
    taskId: string;
    follow?: boolean;
}

/**
 * 
 */
export class JobsApi extends runtime.BaseAPI {

    /**
     * Stream task logs.
     */
    async taskLogsRaw(requestParameters: TaskLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamResultOfV1TaskLogsResponse>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling taskLogs.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.follow !== undefined) {
            queryParameters['follow'] = requestParameters.follow;
        }

        if (requestParameters.allocationIds) {
            queryParameters['allocationIds'] = requestParameters.allocationIds;
        }

        if (requestParameters.agentIds) {
            queryParameters['agentIds'] = requestParameters.agentIds;
        }

        if (requestParameters.containerIds) {
            queryParameters['containerIds'] = requestParameters.containerIds;
        }

        if (requestParameters.rankIds) {
            queryParameters['rankIds'] = requestParameters.rankIds;
        }

        if (requestParameters.levels) {
            queryParameters['levels'] = requestParameters.levels;
        }

        if (requestParameters.stdtypes) {
            queryParameters['stdtypes'] = requestParameters.stdtypes;
        }

        if (requestParameters.sources) {
            queryParameters['sources'] = requestParameters.sources;
        }

        if (requestParameters.timestampBefore !== undefined) {
            queryParameters['timestampBefore'] = (requestParameters.timestampBefore as any).toISOString();
        }

        if (requestParameters.timestampAfter !== undefined) {
            queryParameters['timestampAfter'] = (requestParameters.timestampAfter as any).toISOString();
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/tasks/{taskId}/logs`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamResultOfV1TaskLogsResponseFromJSON(jsonValue));
    }

    /**
     * Stream task logs.
     */
    async taskLogs(taskId: string, limit?: number, follow?: boolean, allocationIds?: Array<string>, agentIds?: Array<string>, containerIds?: Array<string>, rankIds?: Array<number>, levels?: Array<TaskLogsLevelsEnum>, stdtypes?: Array<string>, sources?: Array<string>, timestampBefore?: Date, timestampAfter?: Date, orderBy?: TaskLogsOrderByEnum, searchText?: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamResultOfV1TaskLogsResponse> {
        const response = await this.taskLogsRaw({ taskId: taskId, limit: limit, follow: follow, allocationIds: allocationIds, agentIds: agentIds, containerIds: containerIds, rankIds: rankIds, levels: levels, stdtypes: stdtypes, sources: sources, timestampBefore: timestampBefore, timestampAfter: timestampAfter, orderBy: orderBy, searchText: searchText }, initOverrides);
        return await response.value();
    }

    /**
     * Stream task log fields.
     */
    async taskLogsFieldsRaw(requestParameters: TaskLogsFieldsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StreamResultOfV1TaskLogsFieldsResponse>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling taskLogsFields.');
        }

        const queryParameters: any = {};

        if (requestParameters.follow !== undefined) {
            queryParameters['follow'] = requestParameters.follow;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/api/v1/tasks/{taskId}/logs/fields`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StreamResultOfV1TaskLogsFieldsResponseFromJSON(jsonValue));
    }

    /**
     * Stream task log fields.
     */
    async taskLogsFields(taskId: string, follow?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StreamResultOfV1TaskLogsFieldsResponse> {
        const response = await this.taskLogsFieldsRaw({ taskId: taskId, follow: follow }, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const TaskLogsLevelsEnum = {
    UNSPECIFIED: 'LOG_LEVEL_UNSPECIFIED',
    TRACE: 'LOG_LEVEL_TRACE',
    DEBUG: 'LOG_LEVEL_DEBUG',
    INFO: 'LOG_LEVEL_INFO',
    WARNING: 'LOG_LEVEL_WARNING',
    ERROR: 'LOG_LEVEL_ERROR',
    CRITICAL: 'LOG_LEVEL_CRITICAL'
} as const;
export type TaskLogsLevelsEnum = typeof TaskLogsLevelsEnum[keyof typeof TaskLogsLevelsEnum];
/**
 * @export
 */
export const TaskLogsOrderByEnum = {
    UNSPECIFIED: 'ORDER_BY_UNSPECIFIED',
    ASC: 'ORDER_BY_ASC',
    DESC: 'ORDER_BY_DESC'
} as const;
export type TaskLogsOrderByEnum = typeof TaskLogsOrderByEnum[keyof typeof TaskLogsOrderByEnum];
