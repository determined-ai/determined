/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * PatchModel is a partial update to a model with only name required.
 * @export
 * @interface V1PatchModel
 */
export interface V1PatchModel {
    /**
     * An updated name for the model.
     * @type {string}
     * @memberof V1PatchModel
     */
    name?: string;
    /**
     * An updated description for the model.
     * @type {string}
     * @memberof V1PatchModel
     */
    description?: string;
    /**
     * An updated metadata object for the model.
     * @type {object}
     * @memberof V1PatchModel
     */
    metadata?: object;
    /**
     * An updated label list for the model.
     * @type {Array<string>}
     * @memberof V1PatchModel
     */
    labels?: Array<string>;
    /**
     * Updated notes associated with this model.
     * @type {string}
     * @memberof V1PatchModel
     */
    notes?: string;
}

/**
 * Check if a given object implements the V1PatchModel interface.
 */
export function instanceOfV1PatchModel(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1PatchModelFromJSON(json: any): V1PatchModel {
    return V1PatchModelFromJSONTyped(json, false);
}

export function V1PatchModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PatchModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
    };
}

export function V1PatchModelToJSON(value?: V1PatchModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'metadata': value.metadata,
        'labels': value.labels,
        'notes': value.notes,
    };
}

