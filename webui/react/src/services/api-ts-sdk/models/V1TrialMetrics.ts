/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Metrics } from './V1Metrics';
import {
    V1MetricsFromJSON,
    V1MetricsFromJSONTyped,
    V1MetricsToJSON,
} from './V1Metrics';

/**
 * Metrics from the trial some duration of training.
 * @export
 * @interface V1TrialMetrics
 */
export interface V1TrialMetrics {
    /**
     * The trial associated with these metrics.
     * @type {number}
     * @memberof V1TrialMetrics
     */
    trialId: number;
    /**
     * The trial run associated with these metrics.
     * @type {number}
     * @memberof V1TrialMetrics
     */
    trialRunId: number;
    /**
     * The number of batches trained on when these metrics were reported.
     * @type {number}
     * @memberof V1TrialMetrics
     */
    stepsCompleted: number;
    /**
     * 
     * @type {V1Metrics}
     * @memberof V1TrialMetrics
     */
    metrics: V1Metrics;
}

/**
 * Check if a given object implements the V1TrialMetrics interface.
 */
export function instanceOfV1TrialMetrics(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "trialId" in value;
    isInstance = isInstance && "trialRunId" in value;
    isInstance = isInstance && "stepsCompleted" in value;
    isInstance = isInstance && "metrics" in value;

    return isInstance;
}

export function V1TrialMetricsFromJSON(json: any): V1TrialMetrics {
    return V1TrialMetricsFromJSONTyped(json, false);
}

export function V1TrialMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialMetrics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trialId': json['trialId'],
        'trialRunId': json['trialRunId'],
        'stepsCompleted': json['stepsCompleted'],
        'metrics': V1MetricsFromJSON(json['metrics']),
    };
}

export function V1TrialMetricsToJSON(value?: V1TrialMetrics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trialId': value.trialId,
        'trialRunId': value.trialRunId,
        'stepsCompleted': value.stepsCompleted,
        'metrics': V1MetricsToJSON(value.metrics),
    };
}

