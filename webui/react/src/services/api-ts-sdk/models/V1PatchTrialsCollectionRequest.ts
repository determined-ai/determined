/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1TrialFilters } from './V1TrialFilters';
import {
    V1TrialFiltersFromJSON,
    V1TrialFiltersFromJSONTyped,
    V1TrialFiltersToJSON,
} from './V1TrialFilters';
import type { V1TrialSorter } from './V1TrialSorter';
import {
    V1TrialSorterFromJSON,
    V1TrialSorterFromJSONTyped,
    V1TrialSorterToJSON,
} from './V1TrialSorter';

/**
 * Request message to PatchTrialsCollection.
 * @export
 * @interface V1PatchTrialsCollectionRequest
 */
export interface V1PatchTrialsCollectionRequest {
    /**
     * The ID of the collection to be patched.
     * @type {number}
     * @memberof V1PatchTrialsCollectionRequest
     */
    id: number;
    /**
     * The new name for the collection.
     * @type {string}
     * @memberof V1PatchTrialsCollectionRequest
     */
    name?: string;
    /**
     * 
     * @type {V1TrialFilters}
     * @memberof V1PatchTrialsCollectionRequest
     */
    filters?: V1TrialFilters;
    /**
     * 
     * @type {V1TrialSorter}
     * @memberof V1PatchTrialsCollectionRequest
     */
    sorter?: V1TrialSorter;
}

/**
 * Check if a given object implements the V1PatchTrialsCollectionRequest interface.
 */
export function instanceOfV1PatchTrialsCollectionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function V1PatchTrialsCollectionRequestFromJSON(json: any): V1PatchTrialsCollectionRequest {
    return V1PatchTrialsCollectionRequestFromJSONTyped(json, false);
}

export function V1PatchTrialsCollectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PatchTrialsCollectionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'filters': !exists(json, 'filters') ? undefined : V1TrialFiltersFromJSON(json['filters']),
        'sorter': !exists(json, 'sorter') ? undefined : V1TrialSorterFromJSON(json['sorter']),
    };
}

export function V1PatchTrialsCollectionRequestToJSON(value?: V1PatchTrialsCollectionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'filters': V1TrialFiltersToJSON(value.filters),
        'sorter': V1TrialSorterToJSON(value.sorter),
    };
}

