/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Pagination } from './V1Pagination';
import {
    V1PaginationFromJSON,
    V1PaginationFromJSONTyped,
    V1PaginationToJSON,
} from './V1Pagination';
import type { V1WorkloadContainer } from './V1WorkloadContainer';
import {
    V1WorkloadContainerFromJSON,
    V1WorkloadContainerFromJSONTyped,
    V1WorkloadContainerToJSON,
} from './V1WorkloadContainer';

/**
 * Response to GetTrialWorkloadsRequest.
 * @export
 * @interface V1GetTrialWorkloadsResponse
 */
export interface V1GetTrialWorkloadsResponse {
    /**
     * The list of returned workloads.
     * @type {Array<V1WorkloadContainer>}
     * @memberof V1GetTrialWorkloadsResponse
     */
    workloads: Array<V1WorkloadContainer>;
    /**
     * 
     * @type {V1Pagination}
     * @memberof V1GetTrialWorkloadsResponse
     */
    pagination: V1Pagination;
}

/**
 * Check if a given object implements the V1GetTrialWorkloadsResponse interface.
 */
export function instanceOfV1GetTrialWorkloadsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "workloads" in value;
    isInstance = isInstance && "pagination" in value;

    return isInstance;
}

export function V1GetTrialWorkloadsResponseFromJSON(json: any): V1GetTrialWorkloadsResponse {
    return V1GetTrialWorkloadsResponseFromJSONTyped(json, false);
}

export function V1GetTrialWorkloadsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1GetTrialWorkloadsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'workloads': ((json['workloads'] as Array<any>).map(V1WorkloadContainerFromJSON)),
        'pagination': V1PaginationFromJSON(json['pagination']),
    };
}

export function V1GetTrialWorkloadsResponseToJSON(value?: V1GetTrialWorkloadsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'workloads': ((value.workloads as Array<any>).map(V1WorkloadContainerToJSON)),
        'pagination': V1PaginationToJSON(value.pagination),
    };
}

