/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request to get a file of model definition.
 * @export
 * @interface V1GetModelDefFileRequest
 */
export interface V1GetModelDefFileRequest {
    /**
     * The id of the experiment.
     * @type {number}
     * @memberof V1GetModelDefFileRequest
     */
    experimentId?: number;
    /**
     * The path of file.
     * @type {string}
     * @memberof V1GetModelDefFileRequest
     */
    path?: string;
}

/**
 * Check if a given object implements the V1GetModelDefFileRequest interface.
 */
export function instanceOfV1GetModelDefFileRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1GetModelDefFileRequestFromJSON(json: any): V1GetModelDefFileRequest {
    return V1GetModelDefFileRequestFromJSONTyped(json, false);
}

export function V1GetModelDefFileRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1GetModelDefFileRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'experimentId': !exists(json, 'experimentId') ? undefined : json['experimentId'],
        'path': !exists(json, 'path') ? undefined : json['path'],
    };
}

export function V1GetModelDefFileRequestToJSON(value?: V1GetModelDefFileRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'experimentId': value.experimentId,
        'path': value.path,
    };
}

