/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Metric value and metadata for a trial that has progress this far.
 * @export
 * @interface V1TrialsSnapshotResponseTrial
 */
export interface V1TrialsSnapshotResponseTrial {
    /**
     * The id of the trial.
     * @type {number}
     * @memberof V1TrialsSnapshotResponseTrial
     */
    trialId: number;
    /**
     * A dictionary of hyperparameter values for this trial.
     * @type {object}
     * @memberof V1TrialsSnapshotResponseTrial
     */
    hparams: object;
    /**
     * The value of the metric in this trial at this point.
     * @type {number}
     * @memberof V1TrialsSnapshotResponseTrial
     */
    metric: number;
    /**
     * The number of batches processed for this particular datapoint.
     * @type {number}
     * @memberof V1TrialsSnapshotResponseTrial
     */
    batchesProcessed: number;
}

/**
 * Check if a given object implements the V1TrialsSnapshotResponseTrial interface.
 */
export function instanceOfV1TrialsSnapshotResponseTrial(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "trialId" in value;
    isInstance = isInstance && "hparams" in value;
    isInstance = isInstance && "metric" in value;
    isInstance = isInstance && "batchesProcessed" in value;

    return isInstance;
}

export function V1TrialsSnapshotResponseTrialFromJSON(json: any): V1TrialsSnapshotResponseTrial {
    return V1TrialsSnapshotResponseTrialFromJSONTyped(json, false);
}

export function V1TrialsSnapshotResponseTrialFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialsSnapshotResponseTrial {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trialId': json['trialId'],
        'hparams': json['hparams'],
        'metric': json['metric'],
        'batchesProcessed': json['batchesProcessed'],
    };
}

export function V1TrialsSnapshotResponseTrialToJSON(value?: V1TrialsSnapshotResponseTrial | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trialId': value.trialId,
        'hparams': value.hparams,
        'metric': value.metric,
        'batchesProcessed': value.batchesProcessed,
    };
}

