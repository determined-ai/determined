/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determineddevicev1Type } from './Determineddevicev1Type';
import {
    Determineddevicev1TypeFromJSON,
    Determineddevicev1TypeFromJSONTyped,
    Determineddevicev1TypeToJSON,
} from './Determineddevicev1Type';

/**
 * Device represents a single computational device on an agent.
 * @export
 * @interface V1Device
 */
export interface V1Device {
    /**
     * The index of the device.
     * @type {number}
     * @memberof V1Device
     */
    id?: number;
    /**
     * The brand name of the device.
     * @type {string}
     * @memberof V1Device
     */
    brand?: string;
    /**
     * The unique UUID of the device.
     * @type {string}
     * @memberof V1Device
     */
    uuid?: string;
    /**
     * 
     * @type {Determineddevicev1Type}
     * @memberof V1Device
     */
    type?: Determineddevicev1Type;
}

/**
 * Check if a given object implements the V1Device interface.
 */
export function instanceOfV1Device(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1DeviceFromJSON(json: any): V1Device {
    return V1DeviceFromJSONTyped(json, false);
}

export function V1DeviceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Device {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'brand': !exists(json, 'brand') ? undefined : json['brand'],
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'type': !exists(json, 'type') ? undefined : Determineddevicev1TypeFromJSON(json['type']),
    };
}

export function V1DeviceToJSON(value?: V1Device | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'brand': value.brand,
        'uuid': value.uuid,
        'type': Determineddevicev1TypeToJSON(value.type),
    };
}

