/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1TrialFilters } from './V1TrialFilters';
import {
    V1TrialFiltersFromJSON,
    V1TrialFiltersFromJSONTyped,
    V1TrialFiltersToJSON,
} from './V1TrialFilters';
import type { V1TrialSorter } from './V1TrialSorter';
import {
    V1TrialSorterFromJSON,
    V1TrialSorterFromJSONTyped,
    V1TrialSorterToJSON,
} from './V1TrialSorter';

/**
 * Request to QueryTrials includes pagination parameters and TrialFilters.
 * @export
 * @interface V1QueryTrialsRequest
 */
export interface V1QueryTrialsRequest {
    /**
     * 
     * @type {V1TrialFilters}
     * @memberof V1QueryTrialsRequest
     */
    filters: V1TrialFilters;
    /**
     * 
     * @type {V1TrialSorter}
     * @memberof V1QueryTrialsRequest
     */
    sorter?: V1TrialSorter;
    /**
     * Offset for pagination.
     * @type {number}
     * @memberof V1QueryTrialsRequest
     */
    offset?: number;
    /**
     * Limit the number of trials. A value of 0 denotes no limit.
     * @type {number}
     * @memberof V1QueryTrialsRequest
     */
    limit?: number;
}

/**
 * Check if a given object implements the V1QueryTrialsRequest interface.
 */
export function instanceOfV1QueryTrialsRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "filters" in value;

    return isInstance;
}

export function V1QueryTrialsRequestFromJSON(json: any): V1QueryTrialsRequest {
    return V1QueryTrialsRequestFromJSONTyped(json, false);
}

export function V1QueryTrialsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1QueryTrialsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'filters': V1TrialFiltersFromJSON(json['filters']),
        'sorter': !exists(json, 'sorter') ? undefined : V1TrialSorterFromJSON(json['sorter']),
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
    };
}

export function V1QueryTrialsRequestToJSON(value?: V1QueryTrialsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'filters': V1TrialFiltersToJSON(value.filters),
        'sorter': V1TrialSorterToJSON(value.sorter),
        'offset': value.offset,
        'limit': value.limit,
    };
}

