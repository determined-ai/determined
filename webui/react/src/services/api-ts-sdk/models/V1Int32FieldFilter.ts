/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Int32 filters.
 * @export
 * @interface V1Int32FieldFilter
 */
export interface V1Int32FieldFilter {
    /**
     * TODO(ilia): add `exact`.
     * Less than.
     * @type {number}
     * @memberof V1Int32FieldFilter
     */
    lt?: number;
    /**
     * Less than or equal.
     * @type {number}
     * @memberof V1Int32FieldFilter
     */
    lte?: number;
    /**
     * Greater than.
     * @type {number}
     * @memberof V1Int32FieldFilter
     */
    gt?: number;
    /**
     * Greater than or equal.
     * @type {number}
     * @memberof V1Int32FieldFilter
     */
    gte?: number;
    /**
     * In a set. `in` is a reserved word in python.
     * @type {Array<number>}
     * @memberof V1Int32FieldFilter
     */
    incl?: Array<number>;
    /**
     * Not in a set.
     * @type {Array<number>}
     * @memberof V1Int32FieldFilter
     */
    notIn?: Array<number>;
}

/**
 * Check if a given object implements the V1Int32FieldFilter interface.
 */
export function instanceOfV1Int32FieldFilter(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1Int32FieldFilterFromJSON(json: any): V1Int32FieldFilter {
    return V1Int32FieldFilterFromJSONTyped(json, false);
}

export function V1Int32FieldFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Int32FieldFilter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'lt': !exists(json, 'lt') ? undefined : json['lt'],
        'lte': !exists(json, 'lte') ? undefined : json['lte'],
        'gt': !exists(json, 'gt') ? undefined : json['gt'],
        'gte': !exists(json, 'gte') ? undefined : json['gte'],
        'incl': !exists(json, 'incl') ? undefined : json['incl'],
        'notIn': !exists(json, 'notIn') ? undefined : json['notIn'],
    };
}

export function V1Int32FieldFilterToJSON(value?: V1Int32FieldFilter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'lt': value.lt,
        'lte': value.lte,
        'gt': value.gt,
        'gte': value.gte,
        'incl': value.incl,
        'notIn': value.notIn,
    };
}

