/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Allocation } from './V1Allocation';
import {
    V1AllocationFromJSON,
    V1AllocationFromJSONTyped,
    V1AllocationToJSON,
} from './V1Allocation';

/**
 * Task is the model for a task in the database.
 * @export
 * @interface V1Task
 */
export interface V1Task {
    /**
     * Unique ID of task.
     * @type {string}
     * @memberof V1Task
     */
    taskId?: string;
    /**
     * Type of Task.
     * @type {string}
     * @memberof V1Task
     */
    taskType?: string;
    /**
     * List of Allocations.
     * @type {Array<V1Allocation>}
     * @memberof V1Task
     */
    allocations?: Array<V1Allocation>;
}

/**
 * Check if a given object implements the V1Task interface.
 */
export function instanceOfV1Task(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1TaskFromJSON(json: any): V1Task {
    return V1TaskFromJSONTyped(json, false);
}

export function V1TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Task {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taskId': !exists(json, 'taskId') ? undefined : json['taskId'],
        'taskType': !exists(json, 'taskType') ? undefined : json['taskType'],
        'allocations': !exists(json, 'allocations') ? undefined : ((json['allocations'] as Array<any>).map(V1AllocationFromJSON)),
    };
}

export function V1TaskToJSON(value?: V1Task | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taskId': value.taskId,
        'taskType': value.taskType,
        'allocations': value.allocations === undefined ? undefined : ((value.allocations as Array<any>).map(V1AllocationToJSON)),
    };
}

