/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedtaskv1State } from './Determinedtaskv1State';
import {
    Determinedtaskv1StateFromJSON,
    Determinedtaskv1StateFromJSONTyped,
    Determinedtaskv1StateToJSON,
} from './Determinedtaskv1State';
import type { V1Container } from './V1Container';
import {
    V1ContainerFromJSON,
    V1ContainerFromJSONTyped,
    V1ContainerToJSON,
} from './V1Container';

/**
 * Shell is an ssh server in a containerized environment.
 * @export
 * @interface V1Shell
 */
export interface V1Shell {
    /**
     * The id of the shell.
     * @type {string}
     * @memberof V1Shell
     */
    id: string;
    /**
     * The description of the shell.
     * @type {string}
     * @memberof V1Shell
     */
    description: string;
    /**
     * 
     * @type {Determinedtaskv1State}
     * @memberof V1Shell
     */
    state: Determinedtaskv1State;
    /**
     * The time the shell was started.
     * @type {Date}
     * @memberof V1Shell
     */
    startTime: Date;
    /**
     * 
     * @type {V1Container}
     * @memberof V1Shell
     */
    container?: V1Container;
    /**
     * The private key for this shell.
     * @type {string}
     * @memberof V1Shell
     */
    privateKey?: string;
    /**
     * The public key for this shell.
     * @type {string}
     * @memberof V1Shell
     */
    publicKey?: string;
    /**
     * The display name of the user that created the shell.
     * @type {string}
     * @memberof V1Shell
     */
    displayName?: string;
    /**
     * The id of the user that created the shell.
     * @type {number}
     * @memberof V1Shell
     */
    userId?: number;
    /**
     * The username of the user that created the shell.
     * @type {string}
     * @memberof V1Shell
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof V1Shell
     */
    resourcePool: string;
    /**
     * 
     * @type {string}
     * @memberof V1Shell
     */
    exitStatus?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof V1Shell
     */
    addresses?: Array<object>;
    /**
     * 
     * @type {object}
     * @memberof V1Shell
     */
    agentUserGroup?: object;
    /**
     * The associated job id.
     * @type {string}
     * @memberof V1Shell
     */
    jobId: string;
}

/**
 * Check if a given object implements the V1Shell interface.
 */
export function instanceOfV1Shell(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "resourcePool" in value;
    isInstance = isInstance && "jobId" in value;

    return isInstance;
}

export function V1ShellFromJSON(json: any): V1Shell {
    return V1ShellFromJSONTyped(json, false);
}

export function V1ShellFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Shell {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'description': json['description'],
        'state': Determinedtaskv1StateFromJSON(json['state']),
        'startTime': (new Date(json['startTime'])),
        'container': !exists(json, 'container') ? undefined : V1ContainerFromJSON(json['container']),
        'privateKey': !exists(json, 'privateKey') ? undefined : json['privateKey'],
        'publicKey': !exists(json, 'publicKey') ? undefined : json['publicKey'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'username': json['username'],
        'resourcePool': json['resourcePool'],
        'exitStatus': !exists(json, 'exitStatus') ? undefined : json['exitStatus'],
        'addresses': !exists(json, 'addresses') ? undefined : json['addresses'],
        'agentUserGroup': !exists(json, 'agentUserGroup') ? undefined : json['agentUserGroup'],
        'jobId': json['jobId'],
    };
}

export function V1ShellToJSON(value?: V1Shell | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'description': value.description,
        'state': Determinedtaskv1StateToJSON(value.state),
        'startTime': (value.startTime.toISOString()),
        'container': V1ContainerToJSON(value.container),
        'privateKey': value.privateKey,
        'publicKey': value.publicKey,
        'displayName': value.displayName,
        'userId': value.userId,
        'username': value.username,
        'resourcePool': value.resourcePool,
        'exitStatus': value.exitStatus,
        'addresses': value.addresses,
        'agentUserGroup': value.agentUserGroup,
        'jobId': value.jobId,
    };
}

