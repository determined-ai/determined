/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UpdateTrialTagsRequestIds } from './UpdateTrialTagsRequestIds';
import {
    UpdateTrialTagsRequestIdsFromJSON,
    UpdateTrialTagsRequestIdsFromJSONTyped,
    UpdateTrialTagsRequestIdsToJSON,
} from './UpdateTrialTagsRequestIds';
import type { V1TrialFilters } from './V1TrialFilters';
import {
    V1TrialFiltersFromJSON,
    V1TrialFiltersFromJSONTyped,
    V1TrialFiltersToJSON,
} from './V1TrialFilters';
import type { V1TrialPatch } from './V1TrialPatch';
import {
    V1TrialPatchFromJSON,
    V1TrialPatchFromJSONTyped,
    V1TrialPatchToJSON,
} from './V1TrialPatch';

/**
 * Request to patch trials. Can either specify a set of filters or
 * set of trial ids as the patch target.
 * @export
 * @interface V1UpdateTrialTagsRequest
 */
export interface V1UpdateTrialTagsRequest {
    /**
     * 
     * @type {V1TrialFilters}
     * @memberof V1UpdateTrialTagsRequest
     */
    filters?: V1TrialFilters;
    /**
     * 
     * @type {UpdateTrialTagsRequestIds}
     * @memberof V1UpdateTrialTagsRequest
     */
    trial?: UpdateTrialTagsRequestIds;
    /**
     * 
     * @type {V1TrialPatch}
     * @memberof V1UpdateTrialTagsRequest
     */
    patch: V1TrialPatch;
}

/**
 * Check if a given object implements the V1UpdateTrialTagsRequest interface.
 */
export function instanceOfV1UpdateTrialTagsRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "patch" in value;

    return isInstance;
}

export function V1UpdateTrialTagsRequestFromJSON(json: any): V1UpdateTrialTagsRequest {
    return V1UpdateTrialTagsRequestFromJSONTyped(json, false);
}

export function V1UpdateTrialTagsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1UpdateTrialTagsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'filters': !exists(json, 'filters') ? undefined : V1TrialFiltersFromJSON(json['filters']),
        'trial': !exists(json, 'trial') ? undefined : UpdateTrialTagsRequestIdsFromJSON(json['trial']),
        'patch': V1TrialPatchFromJSON(json['patch']),
    };
}

export function V1UpdateTrialTagsRequestToJSON(value?: V1UpdateTrialTagsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'filters': V1TrialFiltersToJSON(value.filters),
        'trial': UpdateTrialTagsRequestIdsToJSON(value.trial),
        'patch': V1TrialPatchToJSON(value.patch),
    };
}

