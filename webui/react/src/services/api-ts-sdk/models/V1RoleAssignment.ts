/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Role } from './V1Role';
import {
    V1RoleFromJSON,
    V1RoleFromJSONTyped,
    V1RoleToJSON,
} from './V1Role';

/**
 * RoleAssignment contains information about the scope
 * of the role.
 * @export
 * @interface V1RoleAssignment
 */
export interface V1RoleAssignment {
    /**
     * 
     * @type {V1Role}
     * @memberof V1RoleAssignment
     */
    role: V1Role;
    /**
     * The id of the workspace the role belongs to. Empty for cluster-wide scope.
     * @type {number}
     * @memberof V1RoleAssignment
     */
    scopeWorkspaceId?: number;
    /**
     * Whether the role is assigned cluster-wide.
     * @type {boolean}
     * @memberof V1RoleAssignment
     */
    scopeCluster?: boolean;
}

/**
 * Check if a given object implements the V1RoleAssignment interface.
 */
export function instanceOfV1RoleAssignment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "role" in value;

    return isInstance;
}

export function V1RoleAssignmentFromJSON(json: any): V1RoleAssignment {
    return V1RoleAssignmentFromJSONTyped(json, false);
}

export function V1RoleAssignmentFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1RoleAssignment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'role': V1RoleFromJSON(json['role']),
        'scopeWorkspaceId': !exists(json, 'scopeWorkspaceId') ? undefined : json['scopeWorkspaceId'],
        'scopeCluster': !exists(json, 'scopeCluster') ? undefined : json['scopeCluster'],
    };
}

export function V1RoleAssignmentToJSON(value?: V1RoleAssignment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'role': V1RoleToJSON(value.role),
        'scopeWorkspaceId': value.scopeWorkspaceId,
        'scopeCluster': value.scopeCluster,
    };
}

