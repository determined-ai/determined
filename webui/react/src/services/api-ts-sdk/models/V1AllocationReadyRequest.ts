/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Mark the given task as ready.
 * @export
 * @interface V1AllocationReadyRequest
 */
export interface V1AllocationReadyRequest {
    /**
     * The id of the allocation.
     * @type {string}
     * @memberof V1AllocationReadyRequest
     */
    allocationId?: string;
}

/**
 * Check if a given object implements the V1AllocationReadyRequest interface.
 */
export function instanceOfV1AllocationReadyRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1AllocationReadyRequestFromJSON(json: any): V1AllocationReadyRequest {
    return V1AllocationReadyRequestFromJSONTyped(json, false);
}

export function V1AllocationReadyRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1AllocationReadyRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allocationId': !exists(json, 'allocationId') ? undefined : json['allocationId'],
    };
}

export function V1AllocationReadyRequestToJSON(value?: V1AllocationReadyRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allocationId': value.allocationId,
    };
}

