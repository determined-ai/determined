/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedexperimentv1State } from './Determinedexperimentv1State';
import {
    Determinedexperimentv1StateFromJSON,
    Determinedexperimentv1StateFromJSONTyped,
    Determinedexperimentv1StateToJSON,
} from './Determinedexperimentv1State';

/**
 * Experiment is a collection of one or more trials that are exploring a
 * user-defined hyperparameter space.
 * @export
 * @interface V1Experiment
 */
export interface V1Experiment {
    /**
     * The id of the experiment.
     * @type {number}
     * @memberof V1Experiment
     */
    id: number;
    /**
     * The description of the experiment.
     * @type {string}
     * @memberof V1Experiment
     */
    description?: string;
    /**
     * Labels attached to the experiment.
     * @type {Array<string>}
     * @memberof V1Experiment
     */
    labels?: Array<string>;
    /**
     * The time the experiment was started.
     * @type {Date}
     * @memberof V1Experiment
     */
    startTime: Date;
    /**
     * The time the experiment ended if the experiment is stopped.
     * @type {Date}
     * @memberof V1Experiment
     */
    endTime?: Date;
    /**
     * 
     * @type {Determinedexperimentv1State}
     * @memberof V1Experiment
     */
    state: Determinedexperimentv1State;
    /**
     * Boolean denoting whether the experiment was archived.
     * @type {boolean}
     * @memberof V1Experiment
     */
    archived: boolean;
    /**
     * The number of trials linked to the experiment.
     * @type {number}
     * @memberof V1Experiment
     */
    numTrials: number;
    /**
     * The ids of trials linked to the experiment.
     * @type {Array<number>}
     * @memberof V1Experiment
     */
    trialIds?: Array<number>;
    /**
     * The display name of the user that created the experiment.
     * @type {string}
     * @memberof V1Experiment
     */
    displayName?: string;
    /**
     * The id of the user that created the experiment.
     * @type {number}
     * @memberof V1Experiment
     */
    userId?: number;
    /**
     * The username of the user that created the experiment.
     * @type {string}
     * @memberof V1Experiment
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof V1Experiment
     */
    resourcePool?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Experiment
     */
    searcherType: string;
    /**
     * The experiment name.
     * @type {string}
     * @memberof V1Experiment
     */
    name: string;
    /**
     * The experiment notes.
     * @type {string}
     * @memberof V1Experiment
     */
    notes?: string;
    /**
     * Associated job's id.
     * @type {string}
     * @memberof V1Experiment
     */
    jobId: string;
    /**
     * Original id of a forked or continued experiment.
     * @type {number}
     * @memberof V1Experiment
     */
    forkedFrom?: number;
    /**
     * The current progress of a running experiment.
     * @type {number}
     * @memberof V1Experiment
     */
    progress?: number;
    /**
     * The id of the project associated with this experiment.
     * @type {number}
     * @memberof V1Experiment
     */
    projectId: number;
    /**
     * The name of the project associated with this experiment.
     * @type {string}
     * @memberof V1Experiment
     */
    projectName?: string;
    /**
     * The id of the workspace associated with this experiment.
     * @type {number}
     * @memberof V1Experiment
     */
    workspaceId?: number;
    /**
     * The name of the workspace associated with this experiment.
     * @type {string}
     * @memberof V1Experiment
     */
    workspaceName?: string;
    /**
     * The archived status of the parent project (can be inherited from
     * workspace).
     * @type {boolean}
     * @memberof V1Experiment
     */
    parentArchived?: boolean;
    /**
     * The configuration of the experiment.
     * @type {object}
     * @memberof V1Experiment
     */
    config: object;
    /**
     * The original configuration that the user submitted.
     * @type {string}
     * @memberof V1Experiment
     */
    originalConfig: string;
    /**
     * The id of the user who created the parent project.
     * @type {number}
     * @memberof V1Experiment
     */
    projectOwnerId: number;
}

/**
 * Check if a given object implements the V1Experiment interface.
 */
export function instanceOfV1Experiment(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "archived" in value;
    isInstance = isInstance && "numTrials" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "searcherType" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "jobId" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "config" in value;
    isInstance = isInstance && "originalConfig" in value;
    isInstance = isInstance && "projectOwnerId" in value;

    return isInstance;
}

export function V1ExperimentFromJSON(json: any): V1Experiment {
    return V1ExperimentFromJSONTyped(json, false);
}

export function V1ExperimentFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Experiment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'startTime': (new Date(json['startTime'])),
        'endTime': !exists(json, 'endTime') ? undefined : (new Date(json['endTime'])),
        'state': Determinedexperimentv1StateFromJSON(json['state']),
        'archived': json['archived'],
        'numTrials': json['numTrials'],
        'trialIds': !exists(json, 'trialIds') ? undefined : json['trialIds'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'username': json['username'],
        'resourcePool': !exists(json, 'resourcePool') ? undefined : json['resourcePool'],
        'searcherType': json['searcherType'],
        'name': json['name'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'jobId': json['jobId'],
        'forkedFrom': !exists(json, 'forkedFrom') ? undefined : json['forkedFrom'],
        'progress': !exists(json, 'progress') ? undefined : json['progress'],
        'projectId': json['projectId'],
        'projectName': !exists(json, 'projectName') ? undefined : json['projectName'],
        'workspaceId': !exists(json, 'workspaceId') ? undefined : json['workspaceId'],
        'workspaceName': !exists(json, 'workspaceName') ? undefined : json['workspaceName'],
        'parentArchived': !exists(json, 'parentArchived') ? undefined : json['parentArchived'],
        'config': json['config'],
        'originalConfig': json['originalConfig'],
        'projectOwnerId': json['projectOwnerId'],
    };
}

export function V1ExperimentToJSON(value?: V1Experiment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'description': value.description,
        'labels': value.labels,
        'startTime': (value.startTime.toISOString()),
        'endTime': value.endTime === undefined ? undefined : (value.endTime.toISOString()),
        'state': Determinedexperimentv1StateToJSON(value.state),
        'archived': value.archived,
        'numTrials': value.numTrials,
        'trialIds': value.trialIds,
        'displayName': value.displayName,
        'userId': value.userId,
        'username': value.username,
        'resourcePool': value.resourcePool,
        'searcherType': value.searcherType,
        'name': value.name,
        'notes': value.notes,
        'jobId': value.jobId,
        'forkedFrom': value.forkedFrom,
        'progress': value.progress,
        'projectId': value.projectId,
        'projectName': value.projectName,
        'workspaceId': value.workspaceId,
        'workspaceName': value.workspaceName,
        'parentArchived': value.parentArchived,
        'config': value.config,
        'originalConfig': value.originalConfig,
        'projectOwnerId': value.projectOwnerId,
    };
}

