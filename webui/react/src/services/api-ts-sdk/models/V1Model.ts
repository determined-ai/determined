/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Model is a named collection of model versions.
 * @export
 * @interface V1Model
 */
export interface V1Model {
    /**
     * The name of the model.
     * @type {string}
     * @memberof V1Model
     */
    name: string;
    /**
     * The description of the model.
     * @type {string}
     * @memberof V1Model
     */
    description?: string;
    /**
     * The user-defined metadata of the model.
     * @type {object}
     * @memberof V1Model
     */
    metadata: object;
    /**
     * The time the model was created.
     * @type {Date}
     * @memberof V1Model
     */
    creationTime: Date;
    /**
     * The time the model was last updated.
     * @type {Date}
     * @memberof V1Model
     */
    lastUpdatedTime: Date;
    /**
     * The id of this model.
     * @type {number}
     * @memberof V1Model
     */
    id: number;
    /**
     * The number of versions associated with this model.
     * @type {number}
     * @memberof V1Model
     */
    numVersions: number;
    /**
     * Labels associated with this model.
     * @type {Array<string>}
     * @memberof V1Model
     */
    labels?: Array<string>;
    /**
     * Username of the user who created this model.
     * @type {string}
     * @memberof V1Model
     */
    username: string;
    /**
     * Id of the user who created this model.
     * @type {number}
     * @memberof V1Model
     */
    userId: number;
    /**
     * Whether this model is archived or not.
     * @type {boolean}
     * @memberof V1Model
     */
    archived: boolean;
    /**
     * Notes associated with this model.
     * @type {string}
     * @memberof V1Model
     */
    notes?: string;
}

/**
 * Check if a given object implements the V1Model interface.
 */
export function instanceOfV1Model(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "creationTime" in value;
    isInstance = isInstance && "lastUpdatedTime" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "numVersions" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "archived" in value;

    return isInstance;
}

export function V1ModelFromJSON(json: any): V1Model {
    return V1ModelFromJSONTyped(json, false);
}

export function V1ModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Model {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'metadata': json['metadata'],
        'creationTime': (new Date(json['creationTime'])),
        'lastUpdatedTime': (new Date(json['lastUpdatedTime'])),
        'id': json['id'],
        'numVersions': json['numVersions'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'username': json['username'],
        'userId': json['userId'],
        'archived': json['archived'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
    };
}

export function V1ModelToJSON(value?: V1Model | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'metadata': value.metadata,
        'creationTime': (value.creationTime.toISOString()),
        'lastUpdatedTime': (value.lastUpdatedTime.toISOString()),
        'id': value.id,
        'numVersions': value.numVersions,
        'labels': value.labels,
        'username': value.username,
        'userId': value.userId,
        'archived': value.archived,
        'notes': value.notes,
    };
}

