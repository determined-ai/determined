/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Response to TaskLogsFieldsRequest.
 * @export
 * @interface V1TaskLogsFieldsResponse
 */
export interface V1TaskLogsFieldsResponse {
    /**
     * The distint allocation IDs present in the logs.
     * @type {Array<string>}
     * @memberof V1TaskLogsFieldsResponse
     */
    allocationIds?: Array<string>;
    /**
     * The distinct agent IDs present in the logs.
     * @type {Array<string>}
     * @memberof V1TaskLogsFieldsResponse
     */
    agentIds?: Array<string>;
    /**
     * The distinct container IDs present in the logs.
     * @type {Array<string>}
     * @memberof V1TaskLogsFieldsResponse
     */
    containerIds?: Array<string>;
    /**
     * The distinct rank IDs present in the logs.
     * @type {Array<number>}
     * @memberof V1TaskLogsFieldsResponse
     */
    rankIds?: Array<number>;
    /**
     * The distinct stdtypes present in the logs.
     * @type {Array<string>}
     * @memberof V1TaskLogsFieldsResponse
     */
    stdtypes?: Array<string>;
    /**
     * The distinct sources present in the logs.
     * @type {Array<string>}
     * @memberof V1TaskLogsFieldsResponse
     */
    sources?: Array<string>;
}

/**
 * Check if a given object implements the V1TaskLogsFieldsResponse interface.
 */
export function instanceOfV1TaskLogsFieldsResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1TaskLogsFieldsResponseFromJSON(json: any): V1TaskLogsFieldsResponse {
    return V1TaskLogsFieldsResponseFromJSONTyped(json, false);
}

export function V1TaskLogsFieldsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TaskLogsFieldsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allocationIds': !exists(json, 'allocationIds') ? undefined : json['allocationIds'],
        'agentIds': !exists(json, 'agentIds') ? undefined : json['agentIds'],
        'containerIds': !exists(json, 'containerIds') ? undefined : json['containerIds'],
        'rankIds': !exists(json, 'rankIds') ? undefined : json['rankIds'],
        'stdtypes': !exists(json, 'stdtypes') ? undefined : json['stdtypes'],
        'sources': !exists(json, 'sources') ? undefined : json['sources'],
    };
}

export function V1TaskLogsFieldsResponseToJSON(value?: V1TaskLogsFieldsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allocationIds': value.allocationIds,
        'agentIds': value.agentIds,
        'containerIds': value.containerIds,
        'rankIds': value.rankIds,
        'stdtypes': value.stdtypes,
        'sources': value.sources,
    };
}

