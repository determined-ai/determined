/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Arguments to a notify container running.
 * @export
 * @interface V1NotifyContainerRunningRequest
 */
export interface V1NotifyContainerRunningRequest {
    /**
     * The ID of the allocation.
     * @type {string}
     * @memberof V1NotifyContainerRunningRequest
     */
    allocationId: string;
    /**
     * The UUID of the participant in a notify container running message.
     * @type {string}
     * @memberof V1NotifyContainerRunningRequest
     */
    requestUuid?: string;
    /**
     * The number of process to wait for.
     * @type {number}
     * @memberof V1NotifyContainerRunningRequest
     */
    numPeers?: number;
    /**
     * The container's rank.
     * @type {number}
     * @memberof V1NotifyContainerRunningRequest
     */
    rank?: number;
    /**
     * 
     * @type {string}
     * @memberof V1NotifyContainerRunningRequest
     */
    nodeName?: string;
    /**
     * The data from this process.
     * @type {object}
     * @memberof V1NotifyContainerRunningRequest
     */
    data: object;
}

/**
 * Check if a given object implements the V1NotifyContainerRunningRequest interface.
 */
export function instanceOfV1NotifyContainerRunningRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "allocationId" in value;
    isInstance = isInstance && "data" in value;

    return isInstance;
}

export function V1NotifyContainerRunningRequestFromJSON(json: any): V1NotifyContainerRunningRequest {
    return V1NotifyContainerRunningRequestFromJSONTyped(json, false);
}

export function V1NotifyContainerRunningRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1NotifyContainerRunningRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allocationId': json['allocationId'],
        'requestUuid': !exists(json, 'requestUuid') ? undefined : json['requestUuid'],
        'numPeers': !exists(json, 'numPeers') ? undefined : json['numPeers'],
        'rank': !exists(json, 'rank') ? undefined : json['rank'],
        'nodeName': !exists(json, 'nodeName') ? undefined : json['nodeName'],
        'data': json['data'],
    };
}

export function V1NotifyContainerRunningRequestToJSON(value?: V1NotifyContainerRunningRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allocationId': value.allocationId,
        'requestUuid': value.requestUuid,
        'numPeers': value.numPeers,
        'rank': value.rank,
        'nodeName': value.nodeName,
        'data': value.data,
    };
}

