/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Arguments to an all gather.
 * @export
 * @interface V1AllocationAllGatherRequest
 */
export interface V1AllocationAllGatherRequest {
    /**
     * The ID of the allocation.
     * @type {string}
     * @memberof V1AllocationAllGatherRequest
     */
    allocationId: string;
    /**
     * The UUID of the participant in an all gather.
     * @type {string}
     * @memberof V1AllocationAllGatherRequest
     */
    requestUuid?: string;
    /**
     * The number of process to wait for.
     * @type {number}
     * @memberof V1AllocationAllGatherRequest
     */
    numPeers?: number;
    /**
     * The data from this process.
     * @type {object}
     * @memberof V1AllocationAllGatherRequest
     */
    data: object;
}

/**
 * Check if a given object implements the V1AllocationAllGatherRequest interface.
 */
export function instanceOfV1AllocationAllGatherRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "allocationId" in value;
    isInstance = isInstance && "data" in value;

    return isInstance;
}

export function V1AllocationAllGatherRequestFromJSON(json: any): V1AllocationAllGatherRequest {
    return V1AllocationAllGatherRequestFromJSONTyped(json, false);
}

export function V1AllocationAllGatherRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1AllocationAllGatherRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allocationId': json['allocationId'],
        'requestUuid': !exists(json, 'requestUuid') ? undefined : json['requestUuid'],
        'numPeers': !exists(json, 'numPeers') ? undefined : json['numPeers'],
        'data': json['data'],
    };
}

export function V1AllocationAllGatherRequestToJSON(value?: V1AllocationAllGatherRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allocationId': value.allocationId,
        'requestUuid': value.requestUuid,
        'numPeers': value.numPeers,
        'data': value.data,
    };
}

