/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ValidationHistoryEntry is a single entry for a validation history for an
 * experiment.
 * @export
 * @interface V1ValidationHistoryEntry
 */
export interface V1ValidationHistoryEntry {
    /**
     * The id for the trial associated with this validation entry.
     * @type {number}
     * @memberof V1ValidationHistoryEntry
     */
    trialId: number;
    /**
     * The time at which the completed validation was reported.
     * @type {Date}
     * @memberof V1ValidationHistoryEntry
     */
    endTime: Date;
    /**
     * The value of the `searcher.metric`, indicated by the experiment config, for
     * the validation.
     * @type {number}
     * @memberof V1ValidationHistoryEntry
     */
    searcherMetric: number;
}

/**
 * Check if a given object implements the V1ValidationHistoryEntry interface.
 */
export function instanceOfV1ValidationHistoryEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "trialId" in value;
    isInstance = isInstance && "endTime" in value;
    isInstance = isInstance && "searcherMetric" in value;

    return isInstance;
}

export function V1ValidationHistoryEntryFromJSON(json: any): V1ValidationHistoryEntry {
    return V1ValidationHistoryEntryFromJSONTyped(json, false);
}

export function V1ValidationHistoryEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ValidationHistoryEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trialId': json['trialId'],
        'endTime': (new Date(json['endTime'])),
        'searcherMetric': json['searcherMetric'],
    };
}

export function V1ValidationHistoryEntryToJSON(value?: V1ValidationHistoryEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trialId': value.trialId,
        'endTime': (value.endTime.toISOString()),
        'searcherMetric': value.searcherMetric,
    };
}

