/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1DataPoint } from './V1DataPoint';
import {
    V1DataPointFromJSON,
    V1DataPointFromJSONTyped,
    V1DataPointToJSON,
} from './V1DataPoint';

/**
 * Series of data points for an experiment trial.
 * @export
 * @interface ExpCompareTrialsSampleResponseExpTrial
 */
export interface ExpCompareTrialsSampleResponseExpTrial {
    /**
     * The id of the trial.
     * @type {number}
     * @memberof ExpCompareTrialsSampleResponseExpTrial
     */
    trialId: number;
    /**
     * Hyperparamters values for this specific trial.
     * @type {object}
     * @memberof ExpCompareTrialsSampleResponseExpTrial
     */
    hparams: object;
    /**
     * Data related to a trial.
     * @type {Array<V1DataPoint>}
     * @memberof ExpCompareTrialsSampleResponseExpTrial
     */
    data: Array<V1DataPoint>;
    /**
     * 
     * @type {number}
     * @memberof ExpCompareTrialsSampleResponseExpTrial
     */
    experimentId: number;
}

/**
 * Check if a given object implements the ExpCompareTrialsSampleResponseExpTrial interface.
 */
export function instanceOfExpCompareTrialsSampleResponseExpTrial(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "trialId" in value;
    isInstance = isInstance && "hparams" in value;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "experimentId" in value;

    return isInstance;
}

export function ExpCompareTrialsSampleResponseExpTrialFromJSON(json: any): ExpCompareTrialsSampleResponseExpTrial {
    return ExpCompareTrialsSampleResponseExpTrialFromJSONTyped(json, false);
}

export function ExpCompareTrialsSampleResponseExpTrialFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExpCompareTrialsSampleResponseExpTrial {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trialId': json['trialId'],
        'hparams': json['hparams'],
        'data': ((json['data'] as Array<any>).map(V1DataPointFromJSON)),
        'experimentId': json['experimentId'],
    };
}

export function ExpCompareTrialsSampleResponseExpTrialToJSON(value?: ExpCompareTrialsSampleResponseExpTrial | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trialId': value.trialId,
        'hparams': value.hparams,
        'data': ((value.data as Array<any>).map(V1DataPointToJSON)),
        'experimentId': value.experimentId,
    };
}

