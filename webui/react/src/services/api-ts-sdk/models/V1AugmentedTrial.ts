/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedtrialv1State } from './Determinedtrialv1State';
import {
    Determinedtrialv1StateFromJSON,
    Determinedtrialv1StateFromJSONTyped,
    Determinedtrialv1StateToJSON,
} from './Determinedtrialv1State';

/**
 * Augmented Trial struct to service trial comparison functionality.
 * @export
 * @interface V1AugmentedTrial
 */
export interface V1AugmentedTrial {
    /**
     * The id of the trial.
     * @type {number}
     * @memberof V1AugmentedTrial
     */
    trialId: number;
    /**
     * 
     * @type {Determinedtrialv1State}
     * @memberof V1AugmentedTrial
     */
    state: Determinedtrialv1State;
    /**
     * 
     * @type {object}
     * @memberof V1AugmentedTrial
     */
    hparams: object;
    /**
     * The training metrics for the trial.
     * @type {object}
     * @memberof V1AugmentedTrial
     */
    trainingMetrics: object;
    /**
     * The validation metrics for the trial.
     * @type {object}
     * @memberof V1AugmentedTrial
     */
    validationMetrics: object;
    /**
     * The tags for the trial.
     * @type {object}
     * @memberof V1AugmentedTrial
     */
    tags: object;
    /**
     * The start time for the trial.
     * @type {Date}
     * @memberof V1AugmentedTrial
     */
    startTime: Date;
    /**
     * The end time for the trial.
     * @type {Date}
     * @memberof V1AugmentedTrial
     */
    endTime: Date;
    /**
     * The searcher type for the trial.
     * @type {string}
     * @memberof V1AugmentedTrial
     */
    searcherType: string;
    /**
     * The trials rank within the experiment, according to
     * the sorter that is provided.
     * @type {number}
     * @memberof V1AugmentedTrial
     */
    rankWithinExp?: number;
    /**
     * The experiment id for the trial.
     * @type {number}
     * @memberof V1AugmentedTrial
     */
    experimentId: number;
    /**
     * The experiment name for the trial.
     * @type {string}
     * @memberof V1AugmentedTrial
     */
    experimentName: string;
    /**
     * The experiment description for the trial.
     * @type {string}
     * @memberof V1AugmentedTrial
     */
    experimentDescription: string;
    /**
     * The labels for the experiment corresponding to the trial.
     * @type {Array<string>}
     * @memberof V1AugmentedTrial
     */
    experimentLabels: Array<string>;
    /**
     * The id of the user who created the experiment corresponding
     * to the trial.
     * @type {number}
     * @memberof V1AugmentedTrial
     */
    userId: number;
    /**
     * The project id for the trial.
     * @type {number}
     * @memberof V1AugmentedTrial
     */
    projectId: number;
    /**
     * The workspace id for the trial.
     * @type {number}
     * @memberof V1AugmentedTrial
     */
    workspaceId: number;
    /**
     * The total number of batches in the trial.
     * @type {number}
     * @memberof V1AugmentedTrial
     */
    totalBatches: number;
    /**
     * The name of the trials searcher metric.
     * @type {string}
     * @memberof V1AugmentedTrial
     */
    searcherMetric?: string;
    /**
     * The value for the trials searcher metric.
     * @type {number}
     * @memberof V1AugmentedTrial
     */
    searcherMetricValue?: number;
    /**
     * The loss for the trials searcher metric.
     * @type {number}
     * @memberof V1AugmentedTrial
     */
    searcherMetricLoss?: number;
}

/**
 * Check if a given object implements the V1AugmentedTrial interface.
 */
export function instanceOfV1AugmentedTrial(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "trialId" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "hparams" in value;
    isInstance = isInstance && "trainingMetrics" in value;
    isInstance = isInstance && "validationMetrics" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "endTime" in value;
    isInstance = isInstance && "searcherType" in value;
    isInstance = isInstance && "experimentId" in value;
    isInstance = isInstance && "experimentName" in value;
    isInstance = isInstance && "experimentDescription" in value;
    isInstance = isInstance && "experimentLabels" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "workspaceId" in value;
    isInstance = isInstance && "totalBatches" in value;

    return isInstance;
}

export function V1AugmentedTrialFromJSON(json: any): V1AugmentedTrial {
    return V1AugmentedTrialFromJSONTyped(json, false);
}

export function V1AugmentedTrialFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1AugmentedTrial {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trialId': json['trialId'],
        'state': Determinedtrialv1StateFromJSON(json['state']),
        'hparams': json['hparams'],
        'trainingMetrics': json['trainingMetrics'],
        'validationMetrics': json['validationMetrics'],
        'tags': json['tags'],
        'startTime': (new Date(json['startTime'])),
        'endTime': (new Date(json['endTime'])),
        'searcherType': json['searcherType'],
        'rankWithinExp': !exists(json, 'rankWithinExp') ? undefined : json['rankWithinExp'],
        'experimentId': json['experimentId'],
        'experimentName': json['experimentName'],
        'experimentDescription': json['experimentDescription'],
        'experimentLabels': json['experimentLabels'],
        'userId': json['userId'],
        'projectId': json['projectId'],
        'workspaceId': json['workspaceId'],
        'totalBatches': json['totalBatches'],
        'searcherMetric': !exists(json, 'searcherMetric') ? undefined : json['searcherMetric'],
        'searcherMetricValue': !exists(json, 'searcherMetricValue') ? undefined : json['searcherMetricValue'],
        'searcherMetricLoss': !exists(json, 'searcherMetricLoss') ? undefined : json['searcherMetricLoss'],
    };
}

export function V1AugmentedTrialToJSON(value?: V1AugmentedTrial | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trialId': value.trialId,
        'state': Determinedtrialv1StateToJSON(value.state),
        'hparams': value.hparams,
        'trainingMetrics': value.trainingMetrics,
        'validationMetrics': value.validationMetrics,
        'tags': value.tags,
        'startTime': (value.startTime.toISOString()),
        'endTime': (value.endTime.toISOString()),
        'searcherType': value.searcherType,
        'rankWithinExp': value.rankWithinExp,
        'experimentId': value.experimentId,
        'experimentName': value.experimentName,
        'experimentDescription': value.experimentDescription,
        'experimentLabels': value.experimentLabels,
        'userId': value.userId,
        'projectId': value.projectId,
        'workspaceId': value.workspaceId,
        'totalBatches': value.totalBatches,
        'searcherMetric': value.searcherMetric,
        'searcherMetricValue': value.searcherMetricValue,
        'searcherMetricLoss': value.searcherMetricLoss,
    };
}

