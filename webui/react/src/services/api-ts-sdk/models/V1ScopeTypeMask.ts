/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface V1ScopeTypeMask
 */
export interface V1ScopeTypeMask {
    /**
     * Whether this permission or role can be assigned globally, i.e.
     * cluster-wide. Currently, all permissions can be assigned globally, so this
     * is always true.
     * @type {boolean}
     * @memberof V1ScopeTypeMask
     */
    cluster?: boolean;
    /**
     * Whether this permission or role can be assigned on a particular workspace.
     * For example, `ADMINISTRATE_USER` permission will have this field set to
     * false, since user creation can only be done at a cluster level, and it
     * doesn't make sense for a single workspace.
     * @type {boolean}
     * @memberof V1ScopeTypeMask
     */
    workspace?: boolean;
}

/**
 * Check if a given object implements the V1ScopeTypeMask interface.
 */
export function instanceOfV1ScopeTypeMask(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1ScopeTypeMaskFromJSON(json: any): V1ScopeTypeMask {
    return V1ScopeTypeMaskFromJSONTyped(json, false);
}

export function V1ScopeTypeMaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ScopeTypeMask {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cluster': !exists(json, 'cluster') ? undefined : json['cluster'],
        'workspace': !exists(json, 'workspace') ? undefined : json['workspace'],
    };
}

export function V1ScopeTypeMaskToJSON(value?: V1ScopeTypeMask | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'cluster': value.cluster,
        'workspace': value.workspace,
    };
}

