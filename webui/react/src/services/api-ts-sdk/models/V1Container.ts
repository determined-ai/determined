/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedcontainerv1State } from './Determinedcontainerv1State';
import {
    Determinedcontainerv1StateFromJSON,
    Determinedcontainerv1StateFromJSONTyped,
    Determinedcontainerv1StateToJSON,
} from './Determinedcontainerv1State';
import type { V1Device } from './V1Device';
import {
    V1DeviceFromJSON,
    V1DeviceFromJSONTyped,
    V1DeviceToJSON,
} from './V1Device';

/**
 * Container is a Docker container that is either scheduled to run or is
 * currently running on a set of slots.
 * @export
 * @interface V1Container
 */
export interface V1Container {
    /**
     * The id of the task that is currently managing this container.
     * @type {string}
     * @memberof V1Container
     */
    parent?: string;
    /**
     * The unique id of this instance of a container.
     * @type {string}
     * @memberof V1Container
     */
    id: string;
    /**
     * 
     * @type {Determinedcontainerv1State}
     * @memberof V1Container
     */
    state: Determinedcontainerv1State;
    /**
     * A list of devices that is being used by this container.
     * @type {Array<V1Device>}
     * @memberof V1Container
     */
    devices?: Array<V1Device>;
}

/**
 * Check if a given object implements the V1Container interface.
 */
export function instanceOfV1Container(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "state" in value;

    return isInstance;
}

export function V1ContainerFromJSON(json: any): V1Container {
    return V1ContainerFromJSONTyped(json, false);
}

export function V1ContainerFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Container {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'id': json['id'],
        'state': Determinedcontainerv1StateFromJSON(json['state']),
        'devices': !exists(json, 'devices') ? undefined : ((json['devices'] as Array<any>).map(V1DeviceFromJSON)),
    };
}

export function V1ContainerToJSON(value?: V1Container | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'parent': value.parent,
        'id': value.id,
        'state': Determinedcontainerv1StateToJSON(value.state),
        'devices': value.devices === undefined ? undefined : ((value.devices as Array<any>).map(V1DeviceToJSON)),
    };
}

