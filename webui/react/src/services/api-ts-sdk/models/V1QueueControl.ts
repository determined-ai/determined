/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Describes a message to control jobs in a queue.
 * @export
 * @interface V1QueueControl
 */
export interface V1QueueControl {
    /**
     * Job id.
     * @type {string}
     * @memberof V1QueueControl
     */
    jobId: string;
    /**
     * The desired job position in the queue in terms of another job.
     * @type {string}
     * @memberof V1QueueControl
     */
    aheadOf?: string;
    /**
     * The desired job position in the queue in terms of another job.
     * @type {string}
     * @memberof V1QueueControl
     */
    behindOf?: string;
    /**
     * Name of the target resource_pool to move the job to.
     * @type {string}
     * @memberof V1QueueControl
     */
    resourcePool?: string;
    /**
     * The desired job priority in priority scheduler.
     * @type {number}
     * @memberof V1QueueControl
     */
    priority?: number;
    /**
     * The desired job weight in fairshare scheduler.
     * @type {number}
     * @memberof V1QueueControl
     */
    weight?: number;
}

/**
 * Check if a given object implements the V1QueueControl interface.
 */
export function instanceOfV1QueueControl(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "jobId" in value;

    return isInstance;
}

export function V1QueueControlFromJSON(json: any): V1QueueControl {
    return V1QueueControlFromJSONTyped(json, false);
}

export function V1QueueControlFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1QueueControl {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'jobId': json['jobId'],
        'aheadOf': !exists(json, 'aheadOf') ? undefined : json['aheadOf'],
        'behindOf': !exists(json, 'behindOf') ? undefined : json['behindOf'],
        'resourcePool': !exists(json, 'resourcePool') ? undefined : json['resourcePool'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'weight': !exists(json, 'weight') ? undefined : json['weight'],
    };
}

export function V1QueueControlToJSON(value?: V1QueueControl | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'jobId': value.jobId,
        'aheadOf': value.aheadOf,
        'behindOf': value.behindOf,
        'resourcePool': value.resourcePool,
        'priority': value.priority,
        'weight': value.weight,
    };
}

