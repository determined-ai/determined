/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedexperimentv1State } from './Determinedexperimentv1State';
import {
    Determinedexperimentv1StateFromJSON,
    Determinedexperimentv1StateFromJSONTyped,
    Determinedexperimentv1StateToJSON,
} from './Determinedexperimentv1State';
import type { V1CheckpointWorkload } from './V1CheckpointWorkload';
import {
    V1CheckpointWorkloadFromJSON,
    V1CheckpointWorkloadFromJSONTyped,
    V1CheckpointWorkloadToJSON,
} from './V1CheckpointWorkload';
import type { V1MetricsWorkload } from './V1MetricsWorkload';
import {
    V1MetricsWorkloadFromJSON,
    V1MetricsWorkloadFromJSONTyped,
    V1MetricsWorkloadToJSON,
} from './V1MetricsWorkload';

/**
 * Trial is a set of workloads and are exploring a determined set of
 * hyperparameters.
 * @export
 * @interface Trialv1Trial
 */
export interface Trialv1Trial {
    /**
     * The id of the trial.
     * @type {number}
     * @memberof Trialv1Trial
     */
    id: number;
    /**
     * The id of the parent experiment.
     * @type {number}
     * @memberof Trialv1Trial
     */
    experimentId: number;
    /**
     * The time the trial was started.
     * @type {Date}
     * @memberof Trialv1Trial
     */
    startTime: Date;
    /**
     * The time the trial ended if the trial is stopped.
     * @type {Date}
     * @memberof Trialv1Trial
     */
    endTime?: Date;
    /**
     * 
     * @type {Determinedexperimentv1State}
     * @memberof Trialv1Trial
     */
    state: Determinedexperimentv1State;
    /**
     * Number times the trial restarted.
     * @type {number}
     * @memberof Trialv1Trial
     */
    restarts: number;
    /**
     * Trial hyperparameters.
     * @type {object}
     * @memberof Trialv1Trial
     */
    hparams: object;
    /**
     * The current processed batches.
     * @type {number}
     * @memberof Trialv1Trial
     */
    totalBatchesProcessed: number;
    /**
     * 
     * @type {V1MetricsWorkload}
     * @memberof Trialv1Trial
     */
    bestValidation?: V1MetricsWorkload;
    /**
     * 
     * @type {V1MetricsWorkload}
     * @memberof Trialv1Trial
     */
    latestValidation?: V1MetricsWorkload;
    /**
     * 
     * @type {V1CheckpointWorkload}
     * @memberof Trialv1Trial
     */
    bestCheckpoint?: V1CheckpointWorkload;
    /**
     * 
     * @type {V1MetricsWorkload}
     * @memberof Trialv1Trial
     */
    latestTraining?: V1MetricsWorkload;
    /**
     * The last reported state of the trial runner (harness code).
     * @type {string}
     * @memberof Trialv1Trial
     */
    runnerState?: string;
    /**
     * The wall clock time is all active time of the cluster for the trial,
     * inclusive of everything (restarts, initiailization, etc), in seconds.
     * @type {number}
     * @memberof Trialv1Trial
     */
    wallClockTime?: number;
    /**
     * UUID of checkpoint that this trial started from.
     * @type {string}
     * @memberof Trialv1Trial
     */
    warmStartCheckpointUuid?: string;
    /**
     * Id of task associated with this trial.
     * @type {string}
     * @memberof Trialv1Trial
     */
    taskId?: string;
    /**
     * The sum of sizes of all resources in all checkpoints for the trial.
     * @type {string}
     * @memberof Trialv1Trial
     */
    totalCheckpointSize?: string;
}

/**
 * Check if a given object implements the Trialv1Trial interface.
 */
export function instanceOfTrialv1Trial(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "experimentId" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "restarts" in value;
    isInstance = isInstance && "hparams" in value;
    isInstance = isInstance && "totalBatchesProcessed" in value;

    return isInstance;
}

export function Trialv1TrialFromJSON(json: any): Trialv1Trial {
    return Trialv1TrialFromJSONTyped(json, false);
}

export function Trialv1TrialFromJSONTyped(json: any, ignoreDiscriminator: boolean): Trialv1Trial {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'experimentId': json['experimentId'],
        'startTime': (new Date(json['startTime'])),
        'endTime': !exists(json, 'endTime') ? undefined : (new Date(json['endTime'])),
        'state': Determinedexperimentv1StateFromJSON(json['state']),
        'restarts': json['restarts'],
        'hparams': json['hparams'],
        'totalBatchesProcessed': json['totalBatchesProcessed'],
        'bestValidation': !exists(json, 'bestValidation') ? undefined : V1MetricsWorkloadFromJSON(json['bestValidation']),
        'latestValidation': !exists(json, 'latestValidation') ? undefined : V1MetricsWorkloadFromJSON(json['latestValidation']),
        'bestCheckpoint': !exists(json, 'bestCheckpoint') ? undefined : V1CheckpointWorkloadFromJSON(json['bestCheckpoint']),
        'latestTraining': !exists(json, 'latestTraining') ? undefined : V1MetricsWorkloadFromJSON(json['latestTraining']),
        'runnerState': !exists(json, 'runnerState') ? undefined : json['runnerState'],
        'wallClockTime': !exists(json, 'wallClockTime') ? undefined : json['wallClockTime'],
        'warmStartCheckpointUuid': !exists(json, 'warmStartCheckpointUuid') ? undefined : json['warmStartCheckpointUuid'],
        'taskId': !exists(json, 'taskId') ? undefined : json['taskId'],
        'totalCheckpointSize': !exists(json, 'totalCheckpointSize') ? undefined : json['totalCheckpointSize'],
    };
}

export function Trialv1TrialToJSON(value?: Trialv1Trial | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'experimentId': value.experimentId,
        'startTime': (value.startTime.toISOString()),
        'endTime': value.endTime === undefined ? undefined : (value.endTime.toISOString()),
        'state': Determinedexperimentv1StateToJSON(value.state),
        'restarts': value.restarts,
        'hparams': value.hparams,
        'totalBatchesProcessed': value.totalBatchesProcessed,
        'bestValidation': V1MetricsWorkloadToJSON(value.bestValidation),
        'latestValidation': V1MetricsWorkloadToJSON(value.latestValidation),
        'bestCheckpoint': V1CheckpointWorkloadToJSON(value.bestCheckpoint),
        'latestTraining': V1MetricsWorkloadToJSON(value.latestTraining),
        'runnerState': value.runnerState,
        'wallClockTime': value.wallClockTime,
        'warmStartCheckpointUuid': value.warmStartCheckpointUuid,
        'taskId': value.taskId,
        'totalCheckpointSize': value.totalCheckpointSize,
    };
}

