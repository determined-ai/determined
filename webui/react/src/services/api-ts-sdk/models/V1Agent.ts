/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Container } from './V1Container';
import {
    V1ContainerFromJSON,
    V1ContainerFromJSONTyped,
    V1ContainerToJSON,
} from './V1Container';
import type { V1Slot } from './V1Slot';
import {
    V1SlotFromJSON,
    V1SlotFromJSONTyped,
    V1SlotToJSON,
} from './V1Slot';

/**
 * Agent is a pool of resources where containers are run.
 * @export
 * @interface V1Agent
 */
export interface V1Agent {
    /**
     * The unique id of the agent.
     * @type {string}
     * @memberof V1Agent
     */
    id: string;
    /**
     * The time when the agent registered with the master.
     * @type {Date}
     * @memberof V1Agent
     */
    registeredTime?: Date;
    /**
     * A map of slot id to each slot of this agent.
     * @type {{ [key: string]: V1Slot; }}
     * @memberof V1Agent
     */
    slots?: { [key: string]: V1Slot; };
    /**
     * A map of container id to all containers assigned to this agent.
     * @type {{ [key: string]: V1Container; }}
     * @memberof V1Agent
     */
    containers?: { [key: string]: V1Container; };
    /**
     * An optional label applied to the agent for scheduling restrictions.
     * @type {string}
     * @memberof V1Agent
     */
    label?: string;
    /**
     * The addresses of the agent.
     * @type {Array<string>}
     * @memberof V1Agent
     */
    addresses?: Array<string>;
    /**
     * Flag notifying if containers can be scheduled on this agent.
     * @type {boolean}
     * @memberof V1Agent
     */
    enabled?: boolean;
    /**
     * Flag notifying if this agent is in the draining mode: current containers
     * will be allowed to finish but no new ones will be scheduled.
     * @type {boolean}
     * @memberof V1Agent
     */
    draining?: boolean;
    /**
     * The Determined version that this agent was built from.
     * @type {string}
     * @memberof V1Agent
     */
    version?: string;
    /**
     * The name of the resource pools the agent is in. Only slurm can contain
     * multiples.
     * @type {Array<string>}
     * @memberof V1Agent
     */
    resourcePools?: Array<string>;
}

/**
 * Check if a given object implements the V1Agent interface.
 */
export function instanceOfV1Agent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function V1AgentFromJSON(json: any): V1Agent {
    return V1AgentFromJSONTyped(json, false);
}

export function V1AgentFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Agent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'registeredTime': !exists(json, 'registeredTime') ? undefined : (new Date(json['registeredTime'])),
        'slots': !exists(json, 'slots') ? undefined : (mapValues(json['slots'], V1SlotFromJSON)),
        'containers': !exists(json, 'containers') ? undefined : (mapValues(json['containers'], V1ContainerFromJSON)),
        'label': !exists(json, 'label') ? undefined : json['label'],
        'addresses': !exists(json, 'addresses') ? undefined : json['addresses'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'draining': !exists(json, 'draining') ? undefined : json['draining'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'resourcePools': !exists(json, 'resourcePools') ? undefined : json['resourcePools'],
    };
}

export function V1AgentToJSON(value?: V1Agent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'registeredTime': value.registeredTime === undefined ? undefined : (value.registeredTime.toISOString()),
        'slots': value.slots === undefined ? undefined : (mapValues(value.slots, V1SlotToJSON)),
        'containers': value.containers === undefined ? undefined : (mapValues(value.containers, V1ContainerToJSON)),
        'label': value.label,
        'addresses': value.addresses,
        'enabled': value.enabled,
        'draining': value.draining,
        'version': value.version,
        'resourcePools': value.resourcePools,
    };
}

