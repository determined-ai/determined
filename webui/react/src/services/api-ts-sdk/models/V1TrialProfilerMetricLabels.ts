/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TrialProfilerMetricLabelsProfilerMetricType } from './TrialProfilerMetricLabelsProfilerMetricType';
import {
    TrialProfilerMetricLabelsProfilerMetricTypeFromJSON,
    TrialProfilerMetricLabelsProfilerMetricTypeFromJSONTyped,
    TrialProfilerMetricLabelsProfilerMetricTypeToJSON,
} from './TrialProfilerMetricLabelsProfilerMetricType';

/**
 * 
 * @export
 * @interface V1TrialProfilerMetricLabels
 */
export interface V1TrialProfilerMetricLabels {
    /**
     * The ID of the trial.
     * @type {number}
     * @memberof V1TrialProfilerMetricLabels
     */
    trialId: number;
    /**
     * The name of the metric.
     * @type {string}
     * @memberof V1TrialProfilerMetricLabels
     */
    name: string;
    /**
     * The agent ID associated with the metric.
     * @type {string}
     * @memberof V1TrialProfilerMetricLabels
     */
    agentId?: string;
    /**
     * The GPU UUID associated with the metric.
     * @type {string}
     * @memberof V1TrialProfilerMetricLabels
     */
    gpuUuid?: string;
    /**
     * 
     * @type {TrialProfilerMetricLabelsProfilerMetricType}
     * @memberof V1TrialProfilerMetricLabels
     */
    metricType?: TrialProfilerMetricLabelsProfilerMetricType;
}

/**
 * Check if a given object implements the V1TrialProfilerMetricLabels interface.
 */
export function instanceOfV1TrialProfilerMetricLabels(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "trialId" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function V1TrialProfilerMetricLabelsFromJSON(json: any): V1TrialProfilerMetricLabels {
    return V1TrialProfilerMetricLabelsFromJSONTyped(json, false);
}

export function V1TrialProfilerMetricLabelsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialProfilerMetricLabels {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trialId': json['trialId'],
        'name': json['name'],
        'agentId': !exists(json, 'agentId') ? undefined : json['agentId'],
        'gpuUuid': !exists(json, 'gpuUuid') ? undefined : json['gpuUuid'],
        'metricType': !exists(json, 'metricType') ? undefined : TrialProfilerMetricLabelsProfilerMetricTypeFromJSON(json['metricType']),
    };
}

export function V1TrialProfilerMetricLabelsToJSON(value?: V1TrialProfilerMetricLabels | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trialId': value.trialId,
        'name': value.name,
        'agentId': value.agentId,
        'gpuUuid': value.gpuUuid,
        'metricType': TrialProfilerMetricLabelsProfilerMetricTypeToJSON(value.metricType),
    };
}

