/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1DataPoint } from './V1DataPoint';
import {
    V1DataPointFromJSON,
    V1DataPointFromJSONTyped,
    V1DataPointToJSON,
} from './V1DataPoint';

/**
 * Metadata and metrics stream from a trial.
 * @export
 * @interface V1TrialsSampleResponseTrial
 */
export interface V1TrialsSampleResponseTrial {
    /**
     * The id of the trial.
     * @type {number}
     * @memberof V1TrialsSampleResponseTrial
     */
    trialId: number;
    /**
     * Hyperparamters values for this specific trial.
     * @type {object}
     * @memberof V1TrialsSampleResponseTrial
     */
    hparams: object;
    /**
     * A possibly down-sampled series of metric readings through the progress of
     * the trial.
     * @type {Array<V1DataPoint>}
     * @memberof V1TrialsSampleResponseTrial
     */
    data: Array<V1DataPoint>;
}

/**
 * Check if a given object implements the V1TrialsSampleResponseTrial interface.
 */
export function instanceOfV1TrialsSampleResponseTrial(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "trialId" in value;
    isInstance = isInstance && "hparams" in value;
    isInstance = isInstance && "data" in value;

    return isInstance;
}

export function V1TrialsSampleResponseTrialFromJSON(json: any): V1TrialsSampleResponseTrial {
    return V1TrialsSampleResponseTrialFromJSONTyped(json, false);
}

export function V1TrialsSampleResponseTrialFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialsSampleResponseTrial {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trialId': json['trialId'],
        'hparams': json['hparams'],
        'data': ((json['data'] as Array<any>).map(V1DataPointFromJSON)),
    };
}

export function V1TrialsSampleResponseTrialToJSON(value?: V1TrialsSampleResponseTrial | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trialId': value.trialId,
        'hparams': value.hparams,
        'data': ((value.data as Array<any>).map(V1DataPointToJSON)),
    };
}

