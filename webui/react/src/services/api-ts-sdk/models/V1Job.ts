/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedjobv1Type } from './Determinedjobv1Type';
import {
    Determinedjobv1TypeFromJSON,
    Determinedjobv1TypeFromJSONTyped,
    Determinedjobv1TypeToJSON,
} from './Determinedjobv1Type';
import type { V1JobSummary } from './V1JobSummary';
import {
    V1JobSummaryFromJSON,
    V1JobSummaryFromJSONTyped,
    V1JobSummaryToJSON,
} from './V1JobSummary';

/**
 * Job represents a user submitted work that is not in a terminal
 * state.
 * @export
 * @interface V1Job
 */
export interface V1Job {
    /**
     * 
     * @type {V1JobSummary}
     * @memberof V1Job
     */
    summary?: V1JobSummary;
    /**
     * 
     * @type {Determinedjobv1Type}
     * @memberof V1Job
     */
    type: Determinedjobv1Type;
    /**
     * The time when the job was submitted by the user.
     * @type {Date}
     * @memberof V1Job
     */
    submissionTime: Date;
    /**
     * The username of the user who submitted the job.
     * @type {string}
     * @memberof V1Job
     */
    username: string;
    /**
     * The id of the user who submitted the job.
     * @type {number}
     * @memberof V1Job
     */
    userId?: number;
    /**
     * Associated resource pool.
     * @type {string}
     * @memberof V1Job
     */
    resourcePool: string;
    /**
     * Whether the job is preemptible.
     * @type {boolean}
     * @memberof V1Job
     */
    isPreemptible: boolean;
    /**
     * The job priority in priority scheduler.
     * @type {number}
     * @memberof V1Job
     */
    priority?: number;
    /**
     * The job weight in fairshare scheduler.
     * @type {number}
     * @memberof V1Job
     */
    weight?: number;
    /**
     * Entity ID.
     * @type {string}
     * @memberof V1Job
     */
    entityId: string;
    /**
     * Job type.
     * @type {string}
     * @memberof V1Job
     */
    jobId: string;
    /**
     * Number of requested slots.
     * @type {number}
     * @memberof V1Job
     */
    requestedSlots: number;
    /**
     * Number of allocated slots.
     * @type {number}
     * @memberof V1Job
     */
    allocatedSlots: number;
    /**
     * Job name.
     * @type {string}
     * @memberof V1Job
     */
    name: string;
    /**
     * Job's progress from 0 to 1.
     * @type {number}
     * @memberof V1Job
     */
    progress?: number;
}

/**
 * Check if a given object implements the V1Job interface.
 */
export function instanceOfV1Job(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "submissionTime" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "resourcePool" in value;
    isInstance = isInstance && "isPreemptible" in value;
    isInstance = isInstance && "entityId" in value;
    isInstance = isInstance && "jobId" in value;
    isInstance = isInstance && "requestedSlots" in value;
    isInstance = isInstance && "allocatedSlots" in value;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function V1JobFromJSON(json: any): V1Job {
    return V1JobFromJSONTyped(json, false);
}

export function V1JobFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Job {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'summary': !exists(json, 'summary') ? undefined : V1JobSummaryFromJSON(json['summary']),
        'type': Determinedjobv1TypeFromJSON(json['type']),
        'submissionTime': (new Date(json['submissionTime'])),
        'username': json['username'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'resourcePool': json['resourcePool'],
        'isPreemptible': json['isPreemptible'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'weight': !exists(json, 'weight') ? undefined : json['weight'],
        'entityId': json['entityId'],
        'jobId': json['jobId'],
        'requestedSlots': json['requestedSlots'],
        'allocatedSlots': json['allocatedSlots'],
        'name': json['name'],
        'progress': !exists(json, 'progress') ? undefined : json['progress'],
    };
}

export function V1JobToJSON(value?: V1Job | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'summary': V1JobSummaryToJSON(value.summary),
        'type': Determinedjobv1TypeToJSON(value.type),
        'submissionTime': (value.submissionTime.toISOString()),
        'username': value.username,
        'userId': value.userId,
        'resourcePool': value.resourcePool,
        'isPreemptible': value.isPreemptible,
        'priority': value.priority,
        'weight': value.weight,
        'entityId': value.entityId,
        'jobId': value.jobId,
        'requestedSlots': value.requestedSlots,
        'allocatedSlots': value.allocatedSlots,
        'name': value.name,
        'progress': value.progress,
    };
}

