/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedexperimentv1State } from './Determinedexperimentv1State';
import {
    Determinedexperimentv1StateFromJSON,
    Determinedexperimentv1StateFromJSONTyped,
    Determinedexperimentv1StateToJSON,
} from './Determinedexperimentv1State';
import type { V1Metrics } from './V1Metrics';
import {
    V1MetricsFromJSON,
    V1MetricsFromJSONTyped,
    V1MetricsToJSON,
} from './V1Metrics';

/**
 * MetricsWorkload is a workload generating metrics.
 * @export
 * @interface V1MetricsWorkload
 */
export interface V1MetricsWorkload {
    /**
     * The time the workload finished or was stopped.
     * @type {Date}
     * @memberof V1MetricsWorkload
     */
    endTime?: Date;
    /**
     * 
     * @type {Determinedexperimentv1State}
     * @memberof V1MetricsWorkload
     */
    state: Determinedexperimentv1State;
    /**
     * 
     * @type {V1Metrics}
     * @memberof V1MetricsWorkload
     */
    metrics: V1Metrics;
    /**
     * Number of inputs processed.
     * @type {number}
     * @memberof V1MetricsWorkload
     */
    numInputs: number;
    /**
     * Total number of batches as of this workload's completion.
     * @type {number}
     * @memberof V1MetricsWorkload
     */
    totalBatches: number;
}

/**
 * Check if a given object implements the V1MetricsWorkload interface.
 */
export function instanceOfV1MetricsWorkload(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "metrics" in value;
    isInstance = isInstance && "numInputs" in value;
    isInstance = isInstance && "totalBatches" in value;

    return isInstance;
}

export function V1MetricsWorkloadFromJSON(json: any): V1MetricsWorkload {
    return V1MetricsWorkloadFromJSONTyped(json, false);
}

export function V1MetricsWorkloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1MetricsWorkload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'endTime': !exists(json, 'endTime') ? undefined : (new Date(json['endTime'])),
        'state': Determinedexperimentv1StateFromJSON(json['state']),
        'metrics': V1MetricsFromJSON(json['metrics']),
        'numInputs': json['numInputs'],
        'totalBatches': json['totalBatches'],
    };
}

export function V1MetricsWorkloadToJSON(value?: V1MetricsWorkload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'endTime': value.endTime === undefined ? undefined : (value.endTime.toISOString()),
        'state': Determinedexperimentv1StateToJSON(value.state),
        'metrics': V1MetricsToJSON(value.metrics),
        'numInputs': value.numInputs,
        'totalBatches': value.totalBatches,
    };
}

