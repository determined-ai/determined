/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1LogLevel } from './V1LogLevel';
import {
    V1LogLevelFromJSON,
    V1LogLevelFromJSONTyped,
    V1LogLevelToJSON,
} from './V1LogLevel';

/**
 * Response to TrialLogsRequest.
 * @export
 * @interface V1TrialLogsResponse
 */
export interface V1TrialLogsResponse {
    /**
     * The ID of the trial log.
     * @type {string}
     * @memberof V1TrialLogsResponse
     */
    id: string;
    /**
     * The timestamp of the log.
     * @type {Date}
     * @memberof V1TrialLogsResponse
     */
    timestamp: Date;
    /**
     * The log message.
     * @type {string}
     * @memberof V1TrialLogsResponse
     */
    message: string;
    /**
     * 
     * @type {V1LogLevel}
     * @memberof V1TrialLogsResponse
     */
    level: V1LogLevel;
}

/**
 * Check if a given object implements the V1TrialLogsResponse interface.
 */
export function instanceOfV1TrialLogsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "level" in value;

    return isInstance;
}

export function V1TrialLogsResponseFromJSON(json: any): V1TrialLogsResponse {
    return V1TrialLogsResponseFromJSONTyped(json, false);
}

export function V1TrialLogsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialLogsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'timestamp': (new Date(json['timestamp'])),
        'message': json['message'],
        'level': V1LogLevelFromJSON(json['level']),
    };
}

export function V1TrialLogsResponseToJSON(value?: V1TrialLogsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'timestamp': (value.timestamp.toISOString()),
        'message': value.message,
        'level': V1LogLevelToJSON(value.level),
    };
}

