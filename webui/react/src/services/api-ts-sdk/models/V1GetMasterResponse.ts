/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GetMasterResponseProduct } from './GetMasterResponseProduct';
import {
    GetMasterResponseProductFromJSON,
    GetMasterResponseProductFromJSONTyped,
    GetMasterResponseProductToJSON,
} from './GetMasterResponseProduct';
import type { V1SSOProvider } from './V1SSOProvider';
import {
    V1SSOProviderFromJSON,
    V1SSOProviderFromJSONTyped,
    V1SSOProviderToJSON,
} from './V1SSOProvider';

/**
 * Response to GetMasterRequest.
 * @export
 * @interface V1GetMasterResponse
 */
export interface V1GetMasterResponse {
    /**
     * The current version of the master.
     * @type {string}
     * @memberof V1GetMasterResponse
     */
    version: string;
    /**
     * The current instance id of the master.
     * @type {string}
     * @memberof V1GetMasterResponse
     */
    masterId: string;
    /**
     * The global cluster id of the master.
     * @type {string}
     * @memberof V1GetMasterResponse
     */
    clusterId: string;
    /**
     * The cluster name.
     * @type {string}
     * @memberof V1GetMasterResponse
     */
    clusterName: string;
    /**
     * Telemetry status.
     * @type {boolean}
     * @memberof V1GetMasterResponse
     */
    telemetryEnabled?: boolean;
    /**
     * SSO providers.
     * @type {Array<V1SSOProvider>}
     * @memberof V1GetMasterResponse
     */
    ssoProviders?: Array<V1SSOProvider>;
    /**
     * Redirect for starting internal sessions..
     * @type {string}
     * @memberof V1GetMasterResponse
     */
    externalLoginUri?: string;
    /**
     * Redirect for ending external sessions.
     * @type {string}
     * @memberof V1GetMasterResponse
     */
    externalLogoutUri?: string;
    /**
     * Branding style to use on front-end.
     * @type {string}
     * @memberof V1GetMasterResponse
     */
    branding?: string;
    /**
     * Feature flag for RBAC and user groups.
     * @type {boolean}
     * @memberof V1GetMasterResponse
     */
    rbacEnabled?: boolean;
    /**
     * 
     * @type {GetMasterResponseProduct}
     * @memberof V1GetMasterResponse
     */
    product?: GetMasterResponseProduct;
    /**
     * List of features that is on.
     * @type {Array<string>}
     * @memberof V1GetMasterResponse
     */
    featureSwitches?: Array<string>;
}

/**
 * Check if a given object implements the V1GetMasterResponse interface.
 */
export function instanceOfV1GetMasterResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "masterId" in value;
    isInstance = isInstance && "clusterId" in value;
    isInstance = isInstance && "clusterName" in value;

    return isInstance;
}

export function V1GetMasterResponseFromJSON(json: any): V1GetMasterResponse {
    return V1GetMasterResponseFromJSONTyped(json, false);
}

export function V1GetMasterResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1GetMasterResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': json['version'],
        'masterId': json['masterId'],
        'clusterId': json['clusterId'],
        'clusterName': json['clusterName'],
        'telemetryEnabled': !exists(json, 'telemetryEnabled') ? undefined : json['telemetryEnabled'],
        'ssoProviders': !exists(json, 'ssoProviders') ? undefined : ((json['ssoProviders'] as Array<any>).map(V1SSOProviderFromJSON)),
        'externalLoginUri': !exists(json, 'externalLoginUri') ? undefined : json['externalLoginUri'],
        'externalLogoutUri': !exists(json, 'externalLogoutUri') ? undefined : json['externalLogoutUri'],
        'branding': !exists(json, 'branding') ? undefined : json['branding'],
        'rbacEnabled': !exists(json, 'rbacEnabled') ? undefined : json['rbacEnabled'],
        'product': !exists(json, 'product') ? undefined : GetMasterResponseProductFromJSON(json['product']),
        'featureSwitches': !exists(json, 'featureSwitches') ? undefined : json['featureSwitches'],
    };
}

export function V1GetMasterResponseToJSON(value?: V1GetMasterResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'masterId': value.masterId,
        'clusterId': value.clusterId,
        'clusterName': value.clusterName,
        'telemetryEnabled': value.telemetryEnabled,
        'ssoProviders': value.ssoProviders === undefined ? undefined : ((value.ssoProviders as Array<any>).map(V1SSOProviderToJSON)),
        'externalLoginUri': value.externalLoginUri,
        'externalLogoutUri': value.externalLogoutUri,
        'branding': value.branding,
        'rbacEnabled': value.rbacEnabled,
        'product': GetMasterResponseProductToJSON(value.product),
        'featureSwitches': value.featureSwitches,
    };
}

