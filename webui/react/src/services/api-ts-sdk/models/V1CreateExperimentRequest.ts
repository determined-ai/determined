/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1File } from './V1File';
import {
    V1FileFromJSON,
    V1FileFromJSONTyped,
    V1FileToJSON,
} from './V1File';

/**
 * Request to create a new experiment.
 * @export
 * @interface V1CreateExperimentRequest
 */
export interface V1CreateExperimentRequest {
    /**
     * Experiment context.
     * @type {Array<V1File>}
     * @memberof V1CreateExperimentRequest
     */
    modelDefinition?: Array<V1File>;
    /**
     * Experiment config (YAML).
     * @type {string}
     * @memberof V1CreateExperimentRequest
     */
    config?: string;
    /**
     * Only validate instead of creating the experiment. A dry run.
     * @type {boolean}
     * @memberof V1CreateExperimentRequest
     */
    validateOnly?: boolean;
    /**
     * Parent experiment id.
     * @type {number}
     * @memberof V1CreateExperimentRequest
     */
    parentId?: number;
    /**
     * Request to auto-activate the experiment.
     * @type {boolean}
     * @memberof V1CreateExperimentRequest
     */
    activate?: boolean;
    /**
     * Project id to contain the experiment.
     * @type {number}
     * @memberof V1CreateExperimentRequest
     */
    projectId?: number;
}

/**
 * Check if a given object implements the V1CreateExperimentRequest interface.
 */
export function instanceOfV1CreateExperimentRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1CreateExperimentRequestFromJSON(json: any): V1CreateExperimentRequest {
    return V1CreateExperimentRequestFromJSONTyped(json, false);
}

export function V1CreateExperimentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1CreateExperimentRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'modelDefinition': !exists(json, 'modelDefinition') ? undefined : ((json['modelDefinition'] as Array<any>).map(V1FileFromJSON)),
        'config': !exists(json, 'config') ? undefined : json['config'],
        'validateOnly': !exists(json, 'validateOnly') ? undefined : json['validateOnly'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'activate': !exists(json, 'activate') ? undefined : json['activate'],
        'projectId': !exists(json, 'projectId') ? undefined : json['projectId'],
    };
}

export function V1CreateExperimentRequestToJSON(value?: V1CreateExperimentRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'modelDefinition': value.modelDefinition === undefined ? undefined : ((value.modelDefinition as Array<any>).map(V1FileToJSON)),
        'config': value.config,
        'validateOnly': value.validateOnly,
        'parentId': value.parentId,
        'activate': value.activate,
        'projectId': value.projectId,
    };
}

