/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * GetGroupsRequest is the body of the request for the call
 * to search for groups.
 * @export
 * @interface V1GetGroupsRequest
 */
export interface V1GetGroupsRequest {
    /**
     * The id of the user to use to find groups to which the user belongs.
     * @type {number}
     * @memberof V1GetGroupsRequest
     */
    userId?: number;
    /**
     * The group name to use when searching.
     * @type {string}
     * @memberof V1GetGroupsRequest
     */
    name?: string;
    /**
     * Skip the number of groups before returning results. Negative values
     * denote number of groups to skip from the end before returning results.
     * @type {number}
     * @memberof V1GetGroupsRequest
     */
    offset?: number;
    /**
     * Limit the number of groups. Required and must be must be <= 500.
     * @type {number}
     * @memberof V1GetGroupsRequest
     */
    limit: number;
}

/**
 * Check if a given object implements the V1GetGroupsRequest interface.
 */
export function instanceOfV1GetGroupsRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "limit" in value;

    return isInstance;
}

export function V1GetGroupsRequestFromJSON(json: any): V1GetGroupsRequest {
    return V1GetGroupsRequestFromJSONTyped(json, false);
}

export function V1GetGroupsRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1GetGroupsRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'limit': json['limit'],
    };
}

export function V1GetGroupsRequestToJSON(value?: V1GetGroupsRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'userId': value.userId,
        'name': value.name,
        'offset': value.offset,
        'limit': value.limit,
    };
}

