/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1LogLevel } from './V1LogLevel';
import {
    V1LogLevelFromJSON,
    V1LogLevelFromJSONTyped,
    V1LogLevelToJSON,
} from './V1LogLevel';

/**
 * LogEntry is a log event.
 * @export
 * @interface V1LogEntry
 */
export interface V1LogEntry {
    /**
     * The id.
     * @type {number}
     * @memberof V1LogEntry
     */
    id: number;
    /**
     * The message.
     * @type {string}
     * @memberof V1LogEntry
     */
    message?: string;
    /**
     * The timestamp.
     * @type {Date}
     * @memberof V1LogEntry
     */
    timestamp?: Date;
    /**
     * 
     * @type {V1LogLevel}
     * @memberof V1LogEntry
     */
    level?: V1LogLevel;
}

/**
 * Check if a given object implements the V1LogEntry interface.
 */
export function instanceOfV1LogEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function V1LogEntryFromJSON(json: any): V1LogEntry {
    return V1LogEntryFromJSONTyped(json, false);
}

export function V1LogEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1LogEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'timestamp': !exists(json, 'timestamp') ? undefined : (new Date(json['timestamp'])),
        'level': !exists(json, 'level') ? undefined : V1LogLevelFromJSON(json['level']),
    };
}

export function V1LogEntryToJSON(value?: V1LogEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'message': value.message,
        'timestamp': value.timestamp === undefined ? undefined : (value.timestamp.toISOString()),
        'level': V1LogLevelToJSON(value.level),
    };
}

