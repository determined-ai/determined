/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determineddevicev1Type } from './Determineddevicev1Type';
import {
    Determineddevicev1TypeFromJSON,
    Determineddevicev1TypeFromJSONTyped,
    Determineddevicev1TypeToJSON,
} from './Determineddevicev1Type';
import type { V1FittingPolicy } from './V1FittingPolicy';
import {
    V1FittingPolicyFromJSON,
    V1FittingPolicyFromJSONTyped,
    V1FittingPolicyToJSON,
} from './V1FittingPolicy';
import type { V1QueueStats } from './V1QueueStats';
import {
    V1QueueStatsFromJSON,
    V1QueueStatsFromJSONTyped,
    V1QueueStatsToJSON,
} from './V1QueueStats';
import type { V1ResourcePoolDetail } from './V1ResourcePoolDetail';
import {
    V1ResourcePoolDetailFromJSON,
    V1ResourcePoolDetailFromJSONTyped,
    V1ResourcePoolDetailToJSON,
} from './V1ResourcePoolDetail';
import type { V1ResourcePoolType } from './V1ResourcePoolType';
import {
    V1ResourcePoolTypeFromJSON,
    V1ResourcePoolTypeFromJSONTyped,
    V1ResourcePoolTypeToJSON,
} from './V1ResourcePoolType';
import type { V1SchedulerType } from './V1SchedulerType';
import {
    V1SchedulerTypeFromJSON,
    V1SchedulerTypeFromJSONTyped,
    V1SchedulerTypeToJSON,
} from './V1SchedulerType';

/**
 * A Resource Pool is a pool of resources where containers are run.
 * @export
 * @interface V1ResourcePool
 */
export interface V1ResourcePool {
    /**
     * The unique name of the resource pool.
     * @type {string}
     * @memberof V1ResourcePool
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof V1ResourcePool
     */
    description: string;
    /**
     * 
     * @type {V1ResourcePoolType}
     * @memberof V1ResourcePool
     */
    type: V1ResourcePoolType;
    /**
     * 
     * @type {number}
     * @memberof V1ResourcePool
     */
    numAgents: number;
    /**
     * 
     * @type {number}
     * @memberof V1ResourcePool
     */
    slotsAvailable: number;
    /**
     * 
     * @type {number}
     * @memberof V1ResourcePool
     */
    slotsUsed: number;
    /**
     * 
     * @type {Determineddevicev1Type}
     * @memberof V1ResourcePool
     */
    slotType: Determineddevicev1Type;
    /**
     * 
     * @type {number}
     * @memberof V1ResourcePool
     */
    auxContainerCapacity: number;
    /**
     * 
     * @type {number}
     * @memberof V1ResourcePool
     */
    auxContainersRunning: number;
    /**
     * 
     * @type {boolean}
     * @memberof V1ResourcePool
     */
    defaultComputePool: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V1ResourcePool
     */
    defaultAuxPool: boolean;
    /**
     * Is this resource pool using preemptible/spot instances? Only meaningful in
     * an AWS or GCP resource pool.
     * @type {boolean}
     * @memberof V1ResourcePool
     */
    preemptible: boolean;
    /**
     * When using dynamic agents, the minimum number of agents that can exist in
     * the resource pool.
     * @type {number}
     * @memberof V1ResourcePool
     */
    minAgents: number;
    /**
     * When using dynamic agents, the maximum number of agents that can exist in
     * the resource pool.
     * @type {number}
     * @memberof V1ResourcePool
     */
    maxAgents: number;
    /**
     * The number of slots that exists on an dynamic agent.
     * @type {number}
     * @memberof V1ResourcePool
     */
    slotsPerAgent?: number;
    /**
     * 
     * @type {number}
     * @memberof V1ResourcePool
     */
    auxContainerCapacityPerAgent: number;
    /**
     * 
     * @type {V1SchedulerType}
     * @memberof V1ResourcePool
     */
    schedulerType: V1SchedulerType;
    /**
     * 
     * @type {V1FittingPolicy}
     * @memberof V1ResourcePool
     */
    schedulerFittingPolicy: V1FittingPolicy;
    /**
     * The location of the resource pool. For AWS this returns the region and for
     * GCP this return the zone.
     * @type {string}
     * @memberof V1ResourcePool
     */
    location: string;
    /**
     * The VM image used for the agents when using dynamic agents.
     * @type {string}
     * @memberof V1ResourcePool
     */
    imageId: string;
    /**
     * The instance type of the agents when using dynamic agents. For AWS this is
     * the Instance Type. For GCP this is the machine type combined with the
     * number and types of GPUs. To work with this data programattically, we
     * recommend working with the ResourcePool.details.aws.instanceType and
     * ResourcePool.details.gcp.machineType/gpuType/gpuNum.
     * @type {string}
     * @memberof V1ResourcePool
     */
    instanceType: string;
    /**
     * 
     * @type {string}
     * @memberof V1ResourcePool
     */
    masterUrl: string;
    /**
     * 
     * @type {string}
     * @memberof V1ResourcePool
     */
    masterCertName: string;
    /**
     * The startup script for the agent. This runs on the node the agent runs on.
     * @type {string}
     * @memberof V1ResourcePool
     */
    startupScript: string;
    /**
     * The startup script for the agent's container. This runs in the container
     * determined-agent runs in.
     * @type {string}
     * @memberof V1ResourcePool
     */
    containerStartupScript: string;
    /**
     * The Docker network to use for the agent when using dynamic agents.
     * @type {string}
     * @memberof V1ResourcePool
     */
    agentDockerNetwork: string;
    /**
     * 
     * @type {string}
     * @memberof V1ResourcePool
     */
    agentDockerRuntime: string;
    /**
     * 
     * @type {string}
     * @memberof V1ResourcePool
     */
    agentDockerImage: string;
    /**
     * 
     * @type {string}
     * @memberof V1ResourcePool
     */
    agentFluentImage: string;
    /**
     * The maximum idle period of agents in seconds. The master waits for this
     * period of time before shutting down idle agents.
     * @type {number}
     * @memberof V1ResourcePool
     */
    maxIdleAgentPeriod: number;
    /**
     * The maximum starting period of agents in seconds. The master waits for this
     * period of time for starting agents before retrying.
     * @type {number}
     * @memberof V1ResourcePool
     */
    maxAgentStartingPeriod: number;
    /**
     * 
     * @type {V1ResourcePoolDetail}
     * @memberof V1ResourcePool
     */
    details: V1ResourcePoolDetail;
    /**
     * 
     * @type {string}
     * @memberof V1ResourcePool
     */
    accelerator?: string;
    /**
     * 
     * @type {V1QueueStats}
     * @memberof V1ResourcePool
     */
    stats?: V1QueueStats;
}

/**
 * Check if a given object implements the V1ResourcePool interface.
 */
export function instanceOfV1ResourcePool(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "numAgents" in value;
    isInstance = isInstance && "slotsAvailable" in value;
    isInstance = isInstance && "slotsUsed" in value;
    isInstance = isInstance && "slotType" in value;
    isInstance = isInstance && "auxContainerCapacity" in value;
    isInstance = isInstance && "auxContainersRunning" in value;
    isInstance = isInstance && "defaultComputePool" in value;
    isInstance = isInstance && "defaultAuxPool" in value;
    isInstance = isInstance && "preemptible" in value;
    isInstance = isInstance && "minAgents" in value;
    isInstance = isInstance && "maxAgents" in value;
    isInstance = isInstance && "auxContainerCapacityPerAgent" in value;
    isInstance = isInstance && "schedulerType" in value;
    isInstance = isInstance && "schedulerFittingPolicy" in value;
    isInstance = isInstance && "location" in value;
    isInstance = isInstance && "imageId" in value;
    isInstance = isInstance && "instanceType" in value;
    isInstance = isInstance && "masterUrl" in value;
    isInstance = isInstance && "masterCertName" in value;
    isInstance = isInstance && "startupScript" in value;
    isInstance = isInstance && "containerStartupScript" in value;
    isInstance = isInstance && "agentDockerNetwork" in value;
    isInstance = isInstance && "agentDockerRuntime" in value;
    isInstance = isInstance && "agentDockerImage" in value;
    isInstance = isInstance && "agentFluentImage" in value;
    isInstance = isInstance && "maxIdleAgentPeriod" in value;
    isInstance = isInstance && "maxAgentStartingPeriod" in value;
    isInstance = isInstance && "details" in value;

    return isInstance;
}

export function V1ResourcePoolFromJSON(json: any): V1ResourcePool {
    return V1ResourcePoolFromJSONTyped(json, false);
}

export function V1ResourcePoolFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ResourcePool {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': json['description'],
        'type': V1ResourcePoolTypeFromJSON(json['type']),
        'numAgents': json['numAgents'],
        'slotsAvailable': json['slotsAvailable'],
        'slotsUsed': json['slotsUsed'],
        'slotType': Determineddevicev1TypeFromJSON(json['slotType']),
        'auxContainerCapacity': json['auxContainerCapacity'],
        'auxContainersRunning': json['auxContainersRunning'],
        'defaultComputePool': json['defaultComputePool'],
        'defaultAuxPool': json['defaultAuxPool'],
        'preemptible': json['preemptible'],
        'minAgents': json['minAgents'],
        'maxAgents': json['maxAgents'],
        'slotsPerAgent': !exists(json, 'slotsPerAgent') ? undefined : json['slotsPerAgent'],
        'auxContainerCapacityPerAgent': json['auxContainerCapacityPerAgent'],
        'schedulerType': V1SchedulerTypeFromJSON(json['schedulerType']),
        'schedulerFittingPolicy': V1FittingPolicyFromJSON(json['schedulerFittingPolicy']),
        'location': json['location'],
        'imageId': json['imageId'],
        'instanceType': json['instanceType'],
        'masterUrl': json['masterUrl'],
        'masterCertName': json['masterCertName'],
        'startupScript': json['startupScript'],
        'containerStartupScript': json['containerStartupScript'],
        'agentDockerNetwork': json['agentDockerNetwork'],
        'agentDockerRuntime': json['agentDockerRuntime'],
        'agentDockerImage': json['agentDockerImage'],
        'agentFluentImage': json['agentFluentImage'],
        'maxIdleAgentPeriod': json['maxIdleAgentPeriod'],
        'maxAgentStartingPeriod': json['maxAgentStartingPeriod'],
        'details': V1ResourcePoolDetailFromJSON(json['details']),
        'accelerator': !exists(json, 'accelerator') ? undefined : json['accelerator'],
        'stats': !exists(json, 'stats') ? undefined : V1QueueStatsFromJSON(json['stats']),
    };
}

export function V1ResourcePoolToJSON(value?: V1ResourcePool | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'type': V1ResourcePoolTypeToJSON(value.type),
        'numAgents': value.numAgents,
        'slotsAvailable': value.slotsAvailable,
        'slotsUsed': value.slotsUsed,
        'slotType': Determineddevicev1TypeToJSON(value.slotType),
        'auxContainerCapacity': value.auxContainerCapacity,
        'auxContainersRunning': value.auxContainersRunning,
        'defaultComputePool': value.defaultComputePool,
        'defaultAuxPool': value.defaultAuxPool,
        'preemptible': value.preemptible,
        'minAgents': value.minAgents,
        'maxAgents': value.maxAgents,
        'slotsPerAgent': value.slotsPerAgent,
        'auxContainerCapacityPerAgent': value.auxContainerCapacityPerAgent,
        'schedulerType': V1SchedulerTypeToJSON(value.schedulerType),
        'schedulerFittingPolicy': V1FittingPolicyToJSON(value.schedulerFittingPolicy),
        'location': value.location,
        'imageId': value.imageId,
        'instanceType': value.instanceType,
        'masterUrl': value.masterUrl,
        'masterCertName': value.masterCertName,
        'startupScript': value.startupScript,
        'containerStartupScript': value.containerStartupScript,
        'agentDockerNetwork': value.agentDockerNetwork,
        'agentDockerRuntime': value.agentDockerRuntime,
        'agentDockerImage': value.agentDockerImage,
        'agentFluentImage': value.agentFluentImage,
        'maxIdleAgentPeriod': value.maxIdleAgentPeriod,
        'maxAgentStartingPeriod': value.maxAgentStartingPeriod,
        'details': V1ResourcePoolDetailToJSON(value.details),
        'accelerator': value.accelerator,
        'stats': V1QueueStatsToJSON(value.stats),
    };
}

