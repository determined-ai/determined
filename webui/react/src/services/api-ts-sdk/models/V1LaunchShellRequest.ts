/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1File } from './V1File';
import {
    V1FileFromJSON,
    V1FileFromJSONTyped,
    V1FileToJSON,
} from './V1File';

/**
 * Request to launch a shell.
 * @export
 * @interface V1LaunchShellRequest
 */
export interface V1LaunchShellRequest {
    /**
     * Shell config (JSON).
     * @type {object}
     * @memberof V1LaunchShellRequest
     */
    config?: object;
    /**
     * Template name.
     * @type {string}
     * @memberof V1LaunchShellRequest
     */
    templateName?: string;
    /**
     * The files to run with the command.
     * @type {Array<V1File>}
     * @memberof V1LaunchShellRequest
     */
    files?: Array<V1File>;
    /**
     * Additional data.
     * @type {string}
     * @memberof V1LaunchShellRequest
     */
    data?: string;
}

/**
 * Check if a given object implements the V1LaunchShellRequest interface.
 */
export function instanceOfV1LaunchShellRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1LaunchShellRequestFromJSON(json: any): V1LaunchShellRequest {
    return V1LaunchShellRequestFromJSONTyped(json, false);
}

export function V1LaunchShellRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1LaunchShellRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'config': !exists(json, 'config') ? undefined : json['config'],
        'templateName': !exists(json, 'templateName') ? undefined : json['templateName'],
        'files': !exists(json, 'files') ? undefined : ((json['files'] as Array<any>).map(V1FileFromJSON)),
        'data': !exists(json, 'data') ? undefined : json['data'],
    };
}

export function V1LaunchShellRequestToJSON(value?: V1LaunchShellRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'config': value.config,
        'templateName': value.templateName,
        'files': value.files === undefined ? undefined : ((value.files as Array<any>).map(V1FileToJSON)),
        'data': value.data,
    };
}

