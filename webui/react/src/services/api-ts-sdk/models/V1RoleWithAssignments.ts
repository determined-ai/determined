/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1GroupRoleAssignment } from './V1GroupRoleAssignment';
import {
    V1GroupRoleAssignmentFromJSON,
    V1GroupRoleAssignmentFromJSONTyped,
    V1GroupRoleAssignmentToJSON,
} from './V1GroupRoleAssignment';
import type { V1Role } from './V1Role';
import {
    V1RoleFromJSON,
    V1RoleFromJSONTyped,
    V1RoleToJSON,
} from './V1Role';
import type { V1UserRoleAssignment } from './V1UserRoleAssignment';
import {
    V1UserRoleAssignmentFromJSON,
    V1UserRoleAssignmentFromJSONTyped,
    V1UserRoleAssignmentToJSON,
} from './V1UserRoleAssignment';

/**
 * RoleWithAssignments contains a detailed description of
 * a role and the groups and users belonging to it.
 * @export
 * @interface V1RoleWithAssignments
 */
export interface V1RoleWithAssignments {
    /**
     * 
     * @type {V1Role}
     * @memberof V1RoleWithAssignments
     */
    role?: V1Role;
    /**
     * The embedded GroupRoleAssignment.
     * @type {Array<V1GroupRoleAssignment>}
     * @memberof V1RoleWithAssignments
     */
    groupRoleAssignments?: Array<V1GroupRoleAssignment>;
    /**
     * The embedded UserRoleAssignment.
     * @type {Array<V1UserRoleAssignment>}
     * @memberof V1RoleWithAssignments
     */
    userRoleAssignments?: Array<V1UserRoleAssignment>;
}

/**
 * Check if a given object implements the V1RoleWithAssignments interface.
 */
export function instanceOfV1RoleWithAssignments(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1RoleWithAssignmentsFromJSON(json: any): V1RoleWithAssignments {
    return V1RoleWithAssignmentsFromJSONTyped(json, false);
}

export function V1RoleWithAssignmentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1RoleWithAssignments {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'role': !exists(json, 'role') ? undefined : V1RoleFromJSON(json['role']),
        'groupRoleAssignments': !exists(json, 'groupRoleAssignments') ? undefined : ((json['groupRoleAssignments'] as Array<any>).map(V1GroupRoleAssignmentFromJSON)),
        'userRoleAssignments': !exists(json, 'userRoleAssignments') ? undefined : ((json['userRoleAssignments'] as Array<any>).map(V1UserRoleAssignmentFromJSON)),
    };
}

export function V1RoleWithAssignmentsToJSON(value?: V1RoleWithAssignments | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'role': V1RoleToJSON(value.role),
        'groupRoleAssignments': value.groupRoleAssignments === undefined ? undefined : ((value.groupRoleAssignments as Array<any>).map(V1GroupRoleAssignmentToJSON)),
        'userRoleAssignments': value.userRoleAssignments === undefined ? undefined : ((value.userRoleAssignments as Array<any>).map(V1UserRoleAssignmentToJSON)),
    };
}

