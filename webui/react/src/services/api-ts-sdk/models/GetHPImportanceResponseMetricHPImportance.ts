/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Hyperparameter importance as computed with respect for one specific metric.
 * @export
 * @interface GetHPImportanceResponseMetricHPImportance
 */
export interface GetHPImportanceResponseMetricHPImportance {
    /**
     * A map between hyperparameter names and their relative importance.
     * @type {{ [key: string]: number; }}
     * @memberof GetHPImportanceResponseMetricHPImportance
     */
    hpImportance?: { [key: string]: number; };
    /**
     * The approximate portion of the experiment that was complete when the data
     * was read.
     * @type {number}
     * @memberof GetHPImportanceResponseMetricHPImportance
     */
    experimentProgress?: number;
    /**
     * A description of why computation failed. Empty unless the state is (or
     * was) 'failed'.
     * @type {string}
     * @memberof GetHPImportanceResponseMetricHPImportance
     */
    error?: string;
    /**
     * Whether or not a request to compute results for this metric is queued.
     * @type {boolean}
     * @memberof GetHPImportanceResponseMetricHPImportance
     */
    pending?: boolean;
    /**
     * Whether or not results for this metric are currently being computed.
     * @type {boolean}
     * @memberof GetHPImportanceResponseMetricHPImportance
     */
    inProgress?: boolean;
}

/**
 * Check if a given object implements the GetHPImportanceResponseMetricHPImportance interface.
 */
export function instanceOfGetHPImportanceResponseMetricHPImportance(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GetHPImportanceResponseMetricHPImportanceFromJSON(json: any): GetHPImportanceResponseMetricHPImportance {
    return GetHPImportanceResponseMetricHPImportanceFromJSONTyped(json, false);
}

export function GetHPImportanceResponseMetricHPImportanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetHPImportanceResponseMetricHPImportance {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hpImportance': !exists(json, 'hpImportance') ? undefined : json['hpImportance'],
        'experimentProgress': !exists(json, 'experimentProgress') ? undefined : json['experimentProgress'],
        'error': !exists(json, 'error') ? undefined : json['error'],
        'pending': !exists(json, 'pending') ? undefined : json['pending'],
        'inProgress': !exists(json, 'inProgress') ? undefined : json['inProgress'],
    };
}

export function GetHPImportanceResponseMetricHPImportanceToJSON(value?: GetHPImportanceResponseMetricHPImportance | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hpImportance': value.hpImportance,
        'experimentProgress': value.experimentProgress,
        'error': value.error,
        'pending': value.pending,
        'inProgress': value.inProgress,
    };
}

