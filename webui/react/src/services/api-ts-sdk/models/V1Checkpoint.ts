/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedcheckpointv1State } from './Determinedcheckpointv1State';
import {
    Determinedcheckpointv1StateFromJSON,
    Determinedcheckpointv1StateFromJSONTyped,
    Determinedcheckpointv1StateToJSON,
} from './Determinedcheckpointv1State';
import type { V1CheckpointTrainingMetadata } from './V1CheckpointTrainingMetadata';
import {
    V1CheckpointTrainingMetadataFromJSON,
    V1CheckpointTrainingMetadataFromJSONTyped,
    V1CheckpointTrainingMetadataToJSON,
} from './V1CheckpointTrainingMetadata';

/**
 * Checkpoint a collection of files saved by a task.
 * @export
 * @interface V1Checkpoint
 */
export interface V1Checkpoint {
    /**
     * ID of the task which generated this checkpoint.
     * @type {string}
     * @memberof V1Checkpoint
     */
    taskId?: string;
    /**
     * ID of the allocation which generated this checkpoint.
     * @type {string}
     * @memberof V1Checkpoint
     */
    allocationId?: string;
    /**
     * UUID of the checkpoint.
     * @type {string}
     * @memberof V1Checkpoint
     */
    uuid: string;
    /**
     * Timestamp when the checkpoint was reported.
     * @type {Date}
     * @memberof V1Checkpoint
     */
    reportTime?: Date;
    /**
     * Dictionary of file paths to file sizes in bytes of all files in the
     * checkpoint.
     * @type {{ [key: string]: string; }}
     * @memberof V1Checkpoint
     */
    resources: { [key: string]: string; };
    /**
     * User defined metadata associated with the checkpoint.
     * @type {object}
     * @memberof V1Checkpoint
     */
    metadata: object;
    /**
     * 
     * @type {Determinedcheckpointv1State}
     * @memberof V1Checkpoint
     */
    state: Determinedcheckpointv1State;
    /**
     * 
     * @type {V1CheckpointTrainingMetadata}
     * @memberof V1Checkpoint
     */
    training: V1CheckpointTrainingMetadata;
}

/**
 * Check if a given object implements the V1Checkpoint interface.
 */
export function instanceOfV1Checkpoint(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "resources" in value;
    isInstance = isInstance && "metadata" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "training" in value;

    return isInstance;
}

export function V1CheckpointFromJSON(json: any): V1Checkpoint {
    return V1CheckpointFromJSONTyped(json, false);
}

export function V1CheckpointFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Checkpoint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taskId': !exists(json, 'taskId') ? undefined : json['taskId'],
        'allocationId': !exists(json, 'allocationId') ? undefined : json['allocationId'],
        'uuid': json['uuid'],
        'reportTime': !exists(json, 'reportTime') ? undefined : (new Date(json['reportTime'])),
        'resources': json['resources'],
        'metadata': json['metadata'],
        'state': Determinedcheckpointv1StateFromJSON(json['state']),
        'training': V1CheckpointTrainingMetadataFromJSON(json['training']),
    };
}

export function V1CheckpointToJSON(value?: V1Checkpoint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taskId': value.taskId,
        'allocationId': value.allocationId,
        'uuid': value.uuid,
        'reportTime': value.reportTime === undefined ? undefined : (value.reportTime.toISOString()),
        'resources': value.resources,
        'metadata': value.metadata,
        'state': Determinedcheckpointv1StateToJSON(value.state),
        'training': V1CheckpointTrainingMetadataToJSON(value.training),
    };
}

