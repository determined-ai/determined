/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1ValidateAfterOperation } from './V1ValidateAfterOperation';
import {
    V1ValidateAfterOperationFromJSON,
    V1ValidateAfterOperationFromJSONTyped,
    V1ValidateAfterOperationToJSON,
} from './V1ValidateAfterOperation';

/**
 * TrialOperation is any operation that a trial can perform while it is active.
 * @export
 * @interface V1TrialOperation
 */
export interface V1TrialOperation {
    /**
     * 
     * @type {V1ValidateAfterOperation}
     * @memberof V1TrialOperation
     */
    validateAfter?: V1ValidateAfterOperation;
}

/**
 * Check if a given object implements the V1TrialOperation interface.
 */
export function instanceOfV1TrialOperation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1TrialOperationFromJSON(json: any): V1TrialOperation {
    return V1TrialOperationFromJSONTyped(json, false);
}

export function V1TrialOperationFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialOperation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'validateAfter': !exists(json, 'validateAfter') ? undefined : V1ValidateAfterOperationFromJSON(json['validateAfter']),
    };
}

export function V1TrialOperationToJSON(value?: V1TrialOperation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'validateAfter': V1ValidateAfterOperationToJSON(value.validateAfter),
    };
}

