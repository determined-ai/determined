/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1AgentUserGroup } from './V1AgentUserGroup';
import {
    V1AgentUserGroupFromJSON,
    V1AgentUserGroupFromJSONTyped,
    V1AgentUserGroupToJSON,
} from './V1AgentUserGroup';

/**
 * Request to edit fields for a user.
 * @export
 * @interface V1PatchUser
 */
export interface V1PatchUser {
    /**
     * String denoting the username of the user.
     * @type {string}
     * @memberof V1PatchUser
     */
    username?: string;
    /**
     * String denoting the password of the user.
     * @type {string}
     * @memberof V1PatchUser
     */
    password?: string;
    /**
     * Bool denoting whether the account is an admin account.
     * @type {boolean}
     * @memberof V1PatchUser
     */
    admin?: boolean;
    /**
     * Bool denoting whether the account is active.
     * @type {boolean}
     * @memberof V1PatchUser
     */
    active?: boolean;
    /**
     * Name to display in the web UI.
     * @type {string}
     * @memberof V1PatchUser
     */
    displayName?: string;
    /**
     * 
     * @type {V1AgentUserGroup}
     * @memberof V1PatchUser
     */
    agentUserGroup?: V1AgentUserGroup;
    /**
     * Indicate whether the provided password is pre-salted & hashed or not.
     * @type {boolean}
     * @memberof V1PatchUser
     */
    isHashed?: boolean;
}

/**
 * Check if a given object implements the V1PatchUser interface.
 */
export function instanceOfV1PatchUser(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1PatchUserFromJSON(json: any): V1PatchUser {
    return V1PatchUserFromJSONTyped(json, false);
}

export function V1PatchUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PatchUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'username': !exists(json, 'username') ? undefined : json['username'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'admin': !exists(json, 'admin') ? undefined : json['admin'],
        'active': !exists(json, 'active') ? undefined : json['active'],
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'agentUserGroup': !exists(json, 'agentUserGroup') ? undefined : V1AgentUserGroupFromJSON(json['agentUserGroup']),
        'isHashed': !exists(json, 'isHashed') ? undefined : json['isHashed'],
    };
}

export function V1PatchUserToJSON(value?: V1PatchUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'password': value.password,
        'admin': value.admin,
        'active': value.active,
        'displayName': value.displayName,
        'agentUserGroup': V1AgentUserGroupToJSON(value.agentUserGroup),
        'isHashed': value.isHashed,
    };
}

