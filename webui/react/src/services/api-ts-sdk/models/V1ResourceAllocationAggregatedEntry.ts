/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1ResourceAllocationAggregationPeriod } from './V1ResourceAllocationAggregationPeriod';
import {
    V1ResourceAllocationAggregationPeriodFromJSON,
    V1ResourceAllocationAggregationPeriodFromJSONTyped,
    V1ResourceAllocationAggregationPeriodToJSON,
} from './V1ResourceAllocationAggregationPeriod';

/**
 * One instance of slots in the cluster being allocated to a task during a
 * period (aggregated).
 * @export
 * @interface V1ResourceAllocationAggregatedEntry
 */
export interface V1ResourceAllocationAggregatedEntry {
    /**
     * The date of this entry.
     * @type {string}
     * @memberof V1ResourceAllocationAggregatedEntry
     */
    periodStart: string;
    /**
     * 
     * @type {V1ResourceAllocationAggregationPeriod}
     * @memberof V1ResourceAllocationAggregatedEntry
     */
    period: V1ResourceAllocationAggregationPeriod;
    /**
     * The total number of seconds included in this allocation entry.
     * @type {number}
     * @memberof V1ResourceAllocationAggregatedEntry
     */
    seconds: number;
    /**
     * The seconds in the cluster used by experiments belonging to each user.
     * @type {{ [key: string]: number; }}
     * @memberof V1ResourceAllocationAggregatedEntry
     */
    byUsername: { [key: string]: number; };
    /**
     * The seconds in the cluster used by experiments labeled with each label.
     * @type {{ [key: string]: number; }}
     * @memberof V1ResourceAllocationAggregatedEntry
     */
    byExperimentLabel: { [key: string]: number; };
    /**
     * The seconds in the cluster used by experiments assigned to each resource
     * pool.
     * @type {{ [key: string]: number; }}
     * @memberof V1ResourceAllocationAggregatedEntry
     */
    byResourcePool: { [key: string]: number; };
    /**
     * The seconds in the cluster used by experiments assigned to each agent
     * label.
     * @type {{ [key: string]: number; }}
     * @memberof V1ResourceAllocationAggregatedEntry
     */
    byAgentLabel: { [key: string]: number; };
}

/**
 * Check if a given object implements the V1ResourceAllocationAggregatedEntry interface.
 */
export function instanceOfV1ResourceAllocationAggregatedEntry(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "periodStart" in value;
    isInstance = isInstance && "period" in value;
    isInstance = isInstance && "seconds" in value;
    isInstance = isInstance && "byUsername" in value;
    isInstance = isInstance && "byExperimentLabel" in value;
    isInstance = isInstance && "byResourcePool" in value;
    isInstance = isInstance && "byAgentLabel" in value;

    return isInstance;
}

export function V1ResourceAllocationAggregatedEntryFromJSON(json: any): V1ResourceAllocationAggregatedEntry {
    return V1ResourceAllocationAggregatedEntryFromJSONTyped(json, false);
}

export function V1ResourceAllocationAggregatedEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ResourceAllocationAggregatedEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'periodStart': json['periodStart'],
        'period': V1ResourceAllocationAggregationPeriodFromJSON(json['period']),
        'seconds': json['seconds'],
        'byUsername': json['byUsername'],
        'byExperimentLabel': json['byExperimentLabel'],
        'byResourcePool': json['byResourcePool'],
        'byAgentLabel': json['byAgentLabel'],
    };
}

export function V1ResourceAllocationAggregatedEntryToJSON(value?: V1ResourceAllocationAggregatedEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'periodStart': value.periodStart,
        'period': V1ResourceAllocationAggregationPeriodToJSON(value.period),
        'seconds': value.seconds,
        'byUsername': value.byUsername,
        'byExperimentLabel': value.byExperimentLabel,
        'byResourcePool': value.byResourcePool,
        'byAgentLabel': value.byAgentLabel,
    };
}

