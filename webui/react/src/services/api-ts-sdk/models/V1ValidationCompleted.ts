/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ValidationCompleted is a searcher event triggered when a validation has been
 * completed.
 * @export
 * @interface V1ValidationCompleted
 */
export interface V1ValidationCompleted {
    /**
     * UUID identifying the trial to the searcher.
     * @type {string}
     * @memberof V1ValidationCompleted
     */
    requestId: string;
    /**
     * Value of the validation metric used to direct the search.
     * @type {number}
     * @memberof V1ValidationCompleted
     */
    metric: number;
    /**
     * Length from ValidateAfterOperation.
     * @type {string}
     * @memberof V1ValidationCompleted
     */
    validateAfterLength: string;
}

/**
 * Check if a given object implements the V1ValidationCompleted interface.
 */
export function instanceOfV1ValidationCompleted(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "requestId" in value;
    isInstance = isInstance && "metric" in value;
    isInstance = isInstance && "validateAfterLength" in value;

    return isInstance;
}

export function V1ValidationCompletedFromJSON(json: any): V1ValidationCompleted {
    return V1ValidationCompletedFromJSONTyped(json, false);
}

export function V1ValidationCompletedFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ValidationCompleted {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'requestId': json['requestId'],
        'metric': json['metric'],
        'validateAfterLength': json['validateAfterLength'],
    };
}

export function V1ValidationCompletedToJSON(value?: V1ValidationCompleted | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'requestId': value.requestId,
        'metric': value.metric,
        'validateAfterLength': value.validateAfterLength,
    };
}

