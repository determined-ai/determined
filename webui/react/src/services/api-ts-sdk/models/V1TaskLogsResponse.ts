/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1LogLevel } from './V1LogLevel';
import {
    V1LogLevelFromJSON,
    V1LogLevelFromJSONTyped,
    V1LogLevelToJSON,
} from './V1LogLevel';

/**
 * Response to TaskLogsRequest.
 * @export
 * @interface V1TaskLogsResponse
 */
export interface V1TaskLogsResponse {
    /**
     * The ID of the log.
     * @type {string}
     * @memberof V1TaskLogsResponse
     */
    id: string;
    /**
     * The timestamp of the log.
     * @type {Date}
     * @memberof V1TaskLogsResponse
     */
    timestamp: Date;
    /**
     * The log message.
     * @type {string}
     * @memberof V1TaskLogsResponse
     */
    message: string;
    /**
     * 
     * @type {V1LogLevel}
     * @memberof V1TaskLogsResponse
     */
    level: V1LogLevel;
}

/**
 * Check if a given object implements the V1TaskLogsResponse interface.
 */
export function instanceOfV1TaskLogsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "level" in value;

    return isInstance;
}

export function V1TaskLogsResponseFromJSON(json: any): V1TaskLogsResponse {
    return V1TaskLogsResponseFromJSONTyped(json, false);
}

export function V1TaskLogsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TaskLogsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'timestamp': (new Date(json['timestamp'])),
        'message': json['message'],
        'level': V1LogLevelFromJSON(json['level']),
    };
}

export function V1TaskLogsResponseToJSON(value?: V1TaskLogsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'timestamp': (value.timestamp.toISOString()),
        'message': value.message,
        'level': V1LogLevelToJSON(value.level),
    };
}

