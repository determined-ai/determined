/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * One datapoint in a series of metrics from a trial.
 * @export
 * @interface V1DataPoint
 */
export interface V1DataPoint {
    /**
     * Total batches processed by the time this measurement is taken.
     * @type {number}
     * @memberof V1DataPoint
     */
    batches: number;
    /**
     * Value of the requested metric at this point in the trial.
     * @type {number}
     * @memberof V1DataPoint
     */
    value: number;
}

/**
 * Check if a given object implements the V1DataPoint interface.
 */
export function instanceOfV1DataPoint(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "batches" in value;
    isInstance = isInstance && "value" in value;

    return isInstance;
}

export function V1DataPointFromJSON(json: any): V1DataPoint {
    return V1DataPointFromJSONTyped(json, false);
}

export function V1DataPointFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1DataPoint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'batches': json['batches'],
        'value': json['value'],
    };
}

export function V1DataPointToJSON(value?: V1DataPoint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'batches': value.batches,
        'value': value.value,
    };
}

