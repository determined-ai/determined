/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1AggregateQueueStats } from './V1AggregateQueueStats';
import {
    V1AggregateQueueStatsFromJSON,
    V1AggregateQueueStatsFromJSONTyped,
    V1AggregateQueueStatsToJSON,
} from './V1AggregateQueueStats';
import type { V1QueueStats } from './V1QueueStats';
import {
    V1QueueStatsFromJSON,
    V1QueueStatsFromJSONTyped,
    V1QueueStatsToJSON,
} from './V1QueueStats';

/**
 * Job stats for a resource pool.
 * @export
 * @interface V1RPQueueStat
 */
export interface V1RPQueueStat {
    /**
     * 
     * @type {V1QueueStats}
     * @memberof V1RPQueueStat
     */
    stats: V1QueueStats;
    /**
     * Resource pool.
     * @type {string}
     * @memberof V1RPQueueStat
     */
    resourcePool: string;
    /**
     * Aggregate stats.
     * @type {Array<V1AggregateQueueStats>}
     * @memberof V1RPQueueStat
     */
    aggregates?: Array<V1AggregateQueueStats>;
}

/**
 * Check if a given object implements the V1RPQueueStat interface.
 */
export function instanceOfV1RPQueueStat(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "stats" in value;
    isInstance = isInstance && "resourcePool" in value;

    return isInstance;
}

export function V1RPQueueStatFromJSON(json: any): V1RPQueueStat {
    return V1RPQueueStatFromJSONTyped(json, false);
}

export function V1RPQueueStatFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1RPQueueStat {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stats': V1QueueStatsFromJSON(json['stats']),
        'resourcePool': json['resourcePool'],
        'aggregates': !exists(json, 'aggregates') ? undefined : ((json['aggregates'] as Array<any>).map(V1AggregateQueueStatsFromJSON)),
    };
}

export function V1RPQueueStatToJSON(value?: V1RPQueueStat | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stats': V1QueueStatsToJSON(value.stats),
        'resourcePool': value.resourcePool,
        'aggregates': value.aggregates === undefined ? undefined : ((value.aggregates as Array<any>).map(V1AggregateQueueStatsToJSON)),
    };
}

