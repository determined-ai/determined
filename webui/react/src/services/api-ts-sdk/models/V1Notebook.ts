/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedtaskv1State } from './Determinedtaskv1State';
import {
    Determinedtaskv1StateFromJSON,
    Determinedtaskv1StateFromJSONTyped,
    Determinedtaskv1StateToJSON,
} from './Determinedtaskv1State';
import type { V1Container } from './V1Container';
import {
    V1ContainerFromJSON,
    V1ContainerFromJSONTyped,
    V1ContainerToJSON,
} from './V1Container';

/**
 * Notebook is a Jupyter notebook in a containerized environment.
 * @export
 * @interface V1Notebook
 */
export interface V1Notebook {
    /**
     * The id of the notebook.
     * @type {string}
     * @memberof V1Notebook
     */
    id: string;
    /**
     * The description of the notebook.
     * @type {string}
     * @memberof V1Notebook
     */
    description: string;
    /**
     * 
     * @type {Determinedtaskv1State}
     * @memberof V1Notebook
     */
    state: Determinedtaskv1State;
    /**
     * The time the notebook was started.
     * @type {Date}
     * @memberof V1Notebook
     */
    startTime: Date;
    /**
     * 
     * @type {V1Container}
     * @memberof V1Notebook
     */
    container?: V1Container;
    /**
     * The display name of the user that created the notebook.
     * @type {string}
     * @memberof V1Notebook
     */
    displayName?: string;
    /**
     * The id of the user that created the notebook.
     * @type {number}
     * @memberof V1Notebook
     */
    userId?: number;
    /**
     * The username of the user that created the notebook.
     * @type {string}
     * @memberof V1Notebook
     */
    username: string;
    /**
     * The service address.
     * @type {string}
     * @memberof V1Notebook
     */
    serviceAddress?: string;
    /**
     * The name of the resource pool the Notebook was created in.
     * @type {string}
     * @memberof V1Notebook
     */
    resourcePool: string;
    /**
     * The exit status.
     * @type {string}
     * @memberof V1Notebook
     */
    exitStatus?: string;
    /**
     * The associated job id.
     * @type {string}
     * @memberof V1Notebook
     */
    jobId: string;
}

/**
 * Check if a given object implements the V1Notebook interface.
 */
export function instanceOfV1Notebook(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "resourcePool" in value;
    isInstance = isInstance && "jobId" in value;

    return isInstance;
}

export function V1NotebookFromJSON(json: any): V1Notebook {
    return V1NotebookFromJSONTyped(json, false);
}

export function V1NotebookFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Notebook {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'description': json['description'],
        'state': Determinedtaskv1StateFromJSON(json['state']),
        'startTime': (new Date(json['startTime'])),
        'container': !exists(json, 'container') ? undefined : V1ContainerFromJSON(json['container']),
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'username': json['username'],
        'serviceAddress': !exists(json, 'serviceAddress') ? undefined : json['serviceAddress'],
        'resourcePool': json['resourcePool'],
        'exitStatus': !exists(json, 'exitStatus') ? undefined : json['exitStatus'],
        'jobId': json['jobId'],
    };
}

export function V1NotebookToJSON(value?: V1Notebook | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'description': value.description,
        'state': Determinedtaskv1StateToJSON(value.state),
        'startTime': (value.startTime.toISOString()),
        'container': V1ContainerToJSON(value.container),
        'displayName': value.displayName,
        'userId': value.userId,
        'username': value.username,
        'serviceAddress': value.serviceAddress,
        'resourcePool': value.resourcePool,
        'exitStatus': value.exitStatus,
        'jobId': value.jobId,
    };
}

