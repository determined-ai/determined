/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Metrics } from './V1Metrics';
import {
    V1MetricsFromJSON,
    V1MetricsFromJSONTyped,
    V1MetricsToJSON,
} from './V1Metrics';

/**
 * CheckpointTrainingMetadata is specifically metadata about training.
 * @export
 * @interface V1CheckpointTrainingMetadata
 */
export interface V1CheckpointTrainingMetadata {
    /**
     * The ID of the trial that created this checkpoint.
     * @type {number}
     * @memberof V1CheckpointTrainingMetadata
     */
    trialId?: number;
    /**
     * The ID of the experiment that created this checkpoint.
     * @type {number}
     * @memberof V1CheckpointTrainingMetadata
     */
    experimentId?: number;
    /**
     * The configuration of the experiment that created this checkpoint.
     * @type {object}
     * @memberof V1CheckpointTrainingMetadata
     */
    experimentConfig?: object;
    /**
     * Hyperparameter values for the trial that created this checkpoint.
     * @type {object}
     * @memberof V1CheckpointTrainingMetadata
     */
    hparams?: object;
    /**
     * 
     * @type {V1Metrics}
     * @memberof V1CheckpointTrainingMetadata
     */
    trainingMetrics?: V1Metrics;
    /**
     * 
     * @type {V1Metrics}
     * @memberof V1CheckpointTrainingMetadata
     */
    validationMetrics?: V1Metrics;
    /**
     * Searcher metric (as specified by the expconf) at the same steps_completed
     * of the checkpoint.
     * @type {number}
     * @memberof V1CheckpointTrainingMetadata
     */
    searcherMetric?: number;
}

/**
 * Check if a given object implements the V1CheckpointTrainingMetadata interface.
 */
export function instanceOfV1CheckpointTrainingMetadata(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1CheckpointTrainingMetadataFromJSON(json: any): V1CheckpointTrainingMetadata {
    return V1CheckpointTrainingMetadataFromJSONTyped(json, false);
}

export function V1CheckpointTrainingMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1CheckpointTrainingMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trialId': !exists(json, 'trialId') ? undefined : json['trialId'],
        'experimentId': !exists(json, 'experimentId') ? undefined : json['experimentId'],
        'experimentConfig': !exists(json, 'experimentConfig') ? undefined : json['experimentConfig'],
        'hparams': !exists(json, 'hparams') ? undefined : json['hparams'],
        'trainingMetrics': !exists(json, 'trainingMetrics') ? undefined : V1MetricsFromJSON(json['trainingMetrics']),
        'validationMetrics': !exists(json, 'validationMetrics') ? undefined : V1MetricsFromJSON(json['validationMetrics']),
        'searcherMetric': !exists(json, 'searcherMetric') ? undefined : json['searcherMetric'],
    };
}

export function V1CheckpointTrainingMetadataToJSON(value?: V1CheckpointTrainingMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trialId': value.trialId,
        'experimentId': value.experimentId,
        'experimentConfig': value.experimentConfig,
        'hparams': value.hparams,
        'trainingMetrics': V1MetricsToJSON(value.trainingMetrics),
        'validationMetrics': V1MetricsToJSON(value.validationMetrics),
        'searcherMetric': value.searcherMetric,
    };
}

