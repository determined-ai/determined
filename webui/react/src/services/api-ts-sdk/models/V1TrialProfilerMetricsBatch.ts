/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1TrialProfilerMetricLabels } from './V1TrialProfilerMetricLabels';
import {
    V1TrialProfilerMetricLabelsFromJSON,
    V1TrialProfilerMetricLabelsFromJSONTyped,
    V1TrialProfilerMetricLabelsToJSON,
} from './V1TrialProfilerMetricLabels';

/**
 * TrialProfilerMetricsBatch is a batch of trial profiler metrics. A batch will
 * contain metrics pertaining to a single series. The fields values, batches and
 * timestamps will be equal length arrays with each index corresponding to a
 * reading.
 * @export
 * @interface V1TrialProfilerMetricsBatch
 */
export interface V1TrialProfilerMetricsBatch {
    /**
     * The measurement for a reading, repeated for the batch of metrics.
     * @type {Array<number>}
     * @memberof V1TrialProfilerMetricsBatch
     */
    values: Array<number>;
    /**
     * The batch at which a reading occurred, repeated for the batch of metrics.
     * @type {Array<number>}
     * @memberof V1TrialProfilerMetricsBatch
     */
    batches: Array<number>;
    /**
     * The timestamp at which a reading occurred, repeated for the batch of
     * metrics.
     * @type {Array<Date>}
     * @memberof V1TrialProfilerMetricsBatch
     */
    timestamps: Array<Date>;
    /**
     * 
     * @type {V1TrialProfilerMetricLabels}
     * @memberof V1TrialProfilerMetricsBatch
     */
    labels: V1TrialProfilerMetricLabels;
}

/**
 * Check if a given object implements the V1TrialProfilerMetricsBatch interface.
 */
export function instanceOfV1TrialProfilerMetricsBatch(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "values" in value;
    isInstance = isInstance && "batches" in value;
    isInstance = isInstance && "timestamps" in value;
    isInstance = isInstance && "labels" in value;

    return isInstance;
}

export function V1TrialProfilerMetricsBatchFromJSON(json: any): V1TrialProfilerMetricsBatch {
    return V1TrialProfilerMetricsBatchFromJSONTyped(json, false);
}

export function V1TrialProfilerMetricsBatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialProfilerMetricsBatch {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'values': json['values'],
        'batches': json['batches'],
        'timestamps': json['timestamps'],
        'labels': V1TrialProfilerMetricLabelsFromJSON(json['labels']),
    };
}

export function V1TrialProfilerMetricsBatchToJSON(value?: V1TrialProfilerMetricsBatch | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'values': value.values,
        'batches': value.batches,
        'timestamps': value.timestamps,
        'labels': V1TrialProfilerMetricLabelsToJSON(value.labels),
    };
}

