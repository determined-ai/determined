/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1DataPoint } from './V1DataPoint';
import {
    V1DataPointFromJSON,
    V1DataPointFromJSONTyped,
    V1DataPointToJSON,
} from './V1DataPoint';
import type { V1MetricType } from './V1MetricType';
import {
    V1MetricTypeFromJSON,
    V1MetricTypeFromJSONTyped,
    V1MetricTypeToJSON,
} from './V1MetricType';

/**
 * Summarized Metric captures a metric's name and downsampled data points.
 * @export
 * @interface V1SummarizedMetric
 */
export interface V1SummarizedMetric {
    /**
     * Name of the selected metric.
     * @type {string}
     * @memberof V1SummarizedMetric
     */
    name: string;
    /**
     * A possibly down-sampled series of metric readings through the progress of
     * the trial.
     * @type {Array<V1DataPoint>}
     * @memberof V1SummarizedMetric
     */
    data: Array<V1DataPoint>;
    /**
     * 
     * @type {V1MetricType}
     * @memberof V1SummarizedMetric
     */
    type: V1MetricType;
}

/**
 * Check if a given object implements the V1SummarizedMetric interface.
 */
export function instanceOfV1SummarizedMetric(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "data" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function V1SummarizedMetricFromJSON(json: any): V1SummarizedMetric {
    return V1SummarizedMetricFromJSONTyped(json, false);
}

export function V1SummarizedMetricFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1SummarizedMetric {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'data': ((json['data'] as Array<any>).map(V1DataPointFromJSON)),
        'type': V1MetricTypeFromJSON(json['type']),
    };
}

export function V1SummarizedMetricToJSON(value?: V1SummarizedMetric | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'data': ((value.data as Array<any>).map(V1DataPointToJSON)),
        'type': V1MetricTypeToJSON(value.type),
    };
}

