/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Trialv1Trial } from './Trialv1Trial';
import {
    Trialv1TrialFromJSON,
    Trialv1TrialFromJSONTyped,
    Trialv1TrialToJSON,
} from './Trialv1Trial';
import type { V1Pagination } from './V1Pagination';
import {
    V1PaginationFromJSON,
    V1PaginationFromJSONTyped,
    V1PaginationToJSON,
} from './V1Pagination';

/**
 * Response to GetExperimentTrialsRequest.
 * @export
 * @interface V1GetExperimentTrialsResponse
 */
export interface V1GetExperimentTrialsResponse {
    /**
     * The list of returned trials.
     * @type {Array<Trialv1Trial>}
     * @memberof V1GetExperimentTrialsResponse
     */
    trials: Array<Trialv1Trial>;
    /**
     * 
     * @type {V1Pagination}
     * @memberof V1GetExperimentTrialsResponse
     */
    pagination: V1Pagination;
}

/**
 * Check if a given object implements the V1GetExperimentTrialsResponse interface.
 */
export function instanceOfV1GetExperimentTrialsResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "trials" in value;
    isInstance = isInstance && "pagination" in value;

    return isInstance;
}

export function V1GetExperimentTrialsResponseFromJSON(json: any): V1GetExperimentTrialsResponse {
    return V1GetExperimentTrialsResponseFromJSONTyped(json, false);
}

export function V1GetExperimentTrialsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1GetExperimentTrialsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trials': ((json['trials'] as Array<any>).map(Trialv1TrialFromJSON)),
        'pagination': V1PaginationFromJSON(json['pagination']),
    };
}

export function V1GetExperimentTrialsResponseToJSON(value?: V1GetExperimentTrialsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trials': ((value.trials as Array<any>).map(Trialv1TrialToJSON)),
        'pagination': V1PaginationToJSON(value.pagination),
    };
}

