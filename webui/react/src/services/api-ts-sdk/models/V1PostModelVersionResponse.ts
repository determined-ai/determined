/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1ModelVersion } from './V1ModelVersion';
import {
    V1ModelVersionFromJSON,
    V1ModelVersionFromJSONTyped,
    V1ModelVersionToJSON,
} from './V1ModelVersion';

/**
 * Response for PostModelVersionRequest.
 * @export
 * @interface V1PostModelVersionResponse
 */
export interface V1PostModelVersionResponse {
    /**
     * 
     * @type {V1ModelVersion}
     * @memberof V1PostModelVersionResponse
     */
    modelVersion: V1ModelVersion;
}

/**
 * Check if a given object implements the V1PostModelVersionResponse interface.
 */
export function instanceOfV1PostModelVersionResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "modelVersion" in value;

    return isInstance;
}

export function V1PostModelVersionResponseFromJSON(json: any): V1PostModelVersionResponse {
    return V1PostModelVersionResponseFromJSONTyped(json, false);
}

export function V1PostModelVersionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PostModelVersionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'modelVersion': V1ModelVersionFromJSON(json['modelVersion']),
    };
}

export function V1PostModelVersionResponseToJSON(value?: V1PostModelVersionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'modelVersion': V1ModelVersionToJSON(value.modelVersion),
    };
}

