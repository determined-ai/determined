/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1RunnableOperation } from './V1RunnableOperation';
import {
    V1RunnableOperationFromJSON,
    V1RunnableOperationFromJSONTyped,
    V1RunnableOperationToJSON,
} from './V1RunnableOperation';

/**
 * TrialSimulation is a specific sequence of workloads that were run before the
 * trial was completed.
 * @export
 * @interface V1TrialSimulation
 */
export interface V1TrialSimulation {
    /**
     * The list of operations that were run before the trial was completed.
     * @type {Array<V1RunnableOperation>}
     * @memberof V1TrialSimulation
     */
    operations?: Array<V1RunnableOperation>;
    /**
     * The number of times that this trial configuration has occurred during the
     * simulation.
     * @type {number}
     * @memberof V1TrialSimulation
     */
    occurrences?: number;
}

/**
 * Check if a given object implements the V1TrialSimulation interface.
 */
export function instanceOfV1TrialSimulation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1TrialSimulationFromJSON(json: any): V1TrialSimulation {
    return V1TrialSimulationFromJSONTyped(json, false);
}

export function V1TrialSimulationFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialSimulation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'operations': !exists(json, 'operations') ? undefined : ((json['operations'] as Array<any>).map(V1RunnableOperationFromJSON)),
        'occurrences': !exists(json, 'occurrences') ? undefined : json['occurrences'],
    };
}

export function V1TrialSimulationToJSON(value?: V1TrialSimulation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'operations': value.operations === undefined ? undefined : ((value.operations as Array<any>).map(V1RunnableOperationToJSON)),
        'occurrences': value.occurrences,
    };
}

