/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Experiment } from './V1Experiment';
import {
    V1ExperimentFromJSON,
    V1ExperimentFromJSONTyped,
    V1ExperimentToJSON,
} from './V1Experiment';

/**
 * Response to PatchExperimentRequest.
 * @export
 * @interface V1PatchExperimentResponse
 */
export interface V1PatchExperimentResponse {
    /**
     * 
     * @type {V1Experiment}
     * @memberof V1PatchExperimentResponse
     */
    experiment?: V1Experiment;
}

/**
 * Check if a given object implements the V1PatchExperimentResponse interface.
 */
export function instanceOfV1PatchExperimentResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1PatchExperimentResponseFromJSON(json: any): V1PatchExperimentResponse {
    return V1PatchExperimentResponseFromJSONTyped(json, false);
}

export function V1PatchExperimentResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PatchExperimentResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'experiment': !exists(json, 'experiment') ? undefined : V1ExperimentFromJSON(json['experiment']),
    };
}

export function V1PatchExperimentResponseToJSON(value?: V1PatchExperimentResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'experiment': V1ExperimentToJSON(value.experiment),
    };
}

