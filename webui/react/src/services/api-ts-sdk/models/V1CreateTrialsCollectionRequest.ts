/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1TrialFilters } from './V1TrialFilters';
import {
    V1TrialFiltersFromJSON,
    V1TrialFiltersFromJSONTyped,
    V1TrialFiltersToJSON,
} from './V1TrialFilters';
import type { V1TrialSorter } from './V1TrialSorter';
import {
    V1TrialSorterFromJSON,
    V1TrialSorterFromJSONTyped,
    V1TrialSorterToJSON,
} from './V1TrialSorter';

/**
 * Request body for CeateTrials request which includes TrialFilters.
 * @export
 * @interface V1CreateTrialsCollectionRequest
 */
export interface V1CreateTrialsCollectionRequest {
    /**
     * The name for the collection.
     * @type {string}
     * @memberof V1CreateTrialsCollectionRequest
     */
    name: string;
    /**
     * The project id for the collection.
     * @type {number}
     * @memberof V1CreateTrialsCollectionRequest
     */
    projectId: number;
    /**
     * 
     * @type {V1TrialFilters}
     * @memberof V1CreateTrialsCollectionRequest
     */
    filters: V1TrialFilters;
    /**
     * 
     * @type {V1TrialSorter}
     * @memberof V1CreateTrialsCollectionRequest
     */
    sorter: V1TrialSorter;
}

/**
 * Check if a given object implements the V1CreateTrialsCollectionRequest interface.
 */
export function instanceOfV1CreateTrialsCollectionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "filters" in value;
    isInstance = isInstance && "sorter" in value;

    return isInstance;
}

export function V1CreateTrialsCollectionRequestFromJSON(json: any): V1CreateTrialsCollectionRequest {
    return V1CreateTrialsCollectionRequestFromJSONTyped(json, false);
}

export function V1CreateTrialsCollectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1CreateTrialsCollectionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'projectId': json['projectId'],
        'filters': V1TrialFiltersFromJSON(json['filters']),
        'sorter': V1TrialSorterFromJSON(json['sorter']),
    };
}

export function V1CreateTrialsCollectionRequestToJSON(value?: V1CreateTrialsCollectionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'projectId': value.projectId,
        'filters': V1TrialFiltersToJSON(value.filters),
        'sorter': V1TrialSorterToJSON(value.sorter),
    };
}

