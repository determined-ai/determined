/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1TrialSimulation } from './V1TrialSimulation';
import {
    V1TrialSimulationFromJSON,
    V1TrialSimulationFromJSONTyped,
    V1TrialSimulationToJSON,
} from './V1TrialSimulation';

/**
 * ExperimentSimulation holds the configuration and results of simulated run of
 * a searcher.
 * @export
 * @interface V1ExperimentSimulation
 */
export interface V1ExperimentSimulation {
    /**
     * The simulated experiment config.
     * @type {object}
     * @memberof V1ExperimentSimulation
     */
    config?: object;
    /**
     * The searcher simulation seed.
     * @type {number}
     * @memberof V1ExperimentSimulation
     */
    seed?: number;
    /**
     * The list of trials in the simulation.
     * @type {Array<V1TrialSimulation>}
     * @memberof V1ExperimentSimulation
     */
    trials?: Array<V1TrialSimulation>;
}

/**
 * Check if a given object implements the V1ExperimentSimulation interface.
 */
export function instanceOfV1ExperimentSimulation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1ExperimentSimulationFromJSON(json: any): V1ExperimentSimulation {
    return V1ExperimentSimulationFromJSONTyped(json, false);
}

export function V1ExperimentSimulationFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ExperimentSimulation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'config': !exists(json, 'config') ? undefined : json['config'],
        'seed': !exists(json, 'seed') ? undefined : json['seed'],
        'trials': !exists(json, 'trials') ? undefined : ((json['trials'] as Array<any>).map(V1TrialSimulationFromJSON)),
    };
}

export function V1ExperimentSimulationToJSON(value?: V1ExperimentSimulation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'config': value.config,
        'seed': value.seed,
        'trials': value.trials === undefined ? undefined : ((value.trials as Array<any>).map(V1TrialSimulationToJSON)),
    };
}

