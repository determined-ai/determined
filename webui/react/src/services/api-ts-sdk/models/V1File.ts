/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * File is a Unix file.
 * @export
 * @interface V1File
 */
export interface V1File {
    /**
     * Path to the file.
     * @type {string}
     * @memberof V1File
     */
    path: string;
    /**
     * File type.
     * @type {number}
     * @memberof V1File
     */
    type: number;
    /**
     * base64 encoded contents of the file.
     * @type {string}
     * @memberof V1File
     */
    content: string;
    /**
     * Modified time (Unix timestamp).
     * @type {string}
     * @memberof V1File
     */
    mtime: string;
    /**
     * File mode.
     * @type {number}
     * @memberof V1File
     */
    mode: number;
    /**
     * User ID.
     * @type {number}
     * @memberof V1File
     */
    uid: number;
    /**
     * Group ID.
     * @type {number}
     * @memberof V1File
     */
    gid: number;
}

/**
 * Check if a given object implements the V1File interface.
 */
export function instanceOfV1File(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "path" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "mtime" in value;
    isInstance = isInstance && "mode" in value;
    isInstance = isInstance && "uid" in value;
    isInstance = isInstance && "gid" in value;

    return isInstance;
}

export function V1FileFromJSON(json: any): V1File {
    return V1FileFromJSONTyped(json, false);
}

export function V1FileFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1File {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'path': json['path'],
        'type': json['type'],
        'content': json['content'],
        'mtime': json['mtime'],
        'mode': json['mode'],
        'uid': json['uid'],
        'gid': json['gid'],
    };
}

export function V1FileToJSON(value?: V1File | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'path': value.path,
        'type': value.type,
        'content': value.content,
        'mtime': value.mtime,
        'mode': value.mode,
        'uid': value.uid,
        'gid': value.gid,
    };
}

