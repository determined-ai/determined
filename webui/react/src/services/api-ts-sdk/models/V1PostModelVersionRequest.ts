/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Request for creating a model version.
 * @export
 * @interface V1PostModelVersionRequest
 */
export interface V1PostModelVersionRequest {
    /**
     * The name of the model to add this version to.
     * @type {string}
     * @memberof V1PostModelVersionRequest
     */
    modelName: string;
    /**
     * UUID of the checkpoint.
     * @type {string}
     * @memberof V1PostModelVersionRequest
     */
    checkpointUuid: string;
    /**
     * User-friendly name for the model version.
     * @type {string}
     * @memberof V1PostModelVersionRequest
     */
    name?: string;
    /**
     * User-written comment for the model version.
     * @type {string}
     * @memberof V1PostModelVersionRequest
     */
    comment?: string;
    /**
     * The user-defined metadata of the model version.
     * @type {object}
     * @memberof V1PostModelVersionRequest
     */
    metadata?: object;
    /**
     * Labels associated with this model version.
     * @type {Array<string>}
     * @memberof V1PostModelVersionRequest
     */
    labels?: Array<string>;
    /**
     * Notes associated with this model version.
     * @type {string}
     * @memberof V1PostModelVersionRequest
     */
    notes?: string;
}

/**
 * Check if a given object implements the V1PostModelVersionRequest interface.
 */
export function instanceOfV1PostModelVersionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "modelName" in value;
    isInstance = isInstance && "checkpointUuid" in value;

    return isInstance;
}

export function V1PostModelVersionRequestFromJSON(json: any): V1PostModelVersionRequest {
    return V1PostModelVersionRequestFromJSONTyped(json, false);
}

export function V1PostModelVersionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PostModelVersionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'modelName': json['modelName'],
        'checkpointUuid': json['checkpointUuid'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
    };
}

export function V1PostModelVersionRequestToJSON(value?: V1PostModelVersionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'modelName': value.modelName,
        'checkpointUuid': value.checkpointUuid,
        'name': value.name,
        'comment': value.comment,
        'metadata': value.metadata,
        'labels': value.labels,
        'notes': value.notes,
    };
}

