/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1AgentUserGroup } from './V1AgentUserGroup';
import {
    V1AgentUserGroupFromJSON,
    V1AgentUserGroupFromJSONTyped,
    V1AgentUserGroupToJSON,
} from './V1AgentUserGroup';
import type { V1WorkspaceState } from './V1WorkspaceState';
import {
    V1WorkspaceStateFromJSON,
    V1WorkspaceStateFromJSONTyped,
    V1WorkspaceStateToJSON,
} from './V1WorkspaceState';

/**
 * Workspace is a named collection of projects.
 * @export
 * @interface V1Workspace
 */
export interface V1Workspace {
    /**
     * The unique id of the workspace.
     * @type {number}
     * @memberof V1Workspace
     */
    id: number;
    /**
     * The unique name of the workspace.
     * @type {string}
     * @memberof V1Workspace
     */
    name: string;
    /**
     * Whether this workspace is archived or not.
     * @type {boolean}
     * @memberof V1Workspace
     */
    archived: boolean;
    /**
     * User who created this workspace.
     * @type {string}
     * @memberof V1Workspace
     */
    username: string;
    /**
     * Whether this workspace is immutable (default uncategorized workspace).
     * @type {boolean}
     * @memberof V1Workspace
     */
    immutable: boolean;
    /**
     * Number of projects associated with this workspace.
     * @type {number}
     * @memberof V1Workspace
     */
    numProjects: number;
    /**
     * Pin status of this workspace for the current user.
     * @type {boolean}
     * @memberof V1Workspace
     */
    pinned: boolean;
    /**
     * ID of the user who created this project.
     * @type {number}
     * @memberof V1Workspace
     */
    userId: number;
    /**
     * Number of experiments associated with this workspace.
     * @type {number}
     * @memberof V1Workspace
     */
    numExperiments: number;
    /**
     * 
     * @type {V1WorkspaceState}
     * @memberof V1Workspace
     */
    state: V1WorkspaceState;
    /**
     * Message stored from errors on async-deleting a workspace.
     * @type {string}
     * @memberof V1Workspace
     */
    errorMessage: string;
    /**
     * 
     * @type {V1AgentUserGroup}
     * @memberof V1Workspace
     */
    agentUserGroup?: V1AgentUserGroup;
    /**
     * Optional checkpoint storage config.
     * Expects same format as experiment config's checkpoint storage.
     * @type {object}
     * @memberof V1Workspace
     */
    checkpointStorageConfig?: object;
}

/**
 * Check if a given object implements the V1Workspace interface.
 */
export function instanceOfV1Workspace(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "archived" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "immutable" in value;
    isInstance = isInstance && "numProjects" in value;
    isInstance = isInstance && "pinned" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "numExperiments" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "errorMessage" in value;

    return isInstance;
}

export function V1WorkspaceFromJSON(json: any): V1Workspace {
    return V1WorkspaceFromJSONTyped(json, false);
}

export function V1WorkspaceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Workspace {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'archived': json['archived'],
        'username': json['username'],
        'immutable': json['immutable'],
        'numProjects': json['numProjects'],
        'pinned': json['pinned'],
        'userId': json['userId'],
        'numExperiments': json['numExperiments'],
        'state': V1WorkspaceStateFromJSON(json['state']),
        'errorMessage': json['errorMessage'],
        'agentUserGroup': !exists(json, 'agentUserGroup') ? undefined : V1AgentUserGroupFromJSON(json['agentUserGroup']),
        'checkpointStorageConfig': !exists(json, 'checkpointStorageConfig') ? undefined : json['checkpointStorageConfig'],
    };
}

export function V1WorkspaceToJSON(value?: V1Workspace | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'archived': value.archived,
        'username': value.username,
        'immutable': value.immutable,
        'numProjects': value.numProjects,
        'pinned': value.pinned,
        'userId': value.userId,
        'numExperiments': value.numExperiments,
        'state': V1WorkspaceStateToJSON(value.state),
        'errorMessage': value.errorMessage,
        'agentUserGroup': V1AgentUserGroupToJSON(value.agentUserGroup),
        'checkpointStorageConfig': value.checkpointStorageConfig,
    };
}

