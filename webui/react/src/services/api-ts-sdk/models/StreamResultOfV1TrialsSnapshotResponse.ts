/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RuntimeStreamError } from './RuntimeStreamError';
import {
    RuntimeStreamErrorFromJSON,
    RuntimeStreamErrorFromJSONTyped,
    RuntimeStreamErrorToJSON,
} from './RuntimeStreamError';
import type { V1TrialsSnapshotResponse } from './V1TrialsSnapshotResponse';
import {
    V1TrialsSnapshotResponseFromJSON,
    V1TrialsSnapshotResponseFromJSONTyped,
    V1TrialsSnapshotResponseToJSON,
} from './V1TrialsSnapshotResponse';

/**
 * 
 * @export
 * @interface StreamResultOfV1TrialsSnapshotResponse
 */
export interface StreamResultOfV1TrialsSnapshotResponse {
    /**
     * 
     * @type {V1TrialsSnapshotResponse}
     * @memberof StreamResultOfV1TrialsSnapshotResponse
     */
    result?: V1TrialsSnapshotResponse;
    /**
     * 
     * @type {RuntimeStreamError}
     * @memberof StreamResultOfV1TrialsSnapshotResponse
     */
    error?: RuntimeStreamError;
}

/**
 * Check if a given object implements the StreamResultOfV1TrialsSnapshotResponse interface.
 */
export function instanceOfStreamResultOfV1TrialsSnapshotResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function StreamResultOfV1TrialsSnapshotResponseFromJSON(json: any): StreamResultOfV1TrialsSnapshotResponse {
    return StreamResultOfV1TrialsSnapshotResponseFromJSONTyped(json, false);
}

export function StreamResultOfV1TrialsSnapshotResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): StreamResultOfV1TrialsSnapshotResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'result': !exists(json, 'result') ? undefined : V1TrialsSnapshotResponseFromJSON(json['result']),
        'error': !exists(json, 'error') ? undefined : RuntimeStreamErrorFromJSON(json['error']),
    };
}

export function StreamResultOfV1TrialsSnapshotResponseToJSON(value?: StreamResultOfV1TrialsSnapshotResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'result': V1TrialsSnapshotResponseToJSON(value.result),
        'error': RuntimeStreamErrorToJSON(value.error),
    };
}

