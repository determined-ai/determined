/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * File node is one node of file in experiment model definition file tree.
 * @export
 * @interface V1FileNode
 */
export interface V1FileNode {
    /**
     * Path of file.
     * @type {string}
     * @memberof V1FileNode
     */
    path?: string;
    /**
     * Name of file.
     * @type {string}
     * @memberof V1FileNode
     */
    name?: string;
    /**
     * Modification time of file.
     * @type {Date}
     * @memberof V1FileNode
     */
    modifiedTime?: Date;
    /**
     * Number of bytes in file content.
     * @type {number}
     * @memberof V1FileNode
     */
    contentLength?: number;
    /**
     * Is this a directory.
     * @type {boolean}
     * @memberof V1FileNode
     */
    isDir?: boolean;
    /**
     * MIME type of file.
     * @type {string}
     * @memberof V1FileNode
     */
    contentType?: string;
    /**
     * Subdirectory files.
     * @type {Array<V1FileNode>}
     * @memberof V1FileNode
     */
    files?: Array<V1FileNode>;
}

/**
 * Check if a given object implements the V1FileNode interface.
 */
export function instanceOfV1FileNode(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1FileNodeFromJSON(json: any): V1FileNode {
    return V1FileNodeFromJSONTyped(json, false);
}

export function V1FileNodeFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1FileNode {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'path': !exists(json, 'path') ? undefined : json['path'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'modifiedTime': !exists(json, 'modifiedTime') ? undefined : (new Date(json['modifiedTime'])),
        'contentLength': !exists(json, 'contentLength') ? undefined : json['contentLength'],
        'isDir': !exists(json, 'isDir') ? undefined : json['isDir'],
        'contentType': !exists(json, 'contentType') ? undefined : json['contentType'],
        'files': !exists(json, 'files') ? undefined : ((json['files'] as Array<any>).map(V1FileNodeFromJSON)),
    };
}

export function V1FileNodeToJSON(value?: V1FileNode | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'path': value.path,
        'name': value.name,
        'modifiedTime': value.modifiedTime === undefined ? undefined : (value.modifiedTime.toISOString()),
        'contentLength': value.contentLength,
        'isDir': value.isDir,
        'contentType': value.contentType,
        'files': value.files === undefined ? undefined : ((value.files as Array<any>).map(V1FileNodeToJSON)),
    };
}

