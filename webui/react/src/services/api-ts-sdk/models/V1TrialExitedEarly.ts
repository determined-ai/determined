/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1TrialExitedEarlyExitedReason } from './V1TrialExitedEarlyExitedReason';
import {
    V1TrialExitedEarlyExitedReasonFromJSON,
    V1TrialExitedEarlyExitedReasonFromJSONTyped,
    V1TrialExitedEarlyExitedReasonToJSON,
} from './V1TrialExitedEarlyExitedReason';

/**
 * TrialExitedEarly is a searcher event triggered when a trial exited
 * prematurely.
 * @export
 * @interface V1TrialExitedEarly
 */
export interface V1TrialExitedEarly {
    /**
     * UUID identifying the trial to the searcher.
     * @type {string}
     * @memberof V1TrialExitedEarly
     */
    requestId: string;
    /**
     * 
     * @type {V1TrialExitedEarlyExitedReason}
     * @memberof V1TrialExitedEarly
     */
    exitedReason: V1TrialExitedEarlyExitedReason;
}

/**
 * Check if a given object implements the V1TrialExitedEarly interface.
 */
export function instanceOfV1TrialExitedEarly(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "requestId" in value;
    isInstance = isInstance && "exitedReason" in value;

    return isInstance;
}

export function V1TrialExitedEarlyFromJSON(json: any): V1TrialExitedEarly {
    return V1TrialExitedEarlyFromJSONTyped(json, false);
}

export function V1TrialExitedEarlyFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialExitedEarly {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'requestId': json['requestId'],
        'exitedReason': V1TrialExitedEarlyExitedReasonFromJSON(json['exitedReason']),
    };
}

export function V1TrialExitedEarlyToJSON(value?: V1TrialExitedEarly | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'requestId': value.requestId,
        'exitedReason': V1TrialExitedEarlyExitedReasonToJSON(value.exitedReason),
    };
}

