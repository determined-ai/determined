/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Shell } from './V1Shell';
import {
    V1ShellFromJSON,
    V1ShellFromJSONTyped,
    V1ShellToJSON,
} from './V1Shell';

/**
 * Response to GetShellRequest.
 * @export
 * @interface V1GetShellResponse
 */
export interface V1GetShellResponse {
    /**
     * 
     * @type {V1Shell}
     * @memberof V1GetShellResponse
     */
    shell?: V1Shell;
    /**
     * The shell config.
     * @type {object}
     * @memberof V1GetShellResponse
     */
    config?: object;
}

/**
 * Check if a given object implements the V1GetShellResponse interface.
 */
export function instanceOfV1GetShellResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1GetShellResponseFromJSON(json: any): V1GetShellResponse {
    return V1GetShellResponseFromJSONTyped(json, false);
}

export function V1GetShellResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1GetShellResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shell': !exists(json, 'shell') ? undefined : V1ShellFromJSON(json['shell']),
        'config': !exists(json, 'config') ? undefined : json['config'],
    };
}

export function V1GetShellResponseToJSON(value?: V1GetShellResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shell': V1ShellToJSON(value.shell),
        'config': value.config,
    };
}

