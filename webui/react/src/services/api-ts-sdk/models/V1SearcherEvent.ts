/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1ExperimentInactive } from './V1ExperimentInactive';
import {
    V1ExperimentInactiveFromJSON,
    V1ExperimentInactiveFromJSONTyped,
    V1ExperimentInactiveToJSON,
} from './V1ExperimentInactive';
import type { V1InitialOperations } from './V1InitialOperations';
import {
    V1InitialOperationsFromJSON,
    V1InitialOperationsFromJSONTyped,
    V1InitialOperationsToJSON,
} from './V1InitialOperations';
import type { V1TrialClosed } from './V1TrialClosed';
import {
    V1TrialClosedFromJSON,
    V1TrialClosedFromJSONTyped,
    V1TrialClosedToJSON,
} from './V1TrialClosed';
import type { V1TrialCreated } from './V1TrialCreated';
import {
    V1TrialCreatedFromJSON,
    V1TrialCreatedFromJSONTyped,
    V1TrialCreatedToJSON,
} from './V1TrialCreated';
import type { V1TrialExitedEarly } from './V1TrialExitedEarly';
import {
    V1TrialExitedEarlyFromJSON,
    V1TrialExitedEarlyFromJSONTyped,
    V1TrialExitedEarlyToJSON,
} from './V1TrialExitedEarly';
import type { V1TrialProgress } from './V1TrialProgress';
import {
    V1TrialProgressFromJSON,
    V1TrialProgressFromJSONTyped,
    V1TrialProgressToJSON,
} from './V1TrialProgress';
import type { V1ValidationCompleted } from './V1ValidationCompleted';
import {
    V1ValidationCompletedFromJSON,
    V1ValidationCompletedFromJSONTyped,
    V1ValidationCompletedToJSON,
} from './V1ValidationCompleted';

/**
 * SearcherEvent is a message from master to a client-driven custom searcher
 * informing it of relevant changes in the state of an experiment.
 * @export
 * @interface V1SearcherEvent
 */
export interface V1SearcherEvent {
    /**
     * Incremental ID of the event.
     * @type {number}
     * @memberof V1SearcherEvent
     */
    id: number;
    /**
     * 
     * @type {V1InitialOperations}
     * @memberof V1SearcherEvent
     */
    initialOperations?: V1InitialOperations;
    /**
     * 
     * @type {V1TrialCreated}
     * @memberof V1SearcherEvent
     */
    trialCreated?: V1TrialCreated;
    /**
     * 
     * @type {V1ValidationCompleted}
     * @memberof V1SearcherEvent
     */
    validationCompleted?: V1ValidationCompleted;
    /**
     * 
     * @type {V1TrialClosed}
     * @memberof V1SearcherEvent
     */
    trialClosed?: V1TrialClosed;
    /**
     * 
     * @type {V1TrialExitedEarly}
     * @memberof V1SearcherEvent
     */
    trialExitedEarly?: V1TrialExitedEarly;
    /**
     * 
     * @type {V1TrialProgress}
     * @memberof V1SearcherEvent
     */
    trialProgress?: V1TrialProgress;
    /**
     * 
     * @type {V1ExperimentInactive}
     * @memberof V1SearcherEvent
     */
    experimentInactive?: V1ExperimentInactive;
}

/**
 * Check if a given object implements the V1SearcherEvent interface.
 */
export function instanceOfV1SearcherEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function V1SearcherEventFromJSON(json: any): V1SearcherEvent {
    return V1SearcherEventFromJSONTyped(json, false);
}

export function V1SearcherEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1SearcherEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'initialOperations': !exists(json, 'initialOperations') ? undefined : V1InitialOperationsFromJSON(json['initialOperations']),
        'trialCreated': !exists(json, 'trialCreated') ? undefined : V1TrialCreatedFromJSON(json['trialCreated']),
        'validationCompleted': !exists(json, 'validationCompleted') ? undefined : V1ValidationCompletedFromJSON(json['validationCompleted']),
        'trialClosed': !exists(json, 'trialClosed') ? undefined : V1TrialClosedFromJSON(json['trialClosed']),
        'trialExitedEarly': !exists(json, 'trialExitedEarly') ? undefined : V1TrialExitedEarlyFromJSON(json['trialExitedEarly']),
        'trialProgress': !exists(json, 'trialProgress') ? undefined : V1TrialProgressFromJSON(json['trialProgress']),
        'experimentInactive': !exists(json, 'experimentInactive') ? undefined : V1ExperimentInactiveFromJSON(json['experimentInactive']),
    };
}

export function V1SearcherEventToJSON(value?: V1SearcherEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'initialOperations': V1InitialOperationsToJSON(value.initialOperations),
        'trialCreated': V1TrialCreatedToJSON(value.trialCreated),
        'validationCompleted': V1ValidationCompletedToJSON(value.validationCompleted),
        'trialClosed': V1TrialClosedToJSON(value.trialClosed),
        'trialExitedEarly': V1TrialExitedEarlyToJSON(value.trialExitedEarly),
        'trialProgress': V1TrialProgressToJSON(value.trialProgress),
        'experimentInactive': V1ExperimentInactiveToJSON(value.experimentInactive),
    };
}

