/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * TrialProgress is a searcher event that tells you the number of batches
 * completed in the trial.
 * @export
 * @interface V1TrialProgress
 */
export interface V1TrialProgress {
    /**
     * UUID identifying the trial to the searcher.
     * @type {string}
     * @memberof V1TrialProgress
     */
    requestId: string;
    /**
     * partial_units represent partial epochs, batches or records where the Unit
     * is implied.
     * @type {number}
     * @memberof V1TrialProgress
     */
    partialUnits: number;
}

/**
 * Check if a given object implements the V1TrialProgress interface.
 */
export function instanceOfV1TrialProgress(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "requestId" in value;
    isInstance = isInstance && "partialUnits" in value;

    return isInstance;
}

export function V1TrialProgressFromJSON(json: any): V1TrialProgress {
    return V1TrialProgressFromJSONTyped(json, false);
}

export function V1TrialProgressFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialProgress {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'requestId': json['requestId'],
        'partialUnits': json['partialUnits'],
    };
}

export function V1TrialProgressToJSON(value?: V1TrialProgress | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'requestId': value.requestId,
        'partialUnits': value.partialUnits,
    };
}

