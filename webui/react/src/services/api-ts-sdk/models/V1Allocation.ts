/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedtaskv1State } from './Determinedtaskv1State';
import {
    Determinedtaskv1StateFromJSON,
    Determinedtaskv1StateFromJSONTyped,
    Determinedtaskv1StateToJSON,
} from './Determinedtaskv1State';

/**
 * Allocation tracks a specific instance of a Task.
 * @export
 * @interface V1Allocation
 */
export interface V1Allocation {
    /**
     * Unique ID of task associated with the allocation.
     * @type {string}
     * @memberof V1Allocation
     */
    taskId?: string;
    /**
     * 
     * @type {Determinedtaskv1State}
     * @memberof V1Allocation
     */
    state?: Determinedtaskv1State;
    /**
     * Whether the allocation is ready to access.
     * @type {boolean}
     * @memberof V1Allocation
     */
    isReady?: boolean;
    /**
     * Start timestamp.
     * @type {string}
     * @memberof V1Allocation
     */
    startTime?: string;
    /**
     * End timestamp if completed.
     * @type {string}
     * @memberof V1Allocation
     */
    endTime?: string;
    /**
     * Unique ID of the allocation.
     * @type {string}
     * @memberof V1Allocation
     */
    allocationId?: string;
}

/**
 * Check if a given object implements the V1Allocation interface.
 */
export function instanceOfV1Allocation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1AllocationFromJSON(json: any): V1Allocation {
    return V1AllocationFromJSONTyped(json, false);
}

export function V1AllocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Allocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taskId': !exists(json, 'taskId') ? undefined : json['taskId'],
        'state': !exists(json, 'state') ? undefined : Determinedtaskv1StateFromJSON(json['state']),
        'isReady': !exists(json, 'isReady') ? undefined : json['isReady'],
        'startTime': !exists(json, 'startTime') ? undefined : json['startTime'],
        'endTime': !exists(json, 'endTime') ? undefined : json['endTime'],
        'allocationId': !exists(json, 'allocationId') ? undefined : json['allocationId'],
    };
}

export function V1AllocationToJSON(value?: V1Allocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taskId': value.taskId,
        'state': Determinedtaskv1StateToJSON(value.state),
        'isReady': value.isReady,
        'startTime': value.startTime,
        'endTime': value.endTime,
        'allocationId': value.allocationId,
    };
}

