/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1GroupDetails } from './V1GroupDetails';
import {
    V1GroupDetailsFromJSON,
    V1GroupDetailsFromJSONTyped,
    V1GroupDetailsToJSON,
} from './V1GroupDetails';
import type { V1RoleWithAssignments } from './V1RoleWithAssignments';
import {
    V1RoleWithAssignmentsFromJSON,
    V1RoleWithAssignmentsFromJSONTyped,
    V1RoleWithAssignmentsToJSON,
} from './V1RoleWithAssignments';
import type { V1User } from './V1User';
import {
    V1UserFromJSON,
    V1UserFromJSONTyped,
    V1UserToJSON,
} from './V1User';

/**
 * Response object for GetGroupsAndUsersAssignedToWorkspace.
 * @export
 * @interface V1GetGroupsAndUsersAssignedToWorkspaceResponse
 */
export interface V1GetGroupsAndUsersAssignedToWorkspaceResponse {
    /**
     * Groups with a role assigned to the given workspace scope.
     * Contains user membership of each group.
     * @type {Array<V1GroupDetails>}
     * @memberof V1GetGroupsAndUsersAssignedToWorkspaceResponse
     */
    groups: Array<V1GroupDetails>;
    /**
     * Only contains users assigned directly to roles on the workspace scope.
     * @type {Array<V1User>}
     * @memberof V1GetGroupsAndUsersAssignedToWorkspaceResponse
     */
    usersAssignedDirectly: Array<V1User>;
    /**
     * Roles assigned to workspace with associations between
     * groups and users_assigned_directly with roles.
     * @type {Array<V1RoleWithAssignments>}
     * @memberof V1GetGroupsAndUsersAssignedToWorkspaceResponse
     */
    assignments: Array<V1RoleWithAssignments>;
}

/**
 * Check if a given object implements the V1GetGroupsAndUsersAssignedToWorkspaceResponse interface.
 */
export function instanceOfV1GetGroupsAndUsersAssignedToWorkspaceResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "groups" in value;
    isInstance = isInstance && "usersAssignedDirectly" in value;
    isInstance = isInstance && "assignments" in value;

    return isInstance;
}

export function V1GetGroupsAndUsersAssignedToWorkspaceResponseFromJSON(json: any): V1GetGroupsAndUsersAssignedToWorkspaceResponse {
    return V1GetGroupsAndUsersAssignedToWorkspaceResponseFromJSONTyped(json, false);
}

export function V1GetGroupsAndUsersAssignedToWorkspaceResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1GetGroupsAndUsersAssignedToWorkspaceResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'groups': ((json['groups'] as Array<any>).map(V1GroupDetailsFromJSON)),
        'usersAssignedDirectly': ((json['usersAssignedDirectly'] as Array<any>).map(V1UserFromJSON)),
        'assignments': ((json['assignments'] as Array<any>).map(V1RoleWithAssignmentsFromJSON)),
    };
}

export function V1GetGroupsAndUsersAssignedToWorkspaceResponseToJSON(value?: V1GetGroupsAndUsersAssignedToWorkspaceResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'groups': ((value.groups as Array<any>).map(V1GroupDetailsToJSON)),
        'usersAssignedDirectly': ((value.usersAssignedDirectly as Array<any>).map(V1UserToJSON)),
        'assignments': ((value.assignments as Array<any>).map(V1RoleWithAssignmentsToJSON)),
    };
}

