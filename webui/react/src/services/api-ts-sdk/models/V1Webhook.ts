/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Trigger } from './V1Trigger';
import {
    V1TriggerFromJSON,
    V1TriggerFromJSONTyped,
    V1TriggerToJSON,
} from './V1Trigger';
import type { V1WebhookType } from './V1WebhookType';
import {
    V1WebhookTypeFromJSON,
    V1WebhookTypeFromJSONTyped,
    V1WebhookTypeToJSON,
} from './V1WebhookType';

/**
 * 
 * @export
 * @interface V1Webhook
 */
export interface V1Webhook {
    /**
     * The id of the webhook.
     * @type {number}
     * @memberof V1Webhook
     */
    id?: number;
    /**
     * The url of the webhook.
     * @type {string}
     * @memberof V1Webhook
     */
    url: string;
    /**
     * The triggers of the webhook.
     * @type {Array<V1Trigger>}
     * @memberof V1Webhook
     */
    triggers?: Array<V1Trigger>;
    /**
     * 
     * @type {V1WebhookType}
     * @memberof V1Webhook
     */
    webhookType: V1WebhookType;
}

/**
 * Check if a given object implements the V1Webhook interface.
 */
export function instanceOfV1Webhook(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "url" in value;
    isInstance = isInstance && "webhookType" in value;

    return isInstance;
}

export function V1WebhookFromJSON(json: any): V1Webhook {
    return V1WebhookFromJSONTyped(json, false);
}

export function V1WebhookFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Webhook {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'url': json['url'],
        'triggers': !exists(json, 'triggers') ? undefined : ((json['triggers'] as Array<any>).map(V1TriggerFromJSON)),
        'webhookType': V1WebhookTypeFromJSON(json['webhookType']),
    };
}

export function V1WebhookToJSON(value?: V1Webhook | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'url': value.url,
        'triggers': value.triggers === undefined ? undefined : ((value.triggers as Array<any>).map(V1TriggerToJSON)),
        'webhookType': V1WebhookTypeToJSON(value.webhookType),
    };
}

