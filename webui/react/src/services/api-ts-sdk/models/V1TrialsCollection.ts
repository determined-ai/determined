/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1TrialFilters } from './V1TrialFilters';
import {
    V1TrialFiltersFromJSON,
    V1TrialFiltersFromJSONTyped,
    V1TrialFiltersToJSON,
} from './V1TrialFilters';
import type { V1TrialSorter } from './V1TrialSorter';
import {
    V1TrialSorterFromJSON,
    V1TrialSorterFromJSONTyped,
    V1TrialSorterToJSON,
} from './V1TrialSorter';

/**
 * Struct that represents a dynamic collection of trials,
 * along with some accompanying metadata.
 * @export
 * @interface V1TrialsCollection
 */
export interface V1TrialsCollection {
    /**
     * The id for the collection.
     * @type {number}
     * @memberof V1TrialsCollection
     */
    id: number;
    /**
     * The id of the user who created the collection.
     * @type {number}
     * @memberof V1TrialsCollection
     */
    userId: number;
    /**
     * The id of the project that the collection belongs to .
     * @type {number}
     * @memberof V1TrialsCollection
     */
    projectId: number;
    /**
     * The name of the collection.
     * @type {string}
     * @memberof V1TrialsCollection
     */
    name: string;
    /**
     * 
     * @type {V1TrialFilters}
     * @memberof V1TrialsCollection
     */
    filters: V1TrialFilters;
    /**
     * 
     * @type {V1TrialSorter}
     * @memberof V1TrialsCollection
     */
    sorter: V1TrialSorter;
}

/**
 * Check if a given object implements the V1TrialsCollection interface.
 */
export function instanceOfV1TrialsCollection(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "filters" in value;
    isInstance = isInstance && "sorter" in value;

    return isInstance;
}

export function V1TrialsCollectionFromJSON(json: any): V1TrialsCollection {
    return V1TrialsCollectionFromJSONTyped(json, false);
}

export function V1TrialsCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialsCollection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'projectId': json['projectId'],
        'name': json['name'],
        'filters': V1TrialFiltersFromJSON(json['filters']),
        'sorter': V1TrialSorterFromJSON(json['sorter']),
    };
}

export function V1TrialsCollectionToJSON(value?: V1TrialsCollection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'userId': value.userId,
        'projectId': value.projectId,
        'name': value.name,
        'filters': V1TrialFiltersToJSON(value.filters),
        'sorter': V1TrialSorterToJSON(value.sorter),
    };
}

