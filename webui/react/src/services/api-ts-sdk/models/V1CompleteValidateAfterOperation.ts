/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1ValidateAfterOperation } from './V1ValidateAfterOperation';
import {
    V1ValidateAfterOperationFromJSON,
    V1ValidateAfterOperationFromJSONTyped,
    V1ValidateAfterOperationToJSON,
} from './V1ValidateAfterOperation';

/**
 * Used to complete a ValidateAfterOperation.
 * @export
 * @interface V1CompleteValidateAfterOperation
 */
export interface V1CompleteValidateAfterOperation {
    /**
     * 
     * @type {V1ValidateAfterOperation}
     * @memberof V1CompleteValidateAfterOperation
     */
    op?: V1ValidateAfterOperation;
    /**
     * The value of searcher metric associated with this completed metric.
     * The metric provided should be the metric used to guide HP search.
     * @type {number}
     * @memberof V1CompleteValidateAfterOperation
     */
    searcherMetric?: number;
}

/**
 * Check if a given object implements the V1CompleteValidateAfterOperation interface.
 */
export function instanceOfV1CompleteValidateAfterOperation(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1CompleteValidateAfterOperationFromJSON(json: any): V1CompleteValidateAfterOperation {
    return V1CompleteValidateAfterOperationFromJSONTyped(json, false);
}

export function V1CompleteValidateAfterOperationFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1CompleteValidateAfterOperation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'op': !exists(json, 'op') ? undefined : V1ValidateAfterOperationFromJSON(json['op']),
        'searcherMetric': !exists(json, 'searcherMetric') ? undefined : json['searcherMetric'],
    };
}

export function V1CompleteValidateAfterOperationToJSON(value?: V1CompleteValidateAfterOperation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'op': V1ValidateAfterOperationToJSON(value.op),
        'searcherMetric': value.searcherMetric,
    };
}

