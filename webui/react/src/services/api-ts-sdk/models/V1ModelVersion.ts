/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Checkpoint } from './V1Checkpoint';
import {
    V1CheckpointFromJSON,
    V1CheckpointFromJSONTyped,
    V1CheckpointToJSON,
} from './V1Checkpoint';
import type { V1Model } from './V1Model';
import {
    V1ModelFromJSON,
    V1ModelFromJSONTyped,
    V1ModelToJSON,
} from './V1Model';

/**
 * A version of a model containing a checkpoint. Users can label checkpoints as
 * a version of a model and use the model name and version to locate a
 * checkpoint.
 * @export
 * @interface V1ModelVersion
 */
export interface V1ModelVersion {
    /**
     * 
     * @type {V1Model}
     * @memberof V1ModelVersion
     */
    model: V1Model;
    /**
     * 
     * @type {V1Checkpoint}
     * @memberof V1ModelVersion
     */
    checkpoint: V1Checkpoint;
    /**
     * The version number.
     * @type {number}
     * @memberof V1ModelVersion
     */
    version: number;
    /**
     * The time the model version was created.
     * @type {Date}
     * @memberof V1ModelVersion
     */
    creationTime: Date;
    /**
     * Unique id for each model version.
     * @type {number}
     * @memberof V1ModelVersion
     */
    id: number;
    /**
     * Name for this model version.
     * @type {string}
     * @memberof V1ModelVersion
     */
    name?: string;
    /**
     * Metadata associated with this model version.
     * @type {object}
     * @memberof V1ModelVersion
     */
    metadata?: object;
    /**
     * The time this model version was last updated.
     * @type {Date}
     * @memberof V1ModelVersion
     */
    lastUpdatedTime: Date;
    /**
     * Comment associated with this model version.
     * @type {string}
     * @memberof V1ModelVersion
     */
    comment?: string;
    /**
     * Username of the user who created this model version.
     * @type {string}
     * @memberof V1ModelVersion
     */
    username?: string;
    /**
     * Id of the user who created this model version.
     * @type {number}
     * @memberof V1ModelVersion
     */
    userId?: number;
    /**
     * Labels associated with this model version.
     * @type {Array<string>}
     * @memberof V1ModelVersion
     */
    labels?: Array<string>;
    /**
     * Notes associated with this model version.
     * @type {string}
     * @memberof V1ModelVersion
     */
    notes?: string;
}

/**
 * Check if a given object implements the V1ModelVersion interface.
 */
export function instanceOfV1ModelVersion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "model" in value;
    isInstance = isInstance && "checkpoint" in value;
    isInstance = isInstance && "version" in value;
    isInstance = isInstance && "creationTime" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "lastUpdatedTime" in value;

    return isInstance;
}

export function V1ModelVersionFromJSON(json: any): V1ModelVersion {
    return V1ModelVersionFromJSONTyped(json, false);
}

export function V1ModelVersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ModelVersion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'model': V1ModelFromJSON(json['model']),
        'checkpoint': V1CheckpointFromJSON(json['checkpoint']),
        'version': json['version'],
        'creationTime': (new Date(json['creationTime'])),
        'id': json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'lastUpdatedTime': (new Date(json['lastUpdatedTime'])),
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'labels': !exists(json, 'labels') ? undefined : json['labels'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
    };
}

export function V1ModelVersionToJSON(value?: V1ModelVersion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'model': V1ModelToJSON(value.model),
        'checkpoint': V1CheckpointToJSON(value.checkpoint),
        'version': value.version,
        'creationTime': (value.creationTime.toISOString()),
        'id': value.id,
        'name': value.name,
        'metadata': value.metadata,
        'lastUpdatedTime': (value.lastUpdatedTime.toISOString()),
        'comment': value.comment,
        'username': value.username,
        'userId': value.userId,
        'labels': value.labels,
        'notes': value.notes,
    };
}

