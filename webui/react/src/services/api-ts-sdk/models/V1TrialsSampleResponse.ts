/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1TrialsSampleResponseTrial } from './V1TrialsSampleResponseTrial';
import {
    V1TrialsSampleResponseTrialFromJSON,
    V1TrialsSampleResponseTrialFromJSONTyped,
    V1TrialsSampleResponseTrialToJSON,
} from './V1TrialsSampleResponseTrial';

/**
 * 
 * @export
 * @interface V1TrialsSampleResponse
 */
export interface V1TrialsSampleResponse {
    /**
     * A historical or incremental series of data points for the trials.
     * @type {Array<V1TrialsSampleResponseTrial>}
     * @memberof V1TrialsSampleResponse
     */
    trials: Array<V1TrialsSampleResponseTrial>;
    /**
     * IDs of trials that are newly included in the data.
     * @type {Array<number>}
     * @memberof V1TrialsSampleResponse
     */
    promotedTrials: Array<number>;
    /**
     * IDs of trials that are no loger included in the top N trials.
     * @type {Array<number>}
     * @memberof V1TrialsSampleResponse
     */
    demotedTrials: Array<number>;
}

/**
 * Check if a given object implements the V1TrialsSampleResponse interface.
 */
export function instanceOfV1TrialsSampleResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "trials" in value;
    isInstance = isInstance && "promotedTrials" in value;
    isInstance = isInstance && "demotedTrials" in value;

    return isInstance;
}

export function V1TrialsSampleResponseFromJSON(json: any): V1TrialsSampleResponse {
    return V1TrialsSampleResponseFromJSONTyped(json, false);
}

export function V1TrialsSampleResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1TrialsSampleResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'trials': ((json['trials'] as Array<any>).map(V1TrialsSampleResponseTrialFromJSON)),
        'promotedTrials': json['promotedTrials'],
        'demotedTrials': json['demotedTrials'],
    };
}

export function V1TrialsSampleResponseToJSON(value?: V1TrialsSampleResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'trials': ((value.trials as Array<any>).map(V1TrialsSampleResponseTrialToJSON)),
        'promotedTrials': value.promotedTrials,
        'demotedTrials': value.demotedTrials,
    };
}

