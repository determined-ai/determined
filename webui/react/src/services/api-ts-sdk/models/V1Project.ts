/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Note } from './V1Note';
import {
    V1NoteFromJSON,
    V1NoteFromJSONTyped,
    V1NoteToJSON,
} from './V1Note';
import type { V1WorkspaceState } from './V1WorkspaceState';
import {
    V1WorkspaceStateFromJSON,
    V1WorkspaceStateFromJSONTyped,
    V1WorkspaceStateToJSON,
} from './V1WorkspaceState';

/**
 * Project is a named collection of experiments.
 * @export
 * @interface V1Project
 */
export interface V1Project {
    /**
     * The unique id of the project.
     * @type {number}
     * @memberof V1Project
     */
    id: number;
    /**
     * The unique name of the project.
     * @type {string}
     * @memberof V1Project
     */
    name: string;
    /**
     * The id of the associated workspace.
     * @type {number}
     * @memberof V1Project
     */
    workspaceId: number;
    /**
     * The description of the project.
     * @type {string}
     * @memberof V1Project
     */
    description?: string;
    /**
     * Time of most recently started experiment within this project.
     * @type {Date}
     * @memberof V1Project
     */
    lastExperimentStartedAt?: Date;
    /**
     * Notes associated with this project.
     * @type {Array<V1Note>}
     * @memberof V1Project
     */
    notes: Array<V1Note>;
    /**
     * Count of experiments associated with this project.
     * @type {number}
     * @memberof V1Project
     */
    numExperiments: number;
    /**
     * Count of active experiments associated with this project.
     * @type {number}
     * @memberof V1Project
     */
    numActiveExperiments: number;
    /**
     * Whether this project is archived or not.
     * @type {boolean}
     * @memberof V1Project
     */
    archived: boolean;
    /**
     * User who created this project.
     * @type {string}
     * @memberof V1Project
     */
    username: string;
    /**
     * Whether this project is immutable (default uncategorized project).
     * @type {boolean}
     * @memberof V1Project
     */
    immutable: boolean;
    /**
     * ID of the user who created this project.
     * @type {number}
     * @memberof V1Project
     */
    userId: number;
    /**
     * The name of the associated workspace.
     * @type {string}
     * @memberof V1Project
     */
    workspaceName?: string;
    /**
     * 
     * @type {V1WorkspaceState}
     * @memberof V1Project
     */
    state: V1WorkspaceState;
    /**
     * Message stored from errors on async-deleting a project.
     * @type {string}
     * @memberof V1Project
     */
    errorMessage: string;
}

/**
 * Check if a given object implements the V1Project interface.
 */
export function instanceOfV1Project(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "workspaceId" in value;
    isInstance = isInstance && "notes" in value;
    isInstance = isInstance && "numExperiments" in value;
    isInstance = isInstance && "numActiveExperiments" in value;
    isInstance = isInstance && "archived" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "immutable" in value;
    isInstance = isInstance && "userId" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "errorMessage" in value;

    return isInstance;
}

export function V1ProjectFromJSON(json: any): V1Project {
    return V1ProjectFromJSONTyped(json, false);
}

export function V1ProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Project {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'workspaceId': json['workspaceId'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'lastExperimentStartedAt': !exists(json, 'lastExperimentStartedAt') ? undefined : (new Date(json['lastExperimentStartedAt'])),
        'notes': ((json['notes'] as Array<any>).map(V1NoteFromJSON)),
        'numExperiments': json['numExperiments'],
        'numActiveExperiments': json['numActiveExperiments'],
        'archived': json['archived'],
        'username': json['username'],
        'immutable': json['immutable'],
        'userId': json['userId'],
        'workspaceName': !exists(json, 'workspaceName') ? undefined : json['workspaceName'],
        'state': V1WorkspaceStateFromJSON(json['state']),
        'errorMessage': json['errorMessage'],
    };
}

export function V1ProjectToJSON(value?: V1Project | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'workspaceId': value.workspaceId,
        'description': value.description,
        'lastExperimentStartedAt': value.lastExperimentStartedAt === undefined ? undefined : (value.lastExperimentStartedAt.toISOString()),
        'notes': ((value.notes as Array<any>).map(V1NoteToJSON)),
        'numExperiments': value.numExperiments,
        'numActiveExperiments': value.numActiveExperiments,
        'archived': value.archived,
        'username': value.username,
        'immutable': value.immutable,
        'userId': value.userId,
        'workspaceName': value.workspaceName,
        'state': V1WorkspaceStateToJSON(value.state),
        'errorMessage': value.errorMessage,
    };
}

