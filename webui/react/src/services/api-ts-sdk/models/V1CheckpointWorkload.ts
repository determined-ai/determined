/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedcheckpointv1State } from './Determinedcheckpointv1State';
import {
    Determinedcheckpointv1StateFromJSON,
    Determinedcheckpointv1StateFromJSONTyped,
    Determinedcheckpointv1StateToJSON,
} from './Determinedcheckpointv1State';

/**
 * CheckpointWorkload is an artifact created by a trial during training.
 * @export
 * @interface V1CheckpointWorkload
 */
export interface V1CheckpointWorkload {
    /**
     * UUID of the checkpoint.
     * @type {string}
     * @memberof V1CheckpointWorkload
     */
    uuid?: string;
    /**
     * The time the workload finished or was stopped.
     * @type {Date}
     * @memberof V1CheckpointWorkload
     */
    endTime?: Date;
    /**
     * 
     * @type {Determinedcheckpointv1State}
     * @memberof V1CheckpointWorkload
     */
    state: Determinedcheckpointv1State;
    /**
     * Dictionary of file paths to file sizes in bytes of all files in the
     * checkpoint.
     * @type {{ [key: string]: string; }}
     * @memberof V1CheckpointWorkload
     */
    resources?: { [key: string]: string; };
    /**
     * Total number of batches as of this workload's completion.
     * @type {number}
     * @memberof V1CheckpointWorkload
     */
    totalBatches: number;
    /**
     * User defined metadata associated with the checkpoint.
     * @type {object}
     * @memberof V1CheckpointWorkload
     */
    metadata?: object;
}

/**
 * Check if a given object implements the V1CheckpointWorkload interface.
 */
export function instanceOfV1CheckpointWorkload(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "totalBatches" in value;

    return isInstance;
}

export function V1CheckpointWorkloadFromJSON(json: any): V1CheckpointWorkload {
    return V1CheckpointWorkloadFromJSONTyped(json, false);
}

export function V1CheckpointWorkloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1CheckpointWorkload {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'endTime': !exists(json, 'endTime') ? undefined : (new Date(json['endTime'])),
        'state': Determinedcheckpointv1StateFromJSON(json['state']),
        'resources': !exists(json, 'resources') ? undefined : json['resources'],
        'totalBatches': json['totalBatches'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
    };
}

export function V1CheckpointWorkloadToJSON(value?: V1CheckpointWorkload | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'endTime': value.endTime === undefined ? undefined : (value.endTime.toISOString()),
        'state': Determinedcheckpointv1StateToJSON(value.state),
        'resources': value.resources,
        'totalBatches': value.totalBatches,
        'metadata': value.metadata,
    };
}

