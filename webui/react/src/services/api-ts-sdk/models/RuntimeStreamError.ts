/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ProtobufAny } from './ProtobufAny';
import {
    ProtobufAnyFromJSON,
    ProtobufAnyFromJSONTyped,
    ProtobufAnyToJSON,
} from './ProtobufAny';

/**
 * 
 * @export
 * @interface RuntimeStreamError
 */
export interface RuntimeStreamError {
    /**
     * 
     * @type {number}
     * @memberof RuntimeStreamError
     */
    grpcCode?: number;
    /**
     * 
     * @type {number}
     * @memberof RuntimeStreamError
     */
    httpCode?: number;
    /**
     * 
     * @type {string}
     * @memberof RuntimeStreamError
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof RuntimeStreamError
     */
    httpStatus?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RuntimeStreamError
     */
    details?: Array<ProtobufAny>;
}

/**
 * Check if a given object implements the RuntimeStreamError interface.
 */
export function instanceOfRuntimeStreamError(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RuntimeStreamErrorFromJSON(json: any): RuntimeStreamError {
    return RuntimeStreamErrorFromJSONTyped(json, false);
}

export function RuntimeStreamErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): RuntimeStreamError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'grpcCode': !exists(json, 'grpcCode') ? undefined : json['grpcCode'],
        'httpCode': !exists(json, 'httpCode') ? undefined : json['httpCode'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'httpStatus': !exists(json, 'httpStatus') ? undefined : json['httpStatus'],
        'details': !exists(json, 'details') ? undefined : ((json['details'] as Array<any>).map(ProtobufAnyFromJSON)),
    };
}

export function RuntimeStreamErrorToJSON(value?: RuntimeStreamError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'grpcCode': value.grpcCode,
        'httpCode': value.httpCode,
        'message': value.message,
        'httpStatus': value.httpStatus,
        'details': value.details === undefined ? undefined : ((value.details as Array<any>).map(ProtobufAnyToJSON)),
    };
}

