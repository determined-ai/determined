/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Determinedtaskv1State } from './Determinedtaskv1State';
import {
    Determinedtaskv1StateFromJSON,
    Determinedtaskv1StateFromJSONTyped,
    Determinedtaskv1StateToJSON,
} from './Determinedtaskv1State';
import type { V1Container } from './V1Container';
import {
    V1ContainerFromJSON,
    V1ContainerFromJSONTyped,
    V1ContainerToJSON,
} from './V1Container';

/**
 * Command is a single container running the configured command.
 * @export
 * @interface V1Command
 */
export interface V1Command {
    /**
     * The id of the command.
     * @type {string}
     * @memberof V1Command
     */
    id: string;
    /**
     * The description of the command.
     * @type {string}
     * @memberof V1Command
     */
    description: string;
    /**
     * 
     * @type {Determinedtaskv1State}
     * @memberof V1Command
     */
    state: Determinedtaskv1State;
    /**
     * The time the command was started.
     * @type {Date}
     * @memberof V1Command
     */
    startTime: Date;
    /**
     * 
     * @type {V1Container}
     * @memberof V1Command
     */
    container?: V1Container;
    /**
     * The display name of the user that created the command.
     * @type {string}
     * @memberof V1Command
     */
    displayName?: string;
    /**
     * The id of the user that created the command.
     * @type {number}
     * @memberof V1Command
     */
    userId?: number;
    /**
     * The username of the user that created the command.
     * @type {string}
     * @memberof V1Command
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof V1Command
     */
    resourcePool: string;
    /**
     * 
     * @type {string}
     * @memberof V1Command
     */
    exitStatus?: string;
    /**
     * The associated job id.
     * @type {string}
     * @memberof V1Command
     */
    jobId: string;
}

/**
 * Check if a given object implements the V1Command interface.
 */
export function instanceOfV1Command(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "state" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "resourcePool" in value;
    isInstance = isInstance && "jobId" in value;

    return isInstance;
}

export function V1CommandFromJSON(json: any): V1Command {
    return V1CommandFromJSONTyped(json, false);
}

export function V1CommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Command {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'description': json['description'],
        'state': Determinedtaskv1StateFromJSON(json['state']),
        'startTime': (new Date(json['startTime'])),
        'container': !exists(json, 'container') ? undefined : V1ContainerFromJSON(json['container']),
        'displayName': !exists(json, 'displayName') ? undefined : json['displayName'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'username': json['username'],
        'resourcePool': json['resourcePool'],
        'exitStatus': !exists(json, 'exitStatus') ? undefined : json['exitStatus'],
        'jobId': json['jobId'],
    };
}

export function V1CommandToJSON(value?: V1Command | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'description': value.description,
        'state': Determinedtaskv1StateToJSON(value.state),
        'startTime': (value.startTime.toISOString()),
        'container': V1ContainerToJSON(value.container),
        'displayName': value.displayName,
        'userId': value.userId,
        'username': value.username,
        'resourcePool': value.resourcePool,
        'exitStatus': value.exitStatus,
        'jobId': value.jobId,
    };
}

