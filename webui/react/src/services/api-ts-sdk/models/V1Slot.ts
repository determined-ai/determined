/* tslint:disable */
/* eslint-disable */
/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { V1Container } from './V1Container';
import {
    V1ContainerFromJSON,
    V1ContainerFromJSONTyped,
    V1ContainerToJSON,
} from './V1Container';
import type { V1Device } from './V1Device';
import {
    V1DeviceFromJSON,
    V1DeviceFromJSONTyped,
    V1DeviceToJSON,
} from './V1Device';

/**
 * Slot wraps a single device on the agent.
 * @export
 * @interface V1Slot
 */
export interface V1Slot {
    /**
     * The unqiue id of the slot for a given agent.
     * @type {string}
     * @memberof V1Slot
     */
    id?: string;
    /**
     * 
     * @type {V1Device}
     * @memberof V1Slot
     */
    device?: V1Device;
    /**
     * Flag notifying if containers can be scheduled on this slot.
     * @type {boolean}
     * @memberof V1Slot
     */
    enabled?: boolean;
    /**
     * 
     * @type {V1Container}
     * @memberof V1Slot
     */
    container?: V1Container;
    /**
     * Flag notifying if this slot is in the draining mode: current containers
     * will be allowed to finish but no new ones will be scheduled.
     * @type {boolean}
     * @memberof V1Slot
     */
    draining?: boolean;
}

/**
 * Check if a given object implements the V1Slot interface.
 */
export function instanceOfV1Slot(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function V1SlotFromJSON(json: any): V1Slot {
    return V1SlotFromJSONTyped(json, false);
}

export function V1SlotFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Slot {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'device': !exists(json, 'device') ? undefined : V1DeviceFromJSON(json['device']),
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'container': !exists(json, 'container') ? undefined : V1ContainerFromJSON(json['container']),
        'draining': !exists(json, 'draining') ? undefined : json['draining'],
    };
}

export function V1SlotToJSON(value?: V1Slot | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'device': V1DeviceToJSON(value.device),
        'enabled': value.enabled,
        'container': V1ContainerToJSON(value.container),
        'draining': value.draining,
    };
}

