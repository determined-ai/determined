/**
 * Determined API (Beta)
 * Determined helps deep learning teams train models more quickly, easily share GPU resources, and effectively collaborate. Determined allows deep learning engineers to focus on building and training models at scale, without needing to worry about DevOps or writing custom code for common tasks like fault tolerance or experiment tracking.  You can think of Determined as a platform that bridges the gap between tools like TensorFlow and PyTorch --- which work great for a single researcher with a single GPU --- to the challenges that arise when doing deep learning at scale, as teams, clusters, and data sets all increase in size.
 *
 * OpenAPI spec version: 0.1
 * Contact: community@determined.ai
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthenticationApi", () => {
  let instance: api.AuthenticationApi
  beforeEach(function() {
    instance = new api.AuthenticationApi(config)
  });

  test("currentUser", () => {
    return expect(instance.currentUser({})).resolves.toBe(null)
  })
  test("login", () => {
    const body: api.V1LoginRequest = undefined
    return expect(instance.login(body, {})).resolves.toBe(null)
  })
  test("logout", () => {
    return expect(instance.logout({})).resolves.toBe(null)
  })
})

describe("CheckpointsApi", () => {
  let instance: api.CheckpointsApi
  beforeEach(function() {
    instance = new api.CheckpointsApi(config)
  });

  test("deleteCheckpoints", () => {
    const body: api.V1DeleteCheckpointsRequest = undefined
    return expect(instance.deleteCheckpoints(body, {})).resolves.toBe(null)
  })
  test("getCheckpoint", () => {
    const checkpointUuid: string = "checkpointUuid_example"
    return expect(instance.getCheckpoint(checkpointUuid, {})).resolves.toBe(null)
  })
  test("getCheckpoint_0", () => {
    const checkpointUuid: string = "checkpointUuid_example"
    return expect(instance.getCheckpoint_0(checkpointUuid, {})).resolves.toBe(null)
  })
  test("postCheckpointMetadata", () => {
    const body: api.V1PostCheckpointMetadataRequest = undefined
    const checkpointUuid: string = "checkpointUuid_example"
    return expect(instance.postCheckpointMetadata(body, checkpointUuid, {})).resolves.toBe(null)
  })
})

describe("ClusterApi", () => {
  let instance: api.ClusterApi
  beforeEach(function() {
    instance = new api.ClusterApi(config)
  });

  test("disableAgent", () => {
    const body: api.V1DisableAgentRequest = undefined
    const agentId: string = "agentId_example"
    return expect(instance.disableAgent(body, agentId, {})).resolves.toBe(null)
  })
  test("disableSlot", () => {
    const agentId: string = "agentId_example"
    const slotId: string = "slotId_example"
    return expect(instance.disableSlot(agentId, slotId, {})).resolves.toBe(null)
  })
  test("enableAgent", () => {
    const agentId: string = "agentId_example"
    return expect(instance.enableAgent(agentId, {})).resolves.toBe(null)
  })
  test("enableSlot", () => {
    const agentId: string = "agentId_example"
    const slotId: string = "slotId_example"
    return expect(instance.enableSlot(agentId, slotId, {})).resolves.toBe(null)
  })
  test("getAgent", () => {
    const agentId: string = "agentId_example"
    return expect(instance.getAgent(agentId, {})).resolves.toBe(null)
  })
  test("getAgents", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const label: string = "label_example"
    return expect(instance.getAgents(sortBy, orderBy, offset, limit, label, {})).resolves.toBe(null)
  })
  test("getAggregatedResourceAllocationCsv", () => {
    const startDate: string = "startDate_example"
    const endDate: string = "endDate_example"
    const period: string = "period_example"
    return expect(instance.getAggregatedResourceAllocationCsv(startDate, endDate, period, {})).resolves.toBe(null)
  })
  test("getMaster", () => {
    return expect(instance.getMaster({})).resolves.toBe(null)
  })
  test("getMasterConfig", () => {
    return expect(instance.getMasterConfig({})).resolves.toBe(null)
  })
  test("getRawResourceAllocationCsv", () => {
    const timestampAfter: string = "timestampAfter_example"
    const timestampBefore: string = "timestampBefore_example"
    return expect(instance.getRawResourceAllocationCsv(timestampAfter, timestampBefore, {})).resolves.toBe(null)
  })
  test("getSlot", () => {
    const agentId: string = "agentId_example"
    const slotId: string = "slotId_example"
    return expect(instance.getSlot(agentId, slotId, {})).resolves.toBe(null)
  })
  test("getSlots", () => {
    const agentId: string = "agentId_example"
    return expect(instance.getSlots(agentId, {})).resolves.toBe(null)
  })
  test("masterLogs", () => {
    const offset: number = 56
    const limit: number = 56
    const follow: boolean = true
    return expect(instance.masterLogs(offset, limit, follow, {})).resolves.toBe(null)
  })
  test("resourceAllocationAggregated", () => {
    const startDate: string = "startDate_example"
    const endDate: string = "endDate_example"
    const period: string = "period_example"
    return expect(instance.resourceAllocationAggregated(startDate, endDate, period, {})).resolves.toBe(null)
  })
  test("resourceAllocationRaw", () => {
    const timestampAfter: Date = 2013-10-20T19:20:30+01:00
    const timestampBefore: Date = 2013-10-20T19:20:30+01:00
    return expect(instance.resourceAllocationRaw(timestampAfter, timestampBefore, {})).resolves.toBe(null)
  })
})

describe("CommandsApi", () => {
  let instance: api.CommandsApi
  beforeEach(function() {
    instance = new api.CommandsApi(config)
  });

  test("getCommand", () => {
    const commandId: string = "commandId_example"
    return expect(instance.getCommand(commandId, {})).resolves.toBe(null)
  })
  test("getCommands", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const users: Array<string> = undefined
    const userIds: Array<number> = undefined
    return expect(instance.getCommands(sortBy, orderBy, offset, limit, users, userIds, {})).resolves.toBe(null)
  })
  test("killCommand", () => {
    const commandId: string = "commandId_example"
    return expect(instance.killCommand(commandId, {})).resolves.toBe(null)
  })
  test("launchCommand", () => {
    const body: api.V1LaunchCommandRequest = undefined
    return expect(instance.launchCommand(body, {})).resolves.toBe(null)
  })
  test("setCommandPriority", () => {
    const body: api.V1SetCommandPriorityRequest = undefined
    const commandId: string = "commandId_example"
    return expect(instance.setCommandPriority(body, commandId, {})).resolves.toBe(null)
  })
})

describe("ExperimentsApi", () => {
  let instance: api.ExperimentsApi
  beforeEach(function() {
    instance = new api.ExperimentsApi(config)
  });

  test("activateExperiment", () => {
    const id: number = 56
    return expect(instance.activateExperiment(id, {})).resolves.toBe(null)
  })
  test("archiveExperiment", () => {
    const id: number = 56
    return expect(instance.archiveExperiment(id, {})).resolves.toBe(null)
  })
  test("cancelExperiment", () => {
    const id: number = 56
    return expect(instance.cancelExperiment(id, {})).resolves.toBe(null)
  })
  test("compareTrials", () => {
    const trialIds: Array<number> = undefined
    const maxDatapoints: number = 56
    const metricNames: Array<string> = undefined
    const startBatches: number = 56
    const endBatches: number = 56
    const metricType: string = "metricType_example"
    const scale: string = "scale_example"
    return expect(instance.compareTrials(trialIds, maxDatapoints, metricNames, startBatches, endBatches, metricType, scale, {})).resolves.toBe(null)
  })
  test("deleteExperiment", () => {
    const experimentId: number = 56
    return expect(instance.deleteExperiment(experimentId, {})).resolves.toBe(null)
  })
  test("getExperiment", () => {
    const experimentId: number = 56
    return expect(instance.getExperiment(experimentId, {})).resolves.toBe(null)
  })
  test("getExperimentCheckpoints", () => {
    const id: number = 56
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const states: Array<string> = undefined
    return expect(instance.getExperimentCheckpoints(id, sortBy, orderBy, offset, limit, states, {})).resolves.toBe(null)
  })
  test("getExperimentLabels", () => {
    const projectId: number = 56
    return expect(instance.getExperimentLabels(projectId, {})).resolves.toBe(null)
  })
  test("getExperimentModelFile", () => {
    const experimentId: number = 56
    const path: string = "path_example"
    return expect(instance.getExperimentModelFile(experimentId, path, {})).resolves.toBe(null)
  })
  test("getExperimentTrials", () => {
    const experimentId: number = 56
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const states: Array<string> = undefined
    return expect(instance.getExperimentTrials(experimentId, sortBy, orderBy, offset, limit, states, {})).resolves.toBe(null)
  })
  test("getExperimentValidationHistory", () => {
    const experimentId: number = 56
    return expect(instance.getExperimentValidationHistory(experimentId, {})).resolves.toBe(null)
  })
  test("getExperiments", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const description: string = "description_example"
    const name: string = "name_example"
    const labels: Array<string> = undefined
    const archived: boolean = true
    const states: Array<string> = undefined
    const users: Array<string> = undefined
    const userIds: Array<number> = undefined
    const projectId: number = 56
    const experimentIdFilterLt: number = 56
    const experimentIdFilterLte: number = 56
    const experimentIdFilterGt: number = 56
    const experimentIdFilterGte: number = 56
    const experimentIdFilterIncl: Array<number> = undefined
    const experimentIdFilterNotIn: Array<number> = undefined
    return expect(instance.getExperiments(sortBy, orderBy, offset, limit, description, name, labels, archived, states, users, userIds, projectId, experimentIdFilterLt, experimentIdFilterLte, experimentIdFilterGt, experimentIdFilterGte, experimentIdFilterIncl, experimentIdFilterNotIn, {})).resolves.toBe(null)
  })
  test("getModelDef", () => {
    const experimentId: number = 56
    return expect(instance.getModelDef(experimentId, {})).resolves.toBe(null)
  })
  test("getModelDefFile", () => {
    const body: api.V1GetModelDefFileRequest = undefined
    const experimentId: number = 56
    return expect(instance.getModelDefFile(body, experimentId, {})).resolves.toBe(null)
  })
  test("getModelDefTree", () => {
    const experimentId: number = 56
    return expect(instance.getModelDefTree(experimentId, {})).resolves.toBe(null)
  })
  test("getSearcherEvents", () => {
    const experimentId: number = 56
    return expect(instance.getSearcherEvents(experimentId, {})).resolves.toBe(null)
  })
  test("getTrial", () => {
    const trialId: number = 56
    return expect(instance.getTrial(trialId, {})).resolves.toBe(null)
  })
  test("getTrialCheckpoints", () => {
    const id: number = 56
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const states: Array<string> = undefined
    return expect(instance.getTrialCheckpoints(id, sortBy, orderBy, offset, limit, states, {})).resolves.toBe(null)
  })
  test("killExperiment", () => {
    const id: number = 56
    return expect(instance.killExperiment(id, {})).resolves.toBe(null)
  })
  test("killTrial", () => {
    const id: number = 56
    return expect(instance.killTrial(id, {})).resolves.toBe(null)
  })
  test("moveExperiment", () => {
    const body: api.V1MoveExperimentRequest = undefined
    const experimentId: number = 56
    return expect(instance.moveExperiment(body, experimentId, {})).resolves.toBe(null)
  })
  test("patchExperiment", () => {
    const body: api.V1PatchExperiment = undefined
    const experimentId: number = 56
    return expect(instance.patchExperiment(body, experimentId, {})).resolves.toBe(null)
  })
  test("pauseExperiment", () => {
    const id: number = 56
    return expect(instance.pauseExperiment(id, {})).resolves.toBe(null)
  })
  test("postSearcherOperations", () => {
    const body: api.V1PostSearcherOperationsRequest = undefined
    const experimentId: number = 56
    return expect(instance.postSearcherOperations(body, experimentId, {})).resolves.toBe(null)
  })
  test("previewHPSearch", () => {
    const body: api.V1PreviewHPSearchRequest = undefined
    return expect(instance.previewHPSearch(body, {})).resolves.toBe(null)
  })
  test("summarizeTrial", () => {
    const trialId: number = 56
    const maxDatapoints: number = 56
    const metricNames: Array<string> = undefined
    const startBatches: number = 56
    const endBatches: number = 56
    const metricType: string = "metricType_example"
    const scale: string = "scale_example"
    return expect(instance.summarizeTrial(trialId, maxDatapoints, metricNames, startBatches, endBatches, metricType, scale, {})).resolves.toBe(null)
  })
  test("trialLogs", () => {
    const trialId: number = 56
    const limit: number = 56
    const follow: boolean = true
    const agentIds: Array<string> = undefined
    const containerIds: Array<string> = undefined
    const rankIds: Array<number> = undefined
    const levels: Array<string> = undefined
    const stdtypes: Array<string> = undefined
    const sources: Array<string> = undefined
    const timestampBefore: Date = 2013-10-20T19:20:30+01:00
    const timestampAfter: Date = 2013-10-20T19:20:30+01:00
    const orderBy: string = "orderBy_example"
    const searchText: string = "searchText_example"
    return expect(instance.trialLogs(trialId, limit, follow, agentIds, containerIds, rankIds, levels, stdtypes, sources, timestampBefore, timestampAfter, orderBy, searchText, {})).resolves.toBe(null)
  })
  test("trialLogsFields", () => {
    const trialId: number = 56
    const follow: boolean = true
    return expect(instance.trialLogsFields(trialId, follow, {})).resolves.toBe(null)
  })
  test("unarchiveExperiment", () => {
    const id: number = 56
    return expect(instance.unarchiveExperiment(id, {})).resolves.toBe(null)
  })
})

describe("InternalApi", () => {
  let instance: api.InternalApi
  beforeEach(function() {
    instance = new api.InternalApi(config)
  });

  test("ackAllocationPreemptionSignal", () => {
    const body: api.V1AckAllocationPreemptionSignalRequest = undefined
    const allocationId: string = "allocationId_example"
    return expect(instance.ackAllocationPreemptionSignal(body, allocationId, {})).resolves.toBe(null)
  })
  test("allocationAllGather", () => {
    const body: api.V1AllocationAllGatherRequest = undefined
    const allocationId: string = "allocationId_example"
    return expect(instance.allocationAllGather(body, allocationId, {})).resolves.toBe(null)
  })
  test("allocationPendingPreemptionSignal", () => {
    const body: api.V1AllocationPendingPreemptionSignalRequest = undefined
    const allocationId: string = "allocationId_example"
    return expect(instance.allocationPendingPreemptionSignal(body, allocationId, {})).resolves.toBe(null)
  })
  test("allocationPreemptionSignal", () => {
    const allocationId: string = "allocationId_example"
    const timeoutSeconds: number = 56
    return expect(instance.allocationPreemptionSignal(allocationId, timeoutSeconds, {})).resolves.toBe(null)
  })
  test("allocationReady", () => {
    const body: api.V1AllocationReadyRequest = undefined
    const allocationId: string = "allocationId_example"
    return expect(instance.allocationReady(body, allocationId, {})).resolves.toBe(null)
  })
  test("allocationRendezvousInfo", () => {
    const allocationId: string = "allocationId_example"
    const resourcesId: string = "resourcesId_example"
    return expect(instance.allocationRendezvousInfo(allocationId, resourcesId, {})).resolves.toBe(null)
  })
  test("allocationWaiting", () => {
    const body: api.V1AllocationWaitingRequest = undefined
    const allocationId: string = "allocationId_example"
    return expect(instance.allocationWaiting(body, allocationId, {})).resolves.toBe(null)
  })
  test("completeTrialSearcherValidation", () => {
    const body: api.V1CompleteValidateAfterOperation = undefined
    const trialId: number = 56
    return expect(instance.completeTrialSearcherValidation(body, trialId, {})).resolves.toBe(null)
  })
  test("computeHPImportance", () => {
    const experimentId: number = 56
    return expect(instance.computeHPImportance(experimentId, {})).resolves.toBe(null)
  })
  test("createExperiment", () => {
    const body: api.V1CreateExperimentRequest = undefined
    return expect(instance.createExperiment(body, {})).resolves.toBe(null)
  })
  test("createGroup", () => {
    const body: api.V1CreateGroupRequest = undefined
    return expect(instance.createGroup(body, {})).resolves.toBe(null)
  })
  test("deleteGroup", () => {
    const groupId: number = 56
    return expect(instance.deleteGroup(groupId, {})).resolves.toBe(null)
  })
  test("expCompareMetricNames", () => {
    const trialId: Array<number> = undefined
    const periodSeconds: number = 56
    return expect(instance.expCompareMetricNames(trialId, periodSeconds, {})).resolves.toBe(null)
  })
  test("expCompareTrialsSample", () => {
    const experimentIds: Array<number> = undefined
    const metricName: string = "metricName_example"
    const metricType: string = "metricType_example"
    const maxTrials: number = 56
    const maxDatapoints: number = 56
    const startBatches: number = 56
    const endBatches: number = 56
    const periodSeconds: number = 56
    return expect(instance.expCompareTrialsSample(experimentIds, metricName, metricType, maxTrials, maxDatapoints, startBatches, endBatches, periodSeconds, {})).resolves.toBe(null)
  })
  test("getBestSearcherValidationMetric", () => {
    const experimentId: number = 56
    return expect(instance.getBestSearcherValidationMetric(experimentId, {})).resolves.toBe(null)
  })
  test("getCurrentTrialSearcherOperation", () => {
    const trialId: number = 56
    return expect(instance.getCurrentTrialSearcherOperation(trialId, {})).resolves.toBe(null)
  })
  test("getGroup", () => {
    const groupId: number = 56
    return expect(instance.getGroup(groupId, {})).resolves.toBe(null)
  })
  test("getGroups", () => {
    const body: api.V1GetGroupsRequest = undefined
    return expect(instance.getGroups(body, {})).resolves.toBe(null)
  })
  test("getHPImportance", () => {
    const experimentId: number = 56
    const periodSeconds: number = 56
    return expect(instance.getHPImportance(experimentId, periodSeconds, {})).resolves.toBe(null)
  })
  test("getJobQueueStats", () => {
    const resourcePools: Array<string> = undefined
    return expect(instance.getJobQueueStats(resourcePools, {})).resolves.toBe(null)
  })
  test("getJobs", () => {
    const offset: number = 56
    const limit: number = 56
    const resourcePool: string = "resourcePool_example"
    const orderBy: string = "orderBy_example"
    const states: Array<string> = undefined
    return expect(instance.getJobs(offset, limit, resourcePool, orderBy, states, {})).resolves.toBe(null)
  })
  test("getResourcePools", () => {
    const offset: number = 56
    const limit: number = 56
    return expect(instance.getResourcePools(offset, limit, {})).resolves.toBe(null)
  })
  test("getTelemetry", () => {
    return expect(instance.getTelemetry({})).resolves.toBe(null)
  })
  test("getTrialWorkloads", () => {
    const trialId: number = 56
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const sortKey: string = "sortKey_example"
    const filter: string = "filter_example"
    const includeBatchMetrics: boolean = true
    const metricType: string = "metricType_example"
    return expect(instance.getTrialWorkloads(trialId, orderBy, offset, limit, sortKey, filter, includeBatchMetrics, metricType, {})).resolves.toBe(null)
  })
  test("idleNotebook", () => {
    const body: api.V1IdleNotebookRequest = undefined
    const notebookId: string = "notebookId_example"
    return expect(instance.idleNotebook(body, notebookId, {})).resolves.toBe(null)
  })
  test("markAllocationResourcesDaemon", () => {
    const body: api.V1MarkAllocationResourcesDaemonRequest = undefined
    const allocationId: string = "allocationId_example"
    const resourcesId: string = "resourcesId_example"
    return expect(instance.markAllocationResourcesDaemon(body, allocationId, resourcesId, {})).resolves.toBe(null)
  })
  test("metricBatches", () => {
    const experimentId: number = 56
    const metricName: string = "metricName_example"
    const metricType: string = "metricType_example"
    const periodSeconds: number = 56
    return expect(instance.metricBatches(experimentId, metricName, metricType, periodSeconds, {})).resolves.toBe(null)
  })
  test("metricNames", () => {
    const experimentId: number = 56
    const periodSeconds: number = 56
    return expect(instance.metricNames(experimentId, periodSeconds, {})).resolves.toBe(null)
  })
  test("notifyContainerRunning", () => {
    const body: api.V1NotifyContainerRunningRequest = undefined
    const allocationId: string = "allocationId_example"
    return expect(instance.notifyContainerRunning(body, allocationId, {})).resolves.toBe(null)
  })
  test("postAllocationProxyAddress", () => {
    const body: api.V1PostAllocationProxyAddressRequest = undefined
    const allocationId: string = "allocationId_example"
    return expect(instance.postAllocationProxyAddress(body, allocationId, {})).resolves.toBe(null)
  })
  test("postTrialProfilerMetricsBatch", () => {
    const body: api.V1PostTrialProfilerMetricsBatchRequest = undefined
    return expect(instance.postTrialProfilerMetricsBatch(body, {})).resolves.toBe(null)
  })
  test("postTrialRunnerMetadata", () => {
    const body: api.V1TrialRunnerMetadata = undefined
    const trialId: number = 56
    return expect(instance.postTrialRunnerMetadata(body, trialId, {})).resolves.toBe(null)
  })
  test("reportCheckpoint", () => {
    const body: api.V1Checkpoint = undefined
    return expect(instance.reportCheckpoint(body, {})).resolves.toBe(null)
  })
  test("reportTrialProgress", () => {
    const body: number = undefined
    const trialId: number = 56
    return expect(instance.reportTrialProgress(body, trialId, {})).resolves.toBe(null)
  })
  test("reportTrialSearcherEarlyExit", () => {
    const body: api.V1TrialEarlyExit = undefined
    const trialId: number = 56
    return expect(instance.reportTrialSearcherEarlyExit(body, trialId, {})).resolves.toBe(null)
  })
  test("reportTrialTrainingMetrics", () => {
    const body: api.V1TrialMetrics = undefined
    const trainingMetricsTrialId: number = 56
    return expect(instance.reportTrialTrainingMetrics(body, trainingMetricsTrialId, {})).resolves.toBe(null)
  })
  test("reportTrialValidationMetrics", () => {
    const body: api.V1TrialMetrics = undefined
    const validationMetricsTrialId: number = 56
    return expect(instance.reportTrialValidationMetrics(body, validationMetricsTrialId, {})).resolves.toBe(null)
  })
  test("trialsSample", () => {
    const experimentId: number = 56
    const metricName: string = "metricName_example"
    const metricType: string = "metricType_example"
    const maxTrials: number = 56
    const maxDatapoints: number = 56
    const startBatches: number = 56
    const endBatches: number = 56
    const periodSeconds: number = 56
    return expect(instance.trialsSample(experimentId, metricName, metricType, maxTrials, maxDatapoints, startBatches, endBatches, periodSeconds, {})).resolves.toBe(null)
  })
  test("trialsSnapshot", () => {
    const experimentId: number = 56
    const metricName: string = "metricName_example"
    const metricType: string = "metricType_example"
    const batchesProcessed: number = 56
    const batchesMargin: number = 56
    const periodSeconds: number = 56
    return expect(instance.trialsSnapshot(experimentId, metricName, metricType, batchesProcessed, batchesMargin, periodSeconds, {})).resolves.toBe(null)
  })
  test("updateGroup", () => {
    const body: api.V1UpdateGroupRequest = undefined
    const groupId: number = 56
    return expect(instance.updateGroup(body, groupId, {})).resolves.toBe(null)
  })
  test("updateJobQueue", () => {
    const body: api.V1UpdateJobQueueRequest = undefined
    return expect(instance.updateJobQueue(body, {})).resolves.toBe(null)
  })
})

describe("JobsApi", () => {
  let instance: api.JobsApi
  beforeEach(function() {
    instance = new api.JobsApi(config)
  });

  test("taskLogs", () => {
    const taskId: string = "taskId_example"
    const limit: number = 56
    const follow: boolean = true
    const allocationIds: Array<string> = undefined
    const agentIds: Array<string> = undefined
    const containerIds: Array<string> = undefined
    const rankIds: Array<number> = undefined
    const levels: Array<string> = undefined
    const stdtypes: Array<string> = undefined
    const sources: Array<string> = undefined
    const timestampBefore: Date = 2013-10-20T19:20:30+01:00
    const timestampAfter: Date = 2013-10-20T19:20:30+01:00
    const orderBy: string = "orderBy_example"
    const searchText: string = "searchText_example"
    return expect(instance.taskLogs(taskId, limit, follow, allocationIds, agentIds, containerIds, rankIds, levels, stdtypes, sources, timestampBefore, timestampAfter, orderBy, searchText, {})).resolves.toBe(null)
  })
  test("taskLogsFields", () => {
    const taskId: string = "taskId_example"
    const follow: boolean = true
    return expect(instance.taskLogsFields(taskId, follow, {})).resolves.toBe(null)
  })
})

describe("ModelsApi", () => {
  let instance: api.ModelsApi
  beforeEach(function() {
    instance = new api.ModelsApi(config)
  });

  test("archiveModel", () => {
    const modelName: string = "modelName_example"
    return expect(instance.archiveModel(modelName, {})).resolves.toBe(null)
  })
  test("deleteModel", () => {
    const modelName: string = "modelName_example"
    return expect(instance.deleteModel(modelName, {})).resolves.toBe(null)
  })
  test("deleteModelVersion", () => {
    const modelName: string = "modelName_example"
    const modelVersionNum: number = 56
    return expect(instance.deleteModelVersion(modelName, modelVersionNum, {})).resolves.toBe(null)
  })
  test("getModel", () => {
    const modelName: string = "modelName_example"
    return expect(instance.getModel(modelName, {})).resolves.toBe(null)
  })
  test("getModelLabels", () => {
    return expect(instance.getModelLabels({})).resolves.toBe(null)
  })
  test("getModelVersion", () => {
    const modelName: string = "modelName_example"
    const modelVersionNum: number = 56
    return expect(instance.getModelVersion(modelName, modelVersionNum, {})).resolves.toBe(null)
  })
  test("getModelVersions", () => {
    const modelName: string = "modelName_example"
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.getModelVersions(modelName, sortBy, orderBy, offset, limit, {})).resolves.toBe(null)
  })
  test("getModels", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const name: string = "name_example"
    const description: string = "description_example"
    const labels: Array<string> = undefined
    const archived: boolean = true
    const users: Array<string> = undefined
    const userIds: Array<number> = undefined
    const id: number = 56
    return expect(instance.getModels(sortBy, orderBy, offset, limit, name, description, labels, archived, users, userIds, id, {})).resolves.toBe(null)
  })
  test("patchModel", () => {
    const body: api.V1PatchModel = undefined
    const modelName: string = "modelName_example"
    return expect(instance.patchModel(body, modelName, {})).resolves.toBe(null)
  })
  test("patchModelVersion", () => {
    const body: api.V1PatchModelVersion = undefined
    const modelName: string = "modelName_example"
    const modelVersionNum: number = 56
    return expect(instance.patchModelVersion(body, modelName, modelVersionNum, {})).resolves.toBe(null)
  })
  test("postModel", () => {
    const body: api.V1PostModelRequest = undefined
    return expect(instance.postModel(body, {})).resolves.toBe(null)
  })
  test("postModelVersion", () => {
    const body: api.V1PostModelVersionRequest = undefined
    const modelName: string = "modelName_example"
    return expect(instance.postModelVersion(body, modelName, {})).resolves.toBe(null)
  })
  test("unarchiveModel", () => {
    const modelName: string = "modelName_example"
    return expect(instance.unarchiveModel(modelName, {})).resolves.toBe(null)
  })
})

describe("NotebooksApi", () => {
  let instance: api.NotebooksApi
  beforeEach(function() {
    instance = new api.NotebooksApi(config)
  });

  test("getNotebook", () => {
    const notebookId: string = "notebookId_example"
    return expect(instance.getNotebook(notebookId, {})).resolves.toBe(null)
  })
  test("getNotebooks", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const users: Array<string> = undefined
    const userIds: Array<number> = undefined
    return expect(instance.getNotebooks(sortBy, orderBy, offset, limit, users, userIds, {})).resolves.toBe(null)
  })
  test("killNotebook", () => {
    const notebookId: string = "notebookId_example"
    return expect(instance.killNotebook(notebookId, {})).resolves.toBe(null)
  })
  test("launchNotebook", () => {
    const body: api.V1LaunchNotebookRequest = undefined
    return expect(instance.launchNotebook(body, {})).resolves.toBe(null)
  })
  test("setNotebookPriority", () => {
    const body: api.V1SetNotebookPriorityRequest = undefined
    const notebookId: string = "notebookId_example"
    return expect(instance.setNotebookPriority(body, notebookId, {})).resolves.toBe(null)
  })
})

describe("ProfilerApi", () => {
  let instance: api.ProfilerApi
  beforeEach(function() {
    instance = new api.ProfilerApi(config)
  });

  test("getTrialProfilerAvailableSeries", () => {
    const trialId: number = 56
    const follow: boolean = true
    return expect(instance.getTrialProfilerAvailableSeries(trialId, follow, {})).resolves.toBe(null)
  })
  test("getTrialProfilerMetrics", () => {
    const labelsTrialId: number = 56
    const labelsName: string = "labelsName_example"
    const labelsAgentId: string = "labelsAgentId_example"
    const labelsGpuUuid: string = "labelsGpuUuid_example"
    const labelsMetricType: string = "labelsMetricType_example"
    const follow: boolean = true
    return expect(instance.getTrialProfilerMetrics(labelsTrialId, labelsName, labelsAgentId, labelsGpuUuid, labelsMetricType, follow, {})).resolves.toBe(null)
  })
})

describe("ProjectsApi", () => {
  let instance: api.ProjectsApi
  beforeEach(function() {
    instance = new api.ProjectsApi(config)
  });

  test("addProjectNote", () => {
    const body: api.V1Note = undefined
    const projectId: number = 56
    return expect(instance.addProjectNote(body, projectId, {})).resolves.toBe(null)
  })
  test("archiveProject", () => {
    const id: number = 56
    return expect(instance.archiveProject(id, {})).resolves.toBe(null)
  })
  test("deleteProject", () => {
    const id: number = 56
    return expect(instance.deleteProject(id, {})).resolves.toBe(null)
  })
  test("getProject", () => {
    const id: number = 56
    return expect(instance.getProject(id, {})).resolves.toBe(null)
  })
  test("moveProject", () => {
    const body: api.V1MoveProjectRequest = undefined
    const projectId: number = 56
    return expect(instance.moveProject(body, projectId, {})).resolves.toBe(null)
  })
  test("patchProject", () => {
    const body: api.V1PatchProject = undefined
    const id: number = 56
    return expect(instance.patchProject(body, id, {})).resolves.toBe(null)
  })
  test("postProject", () => {
    const body: api.V1PostProjectRequest = undefined
    const workspaceId: number = 56
    return expect(instance.postProject(body, workspaceId, {})).resolves.toBe(null)
  })
  test("putProjectNotes", () => {
    const body: api.V1PutProjectNotesRequest = undefined
    const projectId: number = 56
    return expect(instance.putProjectNotes(body, projectId, {})).resolves.toBe(null)
  })
  test("unarchiveProject", () => {
    const id: number = 56
    return expect(instance.unarchiveProject(id, {})).resolves.toBe(null)
  })
})

describe("RBACApi", () => {
  let instance: api.RBACApi
  beforeEach(function() {
    instance = new api.RBACApi(config)
  });

  test("assignRoles", () => {
    const body: api.V1AssignRolesRequest = undefined
    return expect(instance.assignRoles(body, {})).resolves.toBe(null)
  })
  test("getGroupsAndUsersAssignedToWorkspace", () => {
    const workspaceId: number = 56
    const name: string = "name_example"
    return expect(instance.getGroupsAndUsersAssignedToWorkspace(workspaceId, name, {})).resolves.toBe(null)
  })
  test("getPermissionsSummary", () => {
    return expect(instance.getPermissionsSummary({})).resolves.toBe(null)
  })
  test("getRolesAssignedToGroup", () => {
    const groupId: number = 56
    return expect(instance.getRolesAssignedToGroup(groupId, {})).resolves.toBe(null)
  })
  test("getRolesAssignedToUser", () => {
    const userId: number = 56
    return expect(instance.getRolesAssignedToUser(userId, {})).resolves.toBe(null)
  })
  test("getRolesByID", () => {
    const body: api.V1GetRolesByIDRequest = undefined
    return expect(instance.getRolesByID(body, {})).resolves.toBe(null)
  })
  test("listRoles", () => {
    const body: api.V1ListRolesRequest = undefined
    return expect(instance.listRoles(body, {})).resolves.toBe(null)
  })
  test("removeAssignments", () => {
    const body: api.V1RemoveAssignmentsRequest = undefined
    return expect(instance.removeAssignments(body, {})).resolves.toBe(null)
  })
  test("searchRolesAssignableToScope", () => {
    const body: api.V1SearchRolesAssignableToScopeRequest = undefined
    return expect(instance.searchRolesAssignableToScope(body, {})).resolves.toBe(null)
  })
})

describe("ShellsApi", () => {
  let instance: api.ShellsApi
  beforeEach(function() {
    instance = new api.ShellsApi(config)
  });

  test("getShell", () => {
    const shellId: string = "shellId_example"
    return expect(instance.getShell(shellId, {})).resolves.toBe(null)
  })
  test("getShells", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const users: Array<string> = undefined
    const userIds: Array<number> = undefined
    return expect(instance.getShells(sortBy, orderBy, offset, limit, users, userIds, {})).resolves.toBe(null)
  })
  test("killShell", () => {
    const shellId: string = "shellId_example"
    return expect(instance.killShell(shellId, {})).resolves.toBe(null)
  })
  test("launchShell", () => {
    const body: api.V1LaunchShellRequest = undefined
    return expect(instance.launchShell(body, {})).resolves.toBe(null)
  })
  test("setShellPriority", () => {
    const body: api.V1SetShellPriorityRequest = undefined
    const shellId: string = "shellId_example"
    return expect(instance.setShellPriority(body, shellId, {})).resolves.toBe(null)
  })
})

describe("TasksApi", () => {
  let instance: api.TasksApi
  beforeEach(function() {
    instance = new api.TasksApi(config)
  });

  test("getActiveTasksCount", () => {
    return expect(instance.getActiveTasksCount({})).resolves.toBe(null)
  })
  test("getTask", () => {
    const taskId: string = "taskId_example"
    return expect(instance.getTask(taskId, {})).resolves.toBe(null)
  })
  test("taskLogs", () => {
    const taskId: string = "taskId_example"
    const limit: number = 56
    const follow: boolean = true
    const allocationIds: Array<string> = undefined
    const agentIds: Array<string> = undefined
    const containerIds: Array<string> = undefined
    const rankIds: Array<number> = undefined
    const levels: Array<string> = undefined
    const stdtypes: Array<string> = undefined
    const sources: Array<string> = undefined
    const timestampBefore: Date = 2013-10-20T19:20:30+01:00
    const timestampAfter: Date = 2013-10-20T19:20:30+01:00
    const orderBy: string = "orderBy_example"
    const searchText: string = "searchText_example"
    return expect(instance.taskLogs(taskId, limit, follow, allocationIds, agentIds, containerIds, rankIds, levels, stdtypes, sources, timestampBefore, timestampAfter, orderBy, searchText, {})).resolves.toBe(null)
  })
  test("taskLogsFields", () => {
    const taskId: string = "taskId_example"
    const follow: boolean = true
    return expect(instance.taskLogsFields(taskId, follow, {})).resolves.toBe(null)
  })
})

describe("TemplatesApi", () => {
  let instance: api.TemplatesApi
  beforeEach(function() {
    instance = new api.TemplatesApi(config)
  });

  test("deleteTemplate", () => {
    const templateName: string = "templateName_example"
    return expect(instance.deleteTemplate(templateName, {})).resolves.toBe(null)
  })
  test("getTemplate", () => {
    const templateName: string = "templateName_example"
    return expect(instance.getTemplate(templateName, {})).resolves.toBe(null)
  })
  test("getTemplates", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const name: string = "name_example"
    return expect(instance.getTemplates(sortBy, orderBy, offset, limit, name, {})).resolves.toBe(null)
  })
  test("putTemplate", () => {
    const body: api.V1Template = undefined
    const templateName: string = "templateName_example"
    return expect(instance.putTemplate(body, templateName, {})).resolves.toBe(null)
  })
})

describe("TensorboardsApi", () => {
  let instance: api.TensorboardsApi
  beforeEach(function() {
    instance = new api.TensorboardsApi(config)
  });

  test("getTensorboard", () => {
    const tensorboardId: string = "tensorboardId_example"
    return expect(instance.getTensorboard(tensorboardId, {})).resolves.toBe(null)
  })
  test("getTensorboards", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const users: Array<string> = undefined
    const userIds: Array<number> = undefined
    return expect(instance.getTensorboards(sortBy, orderBy, offset, limit, users, userIds, {})).resolves.toBe(null)
  })
  test("killTensorboard", () => {
    const tensorboardId: string = "tensorboardId_example"
    return expect(instance.killTensorboard(tensorboardId, {})).resolves.toBe(null)
  })
  test("launchTensorboard", () => {
    const body: api.V1LaunchTensorboardRequest = undefined
    return expect(instance.launchTensorboard(body, {})).resolves.toBe(null)
  })
  test("setTensorboardPriority", () => {
    const body: api.V1SetTensorboardPriorityRequest = undefined
    const tensorboardId: string = "tensorboardId_example"
    return expect(instance.setTensorboardPriority(body, tensorboardId, {})).resolves.toBe(null)
  })
})

describe("TrialComparisonApi", () => {
  let instance: api.TrialComparisonApi
  beforeEach(function() {
    instance = new api.TrialComparisonApi(config)
  });

  test("createTrialsCollection", () => {
    const body: api.V1CreateTrialsCollectionRequest = undefined
    return expect(instance.createTrialsCollection(body, {})).resolves.toBe(null)
  })
  test("deleteTrialsCollection", () => {
    const id: number = 56
    return expect(instance.deleteTrialsCollection(id, {})).resolves.toBe(null)
  })
  test("getTrialsCollections", () => {
    const projectId: number = 56
    return expect(instance.getTrialsCollections(projectId, {})).resolves.toBe(null)
  })
  test("patchTrialsCollection", () => {
    const body: api.V1PatchTrialsCollectionRequest = undefined
    return expect(instance.patchTrialsCollection(body, {})).resolves.toBe(null)
  })
  test("queryTrials", () => {
    const body: api.V1QueryTrialsRequest = undefined
    return expect(instance.queryTrials(body, {})).resolves.toBe(null)
  })
  test("updateTrialTags", () => {
    const body: api.V1UpdateTrialTagsRequest = undefined
    return expect(instance.updateTrialTags(body, {})).resolves.toBe(null)
  })
})

describe("TrialsApi", () => {
  let instance: api.TrialsApi
  beforeEach(function() {
    instance = new api.TrialsApi(config)
  });

  test("getExperimentTrials", () => {
    const experimentId: number = 56
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const states: Array<string> = undefined
    return expect(instance.getExperimentTrials(experimentId, sortBy, orderBy, offset, limit, states, {})).resolves.toBe(null)
  })
  test("getTrial", () => {
    const trialId: number = 56
    return expect(instance.getTrial(trialId, {})).resolves.toBe(null)
  })
  test("getTrialWorkloads", () => {
    const trialId: number = 56
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const sortKey: string = "sortKey_example"
    const filter: string = "filter_example"
    const includeBatchMetrics: boolean = true
    const metricType: string = "metricType_example"
    return expect(instance.getTrialWorkloads(trialId, orderBy, offset, limit, sortKey, filter, includeBatchMetrics, metricType, {})).resolves.toBe(null)
  })
  test("killTrial", () => {
    const id: number = 56
    return expect(instance.killTrial(id, {})).resolves.toBe(null)
  })
  test("summarizeTrial", () => {
    const trialId: number = 56
    const maxDatapoints: number = 56
    const metricNames: Array<string> = undefined
    const startBatches: number = 56
    const endBatches: number = 56
    const metricType: string = "metricType_example"
    const scale: string = "scale_example"
    return expect(instance.summarizeTrial(trialId, maxDatapoints, metricNames, startBatches, endBatches, metricType, scale, {})).resolves.toBe(null)
  })
  test("trialLogs", () => {
    const trialId: number = 56
    const limit: number = 56
    const follow: boolean = true
    const agentIds: Array<string> = undefined
    const containerIds: Array<string> = undefined
    const rankIds: Array<number> = undefined
    const levels: Array<string> = undefined
    const stdtypes: Array<string> = undefined
    const sources: Array<string> = undefined
    const timestampBefore: Date = 2013-10-20T19:20:30+01:00
    const timestampAfter: Date = 2013-10-20T19:20:30+01:00
    const orderBy: string = "orderBy_example"
    const searchText: string = "searchText_example"
    return expect(instance.trialLogs(trialId, limit, follow, agentIds, containerIds, rankIds, levels, stdtypes, sources, timestampBefore, timestampAfter, orderBy, searchText, {})).resolves.toBe(null)
  })
  test("trialLogsFields", () => {
    const trialId: number = 56
    const follow: boolean = true
    return expect(instance.trialLogsFields(trialId, follow, {})).resolves.toBe(null)
  })
})

describe("UsersApi", () => {
  let instance: api.UsersApi
  beforeEach(function() {
    instance = new api.UsersApi(config)
  });

  test("getMe", () => {
    return expect(instance.getMe({})).resolves.toBe(null)
  })
  test("getUser", () => {
    const userId: number = 56
    return expect(instance.getUser(userId, {})).resolves.toBe(null)
  })
  test("getUserByUsername", () => {
    const username: string = "username_example"
    return expect(instance.getUserByUsername(username, {})).resolves.toBe(null)
  })
  test("getUserSetting", () => {
    return expect(instance.getUserSetting({})).resolves.toBe(null)
  })
  test("getUsers", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    return expect(instance.getUsers(sortBy, orderBy, offset, limit, {})).resolves.toBe(null)
  })
  test("patchUser", () => {
    const body: api.V1PatchUser = undefined
    const userId: number = 56
    return expect(instance.patchUser(body, userId, {})).resolves.toBe(null)
  })
  test("postUser", () => {
    const body: api.V1PostUserRequest = undefined
    return expect(instance.postUser(body, {})).resolves.toBe(null)
  })
  test("postUserSetting", () => {
    const body: api.V1PostUserSettingRequest = undefined
    return expect(instance.postUserSetting(body, {})).resolves.toBe(null)
  })
  test("resetUserSetting", () => {
    return expect(instance.resetUserSetting({})).resolves.toBe(null)
  })
  test("setUserPassword", () => {
    const body: string = undefined
    const userId: number = 56
    return expect(instance.setUserPassword(body, userId, {})).resolves.toBe(null)
  })
})

describe("WebhooksApi", () => {
  let instance: api.WebhooksApi
  beforeEach(function() {
    instance = new api.WebhooksApi(config)
  });

  test("deleteWebhook", () => {
    const id: number = 56
    return expect(instance.deleteWebhook(id, {})).resolves.toBe(null)
  })
  test("getWebhooks", () => {
    return expect(instance.getWebhooks({})).resolves.toBe(null)
  })
  test("postWebhook", () => {
    const body: api.V1Webhook = undefined
    return expect(instance.postWebhook(body, {})).resolves.toBe(null)
  })
  test("testWebhook", () => {
    const id: number = 56
    return expect(instance.testWebhook(id, {})).resolves.toBe(null)
  })
})

describe("WorkspacesApi", () => {
  let instance: api.WorkspacesApi
  beforeEach(function() {
    instance = new api.WorkspacesApi(config)
  });

  test("archiveWorkspace", () => {
    const id: number = 56
    return expect(instance.archiveWorkspace(id, {})).resolves.toBe(null)
  })
  test("deleteWorkspace", () => {
    const id: number = 56
    return expect(instance.deleteWorkspace(id, {})).resolves.toBe(null)
  })
  test("getWorkspace", () => {
    const id: number = 56
    return expect(instance.getWorkspace(id, {})).resolves.toBe(null)
  })
  test("getWorkspaceProjects", () => {
    const id: number = 56
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const name: string = "name_example"
    const archived: boolean = true
    const users: Array<string> = undefined
    return expect(instance.getWorkspaceProjects(id, sortBy, orderBy, offset, limit, name, archived, users, {})).resolves.toBe(null)
  })
  test("getWorkspaces", () => {
    const sortBy: string = "sortBy_example"
    const orderBy: string = "orderBy_example"
    const offset: number = 56
    const limit: number = 56
    const name: string = "name_example"
    const archived: boolean = true
    const users: Array<string> = undefined
    const pinned: boolean = true
    return expect(instance.getWorkspaces(sortBy, orderBy, offset, limit, name, archived, users, pinned, {})).resolves.toBe(null)
  })
  test("patchWorkspace", () => {
    const body: api.V1PatchWorkspace = undefined
    const id: number = 56
    return expect(instance.patchWorkspace(body, id, {})).resolves.toBe(null)
  })
  test("pinWorkspace", () => {
    const id: number = 56
    return expect(instance.pinWorkspace(id, {})).resolves.toBe(null)
  })
  test("postWorkspace", () => {
    const body: api.V1PostWorkspaceRequest = undefined
    return expect(instance.postWorkspace(body, {})).resolves.toBe(null)
  })
  test("unarchiveWorkspace", () => {
    const id: number = 56
    return expect(instance.unarchiveWorkspace(id, {})).resolves.toBe(null)
  })
  test("unpinWorkspace", () => {
    const id: number = 56
    return expect(instance.unpinWorkspace(id, {})).resolves.toBe(null)
  })
})

