apiVersion: v1
kind: ServiceAccount
metadata:
  name: token-refresh-service-account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: list-services
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: token-refresh-service-account-list-services
subjects:
- kind: ServiceAccount
  name: token-refresh-service-account
  namespace: det-monitoring
roleRef:
  kind: ClusterRole
  name: list-services
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: token-refresh-role
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "update", "create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: token-refresh-role
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: token-refresh-role
subjects:
  - kind: ServiceAccount
    name: token-refresh-service-account
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: token-refresh-script
data:
  script.sh: |
    #!/bin/bash
    apt-get update && apt-get install curl jq -y
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    secret=$(kubectl get secret token-refresh-username-pass -o jsonpath="{.data.creds}")
    username="$(echo $secret | base64 --decode | tr : ' ' | awk '{print $1}')"
    password="$(echo $secret | base64 --decode | tr : ' ' | awk '{print $2}')"

    ip=$(kubectl get svc --all-namespaces -l determined.ai/master-service=true -o jsonpath='{.items[0].spec.clusterIP}')

    echo "using username" $username
    echo "using ip" $ip
    token=$(curl $ip:8080/api/v1/auth/login -X POST -d "{\"username\": \"$username\", \"password\": \"$password\"}" -s | jq -r .token)
    kubectl create secret generic det-prom-token \
      --from-literal=det-token=$token --dry-run=client -o yaml \
      | kubectl apply -f -
---
apiVersion: batch/v1
kind: Job
metadata:
  name: token-refresh-initial
spec:
  template:
    spec:
      serviceAccountName: token-refresh-service-account
      containers:
      - name: token-refresh
        image: ubuntu:20.04
        command:
        - "/bin/sh"
        - "-c"
        - "sh /scripts/script.sh"
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
      restartPolicy: Never
      volumes:
      - name: script-volume
        configMap:
          name: token-refresh-script
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: token-refresh-job
spec:
  schedule: "0 0 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: token-refresh-service-account
          containers:
          - name: token-refresh
            image: ubuntu:20.04
            command:
            - "/bin/sh"
            - "-c"
            - "sh /scripts/script.sh"
            volumeMounts:
            - name: script-volume
              mountPath: /scripts
          restartPolicy: OnFailure
          volumes:
          - name: script-volume
            configMap:
              name: token-refresh-script
